
0528_final_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08106968  08106968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081070f8  081070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08107100  08107100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08107104  08107104  00017104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  10000000  08107108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000098c  1000007c  08107184  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000a08  08107184  00020a08  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d41e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003171  00000000  00000000  0003d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  00040640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc0  00000000  00000000  000412b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039386  00000000  00000000  00041e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012fe8  00000000  00000000  0007b1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177ed0  00000000  00000000  0008e1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002060b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003690  00000000  00000000  0020610c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000007c 	.word	0x1000007c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106950 	.word	0x08106950

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000080 	.word	0x10000080
 81002dc:	08106950 	.word	0x08106950

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_uldivmod>:
 81003b0:	b953      	cbnz	r3, 81003c8 <__aeabi_uldivmod+0x18>
 81003b2:	b94a      	cbnz	r2, 81003c8 <__aeabi_uldivmod+0x18>
 81003b4:	2900      	cmp	r1, #0
 81003b6:	bf08      	it	eq
 81003b8:	2800      	cmpeq	r0, #0
 81003ba:	bf1c      	itt	ne
 81003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 81003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 81003c4:	f000 b96e 	b.w	81006a4 <__aeabi_idiv0>
 81003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003d0:	f000 f806 	bl	81003e0 <__udivmoddi4>
 81003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003dc:	b004      	add	sp, #16
 81003de:	4770      	bx	lr

081003e0 <__udivmoddi4>:
 81003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003e4:	9d08      	ldr	r5, [sp, #32]
 81003e6:	4604      	mov	r4, r0
 81003e8:	468c      	mov	ip, r1
 81003ea:	2b00      	cmp	r3, #0
 81003ec:	f040 8083 	bne.w	81004f6 <__udivmoddi4+0x116>
 81003f0:	428a      	cmp	r2, r1
 81003f2:	4617      	mov	r7, r2
 81003f4:	d947      	bls.n	8100486 <__udivmoddi4+0xa6>
 81003f6:	fab2 f282 	clz	r2, r2
 81003fa:	b142      	cbz	r2, 810040e <__udivmoddi4+0x2e>
 81003fc:	f1c2 0020 	rsb	r0, r2, #32
 8100400:	fa24 f000 	lsr.w	r0, r4, r0
 8100404:	4091      	lsls	r1, r2
 8100406:	4097      	lsls	r7, r2
 8100408:	ea40 0c01 	orr.w	ip, r0, r1
 810040c:	4094      	lsls	r4, r2
 810040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100412:	0c23      	lsrs	r3, r4, #16
 8100414:	fbbc f6f8 	udiv	r6, ip, r8
 8100418:	fa1f fe87 	uxth.w	lr, r7
 810041c:	fb08 c116 	mls	r1, r8, r6, ip
 8100420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100424:	fb06 f10e 	mul.w	r1, r6, lr
 8100428:	4299      	cmp	r1, r3
 810042a:	d909      	bls.n	8100440 <__udivmoddi4+0x60>
 810042c:	18fb      	adds	r3, r7, r3
 810042e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100432:	f080 8119 	bcs.w	8100668 <__udivmoddi4+0x288>
 8100436:	4299      	cmp	r1, r3
 8100438:	f240 8116 	bls.w	8100668 <__udivmoddi4+0x288>
 810043c:	3e02      	subs	r6, #2
 810043e:	443b      	add	r3, r7
 8100440:	1a5b      	subs	r3, r3, r1
 8100442:	b2a4      	uxth	r4, r4
 8100444:	fbb3 f0f8 	udiv	r0, r3, r8
 8100448:	fb08 3310 	mls	r3, r8, r0, r3
 810044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100450:	fb00 fe0e 	mul.w	lr, r0, lr
 8100454:	45a6      	cmp	lr, r4
 8100456:	d909      	bls.n	810046c <__udivmoddi4+0x8c>
 8100458:	193c      	adds	r4, r7, r4
 810045a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810045e:	f080 8105 	bcs.w	810066c <__udivmoddi4+0x28c>
 8100462:	45a6      	cmp	lr, r4
 8100464:	f240 8102 	bls.w	810066c <__udivmoddi4+0x28c>
 8100468:	3802      	subs	r0, #2
 810046a:	443c      	add	r4, r7
 810046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100470:	eba4 040e 	sub.w	r4, r4, lr
 8100474:	2600      	movs	r6, #0
 8100476:	b11d      	cbz	r5, 8100480 <__udivmoddi4+0xa0>
 8100478:	40d4      	lsrs	r4, r2
 810047a:	2300      	movs	r3, #0
 810047c:	e9c5 4300 	strd	r4, r3, [r5]
 8100480:	4631      	mov	r1, r6
 8100482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100486:	b902      	cbnz	r2, 810048a <__udivmoddi4+0xaa>
 8100488:	deff      	udf	#255	; 0xff
 810048a:	fab2 f282 	clz	r2, r2
 810048e:	2a00      	cmp	r2, #0
 8100490:	d150      	bne.n	8100534 <__udivmoddi4+0x154>
 8100492:	1bcb      	subs	r3, r1, r7
 8100494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100498:	fa1f f887 	uxth.w	r8, r7
 810049c:	2601      	movs	r6, #1
 810049e:	fbb3 fcfe 	udiv	ip, r3, lr
 81004a2:	0c21      	lsrs	r1, r4, #16
 81004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 81004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004ac:	fb08 f30c 	mul.w	r3, r8, ip
 81004b0:	428b      	cmp	r3, r1
 81004b2:	d907      	bls.n	81004c4 <__udivmoddi4+0xe4>
 81004b4:	1879      	adds	r1, r7, r1
 81004b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 81004ba:	d202      	bcs.n	81004c2 <__udivmoddi4+0xe2>
 81004bc:	428b      	cmp	r3, r1
 81004be:	f200 80e9 	bhi.w	8100694 <__udivmoddi4+0x2b4>
 81004c2:	4684      	mov	ip, r0
 81004c4:	1ac9      	subs	r1, r1, r3
 81004c6:	b2a3      	uxth	r3, r4
 81004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 81004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 81004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004d4:	fb08 f800 	mul.w	r8, r8, r0
 81004d8:	45a0      	cmp	r8, r4
 81004da:	d907      	bls.n	81004ec <__udivmoddi4+0x10c>
 81004dc:	193c      	adds	r4, r7, r4
 81004de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 81004e2:	d202      	bcs.n	81004ea <__udivmoddi4+0x10a>
 81004e4:	45a0      	cmp	r8, r4
 81004e6:	f200 80d9 	bhi.w	810069c <__udivmoddi4+0x2bc>
 81004ea:	4618      	mov	r0, r3
 81004ec:	eba4 0408 	sub.w	r4, r4, r8
 81004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004f4:	e7bf      	b.n	8100476 <__udivmoddi4+0x96>
 81004f6:	428b      	cmp	r3, r1
 81004f8:	d909      	bls.n	810050e <__udivmoddi4+0x12e>
 81004fa:	2d00      	cmp	r5, #0
 81004fc:	f000 80b1 	beq.w	8100662 <__udivmoddi4+0x282>
 8100500:	2600      	movs	r6, #0
 8100502:	e9c5 0100 	strd	r0, r1, [r5]
 8100506:	4630      	mov	r0, r6
 8100508:	4631      	mov	r1, r6
 810050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810050e:	fab3 f683 	clz	r6, r3
 8100512:	2e00      	cmp	r6, #0
 8100514:	d14a      	bne.n	81005ac <__udivmoddi4+0x1cc>
 8100516:	428b      	cmp	r3, r1
 8100518:	d302      	bcc.n	8100520 <__udivmoddi4+0x140>
 810051a:	4282      	cmp	r2, r0
 810051c:	f200 80b8 	bhi.w	8100690 <__udivmoddi4+0x2b0>
 8100520:	1a84      	subs	r4, r0, r2
 8100522:	eb61 0103 	sbc.w	r1, r1, r3
 8100526:	2001      	movs	r0, #1
 8100528:	468c      	mov	ip, r1
 810052a:	2d00      	cmp	r5, #0
 810052c:	d0a8      	beq.n	8100480 <__udivmoddi4+0xa0>
 810052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8100532:	e7a5      	b.n	8100480 <__udivmoddi4+0xa0>
 8100534:	f1c2 0320 	rsb	r3, r2, #32
 8100538:	fa20 f603 	lsr.w	r6, r0, r3
 810053c:	4097      	lsls	r7, r2
 810053e:	fa01 f002 	lsl.w	r0, r1, r2
 8100542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100546:	40d9      	lsrs	r1, r3
 8100548:	4330      	orrs	r0, r6
 810054a:	0c03      	lsrs	r3, r0, #16
 810054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100550:	fa1f f887 	uxth.w	r8, r7
 8100554:	fb0e 1116 	mls	r1, lr, r6, r1
 8100558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810055c:	fb06 f108 	mul.w	r1, r6, r8
 8100560:	4299      	cmp	r1, r3
 8100562:	fa04 f402 	lsl.w	r4, r4, r2
 8100566:	d909      	bls.n	810057c <__udivmoddi4+0x19c>
 8100568:	18fb      	adds	r3, r7, r3
 810056a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 810056e:	f080 808d 	bcs.w	810068c <__udivmoddi4+0x2ac>
 8100572:	4299      	cmp	r1, r3
 8100574:	f240 808a 	bls.w	810068c <__udivmoddi4+0x2ac>
 8100578:	3e02      	subs	r6, #2
 810057a:	443b      	add	r3, r7
 810057c:	1a5b      	subs	r3, r3, r1
 810057e:	b281      	uxth	r1, r0
 8100580:	fbb3 f0fe 	udiv	r0, r3, lr
 8100584:	fb0e 3310 	mls	r3, lr, r0, r3
 8100588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810058c:	fb00 f308 	mul.w	r3, r0, r8
 8100590:	428b      	cmp	r3, r1
 8100592:	d907      	bls.n	81005a4 <__udivmoddi4+0x1c4>
 8100594:	1879      	adds	r1, r7, r1
 8100596:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 810059a:	d273      	bcs.n	8100684 <__udivmoddi4+0x2a4>
 810059c:	428b      	cmp	r3, r1
 810059e:	d971      	bls.n	8100684 <__udivmoddi4+0x2a4>
 81005a0:	3802      	subs	r0, #2
 81005a2:	4439      	add	r1, r7
 81005a4:	1acb      	subs	r3, r1, r3
 81005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81005aa:	e778      	b.n	810049e <__udivmoddi4+0xbe>
 81005ac:	f1c6 0c20 	rsb	ip, r6, #32
 81005b0:	fa03 f406 	lsl.w	r4, r3, r6
 81005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 81005b8:	431c      	orrs	r4, r3
 81005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 81005be:	fa01 f306 	lsl.w	r3, r1, r6
 81005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 81005ca:	431f      	orrs	r7, r3
 81005cc:	0c3b      	lsrs	r3, r7, #16
 81005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 81005d2:	fa1f f884 	uxth.w	r8, r4
 81005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005de:	fb09 fa08 	mul.w	sl, r9, r8
 81005e2:	458a      	cmp	sl, r1
 81005e4:	fa02 f206 	lsl.w	r2, r2, r6
 81005e8:	fa00 f306 	lsl.w	r3, r0, r6
 81005ec:	d908      	bls.n	8100600 <__udivmoddi4+0x220>
 81005ee:	1861      	adds	r1, r4, r1
 81005f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 81005f4:	d248      	bcs.n	8100688 <__udivmoddi4+0x2a8>
 81005f6:	458a      	cmp	sl, r1
 81005f8:	d946      	bls.n	8100688 <__udivmoddi4+0x2a8>
 81005fa:	f1a9 0902 	sub.w	r9, r9, #2
 81005fe:	4421      	add	r1, r4
 8100600:	eba1 010a 	sub.w	r1, r1, sl
 8100604:	b2bf      	uxth	r7, r7
 8100606:	fbb1 f0fe 	udiv	r0, r1, lr
 810060a:	fb0e 1110 	mls	r1, lr, r0, r1
 810060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100612:	fb00 f808 	mul.w	r8, r0, r8
 8100616:	45b8      	cmp	r8, r7
 8100618:	d907      	bls.n	810062a <__udivmoddi4+0x24a>
 810061a:	19e7      	adds	r7, r4, r7
 810061c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8100620:	d22e      	bcs.n	8100680 <__udivmoddi4+0x2a0>
 8100622:	45b8      	cmp	r8, r7
 8100624:	d92c      	bls.n	8100680 <__udivmoddi4+0x2a0>
 8100626:	3802      	subs	r0, #2
 8100628:	4427      	add	r7, r4
 810062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810062e:	eba7 0708 	sub.w	r7, r7, r8
 8100632:	fba0 8902 	umull	r8, r9, r0, r2
 8100636:	454f      	cmp	r7, r9
 8100638:	46c6      	mov	lr, r8
 810063a:	4649      	mov	r1, r9
 810063c:	d31a      	bcc.n	8100674 <__udivmoddi4+0x294>
 810063e:	d017      	beq.n	8100670 <__udivmoddi4+0x290>
 8100640:	b15d      	cbz	r5, 810065a <__udivmoddi4+0x27a>
 8100642:	ebb3 020e 	subs.w	r2, r3, lr
 8100646:	eb67 0701 	sbc.w	r7, r7, r1
 810064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810064e:	40f2      	lsrs	r2, r6
 8100650:	ea4c 0202 	orr.w	r2, ip, r2
 8100654:	40f7      	lsrs	r7, r6
 8100656:	e9c5 2700 	strd	r2, r7, [r5]
 810065a:	2600      	movs	r6, #0
 810065c:	4631      	mov	r1, r6
 810065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100662:	462e      	mov	r6, r5
 8100664:	4628      	mov	r0, r5
 8100666:	e70b      	b.n	8100480 <__udivmoddi4+0xa0>
 8100668:	4606      	mov	r6, r0
 810066a:	e6e9      	b.n	8100440 <__udivmoddi4+0x60>
 810066c:	4618      	mov	r0, r3
 810066e:	e6fd      	b.n	810046c <__udivmoddi4+0x8c>
 8100670:	4543      	cmp	r3, r8
 8100672:	d2e5      	bcs.n	8100640 <__udivmoddi4+0x260>
 8100674:	ebb8 0e02 	subs.w	lr, r8, r2
 8100678:	eb69 0104 	sbc.w	r1, r9, r4
 810067c:	3801      	subs	r0, #1
 810067e:	e7df      	b.n	8100640 <__udivmoddi4+0x260>
 8100680:	4608      	mov	r0, r1
 8100682:	e7d2      	b.n	810062a <__udivmoddi4+0x24a>
 8100684:	4660      	mov	r0, ip
 8100686:	e78d      	b.n	81005a4 <__udivmoddi4+0x1c4>
 8100688:	4681      	mov	r9, r0
 810068a:	e7b9      	b.n	8100600 <__udivmoddi4+0x220>
 810068c:	4666      	mov	r6, ip
 810068e:	e775      	b.n	810057c <__udivmoddi4+0x19c>
 8100690:	4630      	mov	r0, r6
 8100692:	e74a      	b.n	810052a <__udivmoddi4+0x14a>
 8100694:	f1ac 0c02 	sub.w	ip, ip, #2
 8100698:	4439      	add	r1, r7
 810069a:	e713      	b.n	81004c4 <__udivmoddi4+0xe4>
 810069c:	3802      	subs	r0, #2
 810069e:	443c      	add	r4, r7
 81006a0:	e724      	b.n	81004ec <__udivmoddi4+0x10c>
 81006a2:	bf00      	nop

081006a4 <__aeabi_idiv0>:
 81006a4:	4770      	bx	lr
 81006a6:	bf00      	nop

081006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a8:	b480      	push	{r7}
 81006aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006ac:	4b0b      	ldr	r3, [pc, #44]	; (81006dc <SystemInit+0x34>)
 81006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81006b2:	4a0a      	ldr	r2, [pc, #40]	; (81006dc <SystemInit+0x34>)
 81006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006bc:	4b07      	ldr	r3, [pc, #28]	; (81006dc <SystemInit+0x34>)
 81006be:	691b      	ldr	r3, [r3, #16]
 81006c0:	4a06      	ldr	r2, [pc, #24]	; (81006dc <SystemInit+0x34>)
 81006c2:	f043 0310 	orr.w	r3, r3, #16
 81006c6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81006c8:	4b04      	ldr	r3, [pc, #16]	; (81006dc <SystemInit+0x34>)
 81006ca:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81006ce:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006d0:	bf00      	nop
 81006d2:	46bd      	mov	sp, r7
 81006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d8:	4770      	bx	lr
 81006da:	bf00      	nop
 81006dc:	e000ed00 	.word	0xe000ed00

081006e0 <ESP_Init>:
		<div class=\"btn\">";

/*****************************************************************************************************************************************/

void ESP_Init ()
{
 81006e0:	b580      	push	{r7, lr}
 81006e2:	b094      	sub	sp, #80	; 0x50
 81006e4:	af00      	add	r7, sp, #0
	char data[80];

	Ringbuf_init();
 81006e6:	f000 faef 	bl	8100cc8 <Ringbuf_init>

#endif
	//char pData[]="AT OK\r\n";
	//HAL_UART_Transmit(&huart3, (uint8_t *)pData, 7, 0xfff);

}
 81006ea:	bf00      	nop
 81006ec:	3750      	adds	r7, #80	; 0x50
 81006ee:	46bd      	mov	sp, r7
 81006f0:	bd80      	pop	{r7, pc}
	...

081006f4 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 81006f4:	b580      	push	{r7, lr}
 81006f6:	b098      	sub	sp, #96	; 0x60
 81006f8:	af00      	add	r7, sp, #0
 81006fa:	6078      	str	r0, [r7, #4]
 81006fc:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 81006fe:	6878      	ldr	r0, [r7, #4]
 8100700:	f7ff fdf8 	bl	81002f4 <strlen>
 8100704:	4603      	mov	r3, r0
 8100706:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8100708:	f107 000c 	add.w	r0, r7, #12
 810070c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810070e:	683a      	ldr	r2, [r7, #0]
 8100710:	491a      	ldr	r1, [pc, #104]	; (810077c <Server_Send+0x88>)
 8100712:	f005 fcef 	bl	81060f4 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8100716:	f107 030c 	add.w	r3, r7, #12
 810071a:	4919      	ldr	r1, [pc, #100]	; (8100780 <Server_Send+0x8c>)
 810071c:	4618      	mov	r0, r3
 810071e:	f000 fc70 	bl	8101002 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 8100722:	bf00      	nop
 8100724:	4916      	ldr	r1, [pc, #88]	; (8100780 <Server_Send+0x8c>)
 8100726:	4817      	ldr	r0, [pc, #92]	; (8100784 <Server_Send+0x90>)
 8100728:	f000 fd00 	bl	810112c <Wait_for>
 810072c:	4603      	mov	r3, r0
 810072e:	2b00      	cmp	r3, #0
 8100730:	d0f8      	beq.n	8100724 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8100732:	4913      	ldr	r1, [pc, #76]	; (8100780 <Server_Send+0x8c>)
 8100734:	6878      	ldr	r0, [r7, #4]
 8100736:	f000 fc64 	bl	8101002 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 810073a:	bf00      	nop
 810073c:	4910      	ldr	r1, [pc, #64]	; (8100780 <Server_Send+0x8c>)
 810073e:	4812      	ldr	r0, [pc, #72]	; (8100788 <Server_Send+0x94>)
 8100740:	f000 fcf4 	bl	810112c <Wait_for>
 8100744:	4603      	mov	r3, r0
 8100746:	2b00      	cmp	r3, #0
 8100748:	d0f8      	beq.n	810073c <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 810074a:	f107 030c 	add.w	r3, r7, #12
 810074e:	490f      	ldr	r1, [pc, #60]	; (810078c <Server_Send+0x98>)
 8100750:	4618      	mov	r0, r3
 8100752:	f005 fccf 	bl	81060f4 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8100756:	f107 030c 	add.w	r3, r7, #12
 810075a:	4909      	ldr	r1, [pc, #36]	; (8100780 <Server_Send+0x8c>)
 810075c:	4618      	mov	r0, r3
 810075e:	f000 fc50 	bl	8101002 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8100762:	bf00      	nop
 8100764:	4906      	ldr	r1, [pc, #24]	; (8100780 <Server_Send+0x8c>)
 8100766:	480a      	ldr	r0, [pc, #40]	; (8100790 <Server_Send+0x9c>)
 8100768:	f000 fce0 	bl	810112c <Wait_for>
 810076c:	4603      	mov	r3, r0
 810076e:	2b00      	cmp	r3, #0
 8100770:	d0f8      	beq.n	8100764 <Server_Send+0x70>
	return 1;
 8100772:	2301      	movs	r3, #1
}
 8100774:	4618      	mov	r0, r3
 8100776:	3760      	adds	r7, #96	; 0x60
 8100778:	46bd      	mov	sp, r7
 810077a:	bd80      	pop	{r7, pc}
 810077c:	08106d8c 	.word	0x08106d8c
 8100780:	100008d4 	.word	0x100008d4
 8100784:	08106da0 	.word	0x08106da0
 8100788:	08106da4 	.word	0x08106da4
 810078c:	08106dac 	.word	0x08106dac
 8100790:	08106dbc 	.word	0x08106dbc

08100794 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8100794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100796:	f6ad 0dec 	subw	sp, sp, #2284	; 0x8ec
 810079a:	af02      	add	r7, sp, #8
 810079c:	1d3b      	adds	r3, r7, #4
 810079e:	6018      	str	r0, [r3, #0]
 81007a0:	463b      	mov	r3, r7
 81007a2:	6019      	str	r1, [r3, #0]
	char datatosend[2048] = {0};
 81007a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81007a8:	2200      	movs	r2, #0
 81007aa:	601a      	str	r2, [r3, #0]
 81007ac:	3304      	adds	r3, #4
 81007ae:	f240 72fc 	movw	r2, #2044	; 0x7fc
 81007b2:	2100      	movs	r1, #0
 81007b4:	4618      	mov	r0, r3
 81007b6:	f005 fc95 	bl	81060e4 <memset>
	if (!(strcmp (str, "/farm")))
 81007ba:	1d3b      	adds	r3, r7, #4
 81007bc:	499d      	ldr	r1, [pc, #628]	; (8100a34 <Server_Handle+0x2a0>)
 81007be:	6818      	ldr	r0, [r3, #0]
 81007c0:	f7ff fd8e 	bl	81002e0 <strcmp>
 81007c4:	4603      	mov	r3, r0
 81007c6:	2b00      	cmp	r3, #0
 81007c8:	f040 8205 	bne.w	8100bd6 <Server_Handle+0x442>
	{
		char localbuf[200];
		sprintf(datatosend, farm_top);
 81007cc:	4b9a      	ldr	r3, [pc, #616]	; (8100a38 <Server_Handle+0x2a4>)
 81007ce:	681a      	ldr	r2, [r3, #0]
 81007d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81007d4:	4611      	mov	r1, r2
 81007d6:	4618      	mov	r0, r3
 81007d8:	f005 fc8c 	bl	81060f4 <siprintf>
//		uint8_t rd = 0;
//		uint8_t r = 0;
//		uint8_t g = 0;
//		uint8_t b = 0;
//		uint8_t soil = 0;
		uint8_t fan_on= 0;
 81007dc:	2300      	movs	r3, #0
 81007de:	f887 38dc 	strb.w	r3, [r7, #2268]	; 0x8dc
		uint8_t light_on= 0;
 81007e2:	2300      	movs	r3, #0
 81007e4:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
		uint8_t water_on= 1;
 81007e8:	2301      	movs	r3, #1
 81007ea:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
		uint8_t tc= 28;
 81007ee:	231c      	movs	r3, #28
 81007f0:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
		uint8_t rd= 70;
 81007f4:	2346      	movs	r3, #70	; 0x46
 81007f6:	f887 38d8 	strb.w	r3, [r7, #2264]	; 0x8d8
		uint8_t r= 0;
 81007fa:	2300      	movs	r3, #0
 81007fc:	f887 38df 	strb.w	r3, [r7, #2271]	; 0x8df
		uint8_t g= 0;
 8100800:	2300      	movs	r3, #0
 8100802:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
		uint8_t b= 0;
 8100806:	2300      	movs	r3, #0
 8100808:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
		uint8_t soil = 30;
 810080c:	231e      	movs	r3, #30
 810080e:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
		if(HAL_HSEM_Take(9, 0) == HAL_OK) {
 8100812:	2100      	movs	r1, #0
 8100814:	2009      	movs	r0, #9
 8100816:	f002 f89f 	bl	8102958 <HAL_HSEM_Take>
 810081a:	4603      	mov	r3, r0
 810081c:	2b00      	cmp	r3, #0
 810081e:	d130      	bne.n	8100882 <Server_Handle+0xee>
			fan_on = shared_ptr->fan_on;
 8100820:	4b86      	ldr	r3, [pc, #536]	; (8100a3c <Server_Handle+0x2a8>)
 8100822:	681b      	ldr	r3, [r3, #0]
 8100824:	781b      	ldrb	r3, [r3, #0]
 8100826:	f887 38dc 	strb.w	r3, [r7, #2268]	; 0x8dc
			light_on = shared_ptr->light_on;
 810082a:	4b84      	ldr	r3, [pc, #528]	; (8100a3c <Server_Handle+0x2a8>)
 810082c:	681b      	ldr	r3, [r3, #0]
 810082e:	785b      	ldrb	r3, [r3, #1]
 8100830:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
			water_on = shared_ptr->water_on;
 8100834:	4b81      	ldr	r3, [pc, #516]	; (8100a3c <Server_Handle+0x2a8>)
 8100836:	681b      	ldr	r3, [r3, #0]
 8100838:	789b      	ldrb	r3, [r3, #2]
 810083a:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
			tc = shared_ptr->tc;
 810083e:	4b7f      	ldr	r3, [pc, #508]	; (8100a3c <Server_Handle+0x2a8>)
 8100840:	681b      	ldr	r3, [r3, #0]
 8100842:	78db      	ldrb	r3, [r3, #3]
 8100844:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
			rd = shared_ptr->rd;
 8100848:	4b7c      	ldr	r3, [pc, #496]	; (8100a3c <Server_Handle+0x2a8>)
 810084a:	681b      	ldr	r3, [r3, #0]
 810084c:	791b      	ldrb	r3, [r3, #4]
 810084e:	f887 38d8 	strb.w	r3, [r7, #2264]	; 0x8d8
			r = shared_ptr->r;
 8100852:	4b7a      	ldr	r3, [pc, #488]	; (8100a3c <Server_Handle+0x2a8>)
 8100854:	681b      	ldr	r3, [r3, #0]
 8100856:	795b      	ldrb	r3, [r3, #5]
 8100858:	f887 38df 	strb.w	r3, [r7, #2271]	; 0x8df
			g = shared_ptr->g;
 810085c:	4b77      	ldr	r3, [pc, #476]	; (8100a3c <Server_Handle+0x2a8>)
 810085e:	681b      	ldr	r3, [r3, #0]
 8100860:	799b      	ldrb	r3, [r3, #6]
 8100862:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
			b = shared_ptr->b;
 8100866:	4b75      	ldr	r3, [pc, #468]	; (8100a3c <Server_Handle+0x2a8>)
 8100868:	681b      	ldr	r3, [r3, #0]
 810086a:	79db      	ldrb	r3, [r3, #7]
 810086c:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
			soil = shared_ptr->soil;
 8100870:	4b72      	ldr	r3, [pc, #456]	; (8100a3c <Server_Handle+0x2a8>)
 8100872:	681b      	ldr	r3, [r3, #0]
 8100874:	7a1b      	ldrb	r3, [r3, #8]
 8100876:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
			//soil = 77;
			HAL_HSEM_Release(9,0);
 810087a:	2100      	movs	r1, #0
 810087c:	2009      	movs	r0, #9
 810087e:	f002 f88f 	bl	81029a0 <HAL_HSEM_Release>
		}
//debug
		fan_on= 0;
 8100882:	2300      	movs	r3, #0
 8100884:	f887 38dc 	strb.w	r3, [r7, #2268]	; 0x8dc
		light_on= 0;
 8100888:	2300      	movs	r3, #0
 810088a:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
		water_on= 1;
 810088e:	2301      	movs	r3, #1
 8100890:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
		tc= 28;
 8100894:	231c      	movs	r3, #28
 8100896:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
		rd= 70;
 810089a:	2346      	movs	r3, #70	; 0x46
 810089c:	f887 38d8 	strb.w	r3, [r7, #2264]	; 0x8d8
		soil = 30;
 81008a0:	231e      	movs	r3, #30
 81008a2:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7

		if(fan_on)
 81008a6:	f897 38dc 	ldrb.w	r3, [r7, #2268]	; 0x8dc
 81008aa:	2b00      	cmp	r3, #0
 81008ac:	d020      	beq.n	81008f0 <Server_Handle+0x15c>
		{
			strcat (datatosend, "<a href=\"/fanon\" class=\"off\">風扇</a>");
 81008ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81008b2:	4618      	mov	r0, r3
 81008b4:	f7ff fd1e 	bl	81002f4 <strlen>
 81008b8:	4603      	mov	r3, r0
 81008ba:	461a      	mov	r2, r3
 81008bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81008c0:	4413      	add	r3, r2
 81008c2:	4a5f      	ldr	r2, [pc, #380]	; (8100a40 <Server_Handle+0x2ac>)
 81008c4:	4614      	mov	r4, r2
 81008c6:	469c      	mov	ip, r3
 81008c8:	f104 0e20 	add.w	lr, r4, #32
 81008cc:	4665      	mov	r5, ip
 81008ce:	4626      	mov	r6, r4
 81008d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 81008d2:	6028      	str	r0, [r5, #0]
 81008d4:	6069      	str	r1, [r5, #4]
 81008d6:	60aa      	str	r2, [r5, #8]
 81008d8:	60eb      	str	r3, [r5, #12]
 81008da:	3410      	adds	r4, #16
 81008dc:	f10c 0c10 	add.w	ip, ip, #16
 81008e0:	4574      	cmp	r4, lr
 81008e2:	d1f3      	bne.n	81008cc <Server_Handle+0x138>
 81008e4:	4662      	mov	r2, ip
 81008e6:	4623      	mov	r3, r4
 81008e8:	cb03      	ldmia	r3!, {r0, r1}
 81008ea:	6010      	str	r0, [r2, #0]
 81008ec:	6051      	str	r1, [r2, #4]
 81008ee:	e015      	b.n	810091c <Server_Handle+0x188>
		}
		else
		{
			strcat (datatosend, "<a href=\"/fanon\">風扇</a>");
 81008f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81008f4:	4618      	mov	r0, r3
 81008f6:	f7ff fcfd 	bl	81002f4 <strlen>
 81008fa:	4603      	mov	r3, r0
 81008fc:	461a      	mov	r2, r3
 81008fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100902:	4413      	add	r3, r2
 8100904:	4a4f      	ldr	r2, [pc, #316]	; (8100a44 <Server_Handle+0x2b0>)
 8100906:	461d      	mov	r5, r3
 8100908:	4614      	mov	r4, r2
 810090a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810090c:	6028      	str	r0, [r5, #0]
 810090e:	6069      	str	r1, [r5, #4]
 8100910:	60aa      	str	r2, [r5, #8]
 8100912:	60eb      	str	r3, [r5, #12]
 8100914:	cc07      	ldmia	r4!, {r0, r1, r2}
 8100916:	6128      	str	r0, [r5, #16]
 8100918:	6169      	str	r1, [r5, #20]
 810091a:	61aa      	str	r2, [r5, #24]
		}
		strcat (datatosend, "</div><div class=\"btn\">");
 810091c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100920:	4618      	mov	r0, r3
 8100922:	f7ff fce7 	bl	81002f4 <strlen>
 8100926:	4603      	mov	r3, r0
 8100928:	461a      	mov	r2, r3
 810092a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810092e:	4413      	add	r3, r2
 8100930:	4a45      	ldr	r2, [pc, #276]	; (8100a48 <Server_Handle+0x2b4>)
 8100932:	461d      	mov	r5, r3
 8100934:	4614      	mov	r4, r2
 8100936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100938:	6028      	str	r0, [r5, #0]
 810093a:	6069      	str	r1, [r5, #4]
 810093c:	60aa      	str	r2, [r5, #8]
 810093e:	60eb      	str	r3, [r5, #12]
 8100940:	cc03      	ldmia	r4!, {r0, r1}
 8100942:	6128      	str	r0, [r5, #16]
 8100944:	6169      	str	r1, [r5, #20]
		if(light_on)
 8100946:	f897 38db 	ldrb.w	r3, [r7, #2267]	; 0x8db
 810094a:	2b00      	cmp	r3, #0
 810094c:	d020      	beq.n	8100990 <Server_Handle+0x1fc>
		{
			strcat (datatosend, "<a href\"/lighto\" class=\"off\">燈光</a>");
 810094e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100952:	4618      	mov	r0, r3
 8100954:	f7ff fcce 	bl	81002f4 <strlen>
 8100958:	4603      	mov	r3, r0
 810095a:	461a      	mov	r2, r3
 810095c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100960:	4413      	add	r3, r2
 8100962:	4a3a      	ldr	r2, [pc, #232]	; (8100a4c <Server_Handle+0x2b8>)
 8100964:	4614      	mov	r4, r2
 8100966:	469c      	mov	ip, r3
 8100968:	f104 0e20 	add.w	lr, r4, #32
 810096c:	4665      	mov	r5, ip
 810096e:	4626      	mov	r6, r4
 8100970:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8100972:	6028      	str	r0, [r5, #0]
 8100974:	6069      	str	r1, [r5, #4]
 8100976:	60aa      	str	r2, [r5, #8]
 8100978:	60eb      	str	r3, [r5, #12]
 810097a:	3410      	adds	r4, #16
 810097c:	f10c 0c10 	add.w	ip, ip, #16
 8100980:	4574      	cmp	r4, lr
 8100982:	d1f3      	bne.n	810096c <Server_Handle+0x1d8>
 8100984:	4662      	mov	r2, ip
 8100986:	4623      	mov	r3, r4
 8100988:	cb03      	ldmia	r3!, {r0, r1}
 810098a:	6010      	str	r0, [r2, #0]
 810098c:	6051      	str	r1, [r2, #4]
 810098e:	e015      	b.n	81009bc <Server_Handle+0x228>
		}
		else
		{
			strcat (datatosend, "<a href\"/lighto\">燈光</a>");
 8100990:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100994:	4618      	mov	r0, r3
 8100996:	f7ff fcad 	bl	81002f4 <strlen>
 810099a:	4603      	mov	r3, r0
 810099c:	461a      	mov	r2, r3
 810099e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009a2:	4413      	add	r3, r2
 81009a4:	4a2a      	ldr	r2, [pc, #168]	; (8100a50 <Server_Handle+0x2bc>)
 81009a6:	461d      	mov	r5, r3
 81009a8:	4614      	mov	r4, r2
 81009aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81009ac:	6028      	str	r0, [r5, #0]
 81009ae:	6069      	str	r1, [r5, #4]
 81009b0:	60aa      	str	r2, [r5, #8]
 81009b2:	60eb      	str	r3, [r5, #12]
 81009b4:	cc07      	ldmia	r4!, {r0, r1, r2}
 81009b6:	6128      	str	r0, [r5, #16]
 81009b8:	6169      	str	r1, [r5, #20]
 81009ba:	61aa      	str	r2, [r5, #24]
		}
		strcat (datatosend, "</div><div class=\"btn\">");
 81009bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009c0:	4618      	mov	r0, r3
 81009c2:	f7ff fc97 	bl	81002f4 <strlen>
 81009c6:	4603      	mov	r3, r0
 81009c8:	461a      	mov	r2, r3
 81009ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009ce:	4413      	add	r3, r2
 81009d0:	4a1d      	ldr	r2, [pc, #116]	; (8100a48 <Server_Handle+0x2b4>)
 81009d2:	461d      	mov	r5, r3
 81009d4:	4614      	mov	r4, r2
 81009d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81009d8:	6028      	str	r0, [r5, #0]
 81009da:	6069      	str	r1, [r5, #4]
 81009dc:	60aa      	str	r2, [r5, #8]
 81009de:	60eb      	str	r3, [r5, #12]
 81009e0:	cc03      	ldmia	r4!, {r0, r1}
 81009e2:	6128      	str	r0, [r5, #16]
 81009e4:	6169      	str	r1, [r5, #20]
		if(water_on)
 81009e6:	f897 38da 	ldrb.w	r3, [r7, #2266]	; 0x8da
 81009ea:	2b00      	cmp	r3, #0
 81009ec:	d034      	beq.n	8100a58 <Server_Handle+0x2c4>
		{
			strcat (datatosend, "<a href=\"/wateron\" class=\"off\">澆水</a>");
 81009ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009f2:	4618      	mov	r0, r3
 81009f4:	f7ff fc7e 	bl	81002f4 <strlen>
 81009f8:	4603      	mov	r3, r0
 81009fa:	461a      	mov	r2, r3
 81009fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a00:	4413      	add	r3, r2
 8100a02:	4a14      	ldr	r2, [pc, #80]	; (8100a54 <Server_Handle+0x2c0>)
 8100a04:	4614      	mov	r4, r2
 8100a06:	469c      	mov	ip, r3
 8100a08:	f104 0e20 	add.w	lr, r4, #32
 8100a0c:	4665      	mov	r5, ip
 8100a0e:	4626      	mov	r6, r4
 8100a10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8100a12:	6028      	str	r0, [r5, #0]
 8100a14:	6069      	str	r1, [r5, #4]
 8100a16:	60aa      	str	r2, [r5, #8]
 8100a18:	60eb      	str	r3, [r5, #12]
 8100a1a:	3410      	adds	r4, #16
 8100a1c:	f10c 0c10 	add.w	ip, ip, #16
 8100a20:	4574      	cmp	r4, lr
 8100a22:	d1f3      	bne.n	8100a0c <Server_Handle+0x278>
 8100a24:	4662      	mov	r2, ip
 8100a26:	4623      	mov	r3, r4
 8100a28:	cb03      	ldmia	r3!, {r0, r1}
 8100a2a:	6010      	str	r0, [r2, #0]
 8100a2c:	6051      	str	r1, [r2, #4]
 8100a2e:	881b      	ldrh	r3, [r3, #0]
 8100a30:	8113      	strh	r3, [r2, #8]
 8100a32:	e029      	b.n	8100a88 <Server_Handle+0x2f4>
 8100a34:	08106dc4 	.word	0x08106dc4
 8100a38:	1000000c 	.word	0x1000000c
 8100a3c:	08107098 	.word	0x08107098
 8100a40:	08106dcc 	.word	0x08106dcc
 8100a44:	08106df4 	.word	0x08106df4
 8100a48:	08106e10 	.word	0x08106e10
 8100a4c:	08106e28 	.word	0x08106e28
 8100a50:	08106e50 	.word	0x08106e50
 8100a54:	08106e6c 	.word	0x08106e6c
		}
		else
		{
			strcat (datatosend, "<a href=\"/wateron\">澆水</a>");
 8100a58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a5c:	4618      	mov	r0, r3
 8100a5e:	f7ff fc49 	bl	81002f4 <strlen>
 8100a62:	4603      	mov	r3, r0
 8100a64:	461a      	mov	r2, r3
 8100a66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a6a:	4413      	add	r3, r2
 8100a6c:	4a64      	ldr	r2, [pc, #400]	; (8100c00 <Server_Handle+0x46c>)
 8100a6e:	461d      	mov	r5, r3
 8100a70:	4614      	mov	r4, r2
 8100a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100a74:	6028      	str	r0, [r5, #0]
 8100a76:	6069      	str	r1, [r5, #4]
 8100a78:	60aa      	str	r2, [r5, #8]
 8100a7a:	60eb      	str	r3, [r5, #12]
 8100a7c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8100a7e:	6128      	str	r0, [r5, #16]
 8100a80:	6169      	str	r1, [r5, #20]
 8100a82:	61aa      	str	r2, [r5, #24]
 8100a84:	8823      	ldrh	r3, [r4, #0]
 8100a86:	83ab      	strh	r3, [r5, #28]
		}
		strcat (datatosend, "</div></div><div class=\"center flex col\"><div class=\"flex row center\"><div class=\"td c1\">溫度:</div>");
 8100a88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a8c:	4618      	mov	r0, r3
 8100a8e:	f7ff fc31 	bl	81002f4 <strlen>
 8100a92:	4603      	mov	r3, r0
 8100a94:	461a      	mov	r2, r3
 8100a96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a9a:	4413      	add	r3, r2
 8100a9c:	4a59      	ldr	r2, [pc, #356]	; (8100c04 <Server_Handle+0x470>)
 8100a9e:	4618      	mov	r0, r3
 8100aa0:	4611      	mov	r1, r2
 8100aa2:	2367      	movs	r3, #103	; 0x67
 8100aa4:	461a      	mov	r2, r3
 8100aa6:	f005 fb0f 	bl	81060c8 <memcpy>
		sprintf (localbuf, "<div class=\"c2\">%d</div>", tc);
 8100aaa:	f897 28d9 	ldrb.w	r2, [r7, #2265]	; 0x8d9
 8100aae:	f107 030c 	add.w	r3, r7, #12
 8100ab2:	4955      	ldr	r1, [pc, #340]	; (8100c08 <Server_Handle+0x474>)
 8100ab4:	4618      	mov	r0, r3
 8100ab6:	f005 fb1d 	bl	81060f4 <siprintf>
		strcat (datatosend, localbuf);
 8100aba:	f107 020c 	add.w	r2, r7, #12
 8100abe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100ac2:	4611      	mov	r1, r2
 8100ac4:	4618      	mov	r0, r3
 8100ac6:	f005 fb35 	bl	8106134 <strcat>
		strcat (datatosend, "</div><div class=\"flex row center\"><div class=\"c1\">濕度:</div>");
 8100aca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100ace:	4618      	mov	r0, r3
 8100ad0:	f7ff fc10 	bl	81002f4 <strlen>
 8100ad4:	4603      	mov	r3, r0
 8100ad6:	461a      	mov	r2, r3
 8100ad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100adc:	4413      	add	r3, r2
 8100ade:	4a4b      	ldr	r2, [pc, #300]	; (8100c0c <Server_Handle+0x478>)
 8100ae0:	4618      	mov	r0, r3
 8100ae2:	4611      	mov	r1, r2
 8100ae4:	2341      	movs	r3, #65	; 0x41
 8100ae6:	461a      	mov	r2, r3
 8100ae8:	f005 faee 	bl	81060c8 <memcpy>
		sprintf (localbuf, "<div class=\"c2\">%d</div>", rd);
 8100aec:	f897 28d8 	ldrb.w	r2, [r7, #2264]	; 0x8d8
 8100af0:	f107 030c 	add.w	r3, r7, #12
 8100af4:	4944      	ldr	r1, [pc, #272]	; (8100c08 <Server_Handle+0x474>)
 8100af6:	4618      	mov	r0, r3
 8100af8:	f005 fafc 	bl	81060f4 <siprintf>
		strcat (datatosend, localbuf);
 8100afc:	f107 020c 	add.w	r2, r7, #12
 8100b00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b04:	4611      	mov	r1, r2
 8100b06:	4618      	mov	r0, r3
 8100b08:	f005 fb14 	bl	8106134 <strcat>
		strcat (datatosend, "</div><div class=\"flex row center\"><div class=\"c1\">光線:</div>");
 8100b0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b10:	4618      	mov	r0, r3
 8100b12:	f7ff fbef 	bl	81002f4 <strlen>
 8100b16:	4603      	mov	r3, r0
 8100b18:	461a      	mov	r2, r3
 8100b1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b1e:	4413      	add	r3, r2
 8100b20:	4a3b      	ldr	r2, [pc, #236]	; (8100c10 <Server_Handle+0x47c>)
 8100b22:	4618      	mov	r0, r3
 8100b24:	4611      	mov	r1, r2
 8100b26:	2341      	movs	r3, #65	; 0x41
 8100b28:	461a      	mov	r2, r3
 8100b2a:	f005 facd 	bl	81060c8 <memcpy>
		sprintf (localbuf, "<div class=\"c2\">R:%d G:%d B:%d</div>", r, g, b);
 8100b2e:	f897 28df 	ldrb.w	r2, [r7, #2271]	; 0x8df
 8100b32:	f897 18de 	ldrb.w	r1, [r7, #2270]	; 0x8de
 8100b36:	f897 38dd 	ldrb.w	r3, [r7, #2269]	; 0x8dd
 8100b3a:	f107 000c 	add.w	r0, r7, #12
 8100b3e:	9300      	str	r3, [sp, #0]
 8100b40:	460b      	mov	r3, r1
 8100b42:	4934      	ldr	r1, [pc, #208]	; (8100c14 <Server_Handle+0x480>)
 8100b44:	f005 fad6 	bl	81060f4 <siprintf>
		strcat (datatosend, localbuf);
 8100b48:	f107 020c 	add.w	r2, r7, #12
 8100b4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b50:	4611      	mov	r1, r2
 8100b52:	4618      	mov	r0, r3
 8100b54:	f005 faee 	bl	8106134 <strcat>
		strcat (datatosend, "</div><div class=\"flex row center\"><div class=\"c1\">土壤:</div>");
 8100b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b5c:	4618      	mov	r0, r3
 8100b5e:	f7ff fbc9 	bl	81002f4 <strlen>
 8100b62:	4603      	mov	r3, r0
 8100b64:	461a      	mov	r2, r3
 8100b66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b6a:	4413      	add	r3, r2
 8100b6c:	4a2a      	ldr	r2, [pc, #168]	; (8100c18 <Server_Handle+0x484>)
 8100b6e:	4618      	mov	r0, r3
 8100b70:	4611      	mov	r1, r2
 8100b72:	2341      	movs	r3, #65	; 0x41
 8100b74:	461a      	mov	r2, r3
 8100b76:	f005 faa7 	bl	81060c8 <memcpy>
		sprintf (localbuf, "<div class=\"c2\">%d</div>", soil);
 8100b7a:	f897 28d7 	ldrb.w	r2, [r7, #2263]	; 0x8d7
 8100b7e:	f107 030c 	add.w	r3, r7, #12
 8100b82:	4921      	ldr	r1, [pc, #132]	; (8100c08 <Server_Handle+0x474>)
 8100b84:	4618      	mov	r0, r3
 8100b86:	f005 fab5 	bl	81060f4 <siprintf>
		strcat (datatosend, localbuf);
 8100b8a:	f107 020c 	add.w	r2, r7, #12
 8100b8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b92:	4611      	mov	r1, r2
 8100b94:	4618      	mov	r0, r3
 8100b96:	f005 facd 	bl	8106134 <strcat>
		strcat (datatosend, "</div></body></html>");
 8100b9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b9e:	4618      	mov	r0, r3
 8100ba0:	f7ff fba8 	bl	81002f4 <strlen>
 8100ba4:	4603      	mov	r3, r0
 8100ba6:	461a      	mov	r2, r3
 8100ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100bac:	4413      	add	r3, r2
 8100bae:	4a1b      	ldr	r2, [pc, #108]	; (8100c1c <Server_Handle+0x488>)
 8100bb0:	461d      	mov	r5, r3
 8100bb2:	4614      	mov	r4, r2
 8100bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100bb6:	6028      	str	r0, [r5, #0]
 8100bb8:	6069      	str	r1, [r5, #4]
 8100bba:	60aa      	str	r2, [r5, #8]
 8100bbc:	60eb      	str	r3, [r5, #12]
 8100bbe:	6820      	ldr	r0, [r4, #0]
 8100bc0:	6128      	str	r0, [r5, #16]
 8100bc2:	7923      	ldrb	r3, [r4, #4]
 8100bc4:	752b      	strb	r3, [r5, #20]
		Server_Send(datatosend, Link_ID);
 8100bc6:	463b      	mov	r3, r7
 8100bc8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8100bcc:	6819      	ldr	r1, [r3, #0]
 8100bce:	4610      	mov	r0, r2
 8100bd0:	f7ff fd90 	bl	81006f4 <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 8100bd4:	e00e      	b.n	8100bf4 <Server_Handle+0x460>
		sprintf (datatosend, home);
 8100bd6:	4b12      	ldr	r3, [pc, #72]	; (8100c20 <Server_Handle+0x48c>)
 8100bd8:	681a      	ldr	r2, [r3, #0]
 8100bda:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100bde:	4611      	mov	r1, r2
 8100be0:	4618      	mov	r0, r3
 8100be2:	f005 fa87 	bl	81060f4 <siprintf>
		Server_Send(datatosend, Link_ID);
 8100be6:	463b      	mov	r3, r7
 8100be8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8100bec:	6819      	ldr	r1, [r3, #0]
 8100bee:	4610      	mov	r0, r2
 8100bf0:	f7ff fd80 	bl	81006f4 <Server_Send>
}
 8100bf4:	bf00      	nop
 8100bf6:	f607 07e4 	addw	r7, r7, #2276	; 0x8e4
 8100bfa:	46bd      	mov	sp, r7
 8100bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8100bfe:	bf00      	nop
 8100c00:	08106e98 	.word	0x08106e98
 8100c04:	08106eb8 	.word	0x08106eb8
 8100c08:	08106f20 	.word	0x08106f20
 8100c0c:	08106f3c 	.word	0x08106f3c
 8100c10:	08106f80 	.word	0x08106f80
 8100c14:	08106fc4 	.word	0x08106fc4
 8100c18:	08106fec 	.word	0x08106fec
 8100c1c:	08107030 	.word	0x08107030
 8100c20:	10000008 	.word	0x10000008

08100c24 <Server_Start>:

void Server_Start (void)
{
 8100c24:	b580      	push	{r7, lr}
 8100c26:	b0a2      	sub	sp, #136	; 0x88
 8100c28:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 8100c2a:	2300      	movs	r3, #0
 8100c2c:	60bb      	str	r3, [r7, #8]
 8100c2e:	f107 030c 	add.w	r3, r7, #12
 8100c32:	227c      	movs	r2, #124	; 0x7c
 8100c34:	2100      	movs	r1, #0
 8100c36:	4618      	mov	r0, r3
 8100c38:	f005 fa54 	bl	81060e4 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8100c3c:	bf00      	nop
 8100c3e:	1dfa      	adds	r2, r7, #7
 8100c40:	4b1b      	ldr	r3, [pc, #108]	; (8100cb0 <Server_Start+0x8c>)
 8100c42:	2101      	movs	r1, #1
 8100c44:	481b      	ldr	r0, [pc, #108]	; (8100cb4 <Server_Start+0x90>)
 8100c46:	f000 f9ad 	bl	8100fa4 <Get_after>
 8100c4a:	4603      	mov	r3, r0
 8100c4c:	2b00      	cmp	r3, #0
 8100c4e:	d0f6      	beq.n	8100c3e <Server_Start+0x1a>

	Link_ID -= 48;
 8100c50:	79fb      	ldrb	r3, [r7, #7]
 8100c52:	3b30      	subs	r3, #48	; 0x30
 8100c54:	b2db      	uxtb	r3, r3
 8100c56:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader,wifi_uart)));
 8100c58:	bf00      	nop
 8100c5a:	f107 0308 	add.w	r3, r7, #8
 8100c5e:	4a14      	ldr	r2, [pc, #80]	; (8100cb0 <Server_Start+0x8c>)
 8100c60:	4619      	mov	r1, r3
 8100c62:	4815      	ldr	r0, [pc, #84]	; (8100cb8 <Server_Start+0x94>)
 8100c64:	f000 f9e4 	bl	8101030 <Copy_upto>
 8100c68:	4603      	mov	r3, r0
 8100c6a:	2b00      	cmp	r3, #0
 8100c6c:	d0f5      	beq.n	8100c5a <Server_Start+0x36>
	if (Look_for("/farm", buftostoreheader) == 1)
 8100c6e:	f107 0308 	add.w	r3, r7, #8
 8100c72:	4619      	mov	r1, r3
 8100c74:	4811      	ldr	r0, [pc, #68]	; (8100cbc <Server_Start+0x98>)
 8100c76:	f000 f880 	bl	8100d7a <Look_for>
 8100c7a:	4603      	mov	r3, r0
 8100c7c:	2b01      	cmp	r3, #1
 8100c7e:	d105      	bne.n	8100c8c <Server_Start+0x68>
	{
		Server_Handle("/farm",Link_ID);
 8100c80:	79fb      	ldrb	r3, [r7, #7]
 8100c82:	4619      	mov	r1, r3
 8100c84:	480d      	ldr	r0, [pc, #52]	; (8100cbc <Server_Start+0x98>)
 8100c86:	f7ff fd85 	bl	8100794 <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 8100c8a:	e00d      	b.n	8100ca8 <Server_Start+0x84>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8100c8c:	f107 0308 	add.w	r3, r7, #8
 8100c90:	4619      	mov	r1, r3
 8100c92:	480b      	ldr	r0, [pc, #44]	; (8100cc0 <Server_Start+0x9c>)
 8100c94:	f000 f871 	bl	8100d7a <Look_for>
 8100c98:	4603      	mov	r3, r0
 8100c9a:	2b01      	cmp	r3, #1
 8100c9c:	d004      	beq.n	8100ca8 <Server_Start+0x84>
		Server_Handle("/ ", Link_ID);
 8100c9e:	79fb      	ldrb	r3, [r7, #7]
 8100ca0:	4619      	mov	r1, r3
 8100ca2:	4808      	ldr	r0, [pc, #32]	; (8100cc4 <Server_Start+0xa0>)
 8100ca4:	f7ff fd76 	bl	8100794 <Server_Handle>
}
 8100ca8:	bf00      	nop
 8100caa:	3788      	adds	r7, #136	; 0x88
 8100cac:	46bd      	mov	sp, r7
 8100cae:	bd80      	pop	{r7, pc}
 8100cb0:	100008d4 	.word	0x100008d4
 8100cb4:	08107048 	.word	0x08107048
 8100cb8:	08107050 	.word	0x08107050
 8100cbc:	08106dc4 	.word	0x08106dc4
 8100cc0:	0810705c 	.word	0x0810705c
 8100cc4:	0810706c 	.word	0x0810706c

08100cc8 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8100cc8:	b480      	push	{r7}
 8100cca:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8100ccc:	4b10      	ldr	r3, [pc, #64]	; (8100d10 <Ringbuf_init+0x48>)
 8100cce:	4a11      	ldr	r2, [pc, #68]	; (8100d14 <Ringbuf_init+0x4c>)
 8100cd0:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8100cd2:	4b11      	ldr	r3, [pc, #68]	; (8100d18 <Ringbuf_init+0x50>)
 8100cd4:	4a11      	ldr	r2, [pc, #68]	; (8100d1c <Ringbuf_init+0x54>)
 8100cd6:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8100cd8:	4b11      	ldr	r3, [pc, #68]	; (8100d20 <Ringbuf_init+0x58>)
 8100cda:	4a12      	ldr	r2, [pc, #72]	; (8100d24 <Ringbuf_init+0x5c>)
 8100cdc:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8100cde:	4b12      	ldr	r3, [pc, #72]	; (8100d28 <Ringbuf_init+0x60>)
 8100ce0:	4a12      	ldr	r2, [pc, #72]	; (8100d2c <Ringbuf_init+0x64>)
 8100ce2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8100ce4:	4b12      	ldr	r3, [pc, #72]	; (8100d30 <Ringbuf_init+0x68>)
 8100ce6:	681b      	ldr	r3, [r3, #0]
 8100ce8:	689a      	ldr	r2, [r3, #8]
 8100cea:	4b11      	ldr	r3, [pc, #68]	; (8100d30 <Ringbuf_init+0x68>)
 8100cec:	681b      	ldr	r3, [r3, #0]
 8100cee:	f042 0201 	orr.w	r2, r2, #1
 8100cf2:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8100cf4:	4b0e      	ldr	r3, [pc, #56]	; (8100d30 <Ringbuf_init+0x68>)
 8100cf6:	681b      	ldr	r3, [r3, #0]
 8100cf8:	681a      	ldr	r2, [r3, #0]
 8100cfa:	4b0d      	ldr	r3, [pc, #52]	; (8100d30 <Ringbuf_init+0x68>)
 8100cfc:	681b      	ldr	r3, [r3, #0]
 8100cfe:	f042 0220 	orr.w	r2, r2, #32
 8100d02:	601a      	str	r2, [r3, #0]


}
 8100d04:	bf00      	nop
 8100d06:	46bd      	mov	sp, r7
 8100d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0c:	4770      	bx	lr
 8100d0e:	bf00      	nop
 8100d10:	100008c8 	.word	0x100008c8
 8100d14:	10000098 	.word	0x10000098
 8100d18:	100008cc 	.word	0x100008cc
 8100d1c:	100002a0 	.word	0x100002a0
 8100d20:	100008d0 	.word	0x100008d0
 8100d24:	100004a8 	.word	0x100004a8
 8100d28:	100008c4 	.word	0x100008c4
 8100d2c:	100006b0 	.word	0x100006b0
 8100d30:	100008d4 	.word	0x100008d4

08100d34 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8100d34:	b480      	push	{r7}
 8100d36:	b085      	sub	sp, #20
 8100d38:	af00      	add	r7, sp, #0
 8100d3a:	4603      	mov	r3, r0
 8100d3c:	6039      	str	r1, [r7, #0]
 8100d3e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8100d40:	683b      	ldr	r3, [r7, #0]
 8100d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100d46:	3301      	adds	r3, #1
 8100d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100d4c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8100d4e:	683b      	ldr	r3, [r7, #0]
 8100d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8100d54:	68fb      	ldr	r3, [r7, #12]
 8100d56:	429a      	cmp	r2, r3
 8100d58:	d009      	beq.n	8100d6e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8100d5a:	683b      	ldr	r3, [r7, #0]
 8100d5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100d60:	683a      	ldr	r2, [r7, #0]
 8100d62:	79f9      	ldrb	r1, [r7, #7]
 8100d64:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8100d66:	68fa      	ldr	r2, [r7, #12]
 8100d68:	683b      	ldr	r3, [r7, #0]
 8100d6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8100d6e:	bf00      	nop
 8100d70:	3714      	adds	r7, #20
 8100d72:	46bd      	mov	sp, r7
 8100d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d78:	4770      	bx	lr

08100d7a <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8100d7a:	b580      	push	{r7, lr}
 8100d7c:	b086      	sub	sp, #24
 8100d7e:	af00      	add	r7, sp, #0
 8100d80:	6078      	str	r0, [r7, #4]
 8100d82:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8100d84:	6878      	ldr	r0, [r7, #4]
 8100d86:	f7ff fab5 	bl	81002f4 <strlen>
 8100d8a:	4603      	mov	r3, r0
 8100d8c:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8100d8e:	6838      	ldr	r0, [r7, #0]
 8100d90:	f7ff fab0 	bl	81002f4 <strlen>
 8100d94:	4603      	mov	r3, r0
 8100d96:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8100d98:	2300      	movs	r3, #0
 8100d9a:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8100da0:	e002      	b.n	8100da8 <Look_for+0x2e>
 8100da2:	693b      	ldr	r3, [r7, #16]
 8100da4:	3301      	adds	r3, #1
 8100da6:	613b      	str	r3, [r7, #16]
 8100da8:	697b      	ldr	r3, [r7, #20]
 8100daa:	687a      	ldr	r2, [r7, #4]
 8100dac:	4413      	add	r3, r2
 8100dae:	781a      	ldrb	r2, [r3, #0]
 8100db0:	693b      	ldr	r3, [r7, #16]
 8100db2:	6839      	ldr	r1, [r7, #0]
 8100db4:	440b      	add	r3, r1
 8100db6:	781b      	ldrb	r3, [r3, #0]
 8100db8:	429a      	cmp	r2, r3
 8100dba:	d1f2      	bne.n	8100da2 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8100dbc:	697b      	ldr	r3, [r7, #20]
 8100dbe:	687a      	ldr	r2, [r7, #4]
 8100dc0:	4413      	add	r3, r2
 8100dc2:	781a      	ldrb	r2, [r3, #0]
 8100dc4:	693b      	ldr	r3, [r7, #16]
 8100dc6:	6839      	ldr	r1, [r7, #0]
 8100dc8:	440b      	add	r3, r1
 8100dca:	781b      	ldrb	r3, [r3, #0]
 8100dcc:	429a      	cmp	r2, r3
 8100dce:	d111      	bne.n	8100df4 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8100dd0:	e005      	b.n	8100dde <Look_for+0x64>
	{
		so_far++;
 8100dd2:	697b      	ldr	r3, [r7, #20]
 8100dd4:	3301      	adds	r3, #1
 8100dd6:	617b      	str	r3, [r7, #20]
		indx++;
 8100dd8:	693b      	ldr	r3, [r7, #16]
 8100dda:	3301      	adds	r3, #1
 8100ddc:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8100dde:	697b      	ldr	r3, [r7, #20]
 8100de0:	687a      	ldr	r2, [r7, #4]
 8100de2:	4413      	add	r3, r2
 8100de4:	781a      	ldrb	r2, [r3, #0]
 8100de6:	693b      	ldr	r3, [r7, #16]
 8100de8:	6839      	ldr	r1, [r7, #0]
 8100dea:	440b      	add	r3, r1
 8100dec:	781b      	ldrb	r3, [r3, #0]
 8100dee:	429a      	cmp	r2, r3
 8100df0:	d0ef      	beq.n	8100dd2 <Look_for+0x58>
 8100df2:	e008      	b.n	8100e06 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8100df4:	2300      	movs	r3, #0
 8100df6:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8100df8:	693a      	ldr	r2, [r7, #16]
 8100dfa:	68bb      	ldr	r3, [r7, #8]
 8100dfc:	429a      	cmp	r2, r3
 8100dfe:	dbcf      	blt.n	8100da0 <Look_for+0x26>
 8100e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100e04:	e007      	b.n	8100e16 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8100e06:	697a      	ldr	r2, [r7, #20]
 8100e08:	68fb      	ldr	r3, [r7, #12]
 8100e0a:	429a      	cmp	r2, r3
 8100e0c:	d101      	bne.n	8100e12 <Look_for+0x98>
 8100e0e:	2301      	movs	r3, #1
 8100e10:	e001      	b.n	8100e16 <Look_for+0x9c>
	else return -1;
 8100e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100e16:	4618      	mov	r0, r3
 8100e18:	3718      	adds	r7, #24
 8100e1a:	46bd      	mov	sp, r7
 8100e1c:	bd80      	pop	{r7, pc}
	...

08100e20 <Uart_peek>:

}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8100e20:	b480      	push	{r7}
 8100e22:	b083      	sub	sp, #12
 8100e24:	af00      	add	r7, sp, #0
 8100e26:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	4a10      	ldr	r2, [pc, #64]	; (8100e6c <Uart_peek+0x4c>)
 8100e2c:	4293      	cmp	r3, r2
 8100e2e:	d114      	bne.n	8100e5a <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8100e30:	4b0f      	ldr	r3, [pc, #60]	; (8100e70 <Uart_peek+0x50>)
 8100e32:	681b      	ldr	r3, [r3, #0]
 8100e34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8100e38:	4b0d      	ldr	r3, [pc, #52]	; (8100e70 <Uart_peek+0x50>)
 8100e3a:	681b      	ldr	r3, [r3, #0]
 8100e3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100e40:	429a      	cmp	r2, r3
 8100e42:	d102      	bne.n	8100e4a <Uart_peek+0x2a>
		  {
		    return -1;
 8100e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100e48:	e009      	b.n	8100e5e <Uart_peek+0x3e>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8100e4a:	4b09      	ldr	r3, [pc, #36]	; (8100e70 <Uart_peek+0x50>)
 8100e4c:	681a      	ldr	r2, [r3, #0]
 8100e4e:	4b08      	ldr	r3, [pc, #32]	; (8100e70 <Uart_peek+0x50>)
 8100e50:	681b      	ldr	r3, [r3, #0]
 8100e52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100e56:	5cd3      	ldrb	r3, [r2, r3]
 8100e58:	e001      	b.n	8100e5e <Uart_peek+0x3e>
		  }
	}


	return -1;
 8100e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100e5e:	4618      	mov	r0, r3
 8100e60:	370c      	adds	r7, #12
 8100e62:	46bd      	mov	sp, r7
 8100e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e68:	4770      	bx	lr
 8100e6a:	bf00      	nop
 8100e6c:	100008d4 	.word	0x100008d4
 8100e70:	100008c8 	.word	0x100008c8

08100e74 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8100e74:	b480      	push	{r7}
 8100e76:	b085      	sub	sp, #20
 8100e78:	af00      	add	r7, sp, #0
 8100e7a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	4a16      	ldr	r2, [pc, #88]	; (8100ed8 <Uart_read+0x64>)
 8100e80:	4293      	cmp	r3, r2
 8100e82:	d121      	bne.n	8100ec8 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8100e84:	4b15      	ldr	r3, [pc, #84]	; (8100edc <Uart_read+0x68>)
 8100e86:	681b      	ldr	r3, [r3, #0]
 8100e88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8100e8c:	4b13      	ldr	r3, [pc, #76]	; (8100edc <Uart_read+0x68>)
 8100e8e:	681b      	ldr	r3, [r3, #0]
 8100e90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100e94:	429a      	cmp	r2, r3
 8100e96:	d102      	bne.n	8100e9e <Uart_read+0x2a>
		  {
		    return -1;
 8100e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100e9c:	e016      	b.n	8100ecc <Uart_read+0x58>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8100e9e:	4b0f      	ldr	r3, [pc, #60]	; (8100edc <Uart_read+0x68>)
 8100ea0:	681a      	ldr	r2, [r3, #0]
 8100ea2:	4b0e      	ldr	r3, [pc, #56]	; (8100edc <Uart_read+0x68>)
 8100ea4:	681b      	ldr	r3, [r3, #0]
 8100ea6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100eaa:	5cd3      	ldrb	r3, [r2, r3]
 8100eac:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8100eae:	4b0b      	ldr	r3, [pc, #44]	; (8100edc <Uart_read+0x68>)
 8100eb0:	681b      	ldr	r3, [r3, #0]
 8100eb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100eb6:	1c5a      	adds	r2, r3, #1
 8100eb8:	4b08      	ldr	r3, [pc, #32]	; (8100edc <Uart_read+0x68>)
 8100eba:	681b      	ldr	r3, [r3, #0]
 8100ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8100ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8100ec4:	7bfb      	ldrb	r3, [r7, #15]
 8100ec6:	e001      	b.n	8100ecc <Uart_read+0x58>
		  }
	}
	else return -1;
 8100ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100ecc:	4618      	mov	r0, r3
 8100ece:	3714      	adds	r7, #20
 8100ed0:	46bd      	mov	sp, r7
 8100ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed6:	4770      	bx	lr
 8100ed8:	100008d4 	.word	0x100008d4
 8100edc:	100008c8 	.word	0x100008c8

08100ee0 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8100ee0:	b480      	push	{r7}
 8100ee2:	b085      	sub	sp, #20
 8100ee4:	af00      	add	r7, sp, #0
 8100ee6:	6078      	str	r0, [r7, #4]
 8100ee8:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	db29      	blt.n	8100f44 <Uart_write+0x64>
	{
		if (uart == device_uart){
 8100ef0:	683b      	ldr	r3, [r7, #0]
 8100ef2:	4a17      	ldr	r2, [pc, #92]	; (8100f50 <Uart_write+0x70>)
 8100ef4:	4293      	cmp	r3, r2
 8100ef6:	d125      	bne.n	8100f44 <Uart_write+0x64>
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8100ef8:	4b16      	ldr	r3, [pc, #88]	; (8100f54 <Uart_write+0x74>)
 8100efa:	681b      	ldr	r3, [r3, #0]
 8100efc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100f00:	3301      	adds	r3, #1
 8100f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f06:	60fb      	str	r3, [r7, #12]

			// If the output buffer is full, there's nothing for it other than to
			// wait for the interrupt handler to empty it a bit
			// ???: return 0 here instead?
			while (i == _tx_buffer1->tail);
 8100f08:	bf00      	nop
 8100f0a:	4b12      	ldr	r3, [pc, #72]	; (8100f54 <Uart_write+0x74>)
 8100f0c:	681b      	ldr	r3, [r3, #0]
 8100f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8100f12:	68fb      	ldr	r3, [r7, #12]
 8100f14:	429a      	cmp	r2, r3
 8100f16:	d0f8      	beq.n	8100f0a <Uart_write+0x2a>

			_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8100f18:	4b0e      	ldr	r3, [pc, #56]	; (8100f54 <Uart_write+0x74>)
 8100f1a:	681a      	ldr	r2, [r3, #0]
 8100f1c:	4b0d      	ldr	r3, [pc, #52]	; (8100f54 <Uart_write+0x74>)
 8100f1e:	681b      	ldr	r3, [r3, #0]
 8100f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100f24:	6879      	ldr	r1, [r7, #4]
 8100f26:	b2c9      	uxtb	r1, r1
 8100f28:	54d1      	strb	r1, [r2, r3]
			_tx_buffer1->head = i;
 8100f2a:	4b0a      	ldr	r3, [pc, #40]	; (8100f54 <Uart_write+0x74>)
 8100f2c:	681b      	ldr	r3, [r3, #0]
 8100f2e:	68fa      	ldr	r2, [r7, #12]
 8100f30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

			__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8100f34:	4b06      	ldr	r3, [pc, #24]	; (8100f50 <Uart_write+0x70>)
 8100f36:	681b      	ldr	r3, [r3, #0]
 8100f38:	681a      	ldr	r2, [r3, #0]
 8100f3a:	4b05      	ldr	r3, [pc, #20]	; (8100f50 <Uart_write+0x70>)
 8100f3c:	681b      	ldr	r3, [r3, #0]
 8100f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8100f42:	601a      	str	r2, [r3, #0]
		}
	}
}
 8100f44:	bf00      	nop
 8100f46:	3714      	adds	r7, #20
 8100f48:	46bd      	mov	sp, r7
 8100f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4e:	4770      	bx	lr
 8100f50:	100008d4 	.word	0x100008d4
 8100f54:	100008cc 	.word	0x100008cc

08100f58 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8100f58:	b480      	push	{r7}
 8100f5a:	b083      	sub	sp, #12
 8100f5c:	af00      	add	r7, sp, #0
 8100f5e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	4a0e      	ldr	r2, [pc, #56]	; (8100f9c <IsDataAvailable+0x44>)
 8100f64:	4293      	cmp	r3, r2
 8100f66:	d111      	bne.n	8100f8c <IsDataAvailable+0x34>
 8100f68:	4b0d      	ldr	r3, [pc, #52]	; (8100fa0 <IsDataAvailable+0x48>)
 8100f6a:	681b      	ldr	r3, [r3, #0]
 8100f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100f70:	b29a      	uxth	r2, r3
 8100f72:	4b0b      	ldr	r3, [pc, #44]	; (8100fa0 <IsDataAvailable+0x48>)
 8100f74:	681b      	ldr	r3, [r3, #0]
 8100f76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100f7a:	b29b      	uxth	r3, r3
 8100f7c:	1ad3      	subs	r3, r2, r3
 8100f7e:	b29b      	uxth	r3, r3
 8100f80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8100f84:	b29b      	uxth	r3, r3
 8100f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f8a:	e001      	b.n	8100f90 <IsDataAvailable+0x38>
	return -1;
 8100f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100f90:	4618      	mov	r0, r3
 8100f92:	370c      	adds	r7, #12
 8100f94:	46bd      	mov	sp, r7
 8100f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f9a:	4770      	bx	lr
 8100f9c:	100008d4 	.word	0x100008d4
 8100fa0:	100008c8 	.word	0x100008c8

08100fa4 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	b086      	sub	sp, #24
 8100fa8:	af00      	add	r7, sp, #0
 8100faa:	60f8      	str	r0, [r7, #12]
 8100fac:	607a      	str	r2, [r7, #4]
 8100fae:	603b      	str	r3, [r7, #0]
 8100fb0:	460b      	mov	r3, r1
 8100fb2:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8100fb4:	bf00      	nop
 8100fb6:	6839      	ldr	r1, [r7, #0]
 8100fb8:	68f8      	ldr	r0, [r7, #12]
 8100fba:	f000 f8b7 	bl	810112c <Wait_for>
 8100fbe:	4603      	mov	r3, r0
 8100fc0:	2b01      	cmp	r3, #1
 8100fc2:	d1f8      	bne.n	8100fb6 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8100fc4:	2300      	movs	r3, #0
 8100fc6:	617b      	str	r3, [r7, #20]
 8100fc8:	e012      	b.n	8100ff0 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8100fca:	bf00      	nop
 8100fcc:	6838      	ldr	r0, [r7, #0]
 8100fce:	f7ff ffc3 	bl	8100f58 <IsDataAvailable>
 8100fd2:	4603      	mov	r3, r0
 8100fd4:	2b00      	cmp	r3, #0
 8100fd6:	d0f9      	beq.n	8100fcc <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8100fd8:	6838      	ldr	r0, [r7, #0]
 8100fda:	f7ff ff4b 	bl	8100e74 <Uart_read>
 8100fde:	4601      	mov	r1, r0
 8100fe0:	697b      	ldr	r3, [r7, #20]
 8100fe2:	687a      	ldr	r2, [r7, #4]
 8100fe4:	4413      	add	r3, r2
 8100fe6:	b2ca      	uxtb	r2, r1
 8100fe8:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8100fea:	697b      	ldr	r3, [r7, #20]
 8100fec:	3301      	adds	r3, #1
 8100fee:	617b      	str	r3, [r7, #20]
 8100ff0:	7afb      	ldrb	r3, [r7, #11]
 8100ff2:	697a      	ldr	r2, [r7, #20]
 8100ff4:	429a      	cmp	r2, r3
 8100ff6:	dbe8      	blt.n	8100fca <Get_after+0x26>
	}
	return 1;
 8100ff8:	2301      	movs	r3, #1
}
 8100ffa:	4618      	mov	r0, r3
 8100ffc:	3718      	adds	r7, #24
 8100ffe:	46bd      	mov	sp, r7
 8101000:	bd80      	pop	{r7, pc}

08101002 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8101002:	b580      	push	{r7, lr}
 8101004:	b082      	sub	sp, #8
 8101006:	af00      	add	r7, sp, #0
 8101008:	6078      	str	r0, [r7, #4]
 810100a:	6039      	str	r1, [r7, #0]
	//HAL_UART_Transmit(uart, (uint8_t*)"~5~v296", 7, 0xffff);
	while(*s!='\0') Uart_write(*s++, uart);
 810100c:	e007      	b.n	810101e <Uart_sendstring+0x1c>
 810100e:	687b      	ldr	r3, [r7, #4]
 8101010:	1c5a      	adds	r2, r3, #1
 8101012:	607a      	str	r2, [r7, #4]
 8101014:	781b      	ldrb	r3, [r3, #0]
 8101016:	6839      	ldr	r1, [r7, #0]
 8101018:	4618      	mov	r0, r3
 810101a:	f7ff ff61 	bl	8100ee0 <Uart_write>
 810101e:	687b      	ldr	r3, [r7, #4]
 8101020:	781b      	ldrb	r3, [r3, #0]
 8101022:	2b00      	cmp	r3, #0
 8101024:	d1f3      	bne.n	810100e <Uart_sendstring+0xc>
	//HAL_UART_Transmit(uart, (uint8_t*)"~3~v298", 7, 0xffff);
}
 8101026:	bf00      	nop
 8101028:	bf00      	nop
 810102a:	3708      	adds	r7, #8
 810102c:	46bd      	mov	sp, r7
 810102e:	bd80      	pop	{r7, pc}

08101030 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8101030:	b580      	push	{r7, lr}
 8101032:	b088      	sub	sp, #32
 8101034:	af00      	add	r7, sp, #0
 8101036:	60f8      	str	r0, [r7, #12]
 8101038:	60b9      	str	r1, [r7, #8]
 810103a:	607a      	str	r2, [r7, #4]
	int so_far =0;
 810103c:	2300      	movs	r3, #0
 810103e:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8101040:	68f8      	ldr	r0, [r7, #12]
 8101042:	f7ff f957 	bl	81002f4 <strlen>
 8101046:	4603      	mov	r3, r0
 8101048:	617b      	str	r3, [r7, #20]
	int indx = 0;
 810104a:	2300      	movs	r3, #0
 810104c:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 810104e:	bf00      	nop
 8101050:	6878      	ldr	r0, [r7, #4]
 8101052:	f7ff ff81 	bl	8100f58 <IsDataAvailable>
 8101056:	4603      	mov	r3, r0
 8101058:	2b00      	cmp	r3, #0
 810105a:	d0f9      	beq.n	8101050 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 810105c:	e01f      	b.n	810109e <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 810105e:	4b32      	ldr	r3, [pc, #200]	; (8101128 <Copy_upto+0xf8>)
 8101060:	6819      	ldr	r1, [r3, #0]
 8101062:	4b31      	ldr	r3, [pc, #196]	; (8101128 <Copy_upto+0xf8>)
 8101064:	681b      	ldr	r3, [r3, #0]
 8101066:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 810106a:	69bb      	ldr	r3, [r7, #24]
 810106c:	68b8      	ldr	r0, [r7, #8]
 810106e:	4403      	add	r3, r0
 8101070:	5c8a      	ldrb	r2, [r1, r2]
 8101072:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8101074:	4b2c      	ldr	r3, [pc, #176]	; (8101128 <Copy_upto+0xf8>)
 8101076:	681b      	ldr	r3, [r3, #0]
 8101078:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810107c:	1c5a      	adds	r2, r3, #1
 810107e:	4b2a      	ldr	r3, [pc, #168]	; (8101128 <Copy_upto+0xf8>)
 8101080:	681b      	ldr	r3, [r3, #0]
 8101082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8101086:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 810108a:	69bb      	ldr	r3, [r7, #24]
 810108c:	3301      	adds	r3, #1
 810108e:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8101090:	bf00      	nop
 8101092:	6878      	ldr	r0, [r7, #4]
 8101094:	f7ff ff60 	bl	8100f58 <IsDataAvailable>
 8101098:	4603      	mov	r3, r0
 810109a:	2b00      	cmp	r3, #0
 810109c:	d0f9      	beq.n	8101092 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 810109e:	6878      	ldr	r0, [r7, #4]
 81010a0:	f7ff febe 	bl	8100e20 <Uart_peek>
 81010a4:	4601      	mov	r1, r0
 81010a6:	69fb      	ldr	r3, [r7, #28]
 81010a8:	68fa      	ldr	r2, [r7, #12]
 81010aa:	4413      	add	r3, r2
 81010ac:	781b      	ldrb	r3, [r3, #0]
 81010ae:	4299      	cmp	r1, r3
 81010b0:	d1d5      	bne.n	810105e <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 81010b2:	e01b      	b.n	81010ec <Copy_upto+0xbc>
	{
		so_far++;
 81010b4:	69fb      	ldr	r3, [r7, #28]
 81010b6:	3301      	adds	r3, #1
 81010b8:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 81010ba:	6878      	ldr	r0, [r7, #4]
 81010bc:	f7ff feda 	bl	8100e74 <Uart_read>
 81010c0:	4601      	mov	r1, r0
 81010c2:	69bb      	ldr	r3, [r7, #24]
 81010c4:	1c5a      	adds	r2, r3, #1
 81010c6:	61ba      	str	r2, [r7, #24]
 81010c8:	461a      	mov	r2, r3
 81010ca:	68bb      	ldr	r3, [r7, #8]
 81010cc:	4413      	add	r3, r2
 81010ce:	b2ca      	uxtb	r2, r1
 81010d0:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 81010d2:	69fa      	ldr	r2, [r7, #28]
 81010d4:	697b      	ldr	r3, [r7, #20]
 81010d6:	429a      	cmp	r2, r3
 81010d8:	d101      	bne.n	81010de <Copy_upto+0xae>
 81010da:	2301      	movs	r3, #1
 81010dc:	e01f      	b.n	810111e <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 81010de:	bf00      	nop
 81010e0:	6878      	ldr	r0, [r7, #4]
 81010e2:	f7ff ff39 	bl	8100f58 <IsDataAvailable>
 81010e6:	4603      	mov	r3, r0
 81010e8:	2b00      	cmp	r3, #0
 81010ea:	d0f9      	beq.n	81010e0 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 81010ec:	6878      	ldr	r0, [r7, #4]
 81010ee:	f7ff fe97 	bl	8100e20 <Uart_peek>
 81010f2:	4601      	mov	r1, r0
 81010f4:	69fb      	ldr	r3, [r7, #28]
 81010f6:	68fa      	ldr	r2, [r7, #12]
 81010f8:	4413      	add	r3, r2
 81010fa:	781b      	ldrb	r3, [r3, #0]
 81010fc:	4299      	cmp	r1, r3
 81010fe:	d0d9      	beq.n	81010b4 <Copy_upto+0x84>
	}

	if (so_far != len)
 8101100:	69fa      	ldr	r2, [r7, #28]
 8101102:	697b      	ldr	r3, [r7, #20]
 8101104:	429a      	cmp	r2, r3
 8101106:	d002      	beq.n	810110e <Copy_upto+0xde>
	{
		so_far = 0;
 8101108:	2300      	movs	r3, #0
 810110a:	61fb      	str	r3, [r7, #28]
		goto again;
 810110c:	e79f      	b.n	810104e <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 810110e:	69fa      	ldr	r2, [r7, #28]
 8101110:	697b      	ldr	r3, [r7, #20]
 8101112:	429a      	cmp	r2, r3
 8101114:	d101      	bne.n	810111a <Copy_upto+0xea>
 8101116:	2301      	movs	r3, #1
 8101118:	e001      	b.n	810111e <Copy_upto+0xee>
	else return -1;
 810111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 810111e:	4618      	mov	r0, r3
 8101120:	3720      	adds	r7, #32
 8101122:	46bd      	mov	sp, r7
 8101124:	bd80      	pop	{r7, pc}
 8101126:	bf00      	nop
 8101128:	100008c8 	.word	0x100008c8

0810112c <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 810112c:	b580      	push	{r7, lr}
 810112e:	b084      	sub	sp, #16
 8101130:	af00      	add	r7, sp, #0
 8101132:	6078      	str	r0, [r7, #4]
 8101134:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8101136:	2300      	movs	r3, #0
 8101138:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 810113a:	6878      	ldr	r0, [r7, #4]
 810113c:	f7ff f8da 	bl	81002f4 <strlen>
 8101140:	4603      	mov	r3, r0
 8101142:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8101144:	bf00      	nop
 8101146:	6838      	ldr	r0, [r7, #0]
 8101148:	f7ff ff06 	bl	8100f58 <IsDataAvailable>
 810114c:	4603      	mov	r3, r0
 810114e:	2b00      	cmp	r3, #0
 8101150:	d0f9      	beq.n	8101146 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8101152:	6838      	ldr	r0, [r7, #0]
 8101154:	f7ff fe64 	bl	8100e20 <Uart_peek>
 8101158:	4601      	mov	r1, r0
 810115a:	68fb      	ldr	r3, [r7, #12]
 810115c:	687a      	ldr	r2, [r7, #4]
 810115e:	4413      	add	r3, r2
 8101160:	781b      	ldrb	r3, [r3, #0]
 8101162:	4299      	cmp	r1, r3
 8101164:	d01e      	beq.n	81011a4 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8101166:	4b1e      	ldr	r3, [pc, #120]	; (81011e0 <Wait_for+0xb4>)
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810116e:	1c5a      	adds	r2, r3, #1
 8101170:	4b1b      	ldr	r3, [pc, #108]	; (81011e0 <Wait_for+0xb4>)
 8101172:	681b      	ldr	r3, [r3, #0]
 8101174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8101178:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 810117c:	e7e2      	b.n	8101144 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 810117e:	68fb      	ldr	r3, [r7, #12]
 8101180:	3301      	adds	r3, #1
 8101182:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8101184:	6838      	ldr	r0, [r7, #0]
 8101186:	f7ff fe75 	bl	8100e74 <Uart_read>
		if (so_far == len) return 1;
 810118a:	68fa      	ldr	r2, [r7, #12]
 810118c:	68bb      	ldr	r3, [r7, #8]
 810118e:	429a      	cmp	r2, r3
 8101190:	d101      	bne.n	8101196 <Wait_for+0x6a>
 8101192:	2301      	movs	r3, #1
 8101194:	e01f      	b.n	81011d6 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8101196:	bf00      	nop
 8101198:	6838      	ldr	r0, [r7, #0]
 810119a:	f7ff fedd 	bl	8100f58 <IsDataAvailable>
 810119e:	4603      	mov	r3, r0
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d0f9      	beq.n	8101198 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 81011a4:	6838      	ldr	r0, [r7, #0]
 81011a6:	f7ff fe3b 	bl	8100e20 <Uart_peek>
 81011aa:	4601      	mov	r1, r0
 81011ac:	68fb      	ldr	r3, [r7, #12]
 81011ae:	687a      	ldr	r2, [r7, #4]
 81011b0:	4413      	add	r3, r2
 81011b2:	781b      	ldrb	r3, [r3, #0]
 81011b4:	4299      	cmp	r1, r3
 81011b6:	d0e2      	beq.n	810117e <Wait_for+0x52>
	}

	if (so_far != len)
 81011b8:	68fa      	ldr	r2, [r7, #12]
 81011ba:	68bb      	ldr	r3, [r7, #8]
 81011bc:	429a      	cmp	r2, r3
 81011be:	d002      	beq.n	81011c6 <Wait_for+0x9a>
	{
		so_far = 0;
 81011c0:	2300      	movs	r3, #0
 81011c2:	60fb      	str	r3, [r7, #12]
		goto again_device;
 81011c4:	e7be      	b.n	8101144 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 81011c6:	68fa      	ldr	r2, [r7, #12]
 81011c8:	68bb      	ldr	r3, [r7, #8]
 81011ca:	429a      	cmp	r2, r3
 81011cc:	d101      	bne.n	81011d2 <Wait_for+0xa6>
 81011ce:	2301      	movs	r3, #1
 81011d0:	e001      	b.n	81011d6 <Wait_for+0xaa>
	else return -1;
 81011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81011d6:	4618      	mov	r0, r3
 81011d8:	3710      	adds	r7, #16
 81011da:	46bd      	mov	sp, r7
 81011dc:	bd80      	pop	{r7, pc}
 81011de:	bf00      	nop
 81011e0:	100008c8 	.word	0x100008c8

081011e4 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 81011e4:	b580      	push	{r7, lr}
 81011e6:	b086      	sub	sp, #24
 81011e8:	af00      	add	r7, sp, #0
 81011ea:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(huart, (uint8_t*)"~5~v393", 7, 0xffff);

	uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	681b      	ldr	r3, [r3, #0]
 81011f0:	69db      	ldr	r3, [r3, #28]
 81011f2:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	681b      	ldr	r3, [r3, #0]
 81011f8:	681b      	ldr	r3, [r3, #0]
 81011fa:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET))
 81011fc:	697b      	ldr	r3, [r7, #20]
 81011fe:	f003 0320 	and.w	r3, r3, #32
 8101202:	2b00      	cmp	r3, #0
 8101204:	d017      	beq.n	8101236 <Uart_isr+0x52>
 8101206:	693b      	ldr	r3, [r7, #16]
 8101208:	f003 0320 	and.w	r3, r3, #32
 810120c:	2b00      	cmp	r3, #0
 810120e:	d012      	beq.n	8101236 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	681b      	ldr	r3, [r3, #0]
 8101214:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	681b      	ldr	r3, [r3, #0]
 810121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810121c:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 810121e:	687b      	ldr	r3, [r7, #4]
 8101220:	4a23      	ldr	r2, [pc, #140]	; (81012b0 <Uart_isr+0xcc>)
 8101222:	4293      	cmp	r3, r2
 8101224:	d13d      	bne.n	81012a2 <Uart_isr+0xbe>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8101226:	4b23      	ldr	r3, [pc, #140]	; (81012b4 <Uart_isr+0xd0>)
 8101228:	681a      	ldr	r2, [r3, #0]
 810122a:	7bfb      	ldrb	r3, [r7, #15]
 810122c:	4611      	mov	r1, r2
 810122e:	4618      	mov	r0, r3
 8101230:	f7ff fd80 	bl	8100d34 <store_char>
        }


        return;
 8101234:	e035      	b.n	81012a2 <Uart_isr+0xbe>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE_TXFNF) != RESET) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET))
 8101236:	697b      	ldr	r3, [r7, #20]
 8101238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810123c:	2b00      	cmp	r3, #0
 810123e:	d033      	beq.n	81012a8 <Uart_isr+0xc4>
 8101240:	693b      	ldr	r3, [r7, #16]
 8101242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101246:	2b00      	cmp	r3, #0
 8101248:	d02e      	beq.n	81012a8 <Uart_isr+0xc4>
    {
    	if (huart == device_uart){
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	4a18      	ldr	r2, [pc, #96]	; (81012b0 <Uart_isr+0xcc>)
 810124e:	4293      	cmp	r3, r2
 8101250:	d129      	bne.n	81012a6 <Uart_isr+0xc2>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8101252:	4b19      	ldr	r3, [pc, #100]	; (81012b8 <Uart_isr+0xd4>)
 8101254:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8101258:	4b17      	ldr	r3, [pc, #92]	; (81012b8 <Uart_isr+0xd4>)
 810125a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810125e:	429a      	cmp	r2, r3
 8101260:	d108      	bne.n	8101274 <Uart_isr+0x90>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	681b      	ldr	r3, [r3, #0]
 8101266:	681a      	ldr	r2, [r3, #0]
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	681b      	ldr	r3, [r3, #0]
 810126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8101270:	601a      	str	r2, [r3, #0]
    	      huart->Instance->TDR = c;

    	    }
    	}

    	return;
 8101272:	e018      	b.n	81012a6 <Uart_isr+0xc2>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8101274:	4b10      	ldr	r3, [pc, #64]	; (81012b8 <Uart_isr+0xd4>)
 8101276:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810127a:	4a0f      	ldr	r2, [pc, #60]	; (81012b8 <Uart_isr+0xd4>)
 810127c:	5cd3      	ldrb	r3, [r2, r3]
 810127e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8101280:	4b0d      	ldr	r3, [pc, #52]	; (81012b8 <Uart_isr+0xd4>)
 8101282:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8101286:	3301      	adds	r3, #1
 8101288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810128c:	4a0a      	ldr	r2, [pc, #40]	; (81012b8 <Uart_isr+0xd4>)
 810128e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->ISR;
 8101292:	687b      	ldr	r3, [r7, #4]
 8101294:	681b      	ldr	r3, [r3, #0]
 8101296:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	7bba      	ldrb	r2, [r7, #14]
 810129e:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 81012a0:	e001      	b.n	81012a6 <Uart_isr+0xc2>
        return;
 81012a2:	bf00      	nop
 81012a4:	e000      	b.n	81012a8 <Uart_isr+0xc4>
    	return;
 81012a6:	bf00      	nop
    }
}
 81012a8:	3718      	adds	r7, #24
 81012aa:	46bd      	mov	sp, r7
 81012ac:	bd80      	pop	{r7, pc}
 81012ae:	bf00      	nop
 81012b0:	100008d4 	.word	0x100008d4
 81012b4:	100008c8 	.word	0x100008c8
 81012b8:	100002a0 	.word	0x100002a0

081012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b088      	sub	sp, #32
 81012c0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81012c2:	4b2d      	ldr	r3, [pc, #180]	; (8101378 <main+0xbc>)
 81012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c8:	4a2b      	ldr	r2, [pc, #172]	; (8101378 <main+0xbc>)
 81012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d2:	4b29      	ldr	r3, [pc, #164]	; (8101378 <main+0xbc>)
 81012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81012dc:	607b      	str	r3, [r7, #4]
 81012de:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81012e0:	2001      	movs	r0, #1
 81012e2:	f001 fb71 	bl	81029c8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81012e6:	f001 fbfb 	bl	8102ae0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2102      	movs	r1, #2
 81012ee:	2000      	movs	r0, #0
 81012f0:	f001 fb7c 	bl	81029ec <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81012f4:	4b21      	ldr	r3, [pc, #132]	; (810137c <main+0xc0>)
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	091b      	lsrs	r3, r3, #4
 81012fa:	f003 030f 	and.w	r3, r3, #15
 81012fe:	2b07      	cmp	r3, #7
 8101300:	d108      	bne.n	8101314 <main+0x58>
 8101302:	4b1f      	ldr	r3, [pc, #124]	; (8101380 <main+0xc4>)
 8101304:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101308:	4a1d      	ldr	r2, [pc, #116]	; (8101380 <main+0xc4>)
 810130a:	f043 0301 	orr.w	r3, r3, #1
 810130e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101312:	e007      	b.n	8101324 <main+0x68>
 8101314:	4b1a      	ldr	r3, [pc, #104]	; (8101380 <main+0xc4>)
 8101316:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810131a:	4a19      	ldr	r2, [pc, #100]	; (8101380 <main+0xc4>)
 810131c:	f043 0301 	orr.w	r3, r3, #1
 8101320:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101324:	f000 fa14 	bl	8101750 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101328:	f000 f87e 	bl	8101428 <MX_GPIO_Init>
  MX_UART7_Init();
 810132c:	f000 f830 	bl	8101390 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
	char pData4[]="CM4 START\r\n";
 8101330:	4a14      	ldr	r2, [pc, #80]	; (8101384 <main+0xc8>)
 8101332:	f107 0314 	add.w	r3, r7, #20
 8101336:	ca07      	ldmia	r2, {r0, r1, r2}
 8101338:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t *)pData4, 11, 0xffff);
 810133c:	f107 0114 	add.w	r1, r7, #20
 8101340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101344:	220b      	movs	r2, #11
 8101346:	4810      	ldr	r0, [pc, #64]	; (8101388 <main+0xcc>)
 8101348:	f003 f962 	bl	8104610 <HAL_UART_Transmit>

  ESP_Init();
 810134c:	f7ff f9c8 	bl	81006e0 <ESP_Init>
	char pData5[]="init end\r\n";
 8101350:	4a0e      	ldr	r2, [pc, #56]	; (810138c <main+0xd0>)
 8101352:	f107 0308 	add.w	r3, r7, #8
 8101356:	ca07      	ldmia	r2, {r0, r1, r2}
 8101358:	c303      	stmia	r3!, {r0, r1}
 810135a:	801a      	strh	r2, [r3, #0]
 810135c:	3302      	adds	r3, #2
 810135e:	0c12      	lsrs	r2, r2, #16
 8101360:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)pData5, 11, 0xffff);
 8101362:	f107 0108 	add.w	r1, r7, #8
 8101366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810136a:	220b      	movs	r2, #11
 810136c:	4806      	ldr	r0, [pc, #24]	; (8101388 <main+0xcc>)
 810136e:	f003 f94f 	bl	8104610 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  Server_Start();
 8101372:	f7ff fc57 	bl	8100c24 <Server_Start>
 8101376:	e7fc      	b.n	8101372 <main+0xb6>
 8101378:	58024400 	.word	0x58024400
 810137c:	e000ed00 	.word	0xe000ed00
 8101380:	58026400 	.word	0x58026400
 8101384:	08107070 	.word	0x08107070
 8101388:	10000964 	.word	0x10000964
 810138c:	0810707c 	.word	0x0810707c

08101390 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8101394:	4b22      	ldr	r3, [pc, #136]	; (8101420 <MX_UART7_Init+0x90>)
 8101396:	4a23      	ldr	r2, [pc, #140]	; (8101424 <MX_UART7_Init+0x94>)
 8101398:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 810139a:	4b21      	ldr	r3, [pc, #132]	; (8101420 <MX_UART7_Init+0x90>)
 810139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81013a0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 81013a2:	4b1f      	ldr	r3, [pc, #124]	; (8101420 <MX_UART7_Init+0x90>)
 81013a4:	2200      	movs	r2, #0
 81013a6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 81013a8:	4b1d      	ldr	r3, [pc, #116]	; (8101420 <MX_UART7_Init+0x90>)
 81013aa:	2200      	movs	r2, #0
 81013ac:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 81013ae:	4b1c      	ldr	r3, [pc, #112]	; (8101420 <MX_UART7_Init+0x90>)
 81013b0:	2200      	movs	r2, #0
 81013b2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 81013b4:	4b1a      	ldr	r3, [pc, #104]	; (8101420 <MX_UART7_Init+0x90>)
 81013b6:	220c      	movs	r2, #12
 81013b8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81013ba:	4b19      	ldr	r3, [pc, #100]	; (8101420 <MX_UART7_Init+0x90>)
 81013bc:	2200      	movs	r2, #0
 81013be:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 81013c0:	4b17      	ldr	r3, [pc, #92]	; (8101420 <MX_UART7_Init+0x90>)
 81013c2:	2200      	movs	r2, #0
 81013c4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81013c6:	4b16      	ldr	r3, [pc, #88]	; (8101420 <MX_UART7_Init+0x90>)
 81013c8:	2200      	movs	r2, #0
 81013ca:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81013cc:	4b14      	ldr	r3, [pc, #80]	; (8101420 <MX_UART7_Init+0x90>)
 81013ce:	2200      	movs	r2, #0
 81013d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81013d2:	4b13      	ldr	r3, [pc, #76]	; (8101420 <MX_UART7_Init+0x90>)
 81013d4:	2200      	movs	r2, #0
 81013d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 81013d8:	4811      	ldr	r0, [pc, #68]	; (8101420 <MX_UART7_Init+0x90>)
 81013da:	f003 f8c9 	bl	8104570 <HAL_UART_Init>
 81013de:	4603      	mov	r3, r0
 81013e0:	2b00      	cmp	r3, #0
 81013e2:	d001      	beq.n	81013e8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 81013e4:	f000 f86c 	bl	81014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81013e8:	2100      	movs	r1, #0
 81013ea:	480d      	ldr	r0, [pc, #52]	; (8101420 <MX_UART7_Init+0x90>)
 81013ec:	f004 fd77 	bl	8105ede <HAL_UARTEx_SetTxFifoThreshold>
 81013f0:	4603      	mov	r3, r0
 81013f2:	2b00      	cmp	r3, #0
 81013f4:	d001      	beq.n	81013fa <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 81013f6:	f000 f863 	bl	81014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81013fa:	2100      	movs	r1, #0
 81013fc:	4808      	ldr	r0, [pc, #32]	; (8101420 <MX_UART7_Init+0x90>)
 81013fe:	f004 fdac 	bl	8105f5a <HAL_UARTEx_SetRxFifoThreshold>
 8101402:	4603      	mov	r3, r0
 8101404:	2b00      	cmp	r3, #0
 8101406:	d001      	beq.n	810140c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8101408:	f000 f85a 	bl	81014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 810140c:	4804      	ldr	r0, [pc, #16]	; (8101420 <MX_UART7_Init+0x90>)
 810140e:	f004 fd2d 	bl	8105e6c <HAL_UARTEx_DisableFifoMode>
 8101412:	4603      	mov	r3, r0
 8101414:	2b00      	cmp	r3, #0
 8101416:	d001      	beq.n	810141c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8101418:	f000 f852 	bl	81014c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 810141c:	bf00      	nop
 810141e:	bd80      	pop	{r7, pc}
 8101420:	100008d4 	.word	0x100008d4
 8101424:	40007800 	.word	0x40007800

08101428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101428:	b580      	push	{r7, lr}
 810142a:	b088      	sub	sp, #32
 810142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810142e:	f107 030c 	add.w	r3, r7, #12
 8101432:	2200      	movs	r2, #0
 8101434:	601a      	str	r2, [r3, #0]
 8101436:	605a      	str	r2, [r3, #4]
 8101438:	609a      	str	r2, [r3, #8]
 810143a:	60da      	str	r2, [r3, #12]
 810143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810143e:	4b1e      	ldr	r3, [pc, #120]	; (81014b8 <MX_GPIO_Init+0x90>)
 8101440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101444:	4a1c      	ldr	r2, [pc, #112]	; (81014b8 <MX_GPIO_Init+0x90>)
 8101446:	f043 0320 	orr.w	r3, r3, #32
 810144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810144e:	4b1a      	ldr	r3, [pc, #104]	; (81014b8 <MX_GPIO_Init+0x90>)
 8101450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101454:	f003 0320 	and.w	r3, r3, #32
 8101458:	60bb      	str	r3, [r7, #8]
 810145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810145c:	4b16      	ldr	r3, [pc, #88]	; (81014b8 <MX_GPIO_Init+0x90>)
 810145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101462:	4a15      	ldr	r2, [pc, #84]	; (81014b8 <MX_GPIO_Init+0x90>)
 8101464:	f043 0302 	orr.w	r3, r3, #2
 8101468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810146c:	4b12      	ldr	r3, [pc, #72]	; (81014b8 <MX_GPIO_Init+0x90>)
 810146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101472:	f003 0302 	and.w	r3, r3, #2
 8101476:	607b      	str	r3, [r7, #4]
 8101478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 810147a:	2200      	movs	r2, #0
 810147c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101480:	480e      	ldr	r0, [pc, #56]	; (81014bc <MX_GPIO_Init+0x94>)
 8101482:	f001 fa4f 	bl	8102924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8101486:	2201      	movs	r2, #1
 8101488:	f44f 7180 	mov.w	r1, #256	; 0x100
 810148c:	480b      	ldr	r0, [pc, #44]	; (81014bc <MX_GPIO_Init+0x94>)
 810148e:	f001 fa49 	bl	8102924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8101492:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8101496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101498:	2301      	movs	r3, #1
 810149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810149c:	2300      	movs	r3, #0
 810149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014a0:	2300      	movs	r3, #0
 81014a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014a4:	f107 030c 	add.w	r3, r7, #12
 81014a8:	4619      	mov	r1, r3
 81014aa:	4804      	ldr	r0, [pc, #16]	; (81014bc <MX_GPIO_Init+0x94>)
 81014ac:	f001 f88a 	bl	81025c4 <HAL_GPIO_Init>

}
 81014b0:	bf00      	nop
 81014b2:	3720      	adds	r7, #32
 81014b4:	46bd      	mov	sp, r7
 81014b6:	bd80      	pop	{r7, pc}
 81014b8:	58024400 	.word	0x58024400
 81014bc:	58020400 	.word	0x58020400

081014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014c0:	b480      	push	{r7}
 81014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81014c4:	b672      	cpsid	i
}
 81014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81014c8:	e7fe      	b.n	81014c8 <Error_Handler+0x8>
	...

081014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014cc:	b480      	push	{r7}
 81014ce:	b083      	sub	sp, #12
 81014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014d2:	4b0a      	ldr	r3, [pc, #40]	; (81014fc <HAL_MspInit+0x30>)
 81014d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014d8:	4a08      	ldr	r2, [pc, #32]	; (81014fc <HAL_MspInit+0x30>)
 81014da:	f043 0302 	orr.w	r3, r3, #2
 81014de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014e2:	4b06      	ldr	r3, [pc, #24]	; (81014fc <HAL_MspInit+0x30>)
 81014e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014e8:	f003 0302 	and.w	r3, r3, #2
 81014ec:	607b      	str	r3, [r7, #4]
 81014ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81014f0:	bf00      	nop
 81014f2:	370c      	adds	r7, #12
 81014f4:	46bd      	mov	sp, r7
 81014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014fa:	4770      	bx	lr
 81014fc:	58024400 	.word	0x58024400

08101500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101500:	b580      	push	{r7, lr}
 8101502:	b0ba      	sub	sp, #232	; 0xe8
 8101504:	af00      	add	r7, sp, #0
 8101506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101508:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810150c:	2200      	movs	r2, #0
 810150e:	601a      	str	r2, [r3, #0]
 8101510:	605a      	str	r2, [r3, #4]
 8101512:	609a      	str	r2, [r3, #8]
 8101514:	60da      	str	r2, [r3, #12]
 8101516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101518:	f107 0318 	add.w	r3, r7, #24
 810151c:	22bc      	movs	r2, #188	; 0xbc
 810151e:	2100      	movs	r1, #0
 8101520:	4618      	mov	r0, r3
 8101522:	f004 fddf 	bl	81060e4 <memset>
  if(huart->Instance==UART7)
 8101526:	687b      	ldr	r3, [r7, #4]
 8101528:	681b      	ldr	r3, [r3, #0]
 810152a:	4a3a      	ldr	r2, [pc, #232]	; (8101614 <HAL_UART_MspInit+0x114>)
 810152c:	4293      	cmp	r3, r2
 810152e:	d14a      	bne.n	81015c6 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8101530:	2302      	movs	r3, #2
 8101532:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101534:	2300      	movs	r3, #0
 8101536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810153a:	f107 0318 	add.w	r3, r7, #24
 810153e:	4618      	mov	r0, r3
 8101540:	f001 fcb4 	bl	8102eac <HAL_RCCEx_PeriphCLKConfig>
 8101544:	4603      	mov	r3, r0
 8101546:	2b00      	cmp	r3, #0
 8101548:	d001      	beq.n	810154e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810154a:	f7ff ffb9 	bl	81014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 810154e:	4b32      	ldr	r3, [pc, #200]	; (8101618 <HAL_UART_MspInit+0x118>)
 8101550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101554:	4a30      	ldr	r2, [pc, #192]	; (8101618 <HAL_UART_MspInit+0x118>)
 8101556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810155a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810155e:	4b2e      	ldr	r3, [pc, #184]	; (8101618 <HAL_UART_MspInit+0x118>)
 8101560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8101568:	617b      	str	r3, [r7, #20]
 810156a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 810156c:	4b2a      	ldr	r3, [pc, #168]	; (8101618 <HAL_UART_MspInit+0x118>)
 810156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101572:	4a29      	ldr	r2, [pc, #164]	; (8101618 <HAL_UART_MspInit+0x118>)
 8101574:	f043 0320 	orr.w	r3, r3, #32
 8101578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810157c:	4b26      	ldr	r3, [pc, #152]	; (8101618 <HAL_UART_MspInit+0x118>)
 810157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101582:	f003 0320 	and.w	r3, r3, #32
 8101586:	613b      	str	r3, [r7, #16]
 8101588:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810158a:	23c0      	movs	r3, #192	; 0xc0
 810158c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101590:	2302      	movs	r3, #2
 8101592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101596:	2300      	movs	r3, #0
 8101598:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810159c:	2300      	movs	r3, #0
 810159e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 81015a2:	2307      	movs	r3, #7
 81015a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81015a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015ac:	4619      	mov	r1, r3
 81015ae:	481b      	ldr	r0, [pc, #108]	; (810161c <HAL_UART_MspInit+0x11c>)
 81015b0:	f001 f808 	bl	81025c4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 81015b4:	2200      	movs	r2, #0
 81015b6:	2100      	movs	r1, #0
 81015b8:	2052      	movs	r0, #82	; 0x52
 81015ba:	f000 fa58 	bl	8101a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 81015be:	2052      	movs	r0, #82	; 0x52
 81015c0:	f000 fa6f 	bl	8101aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81015c4:	e022      	b.n	810160c <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 81015c6:	687b      	ldr	r3, [r7, #4]
 81015c8:	681b      	ldr	r3, [r3, #0]
 81015ca:	4a15      	ldr	r2, [pc, #84]	; (8101620 <HAL_UART_MspInit+0x120>)
 81015cc:	4293      	cmp	r3, r2
 81015ce:	d11d      	bne.n	810160c <HAL_UART_MspInit+0x10c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81015d0:	2302      	movs	r3, #2
 81015d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81015d4:	2300      	movs	r3, #0
 81015d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015da:	f107 0318 	add.w	r3, r7, #24
 81015de:	4618      	mov	r0, r3
 81015e0:	f001 fc64 	bl	8102eac <HAL_RCCEx_PeriphCLKConfig>
 81015e4:	4603      	mov	r3, r0
 81015e6:	2b00      	cmp	r3, #0
 81015e8:	d001      	beq.n	81015ee <HAL_UART_MspInit+0xee>
      Error_Handler();
 81015ea:	f7ff ff69 	bl	81014c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81015ee:	4b0a      	ldr	r3, [pc, #40]	; (8101618 <HAL_UART_MspInit+0x118>)
 81015f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015f4:	4a08      	ldr	r2, [pc, #32]	; (8101618 <HAL_UART_MspInit+0x118>)
 81015f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81015fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015fe:	4b06      	ldr	r3, [pc, #24]	; (8101618 <HAL_UART_MspInit+0x118>)
 8101600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101608:	60fb      	str	r3, [r7, #12]
 810160a:	68fb      	ldr	r3, [r7, #12]
}
 810160c:	bf00      	nop
 810160e:	37e8      	adds	r7, #232	; 0xe8
 8101610:	46bd      	mov	sp, r7
 8101612:	bd80      	pop	{r7, pc}
 8101614:	40007800 	.word	0x40007800
 8101618:	58024400 	.word	0x58024400
 810161c:	58021400 	.word	0x58021400
 8101620:	40004800 	.word	0x40004800

08101624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101624:	b480      	push	{r7}
 8101626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101628:	e7fe      	b.n	8101628 <NMI_Handler+0x4>

0810162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810162a:	b480      	push	{r7}
 810162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810162e:	e7fe      	b.n	810162e <HardFault_Handler+0x4>

08101630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101630:	b480      	push	{r7}
 8101632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101634:	e7fe      	b.n	8101634 <MemManage_Handler+0x4>

08101636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101636:	b480      	push	{r7}
 8101638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810163a:	e7fe      	b.n	810163a <BusFault_Handler+0x4>

0810163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810163c:	b480      	push	{r7}
 810163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101640:	e7fe      	b.n	8101640 <UsageFault_Handler+0x4>

08101642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101642:	b480      	push	{r7}
 8101644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101646:	bf00      	nop
 8101648:	46bd      	mov	sp, r7
 810164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810164e:	4770      	bx	lr

08101650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101650:	b480      	push	{r7}
 8101652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101654:	bf00      	nop
 8101656:	46bd      	mov	sp, r7
 8101658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810165c:	4770      	bx	lr

0810165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810165e:	b480      	push	{r7}
 8101660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101662:	bf00      	nop
 8101664:	46bd      	mov	sp, r7
 8101666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166a:	4770      	bx	lr

0810166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810166c:	b580      	push	{r7, lr}
 810166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101670:	f000 f902 	bl	8101878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101674:	bf00      	nop
 8101676:	bd80      	pop	{r7, pc}

08101678 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8101678:	b580      	push	{r7, lr}
 810167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
  Uart_isr(&huart7);
 810167c:	4803      	ldr	r0, [pc, #12]	; (810168c <UART7_IRQHandler+0x14>)
 810167e:	f7ff fdb1 	bl	81011e4 <Uart_isr>

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8101682:	4802      	ldr	r0, [pc, #8]	; (810168c <UART7_IRQHandler+0x14>)
 8101684:	f003 f85a 	bl	810473c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8101688:	bf00      	nop
 810168a:	bd80      	pop	{r7, pc}
 810168c:	100008d4 	.word	0x100008d4

08101690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101690:	b580      	push	{r7, lr}
 8101692:	b086      	sub	sp, #24
 8101694:	af00      	add	r7, sp, #0
 8101696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101698:	4a14      	ldr	r2, [pc, #80]	; (81016ec <_sbrk+0x5c>)
 810169a:	4b15      	ldr	r3, [pc, #84]	; (81016f0 <_sbrk+0x60>)
 810169c:	1ad3      	subs	r3, r2, r3
 810169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81016a0:	697b      	ldr	r3, [r7, #20]
 81016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81016a4:	4b13      	ldr	r3, [pc, #76]	; (81016f4 <_sbrk+0x64>)
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	2b00      	cmp	r3, #0
 81016aa:	d102      	bne.n	81016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81016ac:	4b11      	ldr	r3, [pc, #68]	; (81016f4 <_sbrk+0x64>)
 81016ae:	4a12      	ldr	r2, [pc, #72]	; (81016f8 <_sbrk+0x68>)
 81016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81016b2:	4b10      	ldr	r3, [pc, #64]	; (81016f4 <_sbrk+0x64>)
 81016b4:	681a      	ldr	r2, [r3, #0]
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	4413      	add	r3, r2
 81016ba:	693a      	ldr	r2, [r7, #16]
 81016bc:	429a      	cmp	r2, r3
 81016be:	d207      	bcs.n	81016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81016c0:	f004 fcd8 	bl	8106074 <__errno>
 81016c4:	4603      	mov	r3, r0
 81016c6:	220c      	movs	r2, #12
 81016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81016ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81016ce:	e009      	b.n	81016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81016d0:	4b08      	ldr	r3, [pc, #32]	; (81016f4 <_sbrk+0x64>)
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81016d6:	4b07      	ldr	r3, [pc, #28]	; (81016f4 <_sbrk+0x64>)
 81016d8:	681a      	ldr	r2, [r3, #0]
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	4413      	add	r3, r2
 81016de:	4a05      	ldr	r2, [pc, #20]	; (81016f4 <_sbrk+0x64>)
 81016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81016e2:	68fb      	ldr	r3, [r7, #12]
}
 81016e4:	4618      	mov	r0, r3
 81016e6:	3718      	adds	r7, #24
 81016e8:	46bd      	mov	sp, r7
 81016ea:	bd80      	pop	{r7, pc}
 81016ec:	10048000 	.word	0x10048000
 81016f0:	00000400 	.word	0x00000400
 81016f4:	100008b8 	.word	0x100008b8
 81016f8:	10000a08 	.word	0x10000a08

081016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101700:	f7fe ffd2 	bl	81006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101704:	480c      	ldr	r0, [pc, #48]	; (8101738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101706:	490d      	ldr	r1, [pc, #52]	; (810173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101708:	4a0d      	ldr	r2, [pc, #52]	; (8101740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810170c:	e002      	b.n	8101714 <LoopCopyDataInit>

0810170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101712:	3304      	adds	r3, #4

08101714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101718:	d3f9      	bcc.n	810170e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810171a:	4a0a      	ldr	r2, [pc, #40]	; (8101744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810171c:	4c0a      	ldr	r4, [pc, #40]	; (8101748 <LoopFillZerobss+0x22>)
  movs r3, #0
 810171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101720:	e001      	b.n	8101726 <LoopFillZerobss>

08101722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101724:	3204      	adds	r2, #4

08101726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101728:	d3fb      	bcc.n	8101722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810172a:	f004 fca9 	bl	8106080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810172e:	f7ff fdc5 	bl	81012bc <main>
  bx  lr
 8101732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101734:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101738:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810173c:	1000007c 	.word	0x1000007c
  ldr r2, =_sidata
 8101740:	08107108 	.word	0x08107108
  ldr r2, =_sbss
 8101744:	1000007c 	.word	0x1000007c
  ldr r4, =_ebss
 8101748:	10000a08 	.word	0x10000a08

0810174c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810174c:	e7fe      	b.n	810174c <ADC3_IRQHandler>
	...

08101750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101750:	b580      	push	{r7, lr}
 8101752:	b082      	sub	sp, #8
 8101754:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101756:	4b28      	ldr	r3, [pc, #160]	; (81017f8 <HAL_Init+0xa8>)
 8101758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810175c:	4a26      	ldr	r2, [pc, #152]	; (81017f8 <HAL_Init+0xa8>)
 810175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101762:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101766:	4b24      	ldr	r3, [pc, #144]	; (81017f8 <HAL_Init+0xa8>)
 8101768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810176c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101770:	603b      	str	r3, [r7, #0]
 8101772:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101774:	4b21      	ldr	r3, [pc, #132]	; (81017fc <HAL_Init+0xac>)
 8101776:	681b      	ldr	r3, [r3, #0]
 8101778:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810177c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101780:	4a1e      	ldr	r2, [pc, #120]	; (81017fc <HAL_Init+0xac>)
 8101782:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101786:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101788:	4b1c      	ldr	r3, [pc, #112]	; (81017fc <HAL_Init+0xac>)
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	4a1b      	ldr	r2, [pc, #108]	; (81017fc <HAL_Init+0xac>)
 810178e:	f043 0301 	orr.w	r3, r3, #1
 8101792:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101794:	2003      	movs	r0, #3
 8101796:	f000 f95f 	bl	8101a58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810179a:	f001 f9af 	bl	8102afc <HAL_RCC_GetSysClockFreq>
 810179e:	4602      	mov	r2, r0
 81017a0:	4b15      	ldr	r3, [pc, #84]	; (81017f8 <HAL_Init+0xa8>)
 81017a2:	699b      	ldr	r3, [r3, #24]
 81017a4:	0a1b      	lsrs	r3, r3, #8
 81017a6:	f003 030f 	and.w	r3, r3, #15
 81017aa:	4915      	ldr	r1, [pc, #84]	; (8101800 <HAL_Init+0xb0>)
 81017ac:	5ccb      	ldrb	r3, [r1, r3]
 81017ae:	f003 031f 	and.w	r3, r3, #31
 81017b2:	fa22 f303 	lsr.w	r3, r2, r3
 81017b6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81017b8:	4b0f      	ldr	r3, [pc, #60]	; (81017f8 <HAL_Init+0xa8>)
 81017ba:	699b      	ldr	r3, [r3, #24]
 81017bc:	f003 030f 	and.w	r3, r3, #15
 81017c0:	4a0f      	ldr	r2, [pc, #60]	; (8101800 <HAL_Init+0xb0>)
 81017c2:	5cd3      	ldrb	r3, [r2, r3]
 81017c4:	f003 031f 	and.w	r3, r3, #31
 81017c8:	687a      	ldr	r2, [r7, #4]
 81017ca:	fa22 f303 	lsr.w	r3, r2, r3
 81017ce:	4a0d      	ldr	r2, [pc, #52]	; (8101804 <HAL_Init+0xb4>)
 81017d0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017d2:	4b0c      	ldr	r3, [pc, #48]	; (8101804 <HAL_Init+0xb4>)
 81017d4:	681b      	ldr	r3, [r3, #0]
 81017d6:	4a0c      	ldr	r2, [pc, #48]	; (8101808 <HAL_Init+0xb8>)
 81017d8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81017da:	2000      	movs	r0, #0
 81017dc:	f000 f816 	bl	810180c <HAL_InitTick>
 81017e0:	4603      	mov	r3, r0
 81017e2:	2b00      	cmp	r3, #0
 81017e4:	d001      	beq.n	81017ea <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81017e6:	2301      	movs	r3, #1
 81017e8:	e002      	b.n	81017f0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81017ea:	f7ff fe6f 	bl	81014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81017ee:	2300      	movs	r3, #0
}
 81017f0:	4618      	mov	r0, r3
 81017f2:	3708      	adds	r7, #8
 81017f4:	46bd      	mov	sp, r7
 81017f6:	bd80      	pop	{r7, pc}
 81017f8:	58024400 	.word	0x58024400
 81017fc:	40024400 	.word	0x40024400
 8101800:	08107088 	.word	0x08107088
 8101804:	10000004 	.word	0x10000004
 8101808:	10000000 	.word	0x10000000

0810180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810180c:	b580      	push	{r7, lr}
 810180e:	b082      	sub	sp, #8
 8101810:	af00      	add	r7, sp, #0
 8101812:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101814:	4b15      	ldr	r3, [pc, #84]	; (810186c <HAL_InitTick+0x60>)
 8101816:	781b      	ldrb	r3, [r3, #0]
 8101818:	2b00      	cmp	r3, #0
 810181a:	d101      	bne.n	8101820 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810181c:	2301      	movs	r3, #1
 810181e:	e021      	b.n	8101864 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101820:	4b13      	ldr	r3, [pc, #76]	; (8101870 <HAL_InitTick+0x64>)
 8101822:	681a      	ldr	r2, [r3, #0]
 8101824:	4b11      	ldr	r3, [pc, #68]	; (810186c <HAL_InitTick+0x60>)
 8101826:	781b      	ldrb	r3, [r3, #0]
 8101828:	4619      	mov	r1, r3
 810182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101832:	fbb2 f3f3 	udiv	r3, r2, r3
 8101836:	4618      	mov	r0, r3
 8101838:	f000 f941 	bl	8101abe <HAL_SYSTICK_Config>
 810183c:	4603      	mov	r3, r0
 810183e:	2b00      	cmp	r3, #0
 8101840:	d001      	beq.n	8101846 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101842:	2301      	movs	r3, #1
 8101844:	e00e      	b.n	8101864 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	2b0f      	cmp	r3, #15
 810184a:	d80a      	bhi.n	8101862 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810184c:	2200      	movs	r2, #0
 810184e:	6879      	ldr	r1, [r7, #4]
 8101850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8101854:	f000 f90b 	bl	8101a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101858:	4a06      	ldr	r2, [pc, #24]	; (8101874 <HAL_InitTick+0x68>)
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810185e:	2300      	movs	r3, #0
 8101860:	e000      	b.n	8101864 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101862:	2301      	movs	r3, #1
}
 8101864:	4618      	mov	r0, r3
 8101866:	3708      	adds	r7, #8
 8101868:	46bd      	mov	sp, r7
 810186a:	bd80      	pop	{r7, pc}
 810186c:	10000014 	.word	0x10000014
 8101870:	10000000 	.word	0x10000000
 8101874:	10000010 	.word	0x10000010

08101878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101878:	b480      	push	{r7}
 810187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810187c:	4b06      	ldr	r3, [pc, #24]	; (8101898 <HAL_IncTick+0x20>)
 810187e:	781b      	ldrb	r3, [r3, #0]
 8101880:	461a      	mov	r2, r3
 8101882:	4b06      	ldr	r3, [pc, #24]	; (810189c <HAL_IncTick+0x24>)
 8101884:	681b      	ldr	r3, [r3, #0]
 8101886:	4413      	add	r3, r2
 8101888:	4a04      	ldr	r2, [pc, #16]	; (810189c <HAL_IncTick+0x24>)
 810188a:	6013      	str	r3, [r2, #0]
}
 810188c:	bf00      	nop
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
 8101896:	bf00      	nop
 8101898:	10000014 	.word	0x10000014
 810189c:	100009f4 	.word	0x100009f4

081018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81018a0:	b480      	push	{r7}
 81018a2:	af00      	add	r7, sp, #0
  return uwTick;
 81018a4:	4b03      	ldr	r3, [pc, #12]	; (81018b4 <HAL_GetTick+0x14>)
 81018a6:	681b      	ldr	r3, [r3, #0]
}
 81018a8:	4618      	mov	r0, r3
 81018aa:	46bd      	mov	sp, r7
 81018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b0:	4770      	bx	lr
 81018b2:	bf00      	nop
 81018b4:	100009f4 	.word	0x100009f4

081018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81018b8:	b480      	push	{r7}
 81018ba:	b085      	sub	sp, #20
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	f003 0307 	and.w	r3, r3, #7
 81018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81018c8:	4b0c      	ldr	r3, [pc, #48]	; (81018fc <__NVIC_SetPriorityGrouping+0x44>)
 81018ca:	68db      	ldr	r3, [r3, #12]
 81018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81018ce:	68ba      	ldr	r2, [r7, #8]
 81018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81018d4:	4013      	ands	r3, r2
 81018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81018d8:	68fb      	ldr	r3, [r7, #12]
 81018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81018dc:	68bb      	ldr	r3, [r7, #8]
 81018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81018ea:	4a04      	ldr	r2, [pc, #16]	; (81018fc <__NVIC_SetPriorityGrouping+0x44>)
 81018ec:	68bb      	ldr	r3, [r7, #8]
 81018ee:	60d3      	str	r3, [r2, #12]
}
 81018f0:	bf00      	nop
 81018f2:	3714      	adds	r7, #20
 81018f4:	46bd      	mov	sp, r7
 81018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018fa:	4770      	bx	lr
 81018fc:	e000ed00 	.word	0xe000ed00

08101900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101900:	b480      	push	{r7}
 8101902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101904:	4b04      	ldr	r3, [pc, #16]	; (8101918 <__NVIC_GetPriorityGrouping+0x18>)
 8101906:	68db      	ldr	r3, [r3, #12]
 8101908:	0a1b      	lsrs	r3, r3, #8
 810190a:	f003 0307 	and.w	r3, r3, #7
}
 810190e:	4618      	mov	r0, r3
 8101910:	46bd      	mov	sp, r7
 8101912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101916:	4770      	bx	lr
 8101918:	e000ed00 	.word	0xe000ed00

0810191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810191c:	b480      	push	{r7}
 810191e:	b083      	sub	sp, #12
 8101920:	af00      	add	r7, sp, #0
 8101922:	4603      	mov	r3, r0
 8101924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810192a:	2b00      	cmp	r3, #0
 810192c:	db0b      	blt.n	8101946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810192e:	88fb      	ldrh	r3, [r7, #6]
 8101930:	f003 021f 	and.w	r2, r3, #31
 8101934:	4907      	ldr	r1, [pc, #28]	; (8101954 <__NVIC_EnableIRQ+0x38>)
 8101936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810193a:	095b      	lsrs	r3, r3, #5
 810193c:	2001      	movs	r0, #1
 810193e:	fa00 f202 	lsl.w	r2, r0, r2
 8101942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101946:	bf00      	nop
 8101948:	370c      	adds	r7, #12
 810194a:	46bd      	mov	sp, r7
 810194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101950:	4770      	bx	lr
 8101952:	bf00      	nop
 8101954:	e000e100 	.word	0xe000e100

08101958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101958:	b480      	push	{r7}
 810195a:	b083      	sub	sp, #12
 810195c:	af00      	add	r7, sp, #0
 810195e:	4603      	mov	r3, r0
 8101960:	6039      	str	r1, [r7, #0]
 8101962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101968:	2b00      	cmp	r3, #0
 810196a:	db0a      	blt.n	8101982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810196c:	683b      	ldr	r3, [r7, #0]
 810196e:	b2da      	uxtb	r2, r3
 8101970:	490c      	ldr	r1, [pc, #48]	; (81019a4 <__NVIC_SetPriority+0x4c>)
 8101972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101976:	0112      	lsls	r2, r2, #4
 8101978:	b2d2      	uxtb	r2, r2
 810197a:	440b      	add	r3, r1
 810197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101980:	e00a      	b.n	8101998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101982:	683b      	ldr	r3, [r7, #0]
 8101984:	b2da      	uxtb	r2, r3
 8101986:	4908      	ldr	r1, [pc, #32]	; (81019a8 <__NVIC_SetPriority+0x50>)
 8101988:	88fb      	ldrh	r3, [r7, #6]
 810198a:	f003 030f 	and.w	r3, r3, #15
 810198e:	3b04      	subs	r3, #4
 8101990:	0112      	lsls	r2, r2, #4
 8101992:	b2d2      	uxtb	r2, r2
 8101994:	440b      	add	r3, r1
 8101996:	761a      	strb	r2, [r3, #24]
}
 8101998:	bf00      	nop
 810199a:	370c      	adds	r7, #12
 810199c:	46bd      	mov	sp, r7
 810199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019a2:	4770      	bx	lr
 81019a4:	e000e100 	.word	0xe000e100
 81019a8:	e000ed00 	.word	0xe000ed00

081019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81019ac:	b480      	push	{r7}
 81019ae:	b089      	sub	sp, #36	; 0x24
 81019b0:	af00      	add	r7, sp, #0
 81019b2:	60f8      	str	r0, [r7, #12]
 81019b4:	60b9      	str	r1, [r7, #8]
 81019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81019b8:	68fb      	ldr	r3, [r7, #12]
 81019ba:	f003 0307 	and.w	r3, r3, #7
 81019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81019c0:	69fb      	ldr	r3, [r7, #28]
 81019c2:	f1c3 0307 	rsb	r3, r3, #7
 81019c6:	2b04      	cmp	r3, #4
 81019c8:	bf28      	it	cs
 81019ca:	2304      	movcs	r3, #4
 81019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81019ce:	69fb      	ldr	r3, [r7, #28]
 81019d0:	3304      	adds	r3, #4
 81019d2:	2b06      	cmp	r3, #6
 81019d4:	d902      	bls.n	81019dc <NVIC_EncodePriority+0x30>
 81019d6:	69fb      	ldr	r3, [r7, #28]
 81019d8:	3b03      	subs	r3, #3
 81019da:	e000      	b.n	81019de <NVIC_EncodePriority+0x32>
 81019dc:	2300      	movs	r3, #0
 81019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81019e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81019e4:	69bb      	ldr	r3, [r7, #24]
 81019e6:	fa02 f303 	lsl.w	r3, r2, r3
 81019ea:	43da      	mvns	r2, r3
 81019ec:	68bb      	ldr	r3, [r7, #8]
 81019ee:	401a      	ands	r2, r3
 81019f0:	697b      	ldr	r3, [r7, #20]
 81019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81019f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81019f8:	697b      	ldr	r3, [r7, #20]
 81019fa:	fa01 f303 	lsl.w	r3, r1, r3
 81019fe:	43d9      	mvns	r1, r3
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a04:	4313      	orrs	r3, r2
         );
}
 8101a06:	4618      	mov	r0, r3
 8101a08:	3724      	adds	r7, #36	; 0x24
 8101a0a:	46bd      	mov	sp, r7
 8101a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a10:	4770      	bx	lr
	...

08101a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a14:	b580      	push	{r7, lr}
 8101a16:	b082      	sub	sp, #8
 8101a18:	af00      	add	r7, sp, #0
 8101a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	3b01      	subs	r3, #1
 8101a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101a24:	d301      	bcc.n	8101a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101a26:	2301      	movs	r3, #1
 8101a28:	e00f      	b.n	8101a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101a2a:	4a0a      	ldr	r2, [pc, #40]	; (8101a54 <SysTick_Config+0x40>)
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	3b01      	subs	r3, #1
 8101a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101a32:	210f      	movs	r1, #15
 8101a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8101a38:	f7ff ff8e 	bl	8101958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101a3c:	4b05      	ldr	r3, [pc, #20]	; (8101a54 <SysTick_Config+0x40>)
 8101a3e:	2200      	movs	r2, #0
 8101a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101a42:	4b04      	ldr	r3, [pc, #16]	; (8101a54 <SysTick_Config+0x40>)
 8101a44:	2207      	movs	r2, #7
 8101a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101a48:	2300      	movs	r3, #0
}
 8101a4a:	4618      	mov	r0, r3
 8101a4c:	3708      	adds	r7, #8
 8101a4e:	46bd      	mov	sp, r7
 8101a50:	bd80      	pop	{r7, pc}
 8101a52:	bf00      	nop
 8101a54:	e000e010 	.word	0xe000e010

08101a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a58:	b580      	push	{r7, lr}
 8101a5a:	b082      	sub	sp, #8
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101a60:	6878      	ldr	r0, [r7, #4]
 8101a62:	f7ff ff29 	bl	81018b8 <__NVIC_SetPriorityGrouping>
}
 8101a66:	bf00      	nop
 8101a68:	3708      	adds	r7, #8
 8101a6a:	46bd      	mov	sp, r7
 8101a6c:	bd80      	pop	{r7, pc}

08101a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a6e:	b580      	push	{r7, lr}
 8101a70:	b086      	sub	sp, #24
 8101a72:	af00      	add	r7, sp, #0
 8101a74:	4603      	mov	r3, r0
 8101a76:	60b9      	str	r1, [r7, #8]
 8101a78:	607a      	str	r2, [r7, #4]
 8101a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101a7c:	f7ff ff40 	bl	8101900 <__NVIC_GetPriorityGrouping>
 8101a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101a82:	687a      	ldr	r2, [r7, #4]
 8101a84:	68b9      	ldr	r1, [r7, #8]
 8101a86:	6978      	ldr	r0, [r7, #20]
 8101a88:	f7ff ff90 	bl	81019ac <NVIC_EncodePriority>
 8101a8c:	4602      	mov	r2, r0
 8101a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101a92:	4611      	mov	r1, r2
 8101a94:	4618      	mov	r0, r3
 8101a96:	f7ff ff5f 	bl	8101958 <__NVIC_SetPriority>
}
 8101a9a:	bf00      	nop
 8101a9c:	3718      	adds	r7, #24
 8101a9e:	46bd      	mov	sp, r7
 8101aa0:	bd80      	pop	{r7, pc}

08101aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101aa2:	b580      	push	{r7, lr}
 8101aa4:	b082      	sub	sp, #8
 8101aa6:	af00      	add	r7, sp, #0
 8101aa8:	4603      	mov	r3, r0
 8101aaa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ab0:	4618      	mov	r0, r3
 8101ab2:	f7ff ff33 	bl	810191c <__NVIC_EnableIRQ>
}
 8101ab6:	bf00      	nop
 8101ab8:	3708      	adds	r7, #8
 8101aba:	46bd      	mov	sp, r7
 8101abc:	bd80      	pop	{r7, pc}

08101abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101abe:	b580      	push	{r7, lr}
 8101ac0:	b082      	sub	sp, #8
 8101ac2:	af00      	add	r7, sp, #0
 8101ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101ac6:	6878      	ldr	r0, [r7, #4]
 8101ac8:	f7ff ffa4 	bl	8101a14 <SysTick_Config>
 8101acc:	4603      	mov	r3, r0
}
 8101ace:	4618      	mov	r0, r3
 8101ad0:	3708      	adds	r7, #8
 8101ad2:	46bd      	mov	sp, r7
 8101ad4:	bd80      	pop	{r7, pc}
	...

08101ad8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101ad8:	b480      	push	{r7}
 8101ada:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101adc:	4b07      	ldr	r3, [pc, #28]	; (8101afc <HAL_GetCurrentCPUID+0x24>)
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	091b      	lsrs	r3, r3, #4
 8101ae2:	f003 030f 	and.w	r3, r3, #15
 8101ae6:	2b07      	cmp	r3, #7
 8101ae8:	d101      	bne.n	8101aee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101aea:	2303      	movs	r3, #3
 8101aec:	e000      	b.n	8101af0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101aee:	2301      	movs	r3, #1
  }
}
 8101af0:	4618      	mov	r0, r3
 8101af2:	46bd      	mov	sp, r7
 8101af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af8:	4770      	bx	lr
 8101afa:	bf00      	nop
 8101afc:	e000ed00 	.word	0xe000ed00

08101b00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8101b00:	b580      	push	{r7, lr}
 8101b02:	b086      	sub	sp, #24
 8101b04:	af00      	add	r7, sp, #0
 8101b06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8101b08:	f7ff feca 	bl	81018a0 <HAL_GetTick>
 8101b0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	2b00      	cmp	r3, #0
 8101b12:	d101      	bne.n	8101b18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8101b14:	2301      	movs	r3, #1
 8101b16:	e2dc      	b.n	81020d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8101b1e:	b2db      	uxtb	r3, r3
 8101b20:	2b02      	cmp	r3, #2
 8101b22:	d008      	beq.n	8101b36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	2280      	movs	r2, #128	; 0x80
 8101b28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	2200      	movs	r2, #0
 8101b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8101b32:	2301      	movs	r3, #1
 8101b34:	e2cd      	b.n	81020d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	4a76      	ldr	r2, [pc, #472]	; (8101d14 <HAL_DMA_Abort+0x214>)
 8101b3c:	4293      	cmp	r3, r2
 8101b3e:	d04a      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b40:	687b      	ldr	r3, [r7, #4]
 8101b42:	681b      	ldr	r3, [r3, #0]
 8101b44:	4a74      	ldr	r2, [pc, #464]	; (8101d18 <HAL_DMA_Abort+0x218>)
 8101b46:	4293      	cmp	r3, r2
 8101b48:	d045      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b4a:	687b      	ldr	r3, [r7, #4]
 8101b4c:	681b      	ldr	r3, [r3, #0]
 8101b4e:	4a73      	ldr	r2, [pc, #460]	; (8101d1c <HAL_DMA_Abort+0x21c>)
 8101b50:	4293      	cmp	r3, r2
 8101b52:	d040      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	4a71      	ldr	r2, [pc, #452]	; (8101d20 <HAL_DMA_Abort+0x220>)
 8101b5a:	4293      	cmp	r3, r2
 8101b5c:	d03b      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	681b      	ldr	r3, [r3, #0]
 8101b62:	4a70      	ldr	r2, [pc, #448]	; (8101d24 <HAL_DMA_Abort+0x224>)
 8101b64:	4293      	cmp	r3, r2
 8101b66:	d036      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	681b      	ldr	r3, [r3, #0]
 8101b6c:	4a6e      	ldr	r2, [pc, #440]	; (8101d28 <HAL_DMA_Abort+0x228>)
 8101b6e:	4293      	cmp	r3, r2
 8101b70:	d031      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	4a6d      	ldr	r2, [pc, #436]	; (8101d2c <HAL_DMA_Abort+0x22c>)
 8101b78:	4293      	cmp	r3, r2
 8101b7a:	d02c      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	681b      	ldr	r3, [r3, #0]
 8101b80:	4a6b      	ldr	r2, [pc, #428]	; (8101d30 <HAL_DMA_Abort+0x230>)
 8101b82:	4293      	cmp	r3, r2
 8101b84:	d027      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	681b      	ldr	r3, [r3, #0]
 8101b8a:	4a6a      	ldr	r2, [pc, #424]	; (8101d34 <HAL_DMA_Abort+0x234>)
 8101b8c:	4293      	cmp	r3, r2
 8101b8e:	d022      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	4a68      	ldr	r2, [pc, #416]	; (8101d38 <HAL_DMA_Abort+0x238>)
 8101b96:	4293      	cmp	r3, r2
 8101b98:	d01d      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	4a67      	ldr	r2, [pc, #412]	; (8101d3c <HAL_DMA_Abort+0x23c>)
 8101ba0:	4293      	cmp	r3, r2
 8101ba2:	d018      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	681b      	ldr	r3, [r3, #0]
 8101ba8:	4a65      	ldr	r2, [pc, #404]	; (8101d40 <HAL_DMA_Abort+0x240>)
 8101baa:	4293      	cmp	r3, r2
 8101bac:	d013      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	4a64      	ldr	r2, [pc, #400]	; (8101d44 <HAL_DMA_Abort+0x244>)
 8101bb4:	4293      	cmp	r3, r2
 8101bb6:	d00e      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	4a62      	ldr	r2, [pc, #392]	; (8101d48 <HAL_DMA_Abort+0x248>)
 8101bbe:	4293      	cmp	r3, r2
 8101bc0:	d009      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	4a61      	ldr	r2, [pc, #388]	; (8101d4c <HAL_DMA_Abort+0x24c>)
 8101bc8:	4293      	cmp	r3, r2
 8101bca:	d004      	beq.n	8101bd6 <HAL_DMA_Abort+0xd6>
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	4a5f      	ldr	r2, [pc, #380]	; (8101d50 <HAL_DMA_Abort+0x250>)
 8101bd2:	4293      	cmp	r3, r2
 8101bd4:	d101      	bne.n	8101bda <HAL_DMA_Abort+0xda>
 8101bd6:	2301      	movs	r3, #1
 8101bd8:	e000      	b.n	8101bdc <HAL_DMA_Abort+0xdc>
 8101bda:	2300      	movs	r3, #0
 8101bdc:	2b00      	cmp	r3, #0
 8101bde:	d013      	beq.n	8101c08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	681a      	ldr	r2, [r3, #0]
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	f022 021e 	bic.w	r2, r2, #30
 8101bee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	695a      	ldr	r2, [r3, #20]
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	681b      	ldr	r3, [r3, #0]
 8101bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8101bfe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8101c00:	687b      	ldr	r3, [r7, #4]
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	617b      	str	r3, [r7, #20]
 8101c06:	e00a      	b.n	8101c1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	681a      	ldr	r2, [r3, #0]
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	f022 020e 	bic.w	r2, r2, #14
 8101c16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	681b      	ldr	r3, [r3, #0]
 8101c1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	681b      	ldr	r3, [r3, #0]
 8101c22:	4a3c      	ldr	r2, [pc, #240]	; (8101d14 <HAL_DMA_Abort+0x214>)
 8101c24:	4293      	cmp	r3, r2
 8101c26:	d072      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	4a3a      	ldr	r2, [pc, #232]	; (8101d18 <HAL_DMA_Abort+0x218>)
 8101c2e:	4293      	cmp	r3, r2
 8101c30:	d06d      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	4a39      	ldr	r2, [pc, #228]	; (8101d1c <HAL_DMA_Abort+0x21c>)
 8101c38:	4293      	cmp	r3, r2
 8101c3a:	d068      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	4a37      	ldr	r2, [pc, #220]	; (8101d20 <HAL_DMA_Abort+0x220>)
 8101c42:	4293      	cmp	r3, r2
 8101c44:	d063      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	4a36      	ldr	r2, [pc, #216]	; (8101d24 <HAL_DMA_Abort+0x224>)
 8101c4c:	4293      	cmp	r3, r2
 8101c4e:	d05e      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	681b      	ldr	r3, [r3, #0]
 8101c54:	4a34      	ldr	r2, [pc, #208]	; (8101d28 <HAL_DMA_Abort+0x228>)
 8101c56:	4293      	cmp	r3, r2
 8101c58:	d059      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	681b      	ldr	r3, [r3, #0]
 8101c5e:	4a33      	ldr	r2, [pc, #204]	; (8101d2c <HAL_DMA_Abort+0x22c>)
 8101c60:	4293      	cmp	r3, r2
 8101c62:	d054      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	4a31      	ldr	r2, [pc, #196]	; (8101d30 <HAL_DMA_Abort+0x230>)
 8101c6a:	4293      	cmp	r3, r2
 8101c6c:	d04f      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	4a30      	ldr	r2, [pc, #192]	; (8101d34 <HAL_DMA_Abort+0x234>)
 8101c74:	4293      	cmp	r3, r2
 8101c76:	d04a      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	681b      	ldr	r3, [r3, #0]
 8101c7c:	4a2e      	ldr	r2, [pc, #184]	; (8101d38 <HAL_DMA_Abort+0x238>)
 8101c7e:	4293      	cmp	r3, r2
 8101c80:	d045      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	4a2d      	ldr	r2, [pc, #180]	; (8101d3c <HAL_DMA_Abort+0x23c>)
 8101c88:	4293      	cmp	r3, r2
 8101c8a:	d040      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	4a2b      	ldr	r2, [pc, #172]	; (8101d40 <HAL_DMA_Abort+0x240>)
 8101c92:	4293      	cmp	r3, r2
 8101c94:	d03b      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	4a2a      	ldr	r2, [pc, #168]	; (8101d44 <HAL_DMA_Abort+0x244>)
 8101c9c:	4293      	cmp	r3, r2
 8101c9e:	d036      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	4a28      	ldr	r2, [pc, #160]	; (8101d48 <HAL_DMA_Abort+0x248>)
 8101ca6:	4293      	cmp	r3, r2
 8101ca8:	d031      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101caa:	687b      	ldr	r3, [r7, #4]
 8101cac:	681b      	ldr	r3, [r3, #0]
 8101cae:	4a27      	ldr	r2, [pc, #156]	; (8101d4c <HAL_DMA_Abort+0x24c>)
 8101cb0:	4293      	cmp	r3, r2
 8101cb2:	d02c      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	4a25      	ldr	r2, [pc, #148]	; (8101d50 <HAL_DMA_Abort+0x250>)
 8101cba:	4293      	cmp	r3, r2
 8101cbc:	d027      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	681b      	ldr	r3, [r3, #0]
 8101cc2:	4a24      	ldr	r2, [pc, #144]	; (8101d54 <HAL_DMA_Abort+0x254>)
 8101cc4:	4293      	cmp	r3, r2
 8101cc6:	d022      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	4a22      	ldr	r2, [pc, #136]	; (8101d58 <HAL_DMA_Abort+0x258>)
 8101cce:	4293      	cmp	r3, r2
 8101cd0:	d01d      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	681b      	ldr	r3, [r3, #0]
 8101cd6:	4a21      	ldr	r2, [pc, #132]	; (8101d5c <HAL_DMA_Abort+0x25c>)
 8101cd8:	4293      	cmp	r3, r2
 8101cda:	d018      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	4a1f      	ldr	r2, [pc, #124]	; (8101d60 <HAL_DMA_Abort+0x260>)
 8101ce2:	4293      	cmp	r3, r2
 8101ce4:	d013      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	4a1e      	ldr	r2, [pc, #120]	; (8101d64 <HAL_DMA_Abort+0x264>)
 8101cec:	4293      	cmp	r3, r2
 8101cee:	d00e      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	4a1c      	ldr	r2, [pc, #112]	; (8101d68 <HAL_DMA_Abort+0x268>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d009      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	4a1b      	ldr	r2, [pc, #108]	; (8101d6c <HAL_DMA_Abort+0x26c>)
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d004      	beq.n	8101d0e <HAL_DMA_Abort+0x20e>
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a19      	ldr	r2, [pc, #100]	; (8101d70 <HAL_DMA_Abort+0x270>)
 8101d0a:	4293      	cmp	r3, r2
 8101d0c:	d132      	bne.n	8101d74 <HAL_DMA_Abort+0x274>
 8101d0e:	2301      	movs	r3, #1
 8101d10:	e031      	b.n	8101d76 <HAL_DMA_Abort+0x276>
 8101d12:	bf00      	nop
 8101d14:	40020010 	.word	0x40020010
 8101d18:	40020028 	.word	0x40020028
 8101d1c:	40020040 	.word	0x40020040
 8101d20:	40020058 	.word	0x40020058
 8101d24:	40020070 	.word	0x40020070
 8101d28:	40020088 	.word	0x40020088
 8101d2c:	400200a0 	.word	0x400200a0
 8101d30:	400200b8 	.word	0x400200b8
 8101d34:	40020410 	.word	0x40020410
 8101d38:	40020428 	.word	0x40020428
 8101d3c:	40020440 	.word	0x40020440
 8101d40:	40020458 	.word	0x40020458
 8101d44:	40020470 	.word	0x40020470
 8101d48:	40020488 	.word	0x40020488
 8101d4c:	400204a0 	.word	0x400204a0
 8101d50:	400204b8 	.word	0x400204b8
 8101d54:	58025408 	.word	0x58025408
 8101d58:	5802541c 	.word	0x5802541c
 8101d5c:	58025430 	.word	0x58025430
 8101d60:	58025444 	.word	0x58025444
 8101d64:	58025458 	.word	0x58025458
 8101d68:	5802546c 	.word	0x5802546c
 8101d6c:	58025480 	.word	0x58025480
 8101d70:	58025494 	.word	0x58025494
 8101d74:	2300      	movs	r3, #0
 8101d76:	2b00      	cmp	r3, #0
 8101d78:	d007      	beq.n	8101d8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101d7e:	681a      	ldr	r2, [r3, #0]
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	681b      	ldr	r3, [r3, #0]
 8101d8e:	4a6d      	ldr	r2, [pc, #436]	; (8101f44 <HAL_DMA_Abort+0x444>)
 8101d90:	4293      	cmp	r3, r2
 8101d92:	d04a      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	4a6b      	ldr	r2, [pc, #428]	; (8101f48 <HAL_DMA_Abort+0x448>)
 8101d9a:	4293      	cmp	r3, r2
 8101d9c:	d045      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	681b      	ldr	r3, [r3, #0]
 8101da2:	4a6a      	ldr	r2, [pc, #424]	; (8101f4c <HAL_DMA_Abort+0x44c>)
 8101da4:	4293      	cmp	r3, r2
 8101da6:	d040      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	681b      	ldr	r3, [r3, #0]
 8101dac:	4a68      	ldr	r2, [pc, #416]	; (8101f50 <HAL_DMA_Abort+0x450>)
 8101dae:	4293      	cmp	r3, r2
 8101db0:	d03b      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	681b      	ldr	r3, [r3, #0]
 8101db6:	4a67      	ldr	r2, [pc, #412]	; (8101f54 <HAL_DMA_Abort+0x454>)
 8101db8:	4293      	cmp	r3, r2
 8101dba:	d036      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	4a65      	ldr	r2, [pc, #404]	; (8101f58 <HAL_DMA_Abort+0x458>)
 8101dc2:	4293      	cmp	r3, r2
 8101dc4:	d031      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	4a64      	ldr	r2, [pc, #400]	; (8101f5c <HAL_DMA_Abort+0x45c>)
 8101dcc:	4293      	cmp	r3, r2
 8101dce:	d02c      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	681b      	ldr	r3, [r3, #0]
 8101dd4:	4a62      	ldr	r2, [pc, #392]	; (8101f60 <HAL_DMA_Abort+0x460>)
 8101dd6:	4293      	cmp	r3, r2
 8101dd8:	d027      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	4a61      	ldr	r2, [pc, #388]	; (8101f64 <HAL_DMA_Abort+0x464>)
 8101de0:	4293      	cmp	r3, r2
 8101de2:	d022      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	4a5f      	ldr	r2, [pc, #380]	; (8101f68 <HAL_DMA_Abort+0x468>)
 8101dea:	4293      	cmp	r3, r2
 8101dec:	d01d      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	681b      	ldr	r3, [r3, #0]
 8101df2:	4a5e      	ldr	r2, [pc, #376]	; (8101f6c <HAL_DMA_Abort+0x46c>)
 8101df4:	4293      	cmp	r3, r2
 8101df6:	d018      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	4a5c      	ldr	r2, [pc, #368]	; (8101f70 <HAL_DMA_Abort+0x470>)
 8101dfe:	4293      	cmp	r3, r2
 8101e00:	d013      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	4a5b      	ldr	r2, [pc, #364]	; (8101f74 <HAL_DMA_Abort+0x474>)
 8101e08:	4293      	cmp	r3, r2
 8101e0a:	d00e      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	681b      	ldr	r3, [r3, #0]
 8101e10:	4a59      	ldr	r2, [pc, #356]	; (8101f78 <HAL_DMA_Abort+0x478>)
 8101e12:	4293      	cmp	r3, r2
 8101e14:	d009      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	4a58      	ldr	r2, [pc, #352]	; (8101f7c <HAL_DMA_Abort+0x47c>)
 8101e1c:	4293      	cmp	r3, r2
 8101e1e:	d004      	beq.n	8101e2a <HAL_DMA_Abort+0x32a>
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	681b      	ldr	r3, [r3, #0]
 8101e24:	4a56      	ldr	r2, [pc, #344]	; (8101f80 <HAL_DMA_Abort+0x480>)
 8101e26:	4293      	cmp	r3, r2
 8101e28:	d108      	bne.n	8101e3c <HAL_DMA_Abort+0x33c>
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	681a      	ldr	r2, [r3, #0]
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	681b      	ldr	r3, [r3, #0]
 8101e34:	f022 0201 	bic.w	r2, r2, #1
 8101e38:	601a      	str	r2, [r3, #0]
 8101e3a:	e007      	b.n	8101e4c <HAL_DMA_Abort+0x34c>
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	681b      	ldr	r3, [r3, #0]
 8101e40:	681a      	ldr	r2, [r3, #0]
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	f022 0201 	bic.w	r2, r2, #1
 8101e4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101e4c:	e013      	b.n	8101e76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101e4e:	f7ff fd27 	bl	81018a0 <HAL_GetTick>
 8101e52:	4602      	mov	r2, r0
 8101e54:	693b      	ldr	r3, [r7, #16]
 8101e56:	1ad3      	subs	r3, r2, r3
 8101e58:	2b05      	cmp	r3, #5
 8101e5a:	d90c      	bls.n	8101e76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	2220      	movs	r2, #32
 8101e60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	2203      	movs	r2, #3
 8101e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2200      	movs	r2, #0
 8101e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8101e72:	2301      	movs	r3, #1
 8101e74:	e12d      	b.n	81020d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101e76:	697b      	ldr	r3, [r7, #20]
 8101e78:	681b      	ldr	r3, [r3, #0]
 8101e7a:	f003 0301 	and.w	r3, r3, #1
 8101e7e:	2b00      	cmp	r3, #0
 8101e80:	d1e5      	bne.n	8101e4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	4a2f      	ldr	r2, [pc, #188]	; (8101f44 <HAL_DMA_Abort+0x444>)
 8101e88:	4293      	cmp	r3, r2
 8101e8a:	d04a      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	4a2d      	ldr	r2, [pc, #180]	; (8101f48 <HAL_DMA_Abort+0x448>)
 8101e92:	4293      	cmp	r3, r2
 8101e94:	d045      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	681b      	ldr	r3, [r3, #0]
 8101e9a:	4a2c      	ldr	r2, [pc, #176]	; (8101f4c <HAL_DMA_Abort+0x44c>)
 8101e9c:	4293      	cmp	r3, r2
 8101e9e:	d040      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	4a2a      	ldr	r2, [pc, #168]	; (8101f50 <HAL_DMA_Abort+0x450>)
 8101ea6:	4293      	cmp	r3, r2
 8101ea8:	d03b      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	681b      	ldr	r3, [r3, #0]
 8101eae:	4a29      	ldr	r2, [pc, #164]	; (8101f54 <HAL_DMA_Abort+0x454>)
 8101eb0:	4293      	cmp	r3, r2
 8101eb2:	d036      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	4a27      	ldr	r2, [pc, #156]	; (8101f58 <HAL_DMA_Abort+0x458>)
 8101eba:	4293      	cmp	r3, r2
 8101ebc:	d031      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	4a26      	ldr	r2, [pc, #152]	; (8101f5c <HAL_DMA_Abort+0x45c>)
 8101ec4:	4293      	cmp	r3, r2
 8101ec6:	d02c      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	681b      	ldr	r3, [r3, #0]
 8101ecc:	4a24      	ldr	r2, [pc, #144]	; (8101f60 <HAL_DMA_Abort+0x460>)
 8101ece:	4293      	cmp	r3, r2
 8101ed0:	d027      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	4a23      	ldr	r2, [pc, #140]	; (8101f64 <HAL_DMA_Abort+0x464>)
 8101ed8:	4293      	cmp	r3, r2
 8101eda:	d022      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	681b      	ldr	r3, [r3, #0]
 8101ee0:	4a21      	ldr	r2, [pc, #132]	; (8101f68 <HAL_DMA_Abort+0x468>)
 8101ee2:	4293      	cmp	r3, r2
 8101ee4:	d01d      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	4a20      	ldr	r2, [pc, #128]	; (8101f6c <HAL_DMA_Abort+0x46c>)
 8101eec:	4293      	cmp	r3, r2
 8101eee:	d018      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	4a1e      	ldr	r2, [pc, #120]	; (8101f70 <HAL_DMA_Abort+0x470>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	d013      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	4a1d      	ldr	r2, [pc, #116]	; (8101f74 <HAL_DMA_Abort+0x474>)
 8101f00:	4293      	cmp	r3, r2
 8101f02:	d00e      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	4a1b      	ldr	r2, [pc, #108]	; (8101f78 <HAL_DMA_Abort+0x478>)
 8101f0a:	4293      	cmp	r3, r2
 8101f0c:	d009      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	4a1a      	ldr	r2, [pc, #104]	; (8101f7c <HAL_DMA_Abort+0x47c>)
 8101f14:	4293      	cmp	r3, r2
 8101f16:	d004      	beq.n	8101f22 <HAL_DMA_Abort+0x422>
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	681b      	ldr	r3, [r3, #0]
 8101f1c:	4a18      	ldr	r2, [pc, #96]	; (8101f80 <HAL_DMA_Abort+0x480>)
 8101f1e:	4293      	cmp	r3, r2
 8101f20:	d101      	bne.n	8101f26 <HAL_DMA_Abort+0x426>
 8101f22:	2301      	movs	r3, #1
 8101f24:	e000      	b.n	8101f28 <HAL_DMA_Abort+0x428>
 8101f26:	2300      	movs	r3, #0
 8101f28:	2b00      	cmp	r3, #0
 8101f2a:	d02b      	beq.n	8101f84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f36:	f003 031f 	and.w	r3, r3, #31
 8101f3a:	223f      	movs	r2, #63	; 0x3f
 8101f3c:	409a      	lsls	r2, r3
 8101f3e:	68bb      	ldr	r3, [r7, #8]
 8101f40:	609a      	str	r2, [r3, #8]
 8101f42:	e02a      	b.n	8101f9a <HAL_DMA_Abort+0x49a>
 8101f44:	40020010 	.word	0x40020010
 8101f48:	40020028 	.word	0x40020028
 8101f4c:	40020040 	.word	0x40020040
 8101f50:	40020058 	.word	0x40020058
 8101f54:	40020070 	.word	0x40020070
 8101f58:	40020088 	.word	0x40020088
 8101f5c:	400200a0 	.word	0x400200a0
 8101f60:	400200b8 	.word	0x400200b8
 8101f64:	40020410 	.word	0x40020410
 8101f68:	40020428 	.word	0x40020428
 8101f6c:	40020440 	.word	0x40020440
 8101f70:	40020458 	.word	0x40020458
 8101f74:	40020470 	.word	0x40020470
 8101f78:	40020488 	.word	0x40020488
 8101f7c:	400204a0 	.word	0x400204a0
 8101f80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f8e:	f003 031f 	and.w	r3, r3, #31
 8101f92:	2201      	movs	r2, #1
 8101f94:	409a      	lsls	r2, r3
 8101f96:	68fb      	ldr	r3, [r7, #12]
 8101f98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a4f      	ldr	r2, [pc, #316]	; (81020dc <HAL_DMA_Abort+0x5dc>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d072      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a4d      	ldr	r2, [pc, #308]	; (81020e0 <HAL_DMA_Abort+0x5e0>)
 8101faa:	4293      	cmp	r3, r2
 8101fac:	d06d      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	4a4c      	ldr	r2, [pc, #304]	; (81020e4 <HAL_DMA_Abort+0x5e4>)
 8101fb4:	4293      	cmp	r3, r2
 8101fb6:	d068      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	4a4a      	ldr	r2, [pc, #296]	; (81020e8 <HAL_DMA_Abort+0x5e8>)
 8101fbe:	4293      	cmp	r3, r2
 8101fc0:	d063      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	4a49      	ldr	r2, [pc, #292]	; (81020ec <HAL_DMA_Abort+0x5ec>)
 8101fc8:	4293      	cmp	r3, r2
 8101fca:	d05e      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	4a47      	ldr	r2, [pc, #284]	; (81020f0 <HAL_DMA_Abort+0x5f0>)
 8101fd2:	4293      	cmp	r3, r2
 8101fd4:	d059      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	681b      	ldr	r3, [r3, #0]
 8101fda:	4a46      	ldr	r2, [pc, #280]	; (81020f4 <HAL_DMA_Abort+0x5f4>)
 8101fdc:	4293      	cmp	r3, r2
 8101fde:	d054      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	4a44      	ldr	r2, [pc, #272]	; (81020f8 <HAL_DMA_Abort+0x5f8>)
 8101fe6:	4293      	cmp	r3, r2
 8101fe8:	d04f      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	4a43      	ldr	r2, [pc, #268]	; (81020fc <HAL_DMA_Abort+0x5fc>)
 8101ff0:	4293      	cmp	r3, r2
 8101ff2:	d04a      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	4a41      	ldr	r2, [pc, #260]	; (8102100 <HAL_DMA_Abort+0x600>)
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	d045      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	4a40      	ldr	r2, [pc, #256]	; (8102104 <HAL_DMA_Abort+0x604>)
 8102004:	4293      	cmp	r3, r2
 8102006:	d040      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	681b      	ldr	r3, [r3, #0]
 810200c:	4a3e      	ldr	r2, [pc, #248]	; (8102108 <HAL_DMA_Abort+0x608>)
 810200e:	4293      	cmp	r3, r2
 8102010:	d03b      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	4a3d      	ldr	r2, [pc, #244]	; (810210c <HAL_DMA_Abort+0x60c>)
 8102018:	4293      	cmp	r3, r2
 810201a:	d036      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	4a3b      	ldr	r2, [pc, #236]	; (8102110 <HAL_DMA_Abort+0x610>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d031      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	4a3a      	ldr	r2, [pc, #232]	; (8102114 <HAL_DMA_Abort+0x614>)
 810202c:	4293      	cmp	r3, r2
 810202e:	d02c      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	4a38      	ldr	r2, [pc, #224]	; (8102118 <HAL_DMA_Abort+0x618>)
 8102036:	4293      	cmp	r3, r2
 8102038:	d027      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	681b      	ldr	r3, [r3, #0]
 810203e:	4a37      	ldr	r2, [pc, #220]	; (810211c <HAL_DMA_Abort+0x61c>)
 8102040:	4293      	cmp	r3, r2
 8102042:	d022      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	4a35      	ldr	r2, [pc, #212]	; (8102120 <HAL_DMA_Abort+0x620>)
 810204a:	4293      	cmp	r3, r2
 810204c:	d01d      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	4a34      	ldr	r2, [pc, #208]	; (8102124 <HAL_DMA_Abort+0x624>)
 8102054:	4293      	cmp	r3, r2
 8102056:	d018      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	4a32      	ldr	r2, [pc, #200]	; (8102128 <HAL_DMA_Abort+0x628>)
 810205e:	4293      	cmp	r3, r2
 8102060:	d013      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	4a31      	ldr	r2, [pc, #196]	; (810212c <HAL_DMA_Abort+0x62c>)
 8102068:	4293      	cmp	r3, r2
 810206a:	d00e      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	4a2f      	ldr	r2, [pc, #188]	; (8102130 <HAL_DMA_Abort+0x630>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d009      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4a2e      	ldr	r2, [pc, #184]	; (8102134 <HAL_DMA_Abort+0x634>)
 810207c:	4293      	cmp	r3, r2
 810207e:	d004      	beq.n	810208a <HAL_DMA_Abort+0x58a>
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	4a2c      	ldr	r2, [pc, #176]	; (8102138 <HAL_DMA_Abort+0x638>)
 8102086:	4293      	cmp	r3, r2
 8102088:	d101      	bne.n	810208e <HAL_DMA_Abort+0x58e>
 810208a:	2301      	movs	r3, #1
 810208c:	e000      	b.n	8102090 <HAL_DMA_Abort+0x590>
 810208e:	2300      	movs	r3, #0
 8102090:	2b00      	cmp	r3, #0
 8102092:	d015      	beq.n	81020c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102098:	687a      	ldr	r2, [r7, #4]
 810209a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810209c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d00c      	beq.n	81020c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81020aa:	681a      	ldr	r2, [r3, #0]
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81020b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81020b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81020ba:	687a      	ldr	r2, [r7, #4]
 81020bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81020be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	2201      	movs	r2, #1
 81020c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	2200      	movs	r2, #0
 81020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 81020d0:	2300      	movs	r3, #0
}
 81020d2:	4618      	mov	r0, r3
 81020d4:	3718      	adds	r7, #24
 81020d6:	46bd      	mov	sp, r7
 81020d8:	bd80      	pop	{r7, pc}
 81020da:	bf00      	nop
 81020dc:	40020010 	.word	0x40020010
 81020e0:	40020028 	.word	0x40020028
 81020e4:	40020040 	.word	0x40020040
 81020e8:	40020058 	.word	0x40020058
 81020ec:	40020070 	.word	0x40020070
 81020f0:	40020088 	.word	0x40020088
 81020f4:	400200a0 	.word	0x400200a0
 81020f8:	400200b8 	.word	0x400200b8
 81020fc:	40020410 	.word	0x40020410
 8102100:	40020428 	.word	0x40020428
 8102104:	40020440 	.word	0x40020440
 8102108:	40020458 	.word	0x40020458
 810210c:	40020470 	.word	0x40020470
 8102110:	40020488 	.word	0x40020488
 8102114:	400204a0 	.word	0x400204a0
 8102118:	400204b8 	.word	0x400204b8
 810211c:	58025408 	.word	0x58025408
 8102120:	5802541c 	.word	0x5802541c
 8102124:	58025430 	.word	0x58025430
 8102128:	58025444 	.word	0x58025444
 810212c:	58025458 	.word	0x58025458
 8102130:	5802546c 	.word	0x5802546c
 8102134:	58025480 	.word	0x58025480
 8102138:	58025494 	.word	0x58025494

0810213c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b084      	sub	sp, #16
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	2b00      	cmp	r3, #0
 8102148:	d101      	bne.n	810214e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810214a:	2301      	movs	r3, #1
 810214c:	e205      	b.n	810255a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102154:	b2db      	uxtb	r3, r3
 8102156:	2b02      	cmp	r3, #2
 8102158:	d004      	beq.n	8102164 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	2280      	movs	r2, #128	; 0x80
 810215e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102160:	2301      	movs	r3, #1
 8102162:	e1fa      	b.n	810255a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	4a8c      	ldr	r2, [pc, #560]	; (810239c <HAL_DMA_Abort_IT+0x260>)
 810216a:	4293      	cmp	r3, r2
 810216c:	d04a      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	681b      	ldr	r3, [r3, #0]
 8102172:	4a8b      	ldr	r2, [pc, #556]	; (81023a0 <HAL_DMA_Abort_IT+0x264>)
 8102174:	4293      	cmp	r3, r2
 8102176:	d045      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	4a89      	ldr	r2, [pc, #548]	; (81023a4 <HAL_DMA_Abort_IT+0x268>)
 810217e:	4293      	cmp	r3, r2
 8102180:	d040      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	4a88      	ldr	r2, [pc, #544]	; (81023a8 <HAL_DMA_Abort_IT+0x26c>)
 8102188:	4293      	cmp	r3, r2
 810218a:	d03b      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	681b      	ldr	r3, [r3, #0]
 8102190:	4a86      	ldr	r2, [pc, #536]	; (81023ac <HAL_DMA_Abort_IT+0x270>)
 8102192:	4293      	cmp	r3, r2
 8102194:	d036      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 8102196:	687b      	ldr	r3, [r7, #4]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	4a85      	ldr	r2, [pc, #532]	; (81023b0 <HAL_DMA_Abort_IT+0x274>)
 810219c:	4293      	cmp	r3, r2
 810219e:	d031      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	4a83      	ldr	r2, [pc, #524]	; (81023b4 <HAL_DMA_Abort_IT+0x278>)
 81021a6:	4293      	cmp	r3, r2
 81021a8:	d02c      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	4a82      	ldr	r2, [pc, #520]	; (81023b8 <HAL_DMA_Abort_IT+0x27c>)
 81021b0:	4293      	cmp	r3, r2
 81021b2:	d027      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	4a80      	ldr	r2, [pc, #512]	; (81023bc <HAL_DMA_Abort_IT+0x280>)
 81021ba:	4293      	cmp	r3, r2
 81021bc:	d022      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021be:	687b      	ldr	r3, [r7, #4]
 81021c0:	681b      	ldr	r3, [r3, #0]
 81021c2:	4a7f      	ldr	r2, [pc, #508]	; (81023c0 <HAL_DMA_Abort_IT+0x284>)
 81021c4:	4293      	cmp	r3, r2
 81021c6:	d01d      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	681b      	ldr	r3, [r3, #0]
 81021cc:	4a7d      	ldr	r2, [pc, #500]	; (81023c4 <HAL_DMA_Abort_IT+0x288>)
 81021ce:	4293      	cmp	r3, r2
 81021d0:	d018      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	681b      	ldr	r3, [r3, #0]
 81021d6:	4a7c      	ldr	r2, [pc, #496]	; (81023c8 <HAL_DMA_Abort_IT+0x28c>)
 81021d8:	4293      	cmp	r3, r2
 81021da:	d013      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	4a7a      	ldr	r2, [pc, #488]	; (81023cc <HAL_DMA_Abort_IT+0x290>)
 81021e2:	4293      	cmp	r3, r2
 81021e4:	d00e      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	4a79      	ldr	r2, [pc, #484]	; (81023d0 <HAL_DMA_Abort_IT+0x294>)
 81021ec:	4293      	cmp	r3, r2
 81021ee:	d009      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	4a77      	ldr	r2, [pc, #476]	; (81023d4 <HAL_DMA_Abort_IT+0x298>)
 81021f6:	4293      	cmp	r3, r2
 81021f8:	d004      	beq.n	8102204 <HAL_DMA_Abort_IT+0xc8>
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	4a76      	ldr	r2, [pc, #472]	; (81023d8 <HAL_DMA_Abort_IT+0x29c>)
 8102200:	4293      	cmp	r3, r2
 8102202:	d101      	bne.n	8102208 <HAL_DMA_Abort_IT+0xcc>
 8102204:	2301      	movs	r3, #1
 8102206:	e000      	b.n	810220a <HAL_DMA_Abort_IT+0xce>
 8102208:	2300      	movs	r3, #0
 810220a:	2b00      	cmp	r3, #0
 810220c:	d065      	beq.n	81022da <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	2204      	movs	r2, #4
 8102212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	681b      	ldr	r3, [r3, #0]
 810221a:	4a60      	ldr	r2, [pc, #384]	; (810239c <HAL_DMA_Abort_IT+0x260>)
 810221c:	4293      	cmp	r3, r2
 810221e:	d04a      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102220:	687b      	ldr	r3, [r7, #4]
 8102222:	681b      	ldr	r3, [r3, #0]
 8102224:	4a5e      	ldr	r2, [pc, #376]	; (81023a0 <HAL_DMA_Abort_IT+0x264>)
 8102226:	4293      	cmp	r3, r2
 8102228:	d045      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	681b      	ldr	r3, [r3, #0]
 810222e:	4a5d      	ldr	r2, [pc, #372]	; (81023a4 <HAL_DMA_Abort_IT+0x268>)
 8102230:	4293      	cmp	r3, r2
 8102232:	d040      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	681b      	ldr	r3, [r3, #0]
 8102238:	4a5b      	ldr	r2, [pc, #364]	; (81023a8 <HAL_DMA_Abort_IT+0x26c>)
 810223a:	4293      	cmp	r3, r2
 810223c:	d03b      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	4a5a      	ldr	r2, [pc, #360]	; (81023ac <HAL_DMA_Abort_IT+0x270>)
 8102244:	4293      	cmp	r3, r2
 8102246:	d036      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	681b      	ldr	r3, [r3, #0]
 810224c:	4a58      	ldr	r2, [pc, #352]	; (81023b0 <HAL_DMA_Abort_IT+0x274>)
 810224e:	4293      	cmp	r3, r2
 8102250:	d031      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	4a57      	ldr	r2, [pc, #348]	; (81023b4 <HAL_DMA_Abort_IT+0x278>)
 8102258:	4293      	cmp	r3, r2
 810225a:	d02c      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	4a55      	ldr	r2, [pc, #340]	; (81023b8 <HAL_DMA_Abort_IT+0x27c>)
 8102262:	4293      	cmp	r3, r2
 8102264:	d027      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	4a54      	ldr	r2, [pc, #336]	; (81023bc <HAL_DMA_Abort_IT+0x280>)
 810226c:	4293      	cmp	r3, r2
 810226e:	d022      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	4a52      	ldr	r2, [pc, #328]	; (81023c0 <HAL_DMA_Abort_IT+0x284>)
 8102276:	4293      	cmp	r3, r2
 8102278:	d01d      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	4a51      	ldr	r2, [pc, #324]	; (81023c4 <HAL_DMA_Abort_IT+0x288>)
 8102280:	4293      	cmp	r3, r2
 8102282:	d018      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	681b      	ldr	r3, [r3, #0]
 8102288:	4a4f      	ldr	r2, [pc, #316]	; (81023c8 <HAL_DMA_Abort_IT+0x28c>)
 810228a:	4293      	cmp	r3, r2
 810228c:	d013      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	681b      	ldr	r3, [r3, #0]
 8102292:	4a4e      	ldr	r2, [pc, #312]	; (81023cc <HAL_DMA_Abort_IT+0x290>)
 8102294:	4293      	cmp	r3, r2
 8102296:	d00e      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 8102298:	687b      	ldr	r3, [r7, #4]
 810229a:	681b      	ldr	r3, [r3, #0]
 810229c:	4a4c      	ldr	r2, [pc, #304]	; (81023d0 <HAL_DMA_Abort_IT+0x294>)
 810229e:	4293      	cmp	r3, r2
 81022a0:	d009      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	681b      	ldr	r3, [r3, #0]
 81022a6:	4a4b      	ldr	r2, [pc, #300]	; (81023d4 <HAL_DMA_Abort_IT+0x298>)
 81022a8:	4293      	cmp	r3, r2
 81022aa:	d004      	beq.n	81022b6 <HAL_DMA_Abort_IT+0x17a>
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	681b      	ldr	r3, [r3, #0]
 81022b0:	4a49      	ldr	r2, [pc, #292]	; (81023d8 <HAL_DMA_Abort_IT+0x29c>)
 81022b2:	4293      	cmp	r3, r2
 81022b4:	d108      	bne.n	81022c8 <HAL_DMA_Abort_IT+0x18c>
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	681a      	ldr	r2, [r3, #0]
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	f022 0201 	bic.w	r2, r2, #1
 81022c4:	601a      	str	r2, [r3, #0]
 81022c6:	e147      	b.n	8102558 <HAL_DMA_Abort_IT+0x41c>
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	681a      	ldr	r2, [r3, #0]
 81022ce:	687b      	ldr	r3, [r7, #4]
 81022d0:	681b      	ldr	r3, [r3, #0]
 81022d2:	f022 0201 	bic.w	r2, r2, #1
 81022d6:	601a      	str	r2, [r3, #0]
 81022d8:	e13e      	b.n	8102558 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	681a      	ldr	r2, [r3, #0]
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	f022 020e 	bic.w	r2, r2, #14
 81022e8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	4a2b      	ldr	r2, [pc, #172]	; (810239c <HAL_DMA_Abort_IT+0x260>)
 81022f0:	4293      	cmp	r3, r2
 81022f2:	d04a      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	4a29      	ldr	r2, [pc, #164]	; (81023a0 <HAL_DMA_Abort_IT+0x264>)
 81022fa:	4293      	cmp	r3, r2
 81022fc:	d045      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	681b      	ldr	r3, [r3, #0]
 8102302:	4a28      	ldr	r2, [pc, #160]	; (81023a4 <HAL_DMA_Abort_IT+0x268>)
 8102304:	4293      	cmp	r3, r2
 8102306:	d040      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	4a26      	ldr	r2, [pc, #152]	; (81023a8 <HAL_DMA_Abort_IT+0x26c>)
 810230e:	4293      	cmp	r3, r2
 8102310:	d03b      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	4a25      	ldr	r2, [pc, #148]	; (81023ac <HAL_DMA_Abort_IT+0x270>)
 8102318:	4293      	cmp	r3, r2
 810231a:	d036      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	681b      	ldr	r3, [r3, #0]
 8102320:	4a23      	ldr	r2, [pc, #140]	; (81023b0 <HAL_DMA_Abort_IT+0x274>)
 8102322:	4293      	cmp	r3, r2
 8102324:	d031      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	4a22      	ldr	r2, [pc, #136]	; (81023b4 <HAL_DMA_Abort_IT+0x278>)
 810232c:	4293      	cmp	r3, r2
 810232e:	d02c      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	4a20      	ldr	r2, [pc, #128]	; (81023b8 <HAL_DMA_Abort_IT+0x27c>)
 8102336:	4293      	cmp	r3, r2
 8102338:	d027      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	4a1f      	ldr	r2, [pc, #124]	; (81023bc <HAL_DMA_Abort_IT+0x280>)
 8102340:	4293      	cmp	r3, r2
 8102342:	d022      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	4a1d      	ldr	r2, [pc, #116]	; (81023c0 <HAL_DMA_Abort_IT+0x284>)
 810234a:	4293      	cmp	r3, r2
 810234c:	d01d      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	4a1c      	ldr	r2, [pc, #112]	; (81023c4 <HAL_DMA_Abort_IT+0x288>)
 8102354:	4293      	cmp	r3, r2
 8102356:	d018      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	4a1a      	ldr	r2, [pc, #104]	; (81023c8 <HAL_DMA_Abort_IT+0x28c>)
 810235e:	4293      	cmp	r3, r2
 8102360:	d013      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	681b      	ldr	r3, [r3, #0]
 8102366:	4a19      	ldr	r2, [pc, #100]	; (81023cc <HAL_DMA_Abort_IT+0x290>)
 8102368:	4293      	cmp	r3, r2
 810236a:	d00e      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	681b      	ldr	r3, [r3, #0]
 8102370:	4a17      	ldr	r2, [pc, #92]	; (81023d0 <HAL_DMA_Abort_IT+0x294>)
 8102372:	4293      	cmp	r3, r2
 8102374:	d009      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	4a16      	ldr	r2, [pc, #88]	; (81023d4 <HAL_DMA_Abort_IT+0x298>)
 810237c:	4293      	cmp	r3, r2
 810237e:	d004      	beq.n	810238a <HAL_DMA_Abort_IT+0x24e>
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	4a14      	ldr	r2, [pc, #80]	; (81023d8 <HAL_DMA_Abort_IT+0x29c>)
 8102386:	4293      	cmp	r3, r2
 8102388:	d128      	bne.n	81023dc <HAL_DMA_Abort_IT+0x2a0>
 810238a:	687b      	ldr	r3, [r7, #4]
 810238c:	681b      	ldr	r3, [r3, #0]
 810238e:	681a      	ldr	r2, [r3, #0]
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	f022 0201 	bic.w	r2, r2, #1
 8102398:	601a      	str	r2, [r3, #0]
 810239a:	e027      	b.n	81023ec <HAL_DMA_Abort_IT+0x2b0>
 810239c:	40020010 	.word	0x40020010
 81023a0:	40020028 	.word	0x40020028
 81023a4:	40020040 	.word	0x40020040
 81023a8:	40020058 	.word	0x40020058
 81023ac:	40020070 	.word	0x40020070
 81023b0:	40020088 	.word	0x40020088
 81023b4:	400200a0 	.word	0x400200a0
 81023b8:	400200b8 	.word	0x400200b8
 81023bc:	40020410 	.word	0x40020410
 81023c0:	40020428 	.word	0x40020428
 81023c4:	40020440 	.word	0x40020440
 81023c8:	40020458 	.word	0x40020458
 81023cc:	40020470 	.word	0x40020470
 81023d0:	40020488 	.word	0x40020488
 81023d4:	400204a0 	.word	0x400204a0
 81023d8:	400204b8 	.word	0x400204b8
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	681b      	ldr	r3, [r3, #0]
 81023e0:	681a      	ldr	r2, [r3, #0]
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	f022 0201 	bic.w	r2, r2, #1
 81023ea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	4a5c      	ldr	r2, [pc, #368]	; (8102564 <HAL_DMA_Abort_IT+0x428>)
 81023f2:	4293      	cmp	r3, r2
 81023f4:	d072      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	4a5b      	ldr	r2, [pc, #364]	; (8102568 <HAL_DMA_Abort_IT+0x42c>)
 81023fc:	4293      	cmp	r3, r2
 81023fe:	d06d      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	4a59      	ldr	r2, [pc, #356]	; (810256c <HAL_DMA_Abort_IT+0x430>)
 8102406:	4293      	cmp	r3, r2
 8102408:	d068      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	681b      	ldr	r3, [r3, #0]
 810240e:	4a58      	ldr	r2, [pc, #352]	; (8102570 <HAL_DMA_Abort_IT+0x434>)
 8102410:	4293      	cmp	r3, r2
 8102412:	d063      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	4a56      	ldr	r2, [pc, #344]	; (8102574 <HAL_DMA_Abort_IT+0x438>)
 810241a:	4293      	cmp	r3, r2
 810241c:	d05e      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	4a55      	ldr	r2, [pc, #340]	; (8102578 <HAL_DMA_Abort_IT+0x43c>)
 8102424:	4293      	cmp	r3, r2
 8102426:	d059      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	4a53      	ldr	r2, [pc, #332]	; (810257c <HAL_DMA_Abort_IT+0x440>)
 810242e:	4293      	cmp	r3, r2
 8102430:	d054      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	4a52      	ldr	r2, [pc, #328]	; (8102580 <HAL_DMA_Abort_IT+0x444>)
 8102438:	4293      	cmp	r3, r2
 810243a:	d04f      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	4a50      	ldr	r2, [pc, #320]	; (8102584 <HAL_DMA_Abort_IT+0x448>)
 8102442:	4293      	cmp	r3, r2
 8102444:	d04a      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	4a4f      	ldr	r2, [pc, #316]	; (8102588 <HAL_DMA_Abort_IT+0x44c>)
 810244c:	4293      	cmp	r3, r2
 810244e:	d045      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	4a4d      	ldr	r2, [pc, #308]	; (810258c <HAL_DMA_Abort_IT+0x450>)
 8102456:	4293      	cmp	r3, r2
 8102458:	d040      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	681b      	ldr	r3, [r3, #0]
 810245e:	4a4c      	ldr	r2, [pc, #304]	; (8102590 <HAL_DMA_Abort_IT+0x454>)
 8102460:	4293      	cmp	r3, r2
 8102462:	d03b      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	681b      	ldr	r3, [r3, #0]
 8102468:	4a4a      	ldr	r2, [pc, #296]	; (8102594 <HAL_DMA_Abort_IT+0x458>)
 810246a:	4293      	cmp	r3, r2
 810246c:	d036      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	4a49      	ldr	r2, [pc, #292]	; (8102598 <HAL_DMA_Abort_IT+0x45c>)
 8102474:	4293      	cmp	r3, r2
 8102476:	d031      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	4a47      	ldr	r2, [pc, #284]	; (810259c <HAL_DMA_Abort_IT+0x460>)
 810247e:	4293      	cmp	r3, r2
 8102480:	d02c      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	681b      	ldr	r3, [r3, #0]
 8102486:	4a46      	ldr	r2, [pc, #280]	; (81025a0 <HAL_DMA_Abort_IT+0x464>)
 8102488:	4293      	cmp	r3, r2
 810248a:	d027      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	4a44      	ldr	r2, [pc, #272]	; (81025a4 <HAL_DMA_Abort_IT+0x468>)
 8102492:	4293      	cmp	r3, r2
 8102494:	d022      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	681b      	ldr	r3, [r3, #0]
 810249a:	4a43      	ldr	r2, [pc, #268]	; (81025a8 <HAL_DMA_Abort_IT+0x46c>)
 810249c:	4293      	cmp	r3, r2
 810249e:	d01d      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	681b      	ldr	r3, [r3, #0]
 81024a4:	4a41      	ldr	r2, [pc, #260]	; (81025ac <HAL_DMA_Abort_IT+0x470>)
 81024a6:	4293      	cmp	r3, r2
 81024a8:	d018      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	4a40      	ldr	r2, [pc, #256]	; (81025b0 <HAL_DMA_Abort_IT+0x474>)
 81024b0:	4293      	cmp	r3, r2
 81024b2:	d013      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	4a3e      	ldr	r2, [pc, #248]	; (81025b4 <HAL_DMA_Abort_IT+0x478>)
 81024ba:	4293      	cmp	r3, r2
 81024bc:	d00e      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	4a3d      	ldr	r2, [pc, #244]	; (81025b8 <HAL_DMA_Abort_IT+0x47c>)
 81024c4:	4293      	cmp	r3, r2
 81024c6:	d009      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	4a3b      	ldr	r2, [pc, #236]	; (81025bc <HAL_DMA_Abort_IT+0x480>)
 81024ce:	4293      	cmp	r3, r2
 81024d0:	d004      	beq.n	81024dc <HAL_DMA_Abort_IT+0x3a0>
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	4a3a      	ldr	r2, [pc, #232]	; (81025c0 <HAL_DMA_Abort_IT+0x484>)
 81024d8:	4293      	cmp	r3, r2
 81024da:	d101      	bne.n	81024e0 <HAL_DMA_Abort_IT+0x3a4>
 81024dc:	2301      	movs	r3, #1
 81024de:	e000      	b.n	81024e2 <HAL_DMA_Abort_IT+0x3a6>
 81024e0:	2300      	movs	r3, #0
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d028      	beq.n	8102538 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024ea:	681a      	ldr	r2, [r3, #0]
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81024f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102500:	f003 031f 	and.w	r3, r3, #31
 8102504:	2201      	movs	r2, #1
 8102506:	409a      	lsls	r2, r3
 8102508:	68fb      	ldr	r3, [r7, #12]
 810250a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102510:	687a      	ldr	r2, [r7, #4]
 8102512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102514:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810251a:	2b00      	cmp	r3, #0
 810251c:	d00c      	beq.n	8102538 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102522:	681a      	ldr	r2, [r3, #0]
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810252c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102532:	687a      	ldr	r2, [r7, #4]
 8102534:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102536:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	2201      	movs	r2, #1
 810253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	2200      	movs	r2, #0
 8102544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810254c:	2b00      	cmp	r3, #0
 810254e:	d003      	beq.n	8102558 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102554:	6878      	ldr	r0, [r7, #4]
 8102556:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8102558:	2300      	movs	r3, #0
}
 810255a:	4618      	mov	r0, r3
 810255c:	3710      	adds	r7, #16
 810255e:	46bd      	mov	sp, r7
 8102560:	bd80      	pop	{r7, pc}
 8102562:	bf00      	nop
 8102564:	40020010 	.word	0x40020010
 8102568:	40020028 	.word	0x40020028
 810256c:	40020040 	.word	0x40020040
 8102570:	40020058 	.word	0x40020058
 8102574:	40020070 	.word	0x40020070
 8102578:	40020088 	.word	0x40020088
 810257c:	400200a0 	.word	0x400200a0
 8102580:	400200b8 	.word	0x400200b8
 8102584:	40020410 	.word	0x40020410
 8102588:	40020428 	.word	0x40020428
 810258c:	40020440 	.word	0x40020440
 8102590:	40020458 	.word	0x40020458
 8102594:	40020470 	.word	0x40020470
 8102598:	40020488 	.word	0x40020488
 810259c:	400204a0 	.word	0x400204a0
 81025a0:	400204b8 	.word	0x400204b8
 81025a4:	58025408 	.word	0x58025408
 81025a8:	5802541c 	.word	0x5802541c
 81025ac:	58025430 	.word	0x58025430
 81025b0:	58025444 	.word	0x58025444
 81025b4:	58025458 	.word	0x58025458
 81025b8:	5802546c 	.word	0x5802546c
 81025bc:	58025480 	.word	0x58025480
 81025c0:	58025494 	.word	0x58025494

081025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81025c4:	b480      	push	{r7}
 81025c6:	b089      	sub	sp, #36	; 0x24
 81025c8:	af00      	add	r7, sp, #0
 81025ca:	6078      	str	r0, [r7, #4]
 81025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81025ce:	2300      	movs	r3, #0
 81025d0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81025d2:	4b89      	ldr	r3, [pc, #548]	; (81027f8 <HAL_GPIO_Init+0x234>)
 81025d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81025d6:	e194      	b.n	8102902 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81025d8:	683b      	ldr	r3, [r7, #0]
 81025da:	681a      	ldr	r2, [r3, #0]
 81025dc:	2101      	movs	r1, #1
 81025de:	69fb      	ldr	r3, [r7, #28]
 81025e0:	fa01 f303 	lsl.w	r3, r1, r3
 81025e4:	4013      	ands	r3, r2
 81025e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81025e8:	693b      	ldr	r3, [r7, #16]
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	f000 8186 	beq.w	81028fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81025f0:	683b      	ldr	r3, [r7, #0]
 81025f2:	685b      	ldr	r3, [r3, #4]
 81025f4:	f003 0303 	and.w	r3, r3, #3
 81025f8:	2b01      	cmp	r3, #1
 81025fa:	d005      	beq.n	8102608 <HAL_GPIO_Init+0x44>
 81025fc:	683b      	ldr	r3, [r7, #0]
 81025fe:	685b      	ldr	r3, [r3, #4]
 8102600:	f003 0303 	and.w	r3, r3, #3
 8102604:	2b02      	cmp	r3, #2
 8102606:	d130      	bne.n	810266a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	689b      	ldr	r3, [r3, #8]
 810260c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810260e:	69fb      	ldr	r3, [r7, #28]
 8102610:	005b      	lsls	r3, r3, #1
 8102612:	2203      	movs	r2, #3
 8102614:	fa02 f303 	lsl.w	r3, r2, r3
 8102618:	43db      	mvns	r3, r3
 810261a:	69ba      	ldr	r2, [r7, #24]
 810261c:	4013      	ands	r3, r2
 810261e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102620:	683b      	ldr	r3, [r7, #0]
 8102622:	68da      	ldr	r2, [r3, #12]
 8102624:	69fb      	ldr	r3, [r7, #28]
 8102626:	005b      	lsls	r3, r3, #1
 8102628:	fa02 f303 	lsl.w	r3, r2, r3
 810262c:	69ba      	ldr	r2, [r7, #24]
 810262e:	4313      	orrs	r3, r2
 8102630:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	69ba      	ldr	r2, [r7, #24]
 8102636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	685b      	ldr	r3, [r3, #4]
 810263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810263e:	2201      	movs	r2, #1
 8102640:	69fb      	ldr	r3, [r7, #28]
 8102642:	fa02 f303 	lsl.w	r3, r2, r3
 8102646:	43db      	mvns	r3, r3
 8102648:	69ba      	ldr	r2, [r7, #24]
 810264a:	4013      	ands	r3, r2
 810264c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810264e:	683b      	ldr	r3, [r7, #0]
 8102650:	685b      	ldr	r3, [r3, #4]
 8102652:	091b      	lsrs	r3, r3, #4
 8102654:	f003 0201 	and.w	r2, r3, #1
 8102658:	69fb      	ldr	r3, [r7, #28]
 810265a:	fa02 f303 	lsl.w	r3, r2, r3
 810265e:	69ba      	ldr	r2, [r7, #24]
 8102660:	4313      	orrs	r3, r2
 8102662:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	69ba      	ldr	r2, [r7, #24]
 8102668:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810266a:	683b      	ldr	r3, [r7, #0]
 810266c:	685b      	ldr	r3, [r3, #4]
 810266e:	f003 0303 	and.w	r3, r3, #3
 8102672:	2b03      	cmp	r3, #3
 8102674:	d017      	beq.n	81026a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	68db      	ldr	r3, [r3, #12]
 810267a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810267c:	69fb      	ldr	r3, [r7, #28]
 810267e:	005b      	lsls	r3, r3, #1
 8102680:	2203      	movs	r2, #3
 8102682:	fa02 f303 	lsl.w	r3, r2, r3
 8102686:	43db      	mvns	r3, r3
 8102688:	69ba      	ldr	r2, [r7, #24]
 810268a:	4013      	ands	r3, r2
 810268c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810268e:	683b      	ldr	r3, [r7, #0]
 8102690:	689a      	ldr	r2, [r3, #8]
 8102692:	69fb      	ldr	r3, [r7, #28]
 8102694:	005b      	lsls	r3, r3, #1
 8102696:	fa02 f303 	lsl.w	r3, r2, r3
 810269a:	69ba      	ldr	r2, [r7, #24]
 810269c:	4313      	orrs	r3, r2
 810269e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	69ba      	ldr	r2, [r7, #24]
 81026a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81026a6:	683b      	ldr	r3, [r7, #0]
 81026a8:	685b      	ldr	r3, [r3, #4]
 81026aa:	f003 0303 	and.w	r3, r3, #3
 81026ae:	2b02      	cmp	r3, #2
 81026b0:	d123      	bne.n	81026fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81026b2:	69fb      	ldr	r3, [r7, #28]
 81026b4:	08da      	lsrs	r2, r3, #3
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	3208      	adds	r2, #8
 81026ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81026c0:	69fb      	ldr	r3, [r7, #28]
 81026c2:	f003 0307 	and.w	r3, r3, #7
 81026c6:	009b      	lsls	r3, r3, #2
 81026c8:	220f      	movs	r2, #15
 81026ca:	fa02 f303 	lsl.w	r3, r2, r3
 81026ce:	43db      	mvns	r3, r3
 81026d0:	69ba      	ldr	r2, [r7, #24]
 81026d2:	4013      	ands	r3, r2
 81026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81026d6:	683b      	ldr	r3, [r7, #0]
 81026d8:	691a      	ldr	r2, [r3, #16]
 81026da:	69fb      	ldr	r3, [r7, #28]
 81026dc:	f003 0307 	and.w	r3, r3, #7
 81026e0:	009b      	lsls	r3, r3, #2
 81026e2:	fa02 f303 	lsl.w	r3, r2, r3
 81026e6:	69ba      	ldr	r2, [r7, #24]
 81026e8:	4313      	orrs	r3, r2
 81026ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81026ec:	69fb      	ldr	r3, [r7, #28]
 81026ee:	08da      	lsrs	r2, r3, #3
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	3208      	adds	r2, #8
 81026f4:	69b9      	ldr	r1, [r7, #24]
 81026f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	681b      	ldr	r3, [r3, #0]
 81026fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102700:	69fb      	ldr	r3, [r7, #28]
 8102702:	005b      	lsls	r3, r3, #1
 8102704:	2203      	movs	r2, #3
 8102706:	fa02 f303 	lsl.w	r3, r2, r3
 810270a:	43db      	mvns	r3, r3
 810270c:	69ba      	ldr	r2, [r7, #24]
 810270e:	4013      	ands	r3, r2
 8102710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102712:	683b      	ldr	r3, [r7, #0]
 8102714:	685b      	ldr	r3, [r3, #4]
 8102716:	f003 0203 	and.w	r2, r3, #3
 810271a:	69fb      	ldr	r3, [r7, #28]
 810271c:	005b      	lsls	r3, r3, #1
 810271e:	fa02 f303 	lsl.w	r3, r2, r3
 8102722:	69ba      	ldr	r2, [r7, #24]
 8102724:	4313      	orrs	r3, r2
 8102726:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	69ba      	ldr	r2, [r7, #24]
 810272c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810272e:	683b      	ldr	r3, [r7, #0]
 8102730:	685b      	ldr	r3, [r3, #4]
 8102732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102736:	2b00      	cmp	r3, #0
 8102738:	f000 80e0 	beq.w	81028fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810273c:	4b2f      	ldr	r3, [pc, #188]	; (81027fc <HAL_GPIO_Init+0x238>)
 810273e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102742:	4a2e      	ldr	r2, [pc, #184]	; (81027fc <HAL_GPIO_Init+0x238>)
 8102744:	f043 0302 	orr.w	r3, r3, #2
 8102748:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810274c:	4b2b      	ldr	r3, [pc, #172]	; (81027fc <HAL_GPIO_Init+0x238>)
 810274e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102752:	f003 0302 	and.w	r3, r3, #2
 8102756:	60fb      	str	r3, [r7, #12]
 8102758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810275a:	4a29      	ldr	r2, [pc, #164]	; (8102800 <HAL_GPIO_Init+0x23c>)
 810275c:	69fb      	ldr	r3, [r7, #28]
 810275e:	089b      	lsrs	r3, r3, #2
 8102760:	3302      	adds	r3, #2
 8102762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102768:	69fb      	ldr	r3, [r7, #28]
 810276a:	f003 0303 	and.w	r3, r3, #3
 810276e:	009b      	lsls	r3, r3, #2
 8102770:	220f      	movs	r2, #15
 8102772:	fa02 f303 	lsl.w	r3, r2, r3
 8102776:	43db      	mvns	r3, r3
 8102778:	69ba      	ldr	r2, [r7, #24]
 810277a:	4013      	ands	r3, r2
 810277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	4a20      	ldr	r2, [pc, #128]	; (8102804 <HAL_GPIO_Init+0x240>)
 8102782:	4293      	cmp	r3, r2
 8102784:	d052      	beq.n	810282c <HAL_GPIO_Init+0x268>
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	4a1f      	ldr	r2, [pc, #124]	; (8102808 <HAL_GPIO_Init+0x244>)
 810278a:	4293      	cmp	r3, r2
 810278c:	d031      	beq.n	81027f2 <HAL_GPIO_Init+0x22e>
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	4a1e      	ldr	r2, [pc, #120]	; (810280c <HAL_GPIO_Init+0x248>)
 8102792:	4293      	cmp	r3, r2
 8102794:	d02b      	beq.n	81027ee <HAL_GPIO_Init+0x22a>
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	4a1d      	ldr	r2, [pc, #116]	; (8102810 <HAL_GPIO_Init+0x24c>)
 810279a:	4293      	cmp	r3, r2
 810279c:	d025      	beq.n	81027ea <HAL_GPIO_Init+0x226>
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	4a1c      	ldr	r2, [pc, #112]	; (8102814 <HAL_GPIO_Init+0x250>)
 81027a2:	4293      	cmp	r3, r2
 81027a4:	d01f      	beq.n	81027e6 <HAL_GPIO_Init+0x222>
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	4a1b      	ldr	r2, [pc, #108]	; (8102818 <HAL_GPIO_Init+0x254>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d019      	beq.n	81027e2 <HAL_GPIO_Init+0x21e>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	4a1a      	ldr	r2, [pc, #104]	; (810281c <HAL_GPIO_Init+0x258>)
 81027b2:	4293      	cmp	r3, r2
 81027b4:	d013      	beq.n	81027de <HAL_GPIO_Init+0x21a>
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	4a19      	ldr	r2, [pc, #100]	; (8102820 <HAL_GPIO_Init+0x25c>)
 81027ba:	4293      	cmp	r3, r2
 81027bc:	d00d      	beq.n	81027da <HAL_GPIO_Init+0x216>
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	4a18      	ldr	r2, [pc, #96]	; (8102824 <HAL_GPIO_Init+0x260>)
 81027c2:	4293      	cmp	r3, r2
 81027c4:	d007      	beq.n	81027d6 <HAL_GPIO_Init+0x212>
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	4a17      	ldr	r2, [pc, #92]	; (8102828 <HAL_GPIO_Init+0x264>)
 81027ca:	4293      	cmp	r3, r2
 81027cc:	d101      	bne.n	81027d2 <HAL_GPIO_Init+0x20e>
 81027ce:	2309      	movs	r3, #9
 81027d0:	e02d      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027d2:	230a      	movs	r3, #10
 81027d4:	e02b      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027d6:	2308      	movs	r3, #8
 81027d8:	e029      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027da:	2307      	movs	r3, #7
 81027dc:	e027      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027de:	2306      	movs	r3, #6
 81027e0:	e025      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027e2:	2305      	movs	r3, #5
 81027e4:	e023      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027e6:	2304      	movs	r3, #4
 81027e8:	e021      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027ea:	2303      	movs	r3, #3
 81027ec:	e01f      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027ee:	2302      	movs	r3, #2
 81027f0:	e01d      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027f2:	2301      	movs	r3, #1
 81027f4:	e01b      	b.n	810282e <HAL_GPIO_Init+0x26a>
 81027f6:	bf00      	nop
 81027f8:	580000c0 	.word	0x580000c0
 81027fc:	58024400 	.word	0x58024400
 8102800:	58000400 	.word	0x58000400
 8102804:	58020000 	.word	0x58020000
 8102808:	58020400 	.word	0x58020400
 810280c:	58020800 	.word	0x58020800
 8102810:	58020c00 	.word	0x58020c00
 8102814:	58021000 	.word	0x58021000
 8102818:	58021400 	.word	0x58021400
 810281c:	58021800 	.word	0x58021800
 8102820:	58021c00 	.word	0x58021c00
 8102824:	58022000 	.word	0x58022000
 8102828:	58022400 	.word	0x58022400
 810282c:	2300      	movs	r3, #0
 810282e:	69fa      	ldr	r2, [r7, #28]
 8102830:	f002 0203 	and.w	r2, r2, #3
 8102834:	0092      	lsls	r2, r2, #2
 8102836:	4093      	lsls	r3, r2
 8102838:	69ba      	ldr	r2, [r7, #24]
 810283a:	4313      	orrs	r3, r2
 810283c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810283e:	4938      	ldr	r1, [pc, #224]	; (8102920 <HAL_GPIO_Init+0x35c>)
 8102840:	69fb      	ldr	r3, [r7, #28]
 8102842:	089b      	lsrs	r3, r3, #2
 8102844:	3302      	adds	r3, #2
 8102846:	69ba      	ldr	r2, [r7, #24]
 8102848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102854:	693b      	ldr	r3, [r7, #16]
 8102856:	43db      	mvns	r3, r3
 8102858:	69ba      	ldr	r2, [r7, #24]
 810285a:	4013      	ands	r3, r2
 810285c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810285e:	683b      	ldr	r3, [r7, #0]
 8102860:	685b      	ldr	r3, [r3, #4]
 8102862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102866:	2b00      	cmp	r3, #0
 8102868:	d003      	beq.n	8102872 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810286a:	69ba      	ldr	r2, [r7, #24]
 810286c:	693b      	ldr	r3, [r7, #16]
 810286e:	4313      	orrs	r3, r2
 8102870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102876:	69bb      	ldr	r3, [r7, #24]
 8102878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810287a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810287e:	685b      	ldr	r3, [r3, #4]
 8102880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102882:	693b      	ldr	r3, [r7, #16]
 8102884:	43db      	mvns	r3, r3
 8102886:	69ba      	ldr	r2, [r7, #24]
 8102888:	4013      	ands	r3, r2
 810288a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810288c:	683b      	ldr	r3, [r7, #0]
 810288e:	685b      	ldr	r3, [r3, #4]
 8102890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102894:	2b00      	cmp	r3, #0
 8102896:	d003      	beq.n	81028a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102898:	69ba      	ldr	r2, [r7, #24]
 810289a:	693b      	ldr	r3, [r7, #16]
 810289c:	4313      	orrs	r3, r2
 810289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81028a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81028a4:	69bb      	ldr	r3, [r7, #24]
 81028a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81028a8:	697b      	ldr	r3, [r7, #20]
 81028aa:	685b      	ldr	r3, [r3, #4]
 81028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81028ae:	693b      	ldr	r3, [r7, #16]
 81028b0:	43db      	mvns	r3, r3
 81028b2:	69ba      	ldr	r2, [r7, #24]
 81028b4:	4013      	ands	r3, r2
 81028b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81028b8:	683b      	ldr	r3, [r7, #0]
 81028ba:	685b      	ldr	r3, [r3, #4]
 81028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d003      	beq.n	81028cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81028c4:	69ba      	ldr	r2, [r7, #24]
 81028c6:	693b      	ldr	r3, [r7, #16]
 81028c8:	4313      	orrs	r3, r2
 81028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81028cc:	697b      	ldr	r3, [r7, #20]
 81028ce:	69ba      	ldr	r2, [r7, #24]
 81028d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81028d2:	697b      	ldr	r3, [r7, #20]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81028d8:	693b      	ldr	r3, [r7, #16]
 81028da:	43db      	mvns	r3, r3
 81028dc:	69ba      	ldr	r2, [r7, #24]
 81028de:	4013      	ands	r3, r2
 81028e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81028e2:	683b      	ldr	r3, [r7, #0]
 81028e4:	685b      	ldr	r3, [r3, #4]
 81028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81028ea:	2b00      	cmp	r3, #0
 81028ec:	d003      	beq.n	81028f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81028ee:	69ba      	ldr	r2, [r7, #24]
 81028f0:	693b      	ldr	r3, [r7, #16]
 81028f2:	4313      	orrs	r3, r2
 81028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81028f6:	697b      	ldr	r3, [r7, #20]
 81028f8:	69ba      	ldr	r2, [r7, #24]
 81028fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81028fc:	69fb      	ldr	r3, [r7, #28]
 81028fe:	3301      	adds	r3, #1
 8102900:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102902:	683b      	ldr	r3, [r7, #0]
 8102904:	681a      	ldr	r2, [r3, #0]
 8102906:	69fb      	ldr	r3, [r7, #28]
 8102908:	fa22 f303 	lsr.w	r3, r2, r3
 810290c:	2b00      	cmp	r3, #0
 810290e:	f47f ae63 	bne.w	81025d8 <HAL_GPIO_Init+0x14>
  }
}
 8102912:	bf00      	nop
 8102914:	bf00      	nop
 8102916:	3724      	adds	r7, #36	; 0x24
 8102918:	46bd      	mov	sp, r7
 810291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810291e:	4770      	bx	lr
 8102920:	58000400 	.word	0x58000400

08102924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102924:	b480      	push	{r7}
 8102926:	b083      	sub	sp, #12
 8102928:	af00      	add	r7, sp, #0
 810292a:	6078      	str	r0, [r7, #4]
 810292c:	460b      	mov	r3, r1
 810292e:	807b      	strh	r3, [r7, #2]
 8102930:	4613      	mov	r3, r2
 8102932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102934:	787b      	ldrb	r3, [r7, #1]
 8102936:	2b00      	cmp	r3, #0
 8102938:	d003      	beq.n	8102942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810293a:	887a      	ldrh	r2, [r7, #2]
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102940:	e003      	b.n	810294a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102942:	887b      	ldrh	r3, [r7, #2]
 8102944:	041a      	lsls	r2, r3, #16
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	619a      	str	r2, [r3, #24]
}
 810294a:	bf00      	nop
 810294c:	370c      	adds	r7, #12
 810294e:	46bd      	mov	sp, r7
 8102950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102954:	4770      	bx	lr
	...

08102958 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8102958:	b480      	push	{r7}
 810295a:	b083      	sub	sp, #12
 810295c:	af00      	add	r7, sp, #0
 810295e:	6078      	str	r0, [r7, #4]
 8102960:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8102962:	490e      	ldr	r1, [pc, #56]	; (810299c <HAL_HSEM_Take+0x44>)
 8102964:	683b      	ldr	r3, [r7, #0]
 8102966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810296e:	687a      	ldr	r2, [r7, #4]
 8102970:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8102974:	4a09      	ldr	r2, [pc, #36]	; (810299c <HAL_HSEM_Take+0x44>)
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810297c:	683b      	ldr	r3, [r7, #0]
 810297e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8102982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102986:	429a      	cmp	r2, r3
 8102988:	d101      	bne.n	810298e <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810298a:	2300      	movs	r3, #0
 810298c:	e000      	b.n	8102990 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810298e:	2301      	movs	r3, #1
}
 8102990:	4618      	mov	r0, r3
 8102992:	370c      	adds	r7, #12
 8102994:	46bd      	mov	sp, r7
 8102996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810299a:	4770      	bx	lr
 810299c:	58026400 	.word	0x58026400

081029a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81029a0:	b480      	push	{r7}
 81029a2:	b083      	sub	sp, #12
 81029a4:	af00      	add	r7, sp, #0
 81029a6:	6078      	str	r0, [r7, #4]
 81029a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81029aa:	4906      	ldr	r1, [pc, #24]	; (81029c4 <HAL_HSEM_Release+0x24>)
 81029ac:	683b      	ldr	r3, [r7, #0]
 81029ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81029b8:	bf00      	nop
 81029ba:	370c      	adds	r7, #12
 81029bc:	46bd      	mov	sp, r7
 81029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c2:	4770      	bx	lr
 81029c4:	58026400 	.word	0x58026400

081029c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81029c8:	b480      	push	{r7}
 81029ca:	b083      	sub	sp, #12
 81029cc:	af00      	add	r7, sp, #0
 81029ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81029d0:	4b05      	ldr	r3, [pc, #20]	; (81029e8 <HAL_HSEM_ActivateNotification+0x20>)
 81029d2:	681a      	ldr	r2, [r3, #0]
 81029d4:	4904      	ldr	r1, [pc, #16]	; (81029e8 <HAL_HSEM_ActivateNotification+0x20>)
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	4313      	orrs	r3, r2
 81029da:	600b      	str	r3, [r1, #0]
#endif
}
 81029dc:	bf00      	nop
 81029de:	370c      	adds	r7, #12
 81029e0:	46bd      	mov	sp, r7
 81029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029e6:	4770      	bx	lr
 81029e8:	58026510 	.word	0x58026510

081029ec <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81029ec:	b580      	push	{r7, lr}
 81029ee:	b084      	sub	sp, #16
 81029f0:	af00      	add	r7, sp, #0
 81029f2:	60f8      	str	r0, [r7, #12]
 81029f4:	460b      	mov	r3, r1
 81029f6:	607a      	str	r2, [r7, #4]
 81029f8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81029fa:	4b37      	ldr	r3, [pc, #220]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	f023 0201 	bic.w	r2, r3, #1
 8102a02:	4935      	ldr	r1, [pc, #212]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a04:	68fb      	ldr	r3, [r7, #12]
 8102a06:	4313      	orrs	r3, r2
 8102a08:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	2b00      	cmp	r3, #0
 8102a0e:	d123      	bne.n	8102a58 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102a10:	f7ff f862 	bl	8101ad8 <HAL_GetCurrentCPUID>
 8102a14:	4603      	mov	r3, r0
 8102a16:	2b03      	cmp	r3, #3
 8102a18:	d158      	bne.n	8102acc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102a1a:	4b2f      	ldr	r3, [pc, #188]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a1c:	691b      	ldr	r3, [r3, #16]
 8102a1e:	4a2e      	ldr	r2, [pc, #184]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a20:	f023 0301 	bic.w	r3, r3, #1
 8102a24:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a26:	4b2d      	ldr	r3, [pc, #180]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a28:	691b      	ldr	r3, [r3, #16]
 8102a2a:	4a2c      	ldr	r2, [pc, #176]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a2c:	f043 0304 	orr.w	r3, r3, #4
 8102a30:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102a32:	f3bf 8f4f 	dsb	sy
}
 8102a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102a38:	f3bf 8f6f 	isb	sy
}
 8102a3c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102a3e:	7afb      	ldrb	r3, [r7, #11]
 8102a40:	2b01      	cmp	r3, #1
 8102a42:	d101      	bne.n	8102a48 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102a44:	bf30      	wfi
 8102a46:	e000      	b.n	8102a4a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102a48:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a4a:	4b24      	ldr	r3, [pc, #144]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a4c:	691b      	ldr	r3, [r3, #16]
 8102a4e:	4a23      	ldr	r2, [pc, #140]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a50:	f023 0304 	bic.w	r3, r3, #4
 8102a54:	6113      	str	r3, [r2, #16]
 8102a56:	e03c      	b.n	8102ad2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	2b01      	cmp	r3, #1
 8102a5c:	d123      	bne.n	8102aa6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102a5e:	f7ff f83b 	bl	8101ad8 <HAL_GetCurrentCPUID>
 8102a62:	4603      	mov	r3, r0
 8102a64:	2b01      	cmp	r3, #1
 8102a66:	d133      	bne.n	8102ad0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102a68:	4b1b      	ldr	r3, [pc, #108]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a6a:	695b      	ldr	r3, [r3, #20]
 8102a6c:	4a1a      	ldr	r2, [pc, #104]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a6e:	f023 0302 	bic.w	r3, r3, #2
 8102a72:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a74:	4b19      	ldr	r3, [pc, #100]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a76:	691b      	ldr	r3, [r3, #16]
 8102a78:	4a18      	ldr	r2, [pc, #96]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a7a:	f043 0304 	orr.w	r3, r3, #4
 8102a7e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102a80:	f3bf 8f4f 	dsb	sy
}
 8102a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102a86:	f3bf 8f6f 	isb	sy
}
 8102a8a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102a8c:	7afb      	ldrb	r3, [r7, #11]
 8102a8e:	2b01      	cmp	r3, #1
 8102a90:	d101      	bne.n	8102a96 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102a92:	bf30      	wfi
 8102a94:	e000      	b.n	8102a98 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102a96:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a98:	4b10      	ldr	r3, [pc, #64]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a9a:	691b      	ldr	r3, [r3, #16]
 8102a9c:	4a0f      	ldr	r2, [pc, #60]	; (8102adc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a9e:	f023 0304 	bic.w	r3, r3, #4
 8102aa2:	6113      	str	r3, [r2, #16]
 8102aa4:	e015      	b.n	8102ad2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102aa6:	f7ff f817 	bl	8101ad8 <HAL_GetCurrentCPUID>
 8102aaa:	4603      	mov	r3, r0
 8102aac:	2b03      	cmp	r3, #3
 8102aae:	d106      	bne.n	8102abe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102ab0:	4b09      	ldr	r3, [pc, #36]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ab2:	691b      	ldr	r3, [r3, #16]
 8102ab4:	4a08      	ldr	r2, [pc, #32]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ab6:	f023 0304 	bic.w	r3, r3, #4
 8102aba:	6113      	str	r3, [r2, #16]
 8102abc:	e009      	b.n	8102ad2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102abe:	4b06      	ldr	r3, [pc, #24]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ac0:	695b      	ldr	r3, [r3, #20]
 8102ac2:	4a05      	ldr	r2, [pc, #20]	; (8102ad8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ac4:	f023 0304 	bic.w	r3, r3, #4
 8102ac8:	6153      	str	r3, [r2, #20]
 8102aca:	e002      	b.n	8102ad2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102acc:	bf00      	nop
 8102ace:	e000      	b.n	8102ad2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102ad0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102ad2:	3710      	adds	r7, #16
 8102ad4:	46bd      	mov	sp, r7
 8102ad6:	bd80      	pop	{r7, pc}
 8102ad8:	58024800 	.word	0x58024800
 8102adc:	e000ed00 	.word	0xe000ed00

08102ae0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102ae0:	b580      	push	{r7, lr}
 8102ae2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ae4:	f7fe fff8 	bl	8101ad8 <HAL_GetCurrentCPUID>
 8102ae8:	4603      	mov	r3, r0
 8102aea:	2b03      	cmp	r3, #3
 8102aec:	d101      	bne.n	8102af2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102aee:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102af0:	e001      	b.n	8102af6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102af2:	bf40      	sev
    __WFE ();
 8102af4:	bf20      	wfe
}
 8102af6:	bf00      	nop
 8102af8:	bd80      	pop	{r7, pc}
	...

08102afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102afc:	b480      	push	{r7}
 8102afe:	b089      	sub	sp, #36	; 0x24
 8102b00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102b02:	4bb3      	ldr	r3, [pc, #716]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b04:	691b      	ldr	r3, [r3, #16]
 8102b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102b0a:	2b18      	cmp	r3, #24
 8102b0c:	f200 8155 	bhi.w	8102dba <HAL_RCC_GetSysClockFreq+0x2be>
 8102b10:	a201      	add	r2, pc, #4	; (adr r2, 8102b18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b16:	bf00      	nop
 8102b18:	08102b7d 	.word	0x08102b7d
 8102b1c:	08102dbb 	.word	0x08102dbb
 8102b20:	08102dbb 	.word	0x08102dbb
 8102b24:	08102dbb 	.word	0x08102dbb
 8102b28:	08102dbb 	.word	0x08102dbb
 8102b2c:	08102dbb 	.word	0x08102dbb
 8102b30:	08102dbb 	.word	0x08102dbb
 8102b34:	08102dbb 	.word	0x08102dbb
 8102b38:	08102ba3 	.word	0x08102ba3
 8102b3c:	08102dbb 	.word	0x08102dbb
 8102b40:	08102dbb 	.word	0x08102dbb
 8102b44:	08102dbb 	.word	0x08102dbb
 8102b48:	08102dbb 	.word	0x08102dbb
 8102b4c:	08102dbb 	.word	0x08102dbb
 8102b50:	08102dbb 	.word	0x08102dbb
 8102b54:	08102dbb 	.word	0x08102dbb
 8102b58:	08102ba9 	.word	0x08102ba9
 8102b5c:	08102dbb 	.word	0x08102dbb
 8102b60:	08102dbb 	.word	0x08102dbb
 8102b64:	08102dbb 	.word	0x08102dbb
 8102b68:	08102dbb 	.word	0x08102dbb
 8102b6c:	08102dbb 	.word	0x08102dbb
 8102b70:	08102dbb 	.word	0x08102dbb
 8102b74:	08102dbb 	.word	0x08102dbb
 8102b78:	08102baf 	.word	0x08102baf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102b7c:	4b94      	ldr	r3, [pc, #592]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	f003 0320 	and.w	r3, r3, #32
 8102b84:	2b00      	cmp	r3, #0
 8102b86:	d009      	beq.n	8102b9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102b88:	4b91      	ldr	r3, [pc, #580]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	08db      	lsrs	r3, r3, #3
 8102b8e:	f003 0303 	and.w	r3, r3, #3
 8102b92:	4a90      	ldr	r2, [pc, #576]	; (8102dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102b94:	fa22 f303 	lsr.w	r3, r2, r3
 8102b98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102b9a:	e111      	b.n	8102dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102b9c:	4b8d      	ldr	r3, [pc, #564]	; (8102dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102b9e:	61bb      	str	r3, [r7, #24]
    break;
 8102ba0:	e10e      	b.n	8102dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102ba2:	4b8d      	ldr	r3, [pc, #564]	; (8102dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102ba4:	61bb      	str	r3, [r7, #24]
    break;
 8102ba6:	e10b      	b.n	8102dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102ba8:	4b8c      	ldr	r3, [pc, #560]	; (8102ddc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102baa:	61bb      	str	r3, [r7, #24]
    break;
 8102bac:	e108      	b.n	8102dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102bae:	4b88      	ldr	r3, [pc, #544]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102bb2:	f003 0303 	and.w	r3, r3, #3
 8102bb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102bb8:	4b85      	ldr	r3, [pc, #532]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102bbc:	091b      	lsrs	r3, r3, #4
 8102bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102bc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102bc4:	4b82      	ldr	r3, [pc, #520]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bc8:	f003 0301 	and.w	r3, r3, #1
 8102bcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102bce:	4b80      	ldr	r3, [pc, #512]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102bd2:	08db      	lsrs	r3, r3, #3
 8102bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102bd8:	68fa      	ldr	r2, [r7, #12]
 8102bda:	fb02 f303 	mul.w	r3, r2, r3
 8102bde:	ee07 3a90 	vmov	s15, r3
 8102be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102be6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102bea:	693b      	ldr	r3, [r7, #16]
 8102bec:	2b00      	cmp	r3, #0
 8102bee:	f000 80e1 	beq.w	8102db4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102bf2:	697b      	ldr	r3, [r7, #20]
 8102bf4:	2b02      	cmp	r3, #2
 8102bf6:	f000 8083 	beq.w	8102d00 <HAL_RCC_GetSysClockFreq+0x204>
 8102bfa:	697b      	ldr	r3, [r7, #20]
 8102bfc:	2b02      	cmp	r3, #2
 8102bfe:	f200 80a1 	bhi.w	8102d44 <HAL_RCC_GetSysClockFreq+0x248>
 8102c02:	697b      	ldr	r3, [r7, #20]
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d003      	beq.n	8102c10 <HAL_RCC_GetSysClockFreq+0x114>
 8102c08:	697b      	ldr	r3, [r7, #20]
 8102c0a:	2b01      	cmp	r3, #1
 8102c0c:	d056      	beq.n	8102cbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8102c0e:	e099      	b.n	8102d44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102c10:	4b6f      	ldr	r3, [pc, #444]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	f003 0320 	and.w	r3, r3, #32
 8102c18:	2b00      	cmp	r3, #0
 8102c1a:	d02d      	beq.n	8102c78 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102c1c:	4b6c      	ldr	r3, [pc, #432]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	08db      	lsrs	r3, r3, #3
 8102c22:	f003 0303 	and.w	r3, r3, #3
 8102c26:	4a6b      	ldr	r2, [pc, #428]	; (8102dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c28:	fa22 f303 	lsr.w	r3, r2, r3
 8102c2c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	ee07 3a90 	vmov	s15, r3
 8102c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c38:	693b      	ldr	r3, [r7, #16]
 8102c3a:	ee07 3a90 	vmov	s15, r3
 8102c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c46:	4b62      	ldr	r3, [pc, #392]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c4e:	ee07 3a90 	vmov	s15, r3
 8102c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102c76:	e087      	b.n	8102d88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102c78:	693b      	ldr	r3, [r7, #16]
 8102c7a:	ee07 3a90 	vmov	s15, r3
 8102c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c82:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102de4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c8a:	4b51      	ldr	r3, [pc, #324]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c92:	ee07 3a90 	vmov	s15, r3
 8102c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102cba:	e065      	b.n	8102d88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102cbc:	693b      	ldr	r3, [r7, #16]
 8102cbe:	ee07 3a90 	vmov	s15, r3
 8102cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cce:	4b40      	ldr	r3, [pc, #256]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cd6:	ee07 3a90 	vmov	s15, r3
 8102cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ce2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102cfe:	e043      	b.n	8102d88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d00:	693b      	ldr	r3, [r7, #16]
 8102d02:	ee07 3a90 	vmov	s15, r3
 8102d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102dec <HAL_RCC_GetSysClockFreq+0x2f0>
 8102d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d12:	4b2f      	ldr	r3, [pc, #188]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d1a:	ee07 3a90 	vmov	s15, r3
 8102d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d42:	e021      	b.n	8102d88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d44:	693b      	ldr	r3, [r7, #16]
 8102d46:	ee07 3a90 	vmov	s15, r3
 8102d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d56:	4b1e      	ldr	r3, [pc, #120]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d5e:	ee07 3a90 	vmov	s15, r3
 8102d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102d88:	4b11      	ldr	r3, [pc, #68]	; (8102dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d8c:	0a5b      	lsrs	r3, r3, #9
 8102d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d92:	3301      	adds	r3, #1
 8102d94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102d96:	683b      	ldr	r3, [r7, #0]
 8102d98:	ee07 3a90 	vmov	s15, r3
 8102d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102dac:	ee17 3a90 	vmov	r3, s15
 8102db0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102db2:	e005      	b.n	8102dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102db4:	2300      	movs	r3, #0
 8102db6:	61bb      	str	r3, [r7, #24]
    break;
 8102db8:	e002      	b.n	8102dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102dba:	4b07      	ldr	r3, [pc, #28]	; (8102dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102dbc:	61bb      	str	r3, [r7, #24]
    break;
 8102dbe:	bf00      	nop
  }

  return sysclockfreq;
 8102dc0:	69bb      	ldr	r3, [r7, #24]
}
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	3724      	adds	r7, #36	; 0x24
 8102dc6:	46bd      	mov	sp, r7
 8102dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dcc:	4770      	bx	lr
 8102dce:	bf00      	nop
 8102dd0:	58024400 	.word	0x58024400
 8102dd4:	03d09000 	.word	0x03d09000
 8102dd8:	003d0900 	.word	0x003d0900
 8102ddc:	017d7840 	.word	0x017d7840
 8102de0:	46000000 	.word	0x46000000
 8102de4:	4c742400 	.word	0x4c742400
 8102de8:	4a742400 	.word	0x4a742400
 8102dec:	4bbebc20 	.word	0x4bbebc20

08102df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102df0:	b580      	push	{r7, lr}
 8102df2:	b082      	sub	sp, #8
 8102df4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102df6:	f7ff fe81 	bl	8102afc <HAL_RCC_GetSysClockFreq>
 8102dfa:	4602      	mov	r2, r0
 8102dfc:	4b11      	ldr	r3, [pc, #68]	; (8102e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8102dfe:	699b      	ldr	r3, [r3, #24]
 8102e00:	0a1b      	lsrs	r3, r3, #8
 8102e02:	f003 030f 	and.w	r3, r3, #15
 8102e06:	4910      	ldr	r1, [pc, #64]	; (8102e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8102e08:	5ccb      	ldrb	r3, [r1, r3]
 8102e0a:	f003 031f 	and.w	r3, r3, #31
 8102e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8102e12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e14:	4b0b      	ldr	r3, [pc, #44]	; (8102e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8102e16:	699b      	ldr	r3, [r3, #24]
 8102e18:	f003 030f 	and.w	r3, r3, #15
 8102e1c:	4a0a      	ldr	r2, [pc, #40]	; (8102e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8102e1e:	5cd3      	ldrb	r3, [r2, r3]
 8102e20:	f003 031f 	and.w	r3, r3, #31
 8102e24:	687a      	ldr	r2, [r7, #4]
 8102e26:	fa22 f303 	lsr.w	r3, r2, r3
 8102e2a:	4a08      	ldr	r2, [pc, #32]	; (8102e4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102e2c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102e2e:	4b07      	ldr	r3, [pc, #28]	; (8102e4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	4a07      	ldr	r2, [pc, #28]	; (8102e50 <HAL_RCC_GetHCLKFreq+0x60>)
 8102e34:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102e36:	4b05      	ldr	r3, [pc, #20]	; (8102e4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102e38:	681b      	ldr	r3, [r3, #0]
}
 8102e3a:	4618      	mov	r0, r3
 8102e3c:	3708      	adds	r7, #8
 8102e3e:	46bd      	mov	sp, r7
 8102e40:	bd80      	pop	{r7, pc}
 8102e42:	bf00      	nop
 8102e44:	58024400 	.word	0x58024400
 8102e48:	08107088 	.word	0x08107088
 8102e4c:	10000004 	.word	0x10000004
 8102e50:	10000000 	.word	0x10000000

08102e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102e54:	b580      	push	{r7, lr}
 8102e56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102e58:	f7ff ffca 	bl	8102df0 <HAL_RCC_GetHCLKFreq>
 8102e5c:	4602      	mov	r2, r0
 8102e5e:	4b06      	ldr	r3, [pc, #24]	; (8102e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102e60:	69db      	ldr	r3, [r3, #28]
 8102e62:	091b      	lsrs	r3, r3, #4
 8102e64:	f003 0307 	and.w	r3, r3, #7
 8102e68:	4904      	ldr	r1, [pc, #16]	; (8102e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8102e6a:	5ccb      	ldrb	r3, [r1, r3]
 8102e6c:	f003 031f 	and.w	r3, r3, #31
 8102e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102e74:	4618      	mov	r0, r3
 8102e76:	bd80      	pop	{r7, pc}
 8102e78:	58024400 	.word	0x58024400
 8102e7c:	08107088 	.word	0x08107088

08102e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102e80:	b580      	push	{r7, lr}
 8102e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102e84:	f7ff ffb4 	bl	8102df0 <HAL_RCC_GetHCLKFreq>
 8102e88:	4602      	mov	r2, r0
 8102e8a:	4b06      	ldr	r3, [pc, #24]	; (8102ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102e8c:	69db      	ldr	r3, [r3, #28]
 8102e8e:	0a1b      	lsrs	r3, r3, #8
 8102e90:	f003 0307 	and.w	r3, r3, #7
 8102e94:	4904      	ldr	r1, [pc, #16]	; (8102ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8102e96:	5ccb      	ldrb	r3, [r1, r3]
 8102e98:	f003 031f 	and.w	r3, r3, #31
 8102e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102ea0:	4618      	mov	r0, r3
 8102ea2:	bd80      	pop	{r7, pc}
 8102ea4:	58024400 	.word	0x58024400
 8102ea8:	08107088 	.word	0x08107088

08102eac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102eac:	b580      	push	{r7, lr}
 8102eae:	b086      	sub	sp, #24
 8102eb0:	af00      	add	r7, sp, #0
 8102eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102eb4:	2300      	movs	r3, #0
 8102eb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102eb8:	2300      	movs	r3, #0
 8102eba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102ec4:	2b00      	cmp	r3, #0
 8102ec6:	d03f      	beq.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102ecc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ed0:	d02a      	beq.n	8102f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102ed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ed6:	d824      	bhi.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102edc:	d018      	beq.n	8102f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ee2:	d81e      	bhi.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d003      	beq.n	8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102eec:	d007      	beq.n	8102efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102eee:	e018      	b.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ef0:	4bab      	ldr	r3, [pc, #684]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ef4:	4aaa      	ldr	r2, [pc, #680]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102efc:	e015      	b.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	3304      	adds	r3, #4
 8102f02:	2102      	movs	r1, #2
 8102f04:	4618      	mov	r0, r3
 8102f06:	f001 f9cf 	bl	81042a8 <RCCEx_PLL2_Config>
 8102f0a:	4603      	mov	r3, r0
 8102f0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f0e:	e00c      	b.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	3324      	adds	r3, #36	; 0x24
 8102f14:	2102      	movs	r1, #2
 8102f16:	4618      	mov	r0, r3
 8102f18:	f001 fa78 	bl	810440c <RCCEx_PLL3_Config>
 8102f1c:	4603      	mov	r3, r0
 8102f1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f20:	e003      	b.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f22:	2301      	movs	r3, #1
 8102f24:	75fb      	strb	r3, [r7, #23]
      break;
 8102f26:	e000      	b.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f2a:	7dfb      	ldrb	r3, [r7, #23]
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d109      	bne.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102f30:	4b9b      	ldr	r3, [pc, #620]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102f3c:	4998      	ldr	r1, [pc, #608]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f3e:	4313      	orrs	r3, r2
 8102f40:	650b      	str	r3, [r1, #80]	; 0x50
 8102f42:	e001      	b.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f44:	7dfb      	ldrb	r3, [r7, #23]
 8102f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d03d      	beq.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f58:	2b04      	cmp	r3, #4
 8102f5a:	d826      	bhi.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102f5c:	a201      	add	r2, pc, #4	; (adr r2, 8102f64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f62:	bf00      	nop
 8102f64:	08102f79 	.word	0x08102f79
 8102f68:	08102f87 	.word	0x08102f87
 8102f6c:	08102f99 	.word	0x08102f99
 8102f70:	08102fb1 	.word	0x08102fb1
 8102f74:	08102fb1 	.word	0x08102fb1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f78:	4b89      	ldr	r3, [pc, #548]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f7c:	4a88      	ldr	r2, [pc, #544]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f84:	e015      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	3304      	adds	r3, #4
 8102f8a:	2100      	movs	r1, #0
 8102f8c:	4618      	mov	r0, r3
 8102f8e:	f001 f98b 	bl	81042a8 <RCCEx_PLL2_Config>
 8102f92:	4603      	mov	r3, r0
 8102f94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f96:	e00c      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	3324      	adds	r3, #36	; 0x24
 8102f9c:	2100      	movs	r1, #0
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	f001 fa34 	bl	810440c <RCCEx_PLL3_Config>
 8102fa4:	4603      	mov	r3, r0
 8102fa6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fa8:	e003      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102faa:	2301      	movs	r3, #1
 8102fac:	75fb      	strb	r3, [r7, #23]
      break;
 8102fae:	e000      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fb2:	7dfb      	ldrb	r3, [r7, #23]
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d109      	bne.n	8102fcc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102fb8:	4b79      	ldr	r3, [pc, #484]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fbc:	f023 0207 	bic.w	r2, r3, #7
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fc4:	4976      	ldr	r1, [pc, #472]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fc6:	4313      	orrs	r3, r2
 8102fc8:	650b      	str	r3, [r1, #80]	; 0x50
 8102fca:	e001      	b.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fcc:	7dfb      	ldrb	r3, [r7, #23]
 8102fce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d042      	beq.n	8103062 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102fe4:	d02b      	beq.n	810303e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102fea:	d825      	bhi.n	8103038 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102fec:	2bc0      	cmp	r3, #192	; 0xc0
 8102fee:	d028      	beq.n	8103042 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8102ff2:	d821      	bhi.n	8103038 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102ff4:	2b80      	cmp	r3, #128	; 0x80
 8102ff6:	d016      	beq.n	8103026 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102ff8:	2b80      	cmp	r3, #128	; 0x80
 8102ffa:	d81d      	bhi.n	8103038 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d002      	beq.n	8103006 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103000:	2b40      	cmp	r3, #64	; 0x40
 8103002:	d007      	beq.n	8103014 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103004:	e018      	b.n	8103038 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103006:	4b66      	ldr	r3, [pc, #408]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810300a:	4a65      	ldr	r2, [pc, #404]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103012:	e017      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	3304      	adds	r3, #4
 8103018:	2100      	movs	r1, #0
 810301a:	4618      	mov	r0, r3
 810301c:	f001 f944 	bl	81042a8 <RCCEx_PLL2_Config>
 8103020:	4603      	mov	r3, r0
 8103022:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103024:	e00e      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	3324      	adds	r3, #36	; 0x24
 810302a:	2100      	movs	r1, #0
 810302c:	4618      	mov	r0, r3
 810302e:	f001 f9ed 	bl	810440c <RCCEx_PLL3_Config>
 8103032:	4603      	mov	r3, r0
 8103034:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103036:	e005      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103038:	2301      	movs	r3, #1
 810303a:	75fb      	strb	r3, [r7, #23]
      break;
 810303c:	e002      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810303e:	bf00      	nop
 8103040:	e000      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103044:	7dfb      	ldrb	r3, [r7, #23]
 8103046:	2b00      	cmp	r3, #0
 8103048:	d109      	bne.n	810305e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810304a:	4b55      	ldr	r3, [pc, #340]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810304e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103056:	4952      	ldr	r1, [pc, #328]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103058:	4313      	orrs	r3, r2
 810305a:	650b      	str	r3, [r1, #80]	; 0x50
 810305c:	e001      	b.n	8103062 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810305e:	7dfb      	ldrb	r3, [r7, #23]
 8103060:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810306a:	2b00      	cmp	r3, #0
 810306c:	d049      	beq.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103078:	d030      	beq.n	81030dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 810307a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810307e:	d82a      	bhi.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103080:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103084:	d02c      	beq.n	81030e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103086:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810308a:	d824      	bhi.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810308c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103090:	d018      	beq.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103096:	d81e      	bhi.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103098:	2b00      	cmp	r3, #0
 810309a:	d003      	beq.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810309c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81030a0:	d007      	beq.n	81030b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 81030a2:	e018      	b.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030a4:	4b3e      	ldr	r3, [pc, #248]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030a8:	4a3d      	ldr	r2, [pc, #244]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81030b0:	e017      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	3304      	adds	r3, #4
 81030b6:	2100      	movs	r1, #0
 81030b8:	4618      	mov	r0, r3
 81030ba:	f001 f8f5 	bl	81042a8 <RCCEx_PLL2_Config>
 81030be:	4603      	mov	r3, r0
 81030c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81030c2:	e00e      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	3324      	adds	r3, #36	; 0x24
 81030c8:	2100      	movs	r1, #0
 81030ca:	4618      	mov	r0, r3
 81030cc:	f001 f99e 	bl	810440c <RCCEx_PLL3_Config>
 81030d0:	4603      	mov	r3, r0
 81030d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81030d4:	e005      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81030d6:	2301      	movs	r3, #1
 81030d8:	75fb      	strb	r3, [r7, #23]
      break;
 81030da:	e002      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81030dc:	bf00      	nop
 81030de:	e000      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030e2:	7dfb      	ldrb	r3, [r7, #23]
 81030e4:	2b00      	cmp	r3, #0
 81030e6:	d10a      	bne.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81030e8:	4b2d      	ldr	r3, [pc, #180]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81030f6:	492a      	ldr	r1, [pc, #168]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030f8:	4313      	orrs	r3, r2
 81030fa:	658b      	str	r3, [r1, #88]	; 0x58
 81030fc:	e001      	b.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030fe:	7dfb      	ldrb	r3, [r7, #23]
 8103100:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810310a:	2b00      	cmp	r3, #0
 810310c:	d04c      	beq.n	81031a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103118:	d030      	beq.n	810317c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810311a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810311e:	d82a      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103120:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103124:	d02c      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103126:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810312a:	d824      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810312c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103130:	d018      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103136:	d81e      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103138:	2b00      	cmp	r3, #0
 810313a:	d003      	beq.n	8103144 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103140:	d007      	beq.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103142:	e018      	b.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103144:	4b16      	ldr	r3, [pc, #88]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103148:	4a15      	ldr	r2, [pc, #84]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810314a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810314e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103150:	e017      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	3304      	adds	r3, #4
 8103156:	2100      	movs	r1, #0
 8103158:	4618      	mov	r0, r3
 810315a:	f001 f8a5 	bl	81042a8 <RCCEx_PLL2_Config>
 810315e:	4603      	mov	r3, r0
 8103160:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103162:	e00e      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	3324      	adds	r3, #36	; 0x24
 8103168:	2100      	movs	r1, #0
 810316a:	4618      	mov	r0, r3
 810316c:	f001 f94e 	bl	810440c <RCCEx_PLL3_Config>
 8103170:	4603      	mov	r3, r0
 8103172:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103174:	e005      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103176:	2301      	movs	r3, #1
 8103178:	75fb      	strb	r3, [r7, #23]
      break;
 810317a:	e002      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810317c:	bf00      	nop
 810317e:	e000      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103182:	7dfb      	ldrb	r3, [r7, #23]
 8103184:	2b00      	cmp	r3, #0
 8103186:	d10d      	bne.n	81031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103188:	4b05      	ldr	r3, [pc, #20]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810318c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103196:	4902      	ldr	r1, [pc, #8]	; (81031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103198:	4313      	orrs	r3, r2
 810319a:	658b      	str	r3, [r1, #88]	; 0x58
 810319c:	e004      	b.n	81031a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810319e:	bf00      	nop
 81031a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031a4:	7dfb      	ldrb	r3, [r7, #23]
 81031a6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81031b0:	2b00      	cmp	r3, #0
 81031b2:	d032      	beq.n	810321a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81031b8:	2b30      	cmp	r3, #48	; 0x30
 81031ba:	d01c      	beq.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81031bc:	2b30      	cmp	r3, #48	; 0x30
 81031be:	d817      	bhi.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81031c0:	2b20      	cmp	r3, #32
 81031c2:	d00c      	beq.n	81031de <HAL_RCCEx_PeriphCLKConfig+0x332>
 81031c4:	2b20      	cmp	r3, #32
 81031c6:	d813      	bhi.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d016      	beq.n	81031fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81031cc:	2b10      	cmp	r3, #16
 81031ce:	d10f      	bne.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031d0:	4baf      	ldr	r3, [pc, #700]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031d4:	4aae      	ldr	r2, [pc, #696]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81031dc:	e00e      	b.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	3304      	adds	r3, #4
 81031e2:	2102      	movs	r1, #2
 81031e4:	4618      	mov	r0, r3
 81031e6:	f001 f85f 	bl	81042a8 <RCCEx_PLL2_Config>
 81031ea:	4603      	mov	r3, r0
 81031ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81031ee:	e005      	b.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81031f0:	2301      	movs	r3, #1
 81031f2:	75fb      	strb	r3, [r7, #23]
      break;
 81031f4:	e002      	b.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81031f6:	bf00      	nop
 81031f8:	e000      	b.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81031fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81031fc:	7dfb      	ldrb	r3, [r7, #23]
 81031fe:	2b00      	cmp	r3, #0
 8103200:	d109      	bne.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103202:	4ba3      	ldr	r3, [pc, #652]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103206:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810320e:	49a0      	ldr	r1, [pc, #640]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103210:	4313      	orrs	r3, r2
 8103212:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103214:	e001      	b.n	810321a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103216:	7dfb      	ldrb	r3, [r7, #23]
 8103218:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103222:	2b00      	cmp	r3, #0
 8103224:	d047      	beq.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810322a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810322e:	d030      	beq.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103234:	d82a      	bhi.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810323a:	d02c      	beq.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810323c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103240:	d824      	bhi.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103246:	d018      	beq.n	810327a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810324c:	d81e      	bhi.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810324e:	2b00      	cmp	r3, #0
 8103250:	d003      	beq.n	810325a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103256:	d007      	beq.n	8103268 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103258:	e018      	b.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810325a:	4b8d      	ldr	r3, [pc, #564]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810325e:	4a8c      	ldr	r2, [pc, #560]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103266:	e017      	b.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	3304      	adds	r3, #4
 810326c:	2100      	movs	r1, #0
 810326e:	4618      	mov	r0, r3
 8103270:	f001 f81a 	bl	81042a8 <RCCEx_PLL2_Config>
 8103274:	4603      	mov	r3, r0
 8103276:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103278:	e00e      	b.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	3324      	adds	r3, #36	; 0x24
 810327e:	2100      	movs	r1, #0
 8103280:	4618      	mov	r0, r3
 8103282:	f001 f8c3 	bl	810440c <RCCEx_PLL3_Config>
 8103286:	4603      	mov	r3, r0
 8103288:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810328a:	e005      	b.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810328c:	2301      	movs	r3, #1
 810328e:	75fb      	strb	r3, [r7, #23]
      break;
 8103290:	e002      	b.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103292:	bf00      	nop
 8103294:	e000      	b.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103298:	7dfb      	ldrb	r3, [r7, #23]
 810329a:	2b00      	cmp	r3, #0
 810329c:	d109      	bne.n	81032b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810329e:	4b7c      	ldr	r3, [pc, #496]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032aa:	4979      	ldr	r1, [pc, #484]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032ac:	4313      	orrs	r3, r2
 81032ae:	650b      	str	r3, [r1, #80]	; 0x50
 81032b0:	e001      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032b2:	7dfb      	ldrb	r3, [r7, #23]
 81032b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81032be:	2b00      	cmp	r3, #0
 81032c0:	d049      	beq.n	8103356 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81032ca:	d02e      	beq.n	810332a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81032cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81032d0:	d828      	bhi.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81032d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81032d6:	d02a      	beq.n	810332e <HAL_RCCEx_PeriphCLKConfig+0x482>
 81032d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81032dc:	d822      	bhi.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81032de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032e2:	d026      	beq.n	8103332 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81032e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032e8:	d81c      	bhi.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81032ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81032ee:	d010      	beq.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x466>
 81032f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81032f4:	d816      	bhi.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81032f6:	2b00      	cmp	r3, #0
 81032f8:	d01d      	beq.n	8103336 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81032fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81032fe:	d111      	bne.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	3304      	adds	r3, #4
 8103304:	2101      	movs	r1, #1
 8103306:	4618      	mov	r0, r3
 8103308:	f000 ffce 	bl	81042a8 <RCCEx_PLL2_Config>
 810330c:	4603      	mov	r3, r0
 810330e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103310:	e012      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	3324      	adds	r3, #36	; 0x24
 8103316:	2101      	movs	r1, #1
 8103318:	4618      	mov	r0, r3
 810331a:	f001 f877 	bl	810440c <RCCEx_PLL3_Config>
 810331e:	4603      	mov	r3, r0
 8103320:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103322:	e009      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103324:	2301      	movs	r3, #1
 8103326:	75fb      	strb	r3, [r7, #23]
      break;
 8103328:	e006      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810332a:	bf00      	nop
 810332c:	e004      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810332e:	bf00      	nop
 8103330:	e002      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103332:	bf00      	nop
 8103334:	e000      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103338:	7dfb      	ldrb	r3, [r7, #23]
 810333a:	2b00      	cmp	r3, #0
 810333c:	d109      	bne.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810333e:	4b54      	ldr	r3, [pc, #336]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103342:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810334a:	4951      	ldr	r1, [pc, #324]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810334c:	4313      	orrs	r3, r2
 810334e:	650b      	str	r3, [r1, #80]	; 0x50
 8103350:	e001      	b.n	8103356 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103352:	7dfb      	ldrb	r3, [r7, #23]
 8103354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810335e:	2b00      	cmp	r3, #0
 8103360:	d04b      	beq.n	81033fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810336c:	d02e      	beq.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x520>
 810336e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103372:	d828      	bhi.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103378:	d02a      	beq.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810337e:	d822      	bhi.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103384:	d026      	beq.n	81033d4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103386:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810338a:	d81c      	bhi.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103390:	d010      	beq.n	81033b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103396:	d816      	bhi.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103398:	2b00      	cmp	r3, #0
 810339a:	d01d      	beq.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810339c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81033a0:	d111      	bne.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	3304      	adds	r3, #4
 81033a6:	2101      	movs	r1, #1
 81033a8:	4618      	mov	r0, r3
 81033aa:	f000 ff7d 	bl	81042a8 <RCCEx_PLL2_Config>
 81033ae:	4603      	mov	r3, r0
 81033b0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81033b2:	e012      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	3324      	adds	r3, #36	; 0x24
 81033b8:	2101      	movs	r1, #1
 81033ba:	4618      	mov	r0, r3
 81033bc:	f001 f826 	bl	810440c <RCCEx_PLL3_Config>
 81033c0:	4603      	mov	r3, r0
 81033c2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81033c4:	e009      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81033c6:	2301      	movs	r3, #1
 81033c8:	75fb      	strb	r3, [r7, #23]
      break;
 81033ca:	e006      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033cc:	bf00      	nop
 81033ce:	e004      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033d0:	bf00      	nop
 81033d2:	e002      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033d4:	bf00      	nop
 81033d6:	e000      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033da:	7dfb      	ldrb	r3, [r7, #23]
 81033dc:	2b00      	cmp	r3, #0
 81033de:	d10a      	bne.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81033e0:	4b2b      	ldr	r3, [pc, #172]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81033e4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81033ee:	4928      	ldr	r1, [pc, #160]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033f0:	4313      	orrs	r3, r2
 81033f2:	658b      	str	r3, [r1, #88]	; 0x58
 81033f4:	e001      	b.n	81033fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033f6:	7dfb      	ldrb	r3, [r7, #23]
 81033f8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	681b      	ldr	r3, [r3, #0]
 81033fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103402:	2b00      	cmp	r3, #0
 8103404:	d02f      	beq.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810340a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810340e:	d00e      	beq.n	810342e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103414:	d814      	bhi.n	8103440 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8103416:	2b00      	cmp	r3, #0
 8103418:	d015      	beq.n	8103446 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810341a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810341e:	d10f      	bne.n	8103440 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103420:	4b1b      	ldr	r3, [pc, #108]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103424:	4a1a      	ldr	r2, [pc, #104]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810342a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810342c:	e00c      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	3304      	adds	r3, #4
 8103432:	2101      	movs	r1, #1
 8103434:	4618      	mov	r0, r3
 8103436:	f000 ff37 	bl	81042a8 <RCCEx_PLL2_Config>
 810343a:	4603      	mov	r3, r0
 810343c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810343e:	e003      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103440:	2301      	movs	r3, #1
 8103442:	75fb      	strb	r3, [r7, #23]
      break;
 8103444:	e000      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103448:	7dfb      	ldrb	r3, [r7, #23]
 810344a:	2b00      	cmp	r3, #0
 810344c:	d109      	bne.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810344e:	4b10      	ldr	r3, [pc, #64]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810345a:	490d      	ldr	r1, [pc, #52]	; (8103490 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810345c:	4313      	orrs	r3, r2
 810345e:	650b      	str	r3, [r1, #80]	; 0x50
 8103460:	e001      	b.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103462:	7dfb      	ldrb	r3, [r7, #23]
 8103464:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810346e:	2b00      	cmp	r3, #0
 8103470:	d033      	beq.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103476:	2b03      	cmp	r3, #3
 8103478:	d81c      	bhi.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810347a:	a201      	add	r2, pc, #4	; (adr r2, 8103480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103480:	081034bb 	.word	0x081034bb
 8103484:	08103495 	.word	0x08103495
 8103488:	081034a3 	.word	0x081034a3
 810348c:	081034bb 	.word	0x081034bb
 8103490:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103494:	4bb9      	ldr	r3, [pc, #740]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103498:	4ab8      	ldr	r2, [pc, #736]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810349a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810349e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81034a0:	e00c      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	3304      	adds	r3, #4
 81034a6:	2102      	movs	r1, #2
 81034a8:	4618      	mov	r0, r3
 81034aa:	f000 fefd 	bl	81042a8 <RCCEx_PLL2_Config>
 81034ae:	4603      	mov	r3, r0
 81034b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81034b2:	e003      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81034b4:	2301      	movs	r3, #1
 81034b6:	75fb      	strb	r3, [r7, #23]
      break;
 81034b8:	e000      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81034ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034bc:	7dfb      	ldrb	r3, [r7, #23]
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d109      	bne.n	81034d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81034c2:	4bae      	ldr	r3, [pc, #696]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81034c6:	f023 0203 	bic.w	r2, r3, #3
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034ce:	49ab      	ldr	r1, [pc, #684]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034d0:	4313      	orrs	r3, r2
 81034d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81034d4:	e001      	b.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034d6:	7dfb      	ldrb	r3, [r7, #23]
 81034d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	f000 8088 	beq.w	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81034e8:	4ba5      	ldr	r3, [pc, #660]	; (8103780 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4aa4      	ldr	r2, [pc, #656]	; (8103780 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81034ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81034f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81034f4:	f7fe f9d4 	bl	81018a0 <HAL_GetTick>
 81034f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81034fa:	e009      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81034fc:	f7fe f9d0 	bl	81018a0 <HAL_GetTick>
 8103500:	4602      	mov	r2, r0
 8103502:	693b      	ldr	r3, [r7, #16]
 8103504:	1ad3      	subs	r3, r2, r3
 8103506:	2b64      	cmp	r3, #100	; 0x64
 8103508:	d902      	bls.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810350a:	2303      	movs	r3, #3
 810350c:	75fb      	strb	r3, [r7, #23]
        break;
 810350e:	e005      	b.n	810351c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103510:	4b9b      	ldr	r3, [pc, #620]	; (8103780 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103518:	2b00      	cmp	r3, #0
 810351a:	d0ef      	beq.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810351c:	7dfb      	ldrb	r3, [r7, #23]
 810351e:	2b00      	cmp	r3, #0
 8103520:	d168      	bne.n	81035f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103522:	4b96      	ldr	r3, [pc, #600]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810352c:	4053      	eors	r3, r2
 810352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103532:	2b00      	cmp	r3, #0
 8103534:	d013      	beq.n	810355e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103536:	4b91      	ldr	r3, [pc, #580]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810353e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103540:	4b8e      	ldr	r3, [pc, #568]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103544:	4a8d      	ldr	r2, [pc, #564]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810354a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810354c:	4b8b      	ldr	r3, [pc, #556]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103550:	4a8a      	ldr	r2, [pc, #552]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103556:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103558:	4a88      	ldr	r2, [pc, #544]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810355a:	68fb      	ldr	r3, [r7, #12]
 810355c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103568:	d115      	bne.n	8103596 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810356a:	f7fe f999 	bl	81018a0 <HAL_GetTick>
 810356e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103570:	e00b      	b.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103572:	f7fe f995 	bl	81018a0 <HAL_GetTick>
 8103576:	4602      	mov	r2, r0
 8103578:	693b      	ldr	r3, [r7, #16]
 810357a:	1ad3      	subs	r3, r2, r3
 810357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8103580:	4293      	cmp	r3, r2
 8103582:	d902      	bls.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103584:	2303      	movs	r3, #3
 8103586:	75fb      	strb	r3, [r7, #23]
            break;
 8103588:	e005      	b.n	8103596 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810358a:	4b7c      	ldr	r3, [pc, #496]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810358e:	f003 0302 	and.w	r3, r3, #2
 8103592:	2b00      	cmp	r3, #0
 8103594:	d0ed      	beq.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103596:	7dfb      	ldrb	r3, [r7, #23]
 8103598:	2b00      	cmp	r3, #0
 810359a:	d128      	bne.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81035a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81035aa:	d10f      	bne.n	81035cc <HAL_RCCEx_PeriphCLKConfig+0x720>
 81035ac:	4b73      	ldr	r3, [pc, #460]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ae:	691b      	ldr	r3, [r3, #16]
 81035b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035ba:	091b      	lsrs	r3, r3, #4
 81035bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81035c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81035c4:	496d      	ldr	r1, [pc, #436]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035c6:	4313      	orrs	r3, r2
 81035c8:	610b      	str	r3, [r1, #16]
 81035ca:	e005      	b.n	81035d8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81035cc:	4b6b      	ldr	r3, [pc, #428]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ce:	691b      	ldr	r3, [r3, #16]
 81035d0:	4a6a      	ldr	r2, [pc, #424]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81035d6:	6113      	str	r3, [r2, #16]
 81035d8:	4b68      	ldr	r3, [pc, #416]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81035e6:	4965      	ldr	r1, [pc, #404]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035e8:	4313      	orrs	r3, r2
 81035ea:	670b      	str	r3, [r1, #112]	; 0x70
 81035ec:	e004      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81035ee:	7dfb      	ldrb	r3, [r7, #23]
 81035f0:	75bb      	strb	r3, [r7, #22]
 81035f2:	e001      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035f4:	7dfb      	ldrb	r3, [r7, #23]
 81035f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	f003 0301 	and.w	r3, r3, #1
 8103600:	2b00      	cmp	r3, #0
 8103602:	d07e      	beq.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103608:	2b28      	cmp	r3, #40	; 0x28
 810360a:	d867      	bhi.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x830>
 810360c:	a201      	add	r2, pc, #4	; (adr r2, 8103614 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103612:	bf00      	nop
 8103614:	081036e3 	.word	0x081036e3
 8103618:	081036dd 	.word	0x081036dd
 810361c:	081036dd 	.word	0x081036dd
 8103620:	081036dd 	.word	0x081036dd
 8103624:	081036dd 	.word	0x081036dd
 8103628:	081036dd 	.word	0x081036dd
 810362c:	081036dd 	.word	0x081036dd
 8103630:	081036dd 	.word	0x081036dd
 8103634:	081036b9 	.word	0x081036b9
 8103638:	081036dd 	.word	0x081036dd
 810363c:	081036dd 	.word	0x081036dd
 8103640:	081036dd 	.word	0x081036dd
 8103644:	081036dd 	.word	0x081036dd
 8103648:	081036dd 	.word	0x081036dd
 810364c:	081036dd 	.word	0x081036dd
 8103650:	081036dd 	.word	0x081036dd
 8103654:	081036cb 	.word	0x081036cb
 8103658:	081036dd 	.word	0x081036dd
 810365c:	081036dd 	.word	0x081036dd
 8103660:	081036dd 	.word	0x081036dd
 8103664:	081036dd 	.word	0x081036dd
 8103668:	081036dd 	.word	0x081036dd
 810366c:	081036dd 	.word	0x081036dd
 8103670:	081036dd 	.word	0x081036dd
 8103674:	081036e3 	.word	0x081036e3
 8103678:	081036dd 	.word	0x081036dd
 810367c:	081036dd 	.word	0x081036dd
 8103680:	081036dd 	.word	0x081036dd
 8103684:	081036dd 	.word	0x081036dd
 8103688:	081036dd 	.word	0x081036dd
 810368c:	081036dd 	.word	0x081036dd
 8103690:	081036dd 	.word	0x081036dd
 8103694:	081036e3 	.word	0x081036e3
 8103698:	081036dd 	.word	0x081036dd
 810369c:	081036dd 	.word	0x081036dd
 81036a0:	081036dd 	.word	0x081036dd
 81036a4:	081036dd 	.word	0x081036dd
 81036a8:	081036dd 	.word	0x081036dd
 81036ac:	081036dd 	.word	0x081036dd
 81036b0:	081036dd 	.word	0x081036dd
 81036b4:	081036e3 	.word	0x081036e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	3304      	adds	r3, #4
 81036bc:	2101      	movs	r1, #1
 81036be:	4618      	mov	r0, r3
 81036c0:	f000 fdf2 	bl	81042a8 <RCCEx_PLL2_Config>
 81036c4:	4603      	mov	r3, r0
 81036c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81036c8:	e00c      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	3324      	adds	r3, #36	; 0x24
 81036ce:	2101      	movs	r1, #1
 81036d0:	4618      	mov	r0, r3
 81036d2:	f000 fe9b 	bl	810440c <RCCEx_PLL3_Config>
 81036d6:	4603      	mov	r3, r0
 81036d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81036da:	e003      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036dc:	2301      	movs	r3, #1
 81036de:	75fb      	strb	r3, [r7, #23]
      break;
 81036e0:	e000      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81036e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036e4:	7dfb      	ldrb	r3, [r7, #23]
 81036e6:	2b00      	cmp	r3, #0
 81036e8:	d109      	bne.n	81036fe <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81036ea:	4b24      	ldr	r3, [pc, #144]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81036f6:	4921      	ldr	r1, [pc, #132]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81036f8:	4313      	orrs	r3, r2
 81036fa:	654b      	str	r3, [r1, #84]	; 0x54
 81036fc:	e001      	b.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036fe:	7dfb      	ldrb	r3, [r7, #23]
 8103700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	f003 0302 	and.w	r3, r3, #2
 810370a:	2b00      	cmp	r3, #0
 810370c:	d03c      	beq.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103712:	2b05      	cmp	r3, #5
 8103714:	d820      	bhi.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103716:	a201      	add	r2, pc, #4	; (adr r2, 810371c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810371c:	0810375f 	.word	0x0810375f
 8103720:	08103735 	.word	0x08103735
 8103724:	08103747 	.word	0x08103747
 8103728:	0810375f 	.word	0x0810375f
 810372c:	0810375f 	.word	0x0810375f
 8103730:	0810375f 	.word	0x0810375f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	3304      	adds	r3, #4
 8103738:	2101      	movs	r1, #1
 810373a:	4618      	mov	r0, r3
 810373c:	f000 fdb4 	bl	81042a8 <RCCEx_PLL2_Config>
 8103740:	4603      	mov	r3, r0
 8103742:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103744:	e00c      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	3324      	adds	r3, #36	; 0x24
 810374a:	2101      	movs	r1, #1
 810374c:	4618      	mov	r0, r3
 810374e:	f000 fe5d 	bl	810440c <RCCEx_PLL3_Config>
 8103752:	4603      	mov	r3, r0
 8103754:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103756:	e003      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103758:	2301      	movs	r3, #1
 810375a:	75fb      	strb	r3, [r7, #23]
      break;
 810375c:	e000      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810375e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103760:	7dfb      	ldrb	r3, [r7, #23]
 8103762:	2b00      	cmp	r3, #0
 8103764:	d10e      	bne.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103766:	4b05      	ldr	r3, [pc, #20]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810376a:	f023 0207 	bic.w	r2, r3, #7
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103772:	4902      	ldr	r1, [pc, #8]	; (810377c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103774:	4313      	orrs	r3, r2
 8103776:	654b      	str	r3, [r1, #84]	; 0x54
 8103778:	e006      	b.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810377a:	bf00      	nop
 810377c:	58024400 	.word	0x58024400
 8103780:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103784:	7dfb      	ldrb	r3, [r7, #23]
 8103786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	f003 0304 	and.w	r3, r3, #4
 8103790:	2b00      	cmp	r3, #0
 8103792:	d039      	beq.n	8103808 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810379a:	2b05      	cmp	r3, #5
 810379c:	d820      	bhi.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810379e:	a201      	add	r2, pc, #4	; (adr r2, 81037a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037a4:	081037e7 	.word	0x081037e7
 81037a8:	081037bd 	.word	0x081037bd
 81037ac:	081037cf 	.word	0x081037cf
 81037b0:	081037e7 	.word	0x081037e7
 81037b4:	081037e7 	.word	0x081037e7
 81037b8:	081037e7 	.word	0x081037e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	3304      	adds	r3, #4
 81037c0:	2101      	movs	r1, #1
 81037c2:	4618      	mov	r0, r3
 81037c4:	f000 fd70 	bl	81042a8 <RCCEx_PLL2_Config>
 81037c8:	4603      	mov	r3, r0
 81037ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81037cc:	e00c      	b.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	3324      	adds	r3, #36	; 0x24
 81037d2:	2101      	movs	r1, #1
 81037d4:	4618      	mov	r0, r3
 81037d6:	f000 fe19 	bl	810440c <RCCEx_PLL3_Config>
 81037da:	4603      	mov	r3, r0
 81037dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81037de:	e003      	b.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037e0:	2301      	movs	r3, #1
 81037e2:	75fb      	strb	r3, [r7, #23]
      break;
 81037e4:	e000      	b.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81037e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037e8:	7dfb      	ldrb	r3, [r7, #23]
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d10a      	bne.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81037ee:	4bb7      	ldr	r3, [pc, #732]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037f2:	f023 0207 	bic.w	r2, r3, #7
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81037fc:	49b3      	ldr	r1, [pc, #716]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037fe:	4313      	orrs	r3, r2
 8103800:	658b      	str	r3, [r1, #88]	; 0x58
 8103802:	e001      	b.n	8103808 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103804:	7dfb      	ldrb	r3, [r7, #23]
 8103806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	f003 0320 	and.w	r3, r3, #32
 8103810:	2b00      	cmp	r3, #0
 8103812:	d04b      	beq.n	81038ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810381a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810381e:	d02e      	beq.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103824:	d828      	bhi.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810382a:	d02a      	beq.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810382c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103830:	d822      	bhi.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103836:	d026      	beq.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103838:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810383c:	d81c      	bhi.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810383e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103842:	d010      	beq.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103848:	d816      	bhi.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810384a:	2b00      	cmp	r3, #0
 810384c:	d01d      	beq.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810384e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103852:	d111      	bne.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	3304      	adds	r3, #4
 8103858:	2100      	movs	r1, #0
 810385a:	4618      	mov	r0, r3
 810385c:	f000 fd24 	bl	81042a8 <RCCEx_PLL2_Config>
 8103860:	4603      	mov	r3, r0
 8103862:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103864:	e012      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	3324      	adds	r3, #36	; 0x24
 810386a:	2102      	movs	r1, #2
 810386c:	4618      	mov	r0, r3
 810386e:	f000 fdcd 	bl	810440c <RCCEx_PLL3_Config>
 8103872:	4603      	mov	r3, r0
 8103874:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103876:	e009      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103878:	2301      	movs	r3, #1
 810387a:	75fb      	strb	r3, [r7, #23]
      break;
 810387c:	e006      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810387e:	bf00      	nop
 8103880:	e004      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103882:	bf00      	nop
 8103884:	e002      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103886:	bf00      	nop
 8103888:	e000      	b.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810388a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810388c:	7dfb      	ldrb	r3, [r7, #23]
 810388e:	2b00      	cmp	r3, #0
 8103890:	d10a      	bne.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103892:	4b8e      	ldr	r3, [pc, #568]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103896:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81038a0:	498a      	ldr	r1, [pc, #552]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81038a2:	4313      	orrs	r3, r2
 81038a4:	654b      	str	r3, [r1, #84]	; 0x54
 81038a6:	e001      	b.n	81038ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038a8:	7dfb      	ldrb	r3, [r7, #23]
 81038aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81038b4:	2b00      	cmp	r3, #0
 81038b6:	d04b      	beq.n	8103950 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81038be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81038c2:	d02e      	beq.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81038c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81038c8:	d828      	bhi.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81038ce:	d02a      	beq.n	8103926 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81038d4:	d822      	bhi.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81038da:	d026      	beq.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81038dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81038e0:	d81c      	bhi.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81038e6:	d010      	beq.n	810390a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81038e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81038ec:	d816      	bhi.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038ee:	2b00      	cmp	r3, #0
 81038f0:	d01d      	beq.n	810392e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81038f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81038f6:	d111      	bne.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	3304      	adds	r3, #4
 81038fc:	2100      	movs	r1, #0
 81038fe:	4618      	mov	r0, r3
 8103900:	f000 fcd2 	bl	81042a8 <RCCEx_PLL2_Config>
 8103904:	4603      	mov	r3, r0
 8103906:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103908:	e012      	b.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	3324      	adds	r3, #36	; 0x24
 810390e:	2102      	movs	r1, #2
 8103910:	4618      	mov	r0, r3
 8103912:	f000 fd7b 	bl	810440c <RCCEx_PLL3_Config>
 8103916:	4603      	mov	r3, r0
 8103918:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810391a:	e009      	b.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810391c:	2301      	movs	r3, #1
 810391e:	75fb      	strb	r3, [r7, #23]
      break;
 8103920:	e006      	b.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103922:	bf00      	nop
 8103924:	e004      	b.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103926:	bf00      	nop
 8103928:	e002      	b.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810392a:	bf00      	nop
 810392c:	e000      	b.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810392e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103930:	7dfb      	ldrb	r3, [r7, #23]
 8103932:	2b00      	cmp	r3, #0
 8103934:	d10a      	bne.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103936:	4b65      	ldr	r3, [pc, #404]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810393a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103944:	4961      	ldr	r1, [pc, #388]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103946:	4313      	orrs	r3, r2
 8103948:	658b      	str	r3, [r1, #88]	; 0x58
 810394a:	e001      	b.n	8103950 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810394c:	7dfb      	ldrb	r3, [r7, #23]
 810394e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103958:	2b00      	cmp	r3, #0
 810395a:	d04b      	beq.n	81039f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103962:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103966:	d02e      	beq.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103968:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810396c:	d828      	bhi.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810396e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103972:	d02a      	beq.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103978:	d822      	bhi.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810397a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810397e:	d026      	beq.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103980:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103984:	d81c      	bhi.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810398a:	d010      	beq.n	81039ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810398c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103990:	d816      	bhi.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103992:	2b00      	cmp	r3, #0
 8103994:	d01d      	beq.n	81039d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810399a:	d111      	bne.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	3304      	adds	r3, #4
 81039a0:	2100      	movs	r1, #0
 81039a2:	4618      	mov	r0, r3
 81039a4:	f000 fc80 	bl	81042a8 <RCCEx_PLL2_Config>
 81039a8:	4603      	mov	r3, r0
 81039aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81039ac:	e012      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	3324      	adds	r3, #36	; 0x24
 81039b2:	2102      	movs	r1, #2
 81039b4:	4618      	mov	r0, r3
 81039b6:	f000 fd29 	bl	810440c <RCCEx_PLL3_Config>
 81039ba:	4603      	mov	r3, r0
 81039bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81039be:	e009      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039c0:	2301      	movs	r3, #1
 81039c2:	75fb      	strb	r3, [r7, #23]
      break;
 81039c4:	e006      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039c6:	bf00      	nop
 81039c8:	e004      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039ca:	bf00      	nop
 81039cc:	e002      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039ce:	bf00      	nop
 81039d0:	e000      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039d4:	7dfb      	ldrb	r3, [r7, #23]
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d10a      	bne.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81039da:	4b3c      	ldr	r3, [pc, #240]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81039e8:	4938      	ldr	r1, [pc, #224]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039ea:	4313      	orrs	r3, r2
 81039ec:	658b      	str	r3, [r1, #88]	; 0x58
 81039ee:	e001      	b.n	81039f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039f0:	7dfb      	ldrb	r3, [r7, #23]
 81039f2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f003 0308 	and.w	r3, r3, #8
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d01a      	beq.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103a0a:	d10a      	bne.n	8103a22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	3324      	adds	r3, #36	; 0x24
 8103a10:	2102      	movs	r1, #2
 8103a12:	4618      	mov	r0, r3
 8103a14:	f000 fcfa 	bl	810440c <RCCEx_PLL3_Config>
 8103a18:	4603      	mov	r3, r0
 8103a1a:	2b00      	cmp	r3, #0
 8103a1c:	d001      	beq.n	8103a22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103a1e:	2301      	movs	r3, #1
 8103a20:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103a22:	4b2a      	ldr	r3, [pc, #168]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103a30:	4926      	ldr	r1, [pc, #152]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a32:	4313      	orrs	r3, r2
 8103a34:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	f003 0310 	and.w	r3, r3, #16
 8103a3e:	2b00      	cmp	r3, #0
 8103a40:	d01a      	beq.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a4c:	d10a      	bne.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	3324      	adds	r3, #36	; 0x24
 8103a52:	2102      	movs	r1, #2
 8103a54:	4618      	mov	r0, r3
 8103a56:	f000 fcd9 	bl	810440c <RCCEx_PLL3_Config>
 8103a5a:	4603      	mov	r3, r0
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d001      	beq.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103a60:	2301      	movs	r3, #1
 8103a62:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103a64:	4b19      	ldr	r3, [pc, #100]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a72:	4916      	ldr	r1, [pc, #88]	; (8103acc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a74:	4313      	orrs	r3, r2
 8103a76:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103a80:	2b00      	cmp	r3, #0
 8103a82:	d036      	beq.n	8103af2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103a8e:	d01f      	beq.n	8103ad0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103a94:	d817      	bhi.n	8103ac6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103a96:	2b00      	cmp	r3, #0
 8103a98:	d003      	beq.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103a9e:	d009      	beq.n	8103ab4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103aa0:	e011      	b.n	8103ac6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	3304      	adds	r3, #4
 8103aa6:	2100      	movs	r1, #0
 8103aa8:	4618      	mov	r0, r3
 8103aaa:	f000 fbfd 	bl	81042a8 <RCCEx_PLL2_Config>
 8103aae:	4603      	mov	r3, r0
 8103ab0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103ab2:	e00e      	b.n	8103ad2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	3324      	adds	r3, #36	; 0x24
 8103ab8:	2102      	movs	r1, #2
 8103aba:	4618      	mov	r0, r3
 8103abc:	f000 fca6 	bl	810440c <RCCEx_PLL3_Config>
 8103ac0:	4603      	mov	r3, r0
 8103ac2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103ac4:	e005      	b.n	8103ad2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ac6:	2301      	movs	r3, #1
 8103ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8103aca:	e002      	b.n	8103ad2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103acc:	58024400 	.word	0x58024400
      break;
 8103ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ad2:	7dfb      	ldrb	r3, [r7, #23]
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d10a      	bne.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103ad8:	4b93      	ldr	r3, [pc, #588]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103ae6:	4990      	ldr	r1, [pc, #576]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ae8:	4313      	orrs	r3, r2
 8103aea:	658b      	str	r3, [r1, #88]	; 0x58
 8103aec:	e001      	b.n	8103af2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aee:	7dfb      	ldrb	r3, [r7, #23]
 8103af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103afa:	2b00      	cmp	r3, #0
 8103afc:	d033      	beq.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b08:	d01c      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b0e:	d816      	bhi.n	8103b3e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103b14:	d003      	beq.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b1a:	d007      	beq.n	8103b2c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103b1c:	e00f      	b.n	8103b3e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b1e:	4b82      	ldr	r3, [pc, #520]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b22:	4a81      	ldr	r2, [pc, #516]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103b2a:	e00c      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	3324      	adds	r3, #36	; 0x24
 8103b30:	2101      	movs	r1, #1
 8103b32:	4618      	mov	r0, r3
 8103b34:	f000 fc6a 	bl	810440c <RCCEx_PLL3_Config>
 8103b38:	4603      	mov	r3, r0
 8103b3a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103b3c:	e003      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b3e:	2301      	movs	r3, #1
 8103b40:	75fb      	strb	r3, [r7, #23]
      break;
 8103b42:	e000      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b46:	7dfb      	ldrb	r3, [r7, #23]
 8103b48:	2b00      	cmp	r3, #0
 8103b4a:	d10a      	bne.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103b4c:	4b76      	ldr	r3, [pc, #472]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103b5a:	4973      	ldr	r1, [pc, #460]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b5c:	4313      	orrs	r3, r2
 8103b5e:	654b      	str	r3, [r1, #84]	; 0x54
 8103b60:	e001      	b.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b62:	7dfb      	ldrb	r3, [r7, #23]
 8103b64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d029      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b76:	2b00      	cmp	r3, #0
 8103b78:	d003      	beq.n	8103b82 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b7e:	d007      	beq.n	8103b90 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103b80:	e00f      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b82:	4b69      	ldr	r3, [pc, #420]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b86:	4a68      	ldr	r2, [pc, #416]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103b8e:	e00b      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	3304      	adds	r3, #4
 8103b94:	2102      	movs	r1, #2
 8103b96:	4618      	mov	r0, r3
 8103b98:	f000 fb86 	bl	81042a8 <RCCEx_PLL2_Config>
 8103b9c:	4603      	mov	r3, r0
 8103b9e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103ba0:	e002      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103ba2:	2301      	movs	r3, #1
 8103ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8103ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ba8:	7dfb      	ldrb	r3, [r7, #23]
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d109      	bne.n	8103bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103bae:	4b5e      	ldr	r3, [pc, #376]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bba:	495b      	ldr	r1, [pc, #364]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bbc:	4313      	orrs	r3, r2
 8103bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103bc0:	e001      	b.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bc2:	7dfb      	ldrb	r3, [r7, #23]
 8103bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	d00a      	beq.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	3324      	adds	r3, #36	; 0x24
 8103bd6:	2102      	movs	r1, #2
 8103bd8:	4618      	mov	r0, r3
 8103bda:	f000 fc17 	bl	810440c <RCCEx_PLL3_Config>
 8103bde:	4603      	mov	r3, r0
 8103be0:	2b00      	cmp	r3, #0
 8103be2:	d001      	beq.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103be4:	2301      	movs	r3, #1
 8103be6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103bf0:	2b00      	cmp	r3, #0
 8103bf2:	d030      	beq.n	8103c56 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103bfc:	d017      	beq.n	8103c2e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c02:	d811      	bhi.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c08:	d013      	beq.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c0e:	d80b      	bhi.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d010      	beq.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c18:	d106      	bne.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c1a:	4b43      	ldr	r3, [pc, #268]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c1e:	4a42      	ldr	r2, [pc, #264]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103c26:	e007      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c28:	2301      	movs	r3, #1
 8103c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8103c2c:	e004      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103c2e:	bf00      	nop
 8103c30:	e002      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103c32:	bf00      	nop
 8103c34:	e000      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c38:	7dfb      	ldrb	r3, [r7, #23]
 8103c3a:	2b00      	cmp	r3, #0
 8103c3c:	d109      	bne.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103c3e:	4b3a      	ldr	r3, [pc, #232]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103c4a:	4937      	ldr	r1, [pc, #220]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c4c:	4313      	orrs	r3, r2
 8103c4e:	654b      	str	r3, [r1, #84]	; 0x54
 8103c50:	e001      	b.n	8103c56 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c52:	7dfb      	ldrb	r3, [r7, #23]
 8103c54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103c5e:	2b00      	cmp	r3, #0
 8103c60:	d008      	beq.n	8103c74 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103c62:	4b31      	ldr	r3, [pc, #196]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103c6e:	492e      	ldr	r1, [pc, #184]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c70:	4313      	orrs	r3, r2
 8103c72:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d009      	beq.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103c80:	4b29      	ldr	r3, [pc, #164]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c82:	691b      	ldr	r3, [r3, #16]
 8103c84:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103c8e:	4926      	ldr	r1, [pc, #152]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c90:	4313      	orrs	r3, r2
 8103c92:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d008      	beq.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103ca0:	4b21      	ldr	r3, [pc, #132]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ca4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103cac:	491e      	ldr	r1, [pc, #120]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cae:	4313      	orrs	r3, r2
 8103cb0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103cba:	2b00      	cmp	r3, #0
 8103cbc:	d00d      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103cbe:	4b1a      	ldr	r3, [pc, #104]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cc0:	691b      	ldr	r3, [r3, #16]
 8103cc2:	4a19      	ldr	r2, [pc, #100]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103cc8:	6113      	str	r3, [r2, #16]
 8103cca:	4b17      	ldr	r3, [pc, #92]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ccc:	691a      	ldr	r2, [r3, #16]
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103cd4:	4914      	ldr	r1, [pc, #80]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cd6:	4313      	orrs	r3, r2
 8103cd8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	681b      	ldr	r3, [r3, #0]
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	da08      	bge.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103ce2:	4b11      	ldr	r3, [pc, #68]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ce6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cee:	490e      	ldr	r1, [pc, #56]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cf0:	4313      	orrs	r3, r2
 8103cf2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103cfc:	2b00      	cmp	r3, #0
 8103cfe:	d009      	beq.n	8103d14 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103d00:	4b09      	ldr	r3, [pc, #36]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103d0e:	4906      	ldr	r1, [pc, #24]	; (8103d28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d10:	4313      	orrs	r3, r2
 8103d12:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103d14:	7dbb      	ldrb	r3, [r7, #22]
 8103d16:	2b00      	cmp	r3, #0
 8103d18:	d101      	bne.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103d1a:	2300      	movs	r3, #0
 8103d1c:	e000      	b.n	8103d20 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103d1e:	2301      	movs	r3, #1
}
 8103d20:	4618      	mov	r0, r3
 8103d22:	3718      	adds	r7, #24
 8103d24:	46bd      	mov	sp, r7
 8103d26:	bd80      	pop	{r7, pc}
 8103d28:	58024400 	.word	0x58024400

08103d2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103d2c:	b580      	push	{r7, lr}
 8103d2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103d30:	f7ff f85e 	bl	8102df0 <HAL_RCC_GetHCLKFreq>
 8103d34:	4602      	mov	r2, r0
 8103d36:	4b06      	ldr	r3, [pc, #24]	; (8103d50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103d38:	6a1b      	ldr	r3, [r3, #32]
 8103d3a:	091b      	lsrs	r3, r3, #4
 8103d3c:	f003 0307 	and.w	r3, r3, #7
 8103d40:	4904      	ldr	r1, [pc, #16]	; (8103d54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103d42:	5ccb      	ldrb	r3, [r1, r3]
 8103d44:	f003 031f 	and.w	r3, r3, #31
 8103d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103d4c:	4618      	mov	r0, r3
 8103d4e:	bd80      	pop	{r7, pc}
 8103d50:	58024400 	.word	0x58024400
 8103d54:	08107088 	.word	0x08107088

08103d58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103d58:	b480      	push	{r7}
 8103d5a:	b089      	sub	sp, #36	; 0x24
 8103d5c:	af00      	add	r7, sp, #0
 8103d5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103d60:	4ba1      	ldr	r3, [pc, #644]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d64:	f003 0303 	and.w	r3, r3, #3
 8103d68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103d6a:	4b9f      	ldr	r3, [pc, #636]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d6e:	0b1b      	lsrs	r3, r3, #12
 8103d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103d74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103d76:	4b9c      	ldr	r3, [pc, #624]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d7a:	091b      	lsrs	r3, r3, #4
 8103d7c:	f003 0301 	and.w	r3, r3, #1
 8103d80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103d82:	4b99      	ldr	r3, [pc, #612]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d86:	08db      	lsrs	r3, r3, #3
 8103d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d8c:	693a      	ldr	r2, [r7, #16]
 8103d8e:	fb02 f303 	mul.w	r3, r2, r3
 8103d92:	ee07 3a90 	vmov	s15, r3
 8103d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103d9e:	697b      	ldr	r3, [r7, #20]
 8103da0:	2b00      	cmp	r3, #0
 8103da2:	f000 8111 	beq.w	8103fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103da6:	69bb      	ldr	r3, [r7, #24]
 8103da8:	2b02      	cmp	r3, #2
 8103daa:	f000 8083 	beq.w	8103eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103dae:	69bb      	ldr	r3, [r7, #24]
 8103db0:	2b02      	cmp	r3, #2
 8103db2:	f200 80a1 	bhi.w	8103ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103db6:	69bb      	ldr	r3, [r7, #24]
 8103db8:	2b00      	cmp	r3, #0
 8103dba:	d003      	beq.n	8103dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103dbc:	69bb      	ldr	r3, [r7, #24]
 8103dbe:	2b01      	cmp	r3, #1
 8103dc0:	d056      	beq.n	8103e70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103dc2:	e099      	b.n	8103ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103dc4:	4b88      	ldr	r3, [pc, #544]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	f003 0320 	and.w	r3, r3, #32
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d02d      	beq.n	8103e2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103dd0:	4b85      	ldr	r3, [pc, #532]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	08db      	lsrs	r3, r3, #3
 8103dd6:	f003 0303 	and.w	r3, r3, #3
 8103dda:	4a84      	ldr	r2, [pc, #528]	; (8103fec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8103de0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103de2:	68bb      	ldr	r3, [r7, #8]
 8103de4:	ee07 3a90 	vmov	s15, r3
 8103de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103dec:	697b      	ldr	r3, [r7, #20]
 8103dee:	ee07 3a90 	vmov	s15, r3
 8103df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103dfa:	4b7b      	ldr	r3, [pc, #492]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e02:	ee07 3a90 	vmov	s15, r3
 8103e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103e2a:	e087      	b.n	8103f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103e2c:	697b      	ldr	r3, [r7, #20]
 8103e2e:	ee07 3a90 	vmov	s15, r3
 8103e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e3e:	4b6a      	ldr	r3, [pc, #424]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e46:	ee07 3a90 	vmov	s15, r3
 8103e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103e6e:	e065      	b.n	8103f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103e70:	697b      	ldr	r3, [r7, #20]
 8103e72:	ee07 3a90 	vmov	s15, r3
 8103e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e82:	4b59      	ldr	r3, [pc, #356]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e8a:	ee07 3a90 	vmov	s15, r3
 8103e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103eb2:	e043      	b.n	8103f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103eb4:	697b      	ldr	r3, [r7, #20]
 8103eb6:	ee07 3a90 	vmov	s15, r3
 8103eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ebe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ec6:	4b48      	ldr	r3, [pc, #288]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ece:	ee07 3a90 	vmov	s15, r3
 8103ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8103eda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103ef6:	e021      	b.n	8103f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103ef8:	697b      	ldr	r3, [r7, #20]
 8103efa:	ee07 3a90 	vmov	s15, r3
 8103efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f0a:	4b37      	ldr	r3, [pc, #220]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f12:	ee07 3a90 	vmov	s15, r3
 8103f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103f3c:	4b2a      	ldr	r3, [pc, #168]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f40:	0a5b      	lsrs	r3, r3, #9
 8103f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103f46:	ee07 3a90 	vmov	s15, r3
 8103f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f62:	ee17 2a90 	vmov	r2, s15
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103f6a:	4b1f      	ldr	r3, [pc, #124]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f6e:	0c1b      	lsrs	r3, r3, #16
 8103f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103f74:	ee07 3a90 	vmov	s15, r3
 8103f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f90:	ee17 2a90 	vmov	r2, s15
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8103f98:	4b13      	ldr	r3, [pc, #76]	; (8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f9c:	0e1b      	lsrs	r3, r3, #24
 8103f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103fa2:	ee07 3a90 	vmov	s15, r3
 8103fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8103fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103fbe:	ee17 2a90 	vmov	r2, s15
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103fc6:	e008      	b.n	8103fda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	2200      	movs	r2, #0
 8103fcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	2200      	movs	r2, #0
 8103fd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	2200      	movs	r2, #0
 8103fd8:	609a      	str	r2, [r3, #8]
}
 8103fda:	bf00      	nop
 8103fdc:	3724      	adds	r7, #36	; 0x24
 8103fde:	46bd      	mov	sp, r7
 8103fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe4:	4770      	bx	lr
 8103fe6:	bf00      	nop
 8103fe8:	58024400 	.word	0x58024400
 8103fec:	03d09000 	.word	0x03d09000
 8103ff0:	46000000 	.word	0x46000000
 8103ff4:	4c742400 	.word	0x4c742400
 8103ff8:	4a742400 	.word	0x4a742400
 8103ffc:	4bbebc20 	.word	0x4bbebc20

08104000 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104000:	b480      	push	{r7}
 8104002:	b089      	sub	sp, #36	; 0x24
 8104004:	af00      	add	r7, sp, #0
 8104006:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104008:	4ba1      	ldr	r3, [pc, #644]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810400c:	f003 0303 	and.w	r3, r3, #3
 8104010:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104012:	4b9f      	ldr	r3, [pc, #636]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104016:	0d1b      	lsrs	r3, r3, #20
 8104018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810401c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810401e:	4b9c      	ldr	r3, [pc, #624]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104022:	0a1b      	lsrs	r3, r3, #8
 8104024:	f003 0301 	and.w	r3, r3, #1
 8104028:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810402a:	4b99      	ldr	r3, [pc, #612]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810402e:	08db      	lsrs	r3, r3, #3
 8104030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104034:	693a      	ldr	r2, [r7, #16]
 8104036:	fb02 f303 	mul.w	r3, r2, r3
 810403a:	ee07 3a90 	vmov	s15, r3
 810403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104046:	697b      	ldr	r3, [r7, #20]
 8104048:	2b00      	cmp	r3, #0
 810404a:	f000 8111 	beq.w	8104270 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810404e:	69bb      	ldr	r3, [r7, #24]
 8104050:	2b02      	cmp	r3, #2
 8104052:	f000 8083 	beq.w	810415c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104056:	69bb      	ldr	r3, [r7, #24]
 8104058:	2b02      	cmp	r3, #2
 810405a:	f200 80a1 	bhi.w	81041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810405e:	69bb      	ldr	r3, [r7, #24]
 8104060:	2b00      	cmp	r3, #0
 8104062:	d003      	beq.n	810406c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104064:	69bb      	ldr	r3, [r7, #24]
 8104066:	2b01      	cmp	r3, #1
 8104068:	d056      	beq.n	8104118 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810406a:	e099      	b.n	81041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810406c:	4b88      	ldr	r3, [pc, #544]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810406e:	681b      	ldr	r3, [r3, #0]
 8104070:	f003 0320 	and.w	r3, r3, #32
 8104074:	2b00      	cmp	r3, #0
 8104076:	d02d      	beq.n	81040d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104078:	4b85      	ldr	r3, [pc, #532]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	08db      	lsrs	r3, r3, #3
 810407e:	f003 0303 	and.w	r3, r3, #3
 8104082:	4a84      	ldr	r2, [pc, #528]	; (8104294 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104084:	fa22 f303 	lsr.w	r3, r2, r3
 8104088:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810408a:	68bb      	ldr	r3, [r7, #8]
 810408c:	ee07 3a90 	vmov	s15, r3
 8104090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104094:	697b      	ldr	r3, [r7, #20]
 8104096:	ee07 3a90 	vmov	s15, r3
 810409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040a2:	4b7b      	ldr	r3, [pc, #492]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040aa:	ee07 3a90 	vmov	s15, r3
 81040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81040b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81040d2:	e087      	b.n	81041e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81040d4:	697b      	ldr	r3, [r7, #20]
 81040d6:	ee07 3a90 	vmov	s15, r3
 81040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810429c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040e6:	4b6a      	ldr	r3, [pc, #424]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040ee:	ee07 3a90 	vmov	s15, r3
 81040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81040fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104116:	e065      	b.n	81041e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104118:	697b      	ldr	r3, [r7, #20]
 810411a:	ee07 3a90 	vmov	s15, r3
 810411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810412a:	4b59      	ldr	r3, [pc, #356]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104132:	ee07 3a90 	vmov	s15, r3
 8104136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810413a:	ed97 6a03 	vldr	s12, [r7, #12]
 810413e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810415a:	e043      	b.n	81041e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810415c:	697b      	ldr	r3, [r7, #20]
 810415e:	ee07 3a90 	vmov	s15, r3
 8104162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810416a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810416e:	4b48      	ldr	r3, [pc, #288]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104176:	ee07 3a90 	vmov	s15, r3
 810417a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810417e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104182:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810418a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810418e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104196:	ee67 7a27 	vmul.f32	s15, s14, s15
 810419a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810419e:	e021      	b.n	81041e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81041a0:	697b      	ldr	r3, [r7, #20]
 81041a2:	ee07 3a90 	vmov	s15, r3
 81041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81041ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041b2:	4b37      	ldr	r3, [pc, #220]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81041b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041ba:	ee07 3a90 	vmov	s15, r3
 81041be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81041c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81041ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81041e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81041e4:	4b2a      	ldr	r3, [pc, #168]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81041e8:	0a5b      	lsrs	r3, r3, #9
 81041ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81041ee:	ee07 3a90 	vmov	s15, r3
 81041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81041fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81041fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8104202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810420a:	ee17 2a90 	vmov	r2, s15
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104212:	4b1f      	ldr	r3, [pc, #124]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104216:	0c1b      	lsrs	r3, r3, #16
 8104218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810421c:	ee07 3a90 	vmov	s15, r3
 8104220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104228:	ee37 7a87 	vadd.f32	s14, s15, s14
 810422c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104238:	ee17 2a90 	vmov	r2, s15
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104240:	4b13      	ldr	r3, [pc, #76]	; (8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104244:	0e1b      	lsrs	r3, r3, #24
 8104246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810424a:	ee07 3a90 	vmov	s15, r3
 810424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104256:	ee37 7a87 	vadd.f32	s14, s15, s14
 810425a:	edd7 6a07 	vldr	s13, [r7, #28]
 810425e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104266:	ee17 2a90 	vmov	r2, s15
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810426e:	e008      	b.n	8104282 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	2200      	movs	r2, #0
 8104274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	2200      	movs	r2, #0
 810427a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	2200      	movs	r2, #0
 8104280:	609a      	str	r2, [r3, #8]
}
 8104282:	bf00      	nop
 8104284:	3724      	adds	r7, #36	; 0x24
 8104286:	46bd      	mov	sp, r7
 8104288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810428c:	4770      	bx	lr
 810428e:	bf00      	nop
 8104290:	58024400 	.word	0x58024400
 8104294:	03d09000 	.word	0x03d09000
 8104298:	46000000 	.word	0x46000000
 810429c:	4c742400 	.word	0x4c742400
 81042a0:	4a742400 	.word	0x4a742400
 81042a4:	4bbebc20 	.word	0x4bbebc20

081042a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81042a8:	b580      	push	{r7, lr}
 81042aa:	b084      	sub	sp, #16
 81042ac:	af00      	add	r7, sp, #0
 81042ae:	6078      	str	r0, [r7, #4]
 81042b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81042b2:	2300      	movs	r3, #0
 81042b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81042b6:	4b54      	ldr	r3, [pc, #336]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042ba:	f003 0303 	and.w	r3, r3, #3
 81042be:	2b03      	cmp	r3, #3
 81042c0:	d101      	bne.n	81042c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81042c2:	2301      	movs	r3, #1
 81042c4:	e09b      	b.n	81043fe <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81042c6:	4b50      	ldr	r3, [pc, #320]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	4a4f      	ldr	r2, [pc, #316]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81042cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81042d2:	f7fd fae5 	bl	81018a0 <HAL_GetTick>
 81042d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81042d8:	e008      	b.n	81042ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81042da:	f7fd fae1 	bl	81018a0 <HAL_GetTick>
 81042de:	4602      	mov	r2, r0
 81042e0:	68bb      	ldr	r3, [r7, #8]
 81042e2:	1ad3      	subs	r3, r2, r3
 81042e4:	2b02      	cmp	r3, #2
 81042e6:	d901      	bls.n	81042ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81042e8:	2303      	movs	r3, #3
 81042ea:	e088      	b.n	81043fe <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81042ec:	4b46      	ldr	r3, [pc, #280]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	d1f0      	bne.n	81042da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81042f8:	4b43      	ldr	r3, [pc, #268]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	031b      	lsls	r3, r3, #12
 8104306:	4940      	ldr	r1, [pc, #256]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104308:	4313      	orrs	r3, r2
 810430a:	628b      	str	r3, [r1, #40]	; 0x28
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	685b      	ldr	r3, [r3, #4]
 8104310:	3b01      	subs	r3, #1
 8104312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	689b      	ldr	r3, [r3, #8]
 810431a:	3b01      	subs	r3, #1
 810431c:	025b      	lsls	r3, r3, #9
 810431e:	b29b      	uxth	r3, r3
 8104320:	431a      	orrs	r2, r3
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	68db      	ldr	r3, [r3, #12]
 8104326:	3b01      	subs	r3, #1
 8104328:	041b      	lsls	r3, r3, #16
 810432a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810432e:	431a      	orrs	r2, r3
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	691b      	ldr	r3, [r3, #16]
 8104334:	3b01      	subs	r3, #1
 8104336:	061b      	lsls	r3, r3, #24
 8104338:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810433c:	4932      	ldr	r1, [pc, #200]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 810433e:	4313      	orrs	r3, r2
 8104340:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104342:	4b31      	ldr	r3, [pc, #196]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810434a:	687b      	ldr	r3, [r7, #4]
 810434c:	695b      	ldr	r3, [r3, #20]
 810434e:	492e      	ldr	r1, [pc, #184]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104350:	4313      	orrs	r3, r2
 8104352:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104354:	4b2c      	ldr	r3, [pc, #176]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104358:	f023 0220 	bic.w	r2, r3, #32
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	699b      	ldr	r3, [r3, #24]
 8104360:	4929      	ldr	r1, [pc, #164]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104362:	4313      	orrs	r3, r2
 8104364:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104366:	4b28      	ldr	r3, [pc, #160]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810436a:	4a27      	ldr	r2, [pc, #156]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 810436c:	f023 0310 	bic.w	r3, r3, #16
 8104370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104372:	4b25      	ldr	r3, [pc, #148]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810437a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810437e:	687a      	ldr	r2, [r7, #4]
 8104380:	69d2      	ldr	r2, [r2, #28]
 8104382:	00d2      	lsls	r2, r2, #3
 8104384:	4920      	ldr	r1, [pc, #128]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104386:	4313      	orrs	r3, r2
 8104388:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810438a:	4b1f      	ldr	r3, [pc, #124]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 810438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810438e:	4a1e      	ldr	r2, [pc, #120]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 8104390:	f043 0310 	orr.w	r3, r3, #16
 8104394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104396:	683b      	ldr	r3, [r7, #0]
 8104398:	2b00      	cmp	r3, #0
 810439a:	d106      	bne.n	81043aa <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810439c:	4b1a      	ldr	r3, [pc, #104]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 810439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043a0:	4a19      	ldr	r2, [pc, #100]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81043a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81043a8:	e00f      	b.n	81043ca <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81043aa:	683b      	ldr	r3, [r7, #0]
 81043ac:	2b01      	cmp	r3, #1
 81043ae:	d106      	bne.n	81043be <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81043b0:	4b15      	ldr	r3, [pc, #84]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043b4:	4a14      	ldr	r2, [pc, #80]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81043ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 81043bc:	e005      	b.n	81043ca <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81043be:	4b12      	ldr	r3, [pc, #72]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043c2:	4a11      	ldr	r2, [pc, #68]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81043c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81043ca:	4b0f      	ldr	r3, [pc, #60]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a0e      	ldr	r2, [pc, #56]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81043d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81043d6:	f7fd fa63 	bl	81018a0 <HAL_GetTick>
 81043da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81043dc:	e008      	b.n	81043f0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81043de:	f7fd fa5f 	bl	81018a0 <HAL_GetTick>
 81043e2:	4602      	mov	r2, r0
 81043e4:	68bb      	ldr	r3, [r7, #8]
 81043e6:	1ad3      	subs	r3, r2, r3
 81043e8:	2b02      	cmp	r3, #2
 81043ea:	d901      	bls.n	81043f0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81043ec:	2303      	movs	r3, #3
 81043ee:	e006      	b.n	81043fe <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81043f0:	4b05      	ldr	r3, [pc, #20]	; (8104408 <RCCEx_PLL2_Config+0x160>)
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81043f8:	2b00      	cmp	r3, #0
 81043fa:	d0f0      	beq.n	81043de <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 81043fe:	4618      	mov	r0, r3
 8104400:	3710      	adds	r7, #16
 8104402:	46bd      	mov	sp, r7
 8104404:	bd80      	pop	{r7, pc}
 8104406:	bf00      	nop
 8104408:	58024400 	.word	0x58024400

0810440c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810440c:	b580      	push	{r7, lr}
 810440e:	b084      	sub	sp, #16
 8104410:	af00      	add	r7, sp, #0
 8104412:	6078      	str	r0, [r7, #4]
 8104414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104416:	2300      	movs	r3, #0
 8104418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810441a:	4b54      	ldr	r3, [pc, #336]	; (810456c <RCCEx_PLL3_Config+0x160>)
 810441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810441e:	f003 0303 	and.w	r3, r3, #3
 8104422:	2b03      	cmp	r3, #3
 8104424:	d101      	bne.n	810442a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104426:	2301      	movs	r3, #1
 8104428:	e09b      	b.n	8104562 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810442a:	4b50      	ldr	r3, [pc, #320]	; (810456c <RCCEx_PLL3_Config+0x160>)
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a4f      	ldr	r2, [pc, #316]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104436:	f7fd fa33 	bl	81018a0 <HAL_GetTick>
 810443a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810443c:	e008      	b.n	8104450 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810443e:	f7fd fa2f 	bl	81018a0 <HAL_GetTick>
 8104442:	4602      	mov	r2, r0
 8104444:	68bb      	ldr	r3, [r7, #8]
 8104446:	1ad3      	subs	r3, r2, r3
 8104448:	2b02      	cmp	r3, #2
 810444a:	d901      	bls.n	8104450 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810444c:	2303      	movs	r3, #3
 810444e:	e088      	b.n	8104562 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104450:	4b46      	ldr	r3, [pc, #280]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104458:	2b00      	cmp	r3, #0
 810445a:	d1f0      	bne.n	810443e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810445c:	4b43      	ldr	r3, [pc, #268]	; (810456c <RCCEx_PLL3_Config+0x160>)
 810445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104460:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	051b      	lsls	r3, r3, #20
 810446a:	4940      	ldr	r1, [pc, #256]	; (810456c <RCCEx_PLL3_Config+0x160>)
 810446c:	4313      	orrs	r3, r2
 810446e:	628b      	str	r3, [r1, #40]	; 0x28
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	685b      	ldr	r3, [r3, #4]
 8104474:	3b01      	subs	r3, #1
 8104476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	689b      	ldr	r3, [r3, #8]
 810447e:	3b01      	subs	r3, #1
 8104480:	025b      	lsls	r3, r3, #9
 8104482:	b29b      	uxth	r3, r3
 8104484:	431a      	orrs	r2, r3
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	68db      	ldr	r3, [r3, #12]
 810448a:	3b01      	subs	r3, #1
 810448c:	041b      	lsls	r3, r3, #16
 810448e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104492:	431a      	orrs	r2, r3
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	691b      	ldr	r3, [r3, #16]
 8104498:	3b01      	subs	r3, #1
 810449a:	061b      	lsls	r3, r3, #24
 810449c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81044a0:	4932      	ldr	r1, [pc, #200]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044a2:	4313      	orrs	r3, r2
 81044a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81044a6:	4b31      	ldr	r3, [pc, #196]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	695b      	ldr	r3, [r3, #20]
 81044b2:	492e      	ldr	r1, [pc, #184]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044b4:	4313      	orrs	r3, r2
 81044b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81044b8:	4b2c      	ldr	r3, [pc, #176]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	699b      	ldr	r3, [r3, #24]
 81044c4:	4929      	ldr	r1, [pc, #164]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044c6:	4313      	orrs	r3, r2
 81044c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81044ca:	4b28      	ldr	r3, [pc, #160]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044ce:	4a27      	ldr	r2, [pc, #156]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81044d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81044d6:	4b25      	ldr	r3, [pc, #148]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81044da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81044de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81044e2:	687a      	ldr	r2, [r7, #4]
 81044e4:	69d2      	ldr	r2, [r2, #28]
 81044e6:	00d2      	lsls	r2, r2, #3
 81044e8:	4920      	ldr	r1, [pc, #128]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044ea:	4313      	orrs	r3, r2
 81044ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81044ee:	4b1f      	ldr	r3, [pc, #124]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044f2:	4a1e      	ldr	r2, [pc, #120]	; (810456c <RCCEx_PLL3_Config+0x160>)
 81044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81044f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81044fa:	683b      	ldr	r3, [r7, #0]
 81044fc:	2b00      	cmp	r3, #0
 81044fe:	d106      	bne.n	810450e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104500:	4b1a      	ldr	r3, [pc, #104]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104504:	4a19      	ldr	r2, [pc, #100]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810450a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810450c:	e00f      	b.n	810452e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810450e:	683b      	ldr	r3, [r7, #0]
 8104510:	2b01      	cmp	r3, #1
 8104512:	d106      	bne.n	8104522 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104514:	4b15      	ldr	r3, [pc, #84]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104518:	4a14      	ldr	r2, [pc, #80]	; (810456c <RCCEx_PLL3_Config+0x160>)
 810451a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810451e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104520:	e005      	b.n	810452e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104522:	4b12      	ldr	r3, [pc, #72]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104526:	4a11      	ldr	r2, [pc, #68]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810452c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810452e:	4b0f      	ldr	r3, [pc, #60]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	4a0e      	ldr	r2, [pc, #56]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810453a:	f7fd f9b1 	bl	81018a0 <HAL_GetTick>
 810453e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104540:	e008      	b.n	8104554 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104542:	f7fd f9ad 	bl	81018a0 <HAL_GetTick>
 8104546:	4602      	mov	r2, r0
 8104548:	68bb      	ldr	r3, [r7, #8]
 810454a:	1ad3      	subs	r3, r2, r3
 810454c:	2b02      	cmp	r3, #2
 810454e:	d901      	bls.n	8104554 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104550:	2303      	movs	r3, #3
 8104552:	e006      	b.n	8104562 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104554:	4b05      	ldr	r3, [pc, #20]	; (810456c <RCCEx_PLL3_Config+0x160>)
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810455c:	2b00      	cmp	r3, #0
 810455e:	d0f0      	beq.n	8104542 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104560:	7bfb      	ldrb	r3, [r7, #15]
}
 8104562:	4618      	mov	r0, r3
 8104564:	3710      	adds	r7, #16
 8104566:	46bd      	mov	sp, r7
 8104568:	bd80      	pop	{r7, pc}
 810456a:	bf00      	nop
 810456c:	58024400 	.word	0x58024400

08104570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104570:	b580      	push	{r7, lr}
 8104572:	b082      	sub	sp, #8
 8104574:	af00      	add	r7, sp, #0
 8104576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	2b00      	cmp	r3, #0
 810457c:	d101      	bne.n	8104582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810457e:	2301      	movs	r3, #1
 8104580:	e042      	b.n	8104608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104588:	2b00      	cmp	r3, #0
 810458a:	d106      	bne.n	810459a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	2200      	movs	r2, #0
 8104590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104594:	6878      	ldr	r0, [r7, #4]
 8104596:	f7fc ffb3 	bl	8101500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	2224      	movs	r2, #36	; 0x24
 810459e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	681b      	ldr	r3, [r3, #0]
 81045a6:	681a      	ldr	r2, [r3, #0]
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	681b      	ldr	r3, [r3, #0]
 81045ac:	f022 0201 	bic.w	r2, r2, #1
 81045b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81045b2:	6878      	ldr	r0, [r7, #4]
 81045b4:	f000 fc80 	bl	8104eb8 <UART_SetConfig>
 81045b8:	4603      	mov	r3, r0
 81045ba:	2b01      	cmp	r3, #1
 81045bc:	d101      	bne.n	81045c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81045be:	2301      	movs	r3, #1
 81045c0:	e022      	b.n	8104608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81045c6:	2b00      	cmp	r3, #0
 81045c8:	d002      	beq.n	81045d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81045ca:	6878      	ldr	r0, [r7, #4]
 81045cc:	f001 f9d4 	bl	8105978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	685a      	ldr	r2, [r3, #4]
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81045de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	689a      	ldr	r2, [r3, #8]
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81045ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	681a      	ldr	r2, [r3, #0]
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	f042 0201 	orr.w	r2, r2, #1
 81045fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104600:	6878      	ldr	r0, [r7, #4]
 8104602:	f001 fa5b 	bl	8105abc <UART_CheckIdleState>
 8104606:	4603      	mov	r3, r0
}
 8104608:	4618      	mov	r0, r3
 810460a:	3708      	adds	r7, #8
 810460c:	46bd      	mov	sp, r7
 810460e:	bd80      	pop	{r7, pc}

08104610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104610:	b580      	push	{r7, lr}
 8104612:	b08a      	sub	sp, #40	; 0x28
 8104614:	af02      	add	r7, sp, #8
 8104616:	60f8      	str	r0, [r7, #12]
 8104618:	60b9      	str	r1, [r7, #8]
 810461a:	603b      	str	r3, [r7, #0]
 810461c:	4613      	mov	r3, r2
 810461e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104626:	2b20      	cmp	r3, #32
 8104628:	f040 8083 	bne.w	8104732 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 810462c:	68bb      	ldr	r3, [r7, #8]
 810462e:	2b00      	cmp	r3, #0
 8104630:	d002      	beq.n	8104638 <HAL_UART_Transmit+0x28>
 8104632:	88fb      	ldrh	r3, [r7, #6]
 8104634:	2b00      	cmp	r3, #0
 8104636:	d101      	bne.n	810463c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104638:	2301      	movs	r3, #1
 810463a:	e07b      	b.n	8104734 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 810463c:	68fb      	ldr	r3, [r7, #12]
 810463e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104642:	2b01      	cmp	r3, #1
 8104644:	d101      	bne.n	810464a <HAL_UART_Transmit+0x3a>
 8104646:	2302      	movs	r3, #2
 8104648:	e074      	b.n	8104734 <HAL_UART_Transmit+0x124>
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	2201      	movs	r2, #1
 810464e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104652:	68fb      	ldr	r3, [r7, #12]
 8104654:	2200      	movs	r2, #0
 8104656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810465a:	68fb      	ldr	r3, [r7, #12]
 810465c:	2221      	movs	r2, #33	; 0x21
 810465e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104662:	f7fd f91d 	bl	81018a0 <HAL_GetTick>
 8104666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104668:	68fb      	ldr	r3, [r7, #12]
 810466a:	88fa      	ldrh	r2, [r7, #6]
 810466c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104670:	68fb      	ldr	r3, [r7, #12]
 8104672:	88fa      	ldrh	r2, [r7, #6]
 8104674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104678:	68fb      	ldr	r3, [r7, #12]
 810467a:	689b      	ldr	r3, [r3, #8]
 810467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104680:	d108      	bne.n	8104694 <HAL_UART_Transmit+0x84>
 8104682:	68fb      	ldr	r3, [r7, #12]
 8104684:	691b      	ldr	r3, [r3, #16]
 8104686:	2b00      	cmp	r3, #0
 8104688:	d104      	bne.n	8104694 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810468a:	2300      	movs	r3, #0
 810468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810468e:	68bb      	ldr	r3, [r7, #8]
 8104690:	61bb      	str	r3, [r7, #24]
 8104692:	e003      	b.n	810469c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104694:	68bb      	ldr	r3, [r7, #8]
 8104696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104698:	2300      	movs	r3, #0
 810469a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810469c:	68fb      	ldr	r3, [r7, #12]
 810469e:	2200      	movs	r2, #0
 81046a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81046a4:	e02c      	b.n	8104700 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81046a6:	683b      	ldr	r3, [r7, #0]
 81046a8:	9300      	str	r3, [sp, #0]
 81046aa:	697b      	ldr	r3, [r7, #20]
 81046ac:	2200      	movs	r2, #0
 81046ae:	2180      	movs	r1, #128	; 0x80
 81046b0:	68f8      	ldr	r0, [r7, #12]
 81046b2:	f001 fa4e 	bl	8105b52 <UART_WaitOnFlagUntilTimeout>
 81046b6:	4603      	mov	r3, r0
 81046b8:	2b00      	cmp	r3, #0
 81046ba:	d001      	beq.n	81046c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81046bc:	2303      	movs	r3, #3
 81046be:	e039      	b.n	8104734 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81046c0:	69fb      	ldr	r3, [r7, #28]
 81046c2:	2b00      	cmp	r3, #0
 81046c4:	d10b      	bne.n	81046de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81046c6:	69bb      	ldr	r3, [r7, #24]
 81046c8:	881b      	ldrh	r3, [r3, #0]
 81046ca:	461a      	mov	r2, r3
 81046cc:	68fb      	ldr	r3, [r7, #12]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81046d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81046d6:	69bb      	ldr	r3, [r7, #24]
 81046d8:	3302      	adds	r3, #2
 81046da:	61bb      	str	r3, [r7, #24]
 81046dc:	e007      	b.n	81046ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81046de:	69fb      	ldr	r3, [r7, #28]
 81046e0:	781a      	ldrb	r2, [r3, #0]
 81046e2:	68fb      	ldr	r3, [r7, #12]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81046e8:	69fb      	ldr	r3, [r7, #28]
 81046ea:	3301      	adds	r3, #1
 81046ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81046ee:	68fb      	ldr	r3, [r7, #12]
 81046f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81046f4:	b29b      	uxth	r3, r3
 81046f6:	3b01      	subs	r3, #1
 81046f8:	b29a      	uxth	r2, r3
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104700:	68fb      	ldr	r3, [r7, #12]
 8104702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104706:	b29b      	uxth	r3, r3
 8104708:	2b00      	cmp	r3, #0
 810470a:	d1cc      	bne.n	81046a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810470c:	683b      	ldr	r3, [r7, #0]
 810470e:	9300      	str	r3, [sp, #0]
 8104710:	697b      	ldr	r3, [r7, #20]
 8104712:	2200      	movs	r2, #0
 8104714:	2140      	movs	r1, #64	; 0x40
 8104716:	68f8      	ldr	r0, [r7, #12]
 8104718:	f001 fa1b 	bl	8105b52 <UART_WaitOnFlagUntilTimeout>
 810471c:	4603      	mov	r3, r0
 810471e:	2b00      	cmp	r3, #0
 8104720:	d001      	beq.n	8104726 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104722:	2303      	movs	r3, #3
 8104724:	e006      	b.n	8104734 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104726:	68fb      	ldr	r3, [r7, #12]
 8104728:	2220      	movs	r2, #32
 810472a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810472e:	2300      	movs	r3, #0
 8104730:	e000      	b.n	8104734 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104732:	2302      	movs	r3, #2
  }
}
 8104734:	4618      	mov	r0, r3
 8104736:	3720      	adds	r7, #32
 8104738:	46bd      	mov	sp, r7
 810473a:	bd80      	pop	{r7, pc}

0810473c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810473c:	b580      	push	{r7, lr}
 810473e:	b0ba      	sub	sp, #232	; 0xe8
 8104740:	af00      	add	r7, sp, #0
 8104742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	69db      	ldr	r3, [r3, #28]
 810474a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	681b      	ldr	r3, [r3, #0]
 810475c:	689b      	ldr	r3, [r3, #8]
 810475e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8104762:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8104766:	f640 030f 	movw	r3, #2063	; 0x80f
 810476a:	4013      	ands	r3, r2
 810476c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8104770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104774:	2b00      	cmp	r3, #0
 8104776:	d11b      	bne.n	81047b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8104778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810477c:	f003 0320 	and.w	r3, r3, #32
 8104780:	2b00      	cmp	r3, #0
 8104782:	d015      	beq.n	81047b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8104784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104788:	f003 0320 	and.w	r3, r3, #32
 810478c:	2b00      	cmp	r3, #0
 810478e:	d105      	bne.n	810479c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8104790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104798:	2b00      	cmp	r3, #0
 810479a:	d009      	beq.n	81047b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81047a0:	2b00      	cmp	r3, #0
 81047a2:	f000 835c 	beq.w	8104e5e <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81047aa:	6878      	ldr	r0, [r7, #4]
 81047ac:	4798      	blx	r3
      }
      return;
 81047ae:	e356      	b.n	8104e5e <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 81047b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 81047b4:	2b00      	cmp	r3, #0
 81047b6:	f000 811f 	beq.w	81049f8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81047ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 81047be:	4b8b      	ldr	r3, [pc, #556]	; (81049ec <HAL_UART_IRQHandler+0x2b0>)
 81047c0:	4013      	ands	r3, r2
 81047c2:	2b00      	cmp	r3, #0
 81047c4:	d106      	bne.n	81047d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81047c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 81047ca:	4b89      	ldr	r3, [pc, #548]	; (81049f0 <HAL_UART_IRQHandler+0x2b4>)
 81047cc:	4013      	ands	r3, r2
 81047ce:	2b00      	cmp	r3, #0
 81047d0:	f000 8112 	beq.w	81049f8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81047d8:	f003 0301 	and.w	r3, r3, #1
 81047dc:	2b00      	cmp	r3, #0
 81047de:	d011      	beq.n	8104804 <HAL_UART_IRQHandler+0xc8>
 81047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81047e8:	2b00      	cmp	r3, #0
 81047ea:	d00b      	beq.n	8104804 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	681b      	ldr	r3, [r3, #0]
 81047f0:	2201      	movs	r2, #1
 81047f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81047fa:	f043 0201 	orr.w	r2, r3, #1
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8104804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104808:	f003 0302 	and.w	r3, r3, #2
 810480c:	2b00      	cmp	r3, #0
 810480e:	d011      	beq.n	8104834 <HAL_UART_IRQHandler+0xf8>
 8104810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104814:	f003 0301 	and.w	r3, r3, #1
 8104818:	2b00      	cmp	r3, #0
 810481a:	d00b      	beq.n	8104834 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	681b      	ldr	r3, [r3, #0]
 8104820:	2202      	movs	r2, #2
 8104822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810482a:	f043 0204 	orr.w	r2, r3, #4
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8104834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104838:	f003 0304 	and.w	r3, r3, #4
 810483c:	2b00      	cmp	r3, #0
 810483e:	d011      	beq.n	8104864 <HAL_UART_IRQHandler+0x128>
 8104840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104844:	f003 0301 	and.w	r3, r3, #1
 8104848:	2b00      	cmp	r3, #0
 810484a:	d00b      	beq.n	8104864 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	2204      	movs	r2, #4
 8104852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810485a:	f043 0202 	orr.w	r2, r3, #2
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8104864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104868:	f003 0308 	and.w	r3, r3, #8
 810486c:	2b00      	cmp	r3, #0
 810486e:	d017      	beq.n	81048a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104874:	f003 0320 	and.w	r3, r3, #32
 8104878:	2b00      	cmp	r3, #0
 810487a:	d105      	bne.n	8104888 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810487c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104880:	4b5a      	ldr	r3, [pc, #360]	; (81049ec <HAL_UART_IRQHandler+0x2b0>)
 8104882:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104884:	2b00      	cmp	r3, #0
 8104886:	d00b      	beq.n	81048a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	2208      	movs	r2, #8
 810488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104896:	f043 0208 	orr.w	r2, r3, #8
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81048a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81048a8:	2b00      	cmp	r3, #0
 81048aa:	d012      	beq.n	81048d2 <HAL_UART_IRQHandler+0x196>
 81048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81048b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81048b4:	2b00      	cmp	r3, #0
 81048b6:	d00c      	beq.n	81048d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81048c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81048c8:	f043 0220 	orr.w	r2, r3, #32
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81048d8:	2b00      	cmp	r3, #0
 81048da:	f000 82c2 	beq.w	8104e62 <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81048e2:	f003 0320 	and.w	r3, r3, #32
 81048e6:	2b00      	cmp	r3, #0
 81048e8:	d013      	beq.n	8104912 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81048ee:	f003 0320 	and.w	r3, r3, #32
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d105      	bne.n	8104902 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81048f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81048fe:	2b00      	cmp	r3, #0
 8104900:	d007      	beq.n	8104912 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104906:	2b00      	cmp	r3, #0
 8104908:	d003      	beq.n	8104912 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810490e:	6878      	ldr	r0, [r7, #4]
 8104910:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	689b      	ldr	r3, [r3, #8]
 8104922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104926:	2b40      	cmp	r3, #64	; 0x40
 8104928:	d005      	beq.n	8104936 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810492a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 810492e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8104932:	2b00      	cmp	r3, #0
 8104934:	d04f      	beq.n	81049d6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8104936:	6878      	ldr	r0, [r7, #4]
 8104938:	f001 f9d3 	bl	8105ce2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	681b      	ldr	r3, [r3, #0]
 8104940:	689b      	ldr	r3, [r3, #8]
 8104942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104946:	2b40      	cmp	r3, #64	; 0x40
 8104948:	d141      	bne.n	81049ce <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	3308      	adds	r3, #8
 8104950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8104958:	e853 3f00 	ldrex	r3, [r3]
 810495c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8104960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8104964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	3308      	adds	r3, #8
 8104972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8104976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 810497a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810497e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8104982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8104986:	e841 2300 	strex	r3, r2, [r1]
 810498a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 810498e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8104992:	2b00      	cmp	r3, #0
 8104994:	d1d9      	bne.n	810494a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810499a:	2b00      	cmp	r3, #0
 810499c:	d013      	beq.n	81049c6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81049a2:	4a14      	ldr	r2, [pc, #80]	; (81049f4 <HAL_UART_IRQHandler+0x2b8>)
 81049a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81049aa:	4618      	mov	r0, r3
 81049ac:	f7fd fbc6 	bl	810213c <HAL_DMA_Abort_IT>
 81049b0:	4603      	mov	r3, r0
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d017      	beq.n	81049e6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81049bc:	687a      	ldr	r2, [r7, #4]
 81049be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 81049c0:	4610      	mov	r0, r2
 81049c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81049c4:	e00f      	b.n	81049e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 81049c6:	6878      	ldr	r0, [r7, #4]
 81049c8:	f000 fa60 	bl	8104e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81049cc:	e00b      	b.n	81049e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81049ce:	6878      	ldr	r0, [r7, #4]
 81049d0:	f000 fa5c 	bl	8104e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81049d4:	e007      	b.n	81049e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81049d6:	6878      	ldr	r0, [r7, #4]
 81049d8:	f000 fa58 	bl	8104e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	2200      	movs	r2, #0
 81049e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 81049e4:	e23d      	b.n	8104e62 <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81049e6:	bf00      	nop
    return;
 81049e8:	e23b      	b.n	8104e62 <HAL_UART_IRQHandler+0x726>
 81049ea:	bf00      	nop
 81049ec:	10000001 	.word	0x10000001
 81049f0:	04000120 	.word	0x04000120
 81049f4:	08105daf 	.word	0x08105daf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049fc:	2b01      	cmp	r3, #1
 81049fe:	f040 81d0 	bne.w	8104da2 <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8104a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104a06:	f003 0310 	and.w	r3, r3, #16
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	f000 81c9 	beq.w	8104da2 <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8104a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104a14:	f003 0310 	and.w	r3, r3, #16
 8104a18:	2b00      	cmp	r3, #0
 8104a1a:	f000 81c2 	beq.w	8104da2 <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	681b      	ldr	r3, [r3, #0]
 8104a22:	2210      	movs	r2, #16
 8104a24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	689b      	ldr	r3, [r3, #8]
 8104a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104a30:	2b40      	cmp	r3, #64	; 0x40
 8104a32:	f040 813b 	bne.w	8104cac <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a8b      	ldr	r2, [pc, #556]	; (8104c6c <HAL_UART_IRQHandler+0x530>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d059      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a46:	681b      	ldr	r3, [r3, #0]
 8104a48:	4a89      	ldr	r2, [pc, #548]	; (8104c70 <HAL_UART_IRQHandler+0x534>)
 8104a4a:	4293      	cmp	r3, r2
 8104a4c:	d053      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a4e:	687b      	ldr	r3, [r7, #4]
 8104a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	4a87      	ldr	r2, [pc, #540]	; (8104c74 <HAL_UART_IRQHandler+0x538>)
 8104a56:	4293      	cmp	r3, r2
 8104a58:	d04d      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	4a85      	ldr	r2, [pc, #532]	; (8104c78 <HAL_UART_IRQHandler+0x53c>)
 8104a62:	4293      	cmp	r3, r2
 8104a64:	d047      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a83      	ldr	r2, [pc, #524]	; (8104c7c <HAL_UART_IRQHandler+0x540>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d041      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a76:	681b      	ldr	r3, [r3, #0]
 8104a78:	4a81      	ldr	r2, [pc, #516]	; (8104c80 <HAL_UART_IRQHandler+0x544>)
 8104a7a:	4293      	cmp	r3, r2
 8104a7c:	d03b      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a82:	681b      	ldr	r3, [r3, #0]
 8104a84:	4a7f      	ldr	r2, [pc, #508]	; (8104c84 <HAL_UART_IRQHandler+0x548>)
 8104a86:	4293      	cmp	r3, r2
 8104a88:	d035      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	4a7d      	ldr	r2, [pc, #500]	; (8104c88 <HAL_UART_IRQHandler+0x54c>)
 8104a92:	4293      	cmp	r3, r2
 8104a94:	d02f      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	4a7b      	ldr	r2, [pc, #492]	; (8104c8c <HAL_UART_IRQHandler+0x550>)
 8104a9e:	4293      	cmp	r3, r2
 8104aa0:	d029      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104aa2:	687b      	ldr	r3, [r7, #4]
 8104aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	4a79      	ldr	r2, [pc, #484]	; (8104c90 <HAL_UART_IRQHandler+0x554>)
 8104aaa:	4293      	cmp	r3, r2
 8104aac:	d023      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	4a77      	ldr	r2, [pc, #476]	; (8104c94 <HAL_UART_IRQHandler+0x558>)
 8104ab6:	4293      	cmp	r3, r2
 8104ab8:	d01d      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104abe:	681b      	ldr	r3, [r3, #0]
 8104ac0:	4a75      	ldr	r2, [pc, #468]	; (8104c98 <HAL_UART_IRQHandler+0x55c>)
 8104ac2:	4293      	cmp	r3, r2
 8104ac4:	d017      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	4a73      	ldr	r2, [pc, #460]	; (8104c9c <HAL_UART_IRQHandler+0x560>)
 8104ace:	4293      	cmp	r3, r2
 8104ad0:	d011      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	4a71      	ldr	r2, [pc, #452]	; (8104ca0 <HAL_UART_IRQHandler+0x564>)
 8104ada:	4293      	cmp	r3, r2
 8104adc:	d00b      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104ade:	687b      	ldr	r3, [r7, #4]
 8104ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104ae2:	681b      	ldr	r3, [r3, #0]
 8104ae4:	4a6f      	ldr	r2, [pc, #444]	; (8104ca4 <HAL_UART_IRQHandler+0x568>)
 8104ae6:	4293      	cmp	r3, r2
 8104ae8:	d005      	beq.n	8104af6 <HAL_UART_IRQHandler+0x3ba>
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	4a6d      	ldr	r2, [pc, #436]	; (8104ca8 <HAL_UART_IRQHandler+0x56c>)
 8104af2:	4293      	cmp	r3, r2
 8104af4:	d105      	bne.n	8104b02 <HAL_UART_IRQHandler+0x3c6>
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	685b      	ldr	r3, [r3, #4]
 8104afe:	b29b      	uxth	r3, r3
 8104b00:	e004      	b.n	8104b0c <HAL_UART_IRQHandler+0x3d0>
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	685b      	ldr	r3, [r3, #4]
 8104b0a:	b29b      	uxth	r3, r3
 8104b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8104b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8104b14:	2b00      	cmp	r3, #0
 8104b16:	f000 81a6 	beq.w	8104e66 <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8104b20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8104b24:	429a      	cmp	r2, r3
 8104b26:	f080 819e 	bcs.w	8104e66 <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8104b30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8104b34:	687b      	ldr	r3, [r7, #4]
 8104b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b38:	69db      	ldr	r3, [r3, #28]
 8104b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b3e:	f000 8086 	beq.w	8104c4e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	681b      	ldr	r3, [r3, #0]
 8104b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8104b4e:	e853 3f00 	ldrex	r3, [r3]
 8104b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8104b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8104b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104b5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	461a      	mov	r2, r3
 8104b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8104b6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104b70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104b74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8104b78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8104b7c:	e841 2300 	strex	r3, r2, [r1]
 8104b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8104b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8104b88:	2b00      	cmp	r3, #0
 8104b8a:	d1da      	bne.n	8104b42 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	3308      	adds	r3, #8
 8104b92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8104b96:	e853 3f00 	ldrex	r3, [r3]
 8104b9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8104b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104b9e:	f023 0301 	bic.w	r3, r3, #1
 8104ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	3308      	adds	r3, #8
 8104bac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8104bb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8104bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104bb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8104bb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8104bbc:	e841 2300 	strex	r3, r2, [r1]
 8104bc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8104bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8104bc4:	2b00      	cmp	r3, #0
 8104bc6:	d1e1      	bne.n	8104b8c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	3308      	adds	r3, #8
 8104bce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8104bd2:	e853 3f00 	ldrex	r3, [r3]
 8104bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8104bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8104be2:	687b      	ldr	r3, [r7, #4]
 8104be4:	681b      	ldr	r3, [r3, #0]
 8104be6:	3308      	adds	r3, #8
 8104be8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8104bec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8104bee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104bf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8104bf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8104bf4:	e841 2300 	strex	r3, r2, [r1]
 8104bf8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8104bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8104bfc:	2b00      	cmp	r3, #0
 8104bfe:	d1e3      	bne.n	8104bc8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8104c00:	687b      	ldr	r3, [r7, #4]
 8104c02:	2220      	movs	r2, #32
 8104c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	2200      	movs	r2, #0
 8104c0c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104c16:	e853 3f00 	ldrex	r3, [r3]
 8104c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8104c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8104c1e:	f023 0310 	bic.w	r3, r3, #16
 8104c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	461a      	mov	r2, r3
 8104c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8104c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8104c32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8104c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8104c38:	e841 2300 	strex	r3, r2, [r1]
 8104c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8104c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8104c40:	2b00      	cmp	r3, #0
 8104c42:	d1e4      	bne.n	8104c0e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104c48:	4618      	mov	r0, r3
 8104c4a:	f7fc ff59 	bl	8101b00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104c5a:	b29b      	uxth	r3, r3
 8104c5c:	1ad3      	subs	r3, r2, r3
 8104c5e:	b29b      	uxth	r3, r3
 8104c60:	4619      	mov	r1, r3
 8104c62:	6878      	ldr	r0, [r7, #4]
 8104c64:	f000 f91c 	bl	8104ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8104c68:	e0fd      	b.n	8104e66 <HAL_UART_IRQHandler+0x72a>
 8104c6a:	bf00      	nop
 8104c6c:	40020010 	.word	0x40020010
 8104c70:	40020028 	.word	0x40020028
 8104c74:	40020040 	.word	0x40020040
 8104c78:	40020058 	.word	0x40020058
 8104c7c:	40020070 	.word	0x40020070
 8104c80:	40020088 	.word	0x40020088
 8104c84:	400200a0 	.word	0x400200a0
 8104c88:	400200b8 	.word	0x400200b8
 8104c8c:	40020410 	.word	0x40020410
 8104c90:	40020428 	.word	0x40020428
 8104c94:	40020440 	.word	0x40020440
 8104c98:	40020458 	.word	0x40020458
 8104c9c:	40020470 	.word	0x40020470
 8104ca0:	40020488 	.word	0x40020488
 8104ca4:	400204a0 	.word	0x400204a0
 8104ca8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104cb8:	b29b      	uxth	r3, r3
 8104cba:	1ad3      	subs	r3, r2, r3
 8104cbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104cc6:	b29b      	uxth	r3, r3
 8104cc8:	2b00      	cmp	r3, #0
 8104cca:	f000 80ce 	beq.w	8104e6a <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 8104cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8104cd2:	2b00      	cmp	r3, #0
 8104cd4:	f000 80c9 	beq.w	8104e6a <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ce0:	e853 3f00 	ldrex	r3, [r3]
 8104ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8104ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8104cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	461a      	mov	r2, r3
 8104cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8104cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8104cfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8104d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8104d02:	e841 2300 	strex	r3, r2, [r1]
 8104d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8104d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104d0a:	2b00      	cmp	r3, #0
 8104d0c:	d1e4      	bne.n	8104cd8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	3308      	adds	r3, #8
 8104d14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104d18:	e853 3f00 	ldrex	r3, [r3]
 8104d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8104d1e:	6a3b      	ldr	r3, [r7, #32]
 8104d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104d24:	f023 0301 	bic.w	r3, r3, #1
 8104d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	3308      	adds	r3, #8
 8104d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8104d36:	633a      	str	r2, [r7, #48]	; 0x30
 8104d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8104d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104d3e:	e841 2300 	strex	r3, r2, [r1]
 8104d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8104d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d46:	2b00      	cmp	r3, #0
 8104d48:	d1e1      	bne.n	8104d0e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	2220      	movs	r2, #32
 8104d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	2200      	movs	r2, #0
 8104d56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8104d58:	687b      	ldr	r3, [r7, #4]
 8104d5a:	2200      	movs	r2, #0
 8104d5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d64:	693b      	ldr	r3, [r7, #16]
 8104d66:	e853 3f00 	ldrex	r3, [r3]
 8104d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8104d6c:	68fb      	ldr	r3, [r7, #12]
 8104d6e:	f023 0310 	bic.w	r3, r3, #16
 8104d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8104d76:	687b      	ldr	r3, [r7, #4]
 8104d78:	681b      	ldr	r3, [r3, #0]
 8104d7a:	461a      	mov	r2, r3
 8104d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8104d80:	61fb      	str	r3, [r7, #28]
 8104d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104d84:	69b9      	ldr	r1, [r7, #24]
 8104d86:	69fa      	ldr	r2, [r7, #28]
 8104d88:	e841 2300 	strex	r3, r2, [r1]
 8104d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8104d8e:	697b      	ldr	r3, [r7, #20]
 8104d90:	2b00      	cmp	r3, #0
 8104d92:	d1e4      	bne.n	8104d5e <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8104d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8104d98:	4619      	mov	r1, r3
 8104d9a:	6878      	ldr	r0, [r7, #4]
 8104d9c:	f000 f880 	bl	8104ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8104da0:	e063      	b.n	8104e6a <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8104da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d00e      	beq.n	8104dcc <HAL_UART_IRQHandler+0x690>
 8104dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104db6:	2b00      	cmp	r3, #0
 8104db8:	d008      	beq.n	8104dcc <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8104dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8104dc4:	6878      	ldr	r0, [r7, #4]
 8104dc6:	f001 f833 	bl	8105e30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104dca:	e051      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8104dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104dd4:	2b00      	cmp	r3, #0
 8104dd6:	d014      	beq.n	8104e02 <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8104dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	d105      	bne.n	8104df0 <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8104de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104dec:	2b00      	cmp	r3, #0
 8104dee:	d008      	beq.n	8104e02 <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104df4:	2b00      	cmp	r3, #0
 8104df6:	d03a      	beq.n	8104e6e <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104dfc:	6878      	ldr	r0, [r7, #4]
 8104dfe:	4798      	blx	r3
    }
    return;
 8104e00:	e035      	b.n	8104e6e <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8104e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104e0a:	2b00      	cmp	r3, #0
 8104e0c:	d009      	beq.n	8104e22 <HAL_UART_IRQHandler+0x6e6>
 8104e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104e16:	2b00      	cmp	r3, #0
 8104e18:	d003      	beq.n	8104e22 <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8104e1a:	6878      	ldr	r0, [r7, #4]
 8104e1c:	f000 ffdd 	bl	8105dda <UART_EndTransmit_IT>
    return;
 8104e20:	e026      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8104e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104e2a:	2b00      	cmp	r3, #0
 8104e2c:	d009      	beq.n	8104e42 <HAL_UART_IRQHandler+0x706>
 8104e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104e32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104e36:	2b00      	cmp	r3, #0
 8104e38:	d003      	beq.n	8104e42 <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8104e3a:	6878      	ldr	r0, [r7, #4]
 8104e3c:	f001 f80c 	bl	8105e58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104e40:	e016      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8104e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104e4a:	2b00      	cmp	r3, #0
 8104e4c:	d010      	beq.n	8104e70 <HAL_UART_IRQHandler+0x734>
 8104e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104e52:	2b00      	cmp	r3, #0
 8104e54:	da0c      	bge.n	8104e70 <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8104e56:	6878      	ldr	r0, [r7, #4]
 8104e58:	f000 fff4 	bl	8105e44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104e5c:	e008      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
      return;
 8104e5e:	bf00      	nop
 8104e60:	e006      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
    return;
 8104e62:	bf00      	nop
 8104e64:	e004      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
      return;
 8104e66:	bf00      	nop
 8104e68:	e002      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
      return;
 8104e6a:	bf00      	nop
 8104e6c:	e000      	b.n	8104e70 <HAL_UART_IRQHandler+0x734>
    return;
 8104e6e:	bf00      	nop
  }
}
 8104e70:	37e8      	adds	r7, #232	; 0xe8
 8104e72:	46bd      	mov	sp, r7
 8104e74:	bd80      	pop	{r7, pc}
 8104e76:	bf00      	nop

08104e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8104e78:	b480      	push	{r7}
 8104e7a:	b083      	sub	sp, #12
 8104e7c:	af00      	add	r7, sp, #0
 8104e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8104e80:	bf00      	nop
 8104e82:	370c      	adds	r7, #12
 8104e84:	46bd      	mov	sp, r7
 8104e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e8a:	4770      	bx	lr

08104e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8104e8c:	b480      	push	{r7}
 8104e8e:	b083      	sub	sp, #12
 8104e90:	af00      	add	r7, sp, #0
 8104e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8104e94:	bf00      	nop
 8104e96:	370c      	adds	r7, #12
 8104e98:	46bd      	mov	sp, r7
 8104e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e9e:	4770      	bx	lr

08104ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8104ea0:	b480      	push	{r7}
 8104ea2:	b083      	sub	sp, #12
 8104ea4:	af00      	add	r7, sp, #0
 8104ea6:	6078      	str	r0, [r7, #4]
 8104ea8:	460b      	mov	r3, r1
 8104eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8104eac:	bf00      	nop
 8104eae:	370c      	adds	r7, #12
 8104eb0:	46bd      	mov	sp, r7
 8104eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104eb6:	4770      	bx	lr

08104eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104eb8:	b5b0      	push	{r4, r5, r7, lr}
 8104eba:	b08e      	sub	sp, #56	; 0x38
 8104ebc:	af00      	add	r7, sp, #0
 8104ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104ec0:	2300      	movs	r3, #0
 8104ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	689a      	ldr	r2, [r3, #8]
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	691b      	ldr	r3, [r3, #16]
 8104ece:	431a      	orrs	r2, r3
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	695b      	ldr	r3, [r3, #20]
 8104ed4:	431a      	orrs	r2, r3
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	69db      	ldr	r3, [r3, #28]
 8104eda:	4313      	orrs	r3, r2
 8104edc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	681b      	ldr	r3, [r3, #0]
 8104ee2:	681a      	ldr	r2, [r3, #0]
 8104ee4:	4bc0      	ldr	r3, [pc, #768]	; (81051e8 <UART_SetConfig+0x330>)
 8104ee6:	4013      	ands	r3, r2
 8104ee8:	687a      	ldr	r2, [r7, #4]
 8104eea:	6812      	ldr	r2, [r2, #0]
 8104eec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104eee:	430b      	orrs	r3, r1
 8104ef0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	681b      	ldr	r3, [r3, #0]
 8104ef6:	685b      	ldr	r3, [r3, #4]
 8104ef8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	68da      	ldr	r2, [r3, #12]
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	681b      	ldr	r3, [r3, #0]
 8104f04:	430a      	orrs	r2, r1
 8104f06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	699b      	ldr	r3, [r3, #24]
 8104f0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	4ab6      	ldr	r2, [pc, #728]	; (81051ec <UART_SetConfig+0x334>)
 8104f14:	4293      	cmp	r3, r2
 8104f16:	d004      	beq.n	8104f22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	6a1b      	ldr	r3, [r3, #32]
 8104f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104f1e:	4313      	orrs	r3, r2
 8104f20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	689b      	ldr	r3, [r3, #8]
 8104f28:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104f2c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104f30:	687a      	ldr	r2, [r7, #4]
 8104f32:	6812      	ldr	r2, [r2, #0]
 8104f34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104f36:	430b      	orrs	r3, r1
 8104f38:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	681b      	ldr	r3, [r3, #0]
 8104f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f40:	f023 010f 	bic.w	r1, r3, #15
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	430a      	orrs	r2, r1
 8104f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	4aa6      	ldr	r2, [pc, #664]	; (81051f0 <UART_SetConfig+0x338>)
 8104f56:	4293      	cmp	r3, r2
 8104f58:	d176      	bne.n	8105048 <UART_SetConfig+0x190>
 8104f5a:	4ba6      	ldr	r3, [pc, #664]	; (81051f4 <UART_SetConfig+0x33c>)
 8104f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104f62:	2b28      	cmp	r3, #40	; 0x28
 8104f64:	d86c      	bhi.n	8105040 <UART_SetConfig+0x188>
 8104f66:	a201      	add	r2, pc, #4	; (adr r2, 8104f6c <UART_SetConfig+0xb4>)
 8104f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f6c:	08105011 	.word	0x08105011
 8104f70:	08105041 	.word	0x08105041
 8104f74:	08105041 	.word	0x08105041
 8104f78:	08105041 	.word	0x08105041
 8104f7c:	08105041 	.word	0x08105041
 8104f80:	08105041 	.word	0x08105041
 8104f84:	08105041 	.word	0x08105041
 8104f88:	08105041 	.word	0x08105041
 8104f8c:	08105019 	.word	0x08105019
 8104f90:	08105041 	.word	0x08105041
 8104f94:	08105041 	.word	0x08105041
 8104f98:	08105041 	.word	0x08105041
 8104f9c:	08105041 	.word	0x08105041
 8104fa0:	08105041 	.word	0x08105041
 8104fa4:	08105041 	.word	0x08105041
 8104fa8:	08105041 	.word	0x08105041
 8104fac:	08105021 	.word	0x08105021
 8104fb0:	08105041 	.word	0x08105041
 8104fb4:	08105041 	.word	0x08105041
 8104fb8:	08105041 	.word	0x08105041
 8104fbc:	08105041 	.word	0x08105041
 8104fc0:	08105041 	.word	0x08105041
 8104fc4:	08105041 	.word	0x08105041
 8104fc8:	08105041 	.word	0x08105041
 8104fcc:	08105029 	.word	0x08105029
 8104fd0:	08105041 	.word	0x08105041
 8104fd4:	08105041 	.word	0x08105041
 8104fd8:	08105041 	.word	0x08105041
 8104fdc:	08105041 	.word	0x08105041
 8104fe0:	08105041 	.word	0x08105041
 8104fe4:	08105041 	.word	0x08105041
 8104fe8:	08105041 	.word	0x08105041
 8104fec:	08105031 	.word	0x08105031
 8104ff0:	08105041 	.word	0x08105041
 8104ff4:	08105041 	.word	0x08105041
 8104ff8:	08105041 	.word	0x08105041
 8104ffc:	08105041 	.word	0x08105041
 8105000:	08105041 	.word	0x08105041
 8105004:	08105041 	.word	0x08105041
 8105008:	08105041 	.word	0x08105041
 810500c:	08105039 	.word	0x08105039
 8105010:	2301      	movs	r3, #1
 8105012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105016:	e220      	b.n	810545a <UART_SetConfig+0x5a2>
 8105018:	2304      	movs	r3, #4
 810501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810501e:	e21c      	b.n	810545a <UART_SetConfig+0x5a2>
 8105020:	2308      	movs	r3, #8
 8105022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105026:	e218      	b.n	810545a <UART_SetConfig+0x5a2>
 8105028:	2310      	movs	r3, #16
 810502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810502e:	e214      	b.n	810545a <UART_SetConfig+0x5a2>
 8105030:	2320      	movs	r3, #32
 8105032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105036:	e210      	b.n	810545a <UART_SetConfig+0x5a2>
 8105038:	2340      	movs	r3, #64	; 0x40
 810503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810503e:	e20c      	b.n	810545a <UART_SetConfig+0x5a2>
 8105040:	2380      	movs	r3, #128	; 0x80
 8105042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105046:	e208      	b.n	810545a <UART_SetConfig+0x5a2>
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	4a6a      	ldr	r2, [pc, #424]	; (81051f8 <UART_SetConfig+0x340>)
 810504e:	4293      	cmp	r3, r2
 8105050:	d130      	bne.n	81050b4 <UART_SetConfig+0x1fc>
 8105052:	4b68      	ldr	r3, [pc, #416]	; (81051f4 <UART_SetConfig+0x33c>)
 8105054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105056:	f003 0307 	and.w	r3, r3, #7
 810505a:	2b05      	cmp	r3, #5
 810505c:	d826      	bhi.n	81050ac <UART_SetConfig+0x1f4>
 810505e:	a201      	add	r2, pc, #4	; (adr r2, 8105064 <UART_SetConfig+0x1ac>)
 8105060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105064:	0810507d 	.word	0x0810507d
 8105068:	08105085 	.word	0x08105085
 810506c:	0810508d 	.word	0x0810508d
 8105070:	08105095 	.word	0x08105095
 8105074:	0810509d 	.word	0x0810509d
 8105078:	081050a5 	.word	0x081050a5
 810507c:	2300      	movs	r3, #0
 810507e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105082:	e1ea      	b.n	810545a <UART_SetConfig+0x5a2>
 8105084:	2304      	movs	r3, #4
 8105086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810508a:	e1e6      	b.n	810545a <UART_SetConfig+0x5a2>
 810508c:	2308      	movs	r3, #8
 810508e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105092:	e1e2      	b.n	810545a <UART_SetConfig+0x5a2>
 8105094:	2310      	movs	r3, #16
 8105096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810509a:	e1de      	b.n	810545a <UART_SetConfig+0x5a2>
 810509c:	2320      	movs	r3, #32
 810509e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050a2:	e1da      	b.n	810545a <UART_SetConfig+0x5a2>
 81050a4:	2340      	movs	r3, #64	; 0x40
 81050a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050aa:	e1d6      	b.n	810545a <UART_SetConfig+0x5a2>
 81050ac:	2380      	movs	r3, #128	; 0x80
 81050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050b2:	e1d2      	b.n	810545a <UART_SetConfig+0x5a2>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	4a50      	ldr	r2, [pc, #320]	; (81051fc <UART_SetConfig+0x344>)
 81050ba:	4293      	cmp	r3, r2
 81050bc:	d130      	bne.n	8105120 <UART_SetConfig+0x268>
 81050be:	4b4d      	ldr	r3, [pc, #308]	; (81051f4 <UART_SetConfig+0x33c>)
 81050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050c2:	f003 0307 	and.w	r3, r3, #7
 81050c6:	2b05      	cmp	r3, #5
 81050c8:	d826      	bhi.n	8105118 <UART_SetConfig+0x260>
 81050ca:	a201      	add	r2, pc, #4	; (adr r2, 81050d0 <UART_SetConfig+0x218>)
 81050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050d0:	081050e9 	.word	0x081050e9
 81050d4:	081050f1 	.word	0x081050f1
 81050d8:	081050f9 	.word	0x081050f9
 81050dc:	08105101 	.word	0x08105101
 81050e0:	08105109 	.word	0x08105109
 81050e4:	08105111 	.word	0x08105111
 81050e8:	2300      	movs	r3, #0
 81050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ee:	e1b4      	b.n	810545a <UART_SetConfig+0x5a2>
 81050f0:	2304      	movs	r3, #4
 81050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050f6:	e1b0      	b.n	810545a <UART_SetConfig+0x5a2>
 81050f8:	2308      	movs	r3, #8
 81050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050fe:	e1ac      	b.n	810545a <UART_SetConfig+0x5a2>
 8105100:	2310      	movs	r3, #16
 8105102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105106:	e1a8      	b.n	810545a <UART_SetConfig+0x5a2>
 8105108:	2320      	movs	r3, #32
 810510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810510e:	e1a4      	b.n	810545a <UART_SetConfig+0x5a2>
 8105110:	2340      	movs	r3, #64	; 0x40
 8105112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105116:	e1a0      	b.n	810545a <UART_SetConfig+0x5a2>
 8105118:	2380      	movs	r3, #128	; 0x80
 810511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810511e:	e19c      	b.n	810545a <UART_SetConfig+0x5a2>
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	4a36      	ldr	r2, [pc, #216]	; (8105200 <UART_SetConfig+0x348>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d130      	bne.n	810518c <UART_SetConfig+0x2d4>
 810512a:	4b32      	ldr	r3, [pc, #200]	; (81051f4 <UART_SetConfig+0x33c>)
 810512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810512e:	f003 0307 	and.w	r3, r3, #7
 8105132:	2b05      	cmp	r3, #5
 8105134:	d826      	bhi.n	8105184 <UART_SetConfig+0x2cc>
 8105136:	a201      	add	r2, pc, #4	; (adr r2, 810513c <UART_SetConfig+0x284>)
 8105138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810513c:	08105155 	.word	0x08105155
 8105140:	0810515d 	.word	0x0810515d
 8105144:	08105165 	.word	0x08105165
 8105148:	0810516d 	.word	0x0810516d
 810514c:	08105175 	.word	0x08105175
 8105150:	0810517d 	.word	0x0810517d
 8105154:	2300      	movs	r3, #0
 8105156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810515a:	e17e      	b.n	810545a <UART_SetConfig+0x5a2>
 810515c:	2304      	movs	r3, #4
 810515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105162:	e17a      	b.n	810545a <UART_SetConfig+0x5a2>
 8105164:	2308      	movs	r3, #8
 8105166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810516a:	e176      	b.n	810545a <UART_SetConfig+0x5a2>
 810516c:	2310      	movs	r3, #16
 810516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105172:	e172      	b.n	810545a <UART_SetConfig+0x5a2>
 8105174:	2320      	movs	r3, #32
 8105176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810517a:	e16e      	b.n	810545a <UART_SetConfig+0x5a2>
 810517c:	2340      	movs	r3, #64	; 0x40
 810517e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105182:	e16a      	b.n	810545a <UART_SetConfig+0x5a2>
 8105184:	2380      	movs	r3, #128	; 0x80
 8105186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810518a:	e166      	b.n	810545a <UART_SetConfig+0x5a2>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	4a1c      	ldr	r2, [pc, #112]	; (8105204 <UART_SetConfig+0x34c>)
 8105192:	4293      	cmp	r3, r2
 8105194:	d140      	bne.n	8105218 <UART_SetConfig+0x360>
 8105196:	4b17      	ldr	r3, [pc, #92]	; (81051f4 <UART_SetConfig+0x33c>)
 8105198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810519a:	f003 0307 	and.w	r3, r3, #7
 810519e:	2b05      	cmp	r3, #5
 81051a0:	d836      	bhi.n	8105210 <UART_SetConfig+0x358>
 81051a2:	a201      	add	r2, pc, #4	; (adr r2, 81051a8 <UART_SetConfig+0x2f0>)
 81051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051a8:	081051c1 	.word	0x081051c1
 81051ac:	081051c9 	.word	0x081051c9
 81051b0:	081051d1 	.word	0x081051d1
 81051b4:	081051d9 	.word	0x081051d9
 81051b8:	081051e1 	.word	0x081051e1
 81051bc:	08105209 	.word	0x08105209
 81051c0:	2300      	movs	r3, #0
 81051c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051c6:	e148      	b.n	810545a <UART_SetConfig+0x5a2>
 81051c8:	2304      	movs	r3, #4
 81051ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ce:	e144      	b.n	810545a <UART_SetConfig+0x5a2>
 81051d0:	2308      	movs	r3, #8
 81051d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051d6:	e140      	b.n	810545a <UART_SetConfig+0x5a2>
 81051d8:	2310      	movs	r3, #16
 81051da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051de:	e13c      	b.n	810545a <UART_SetConfig+0x5a2>
 81051e0:	2320      	movs	r3, #32
 81051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051e6:	e138      	b.n	810545a <UART_SetConfig+0x5a2>
 81051e8:	cfff69f3 	.word	0xcfff69f3
 81051ec:	58000c00 	.word	0x58000c00
 81051f0:	40011000 	.word	0x40011000
 81051f4:	58024400 	.word	0x58024400
 81051f8:	40004400 	.word	0x40004400
 81051fc:	40004800 	.word	0x40004800
 8105200:	40004c00 	.word	0x40004c00
 8105204:	40005000 	.word	0x40005000
 8105208:	2340      	movs	r3, #64	; 0x40
 810520a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810520e:	e124      	b.n	810545a <UART_SetConfig+0x5a2>
 8105210:	2380      	movs	r3, #128	; 0x80
 8105212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105216:	e120      	b.n	810545a <UART_SetConfig+0x5a2>
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	4acc      	ldr	r2, [pc, #816]	; (8105550 <UART_SetConfig+0x698>)
 810521e:	4293      	cmp	r3, r2
 8105220:	d176      	bne.n	8105310 <UART_SetConfig+0x458>
 8105222:	4bcc      	ldr	r3, [pc, #816]	; (8105554 <UART_SetConfig+0x69c>)
 8105224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810522a:	2b28      	cmp	r3, #40	; 0x28
 810522c:	d86c      	bhi.n	8105308 <UART_SetConfig+0x450>
 810522e:	a201      	add	r2, pc, #4	; (adr r2, 8105234 <UART_SetConfig+0x37c>)
 8105230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105234:	081052d9 	.word	0x081052d9
 8105238:	08105309 	.word	0x08105309
 810523c:	08105309 	.word	0x08105309
 8105240:	08105309 	.word	0x08105309
 8105244:	08105309 	.word	0x08105309
 8105248:	08105309 	.word	0x08105309
 810524c:	08105309 	.word	0x08105309
 8105250:	08105309 	.word	0x08105309
 8105254:	081052e1 	.word	0x081052e1
 8105258:	08105309 	.word	0x08105309
 810525c:	08105309 	.word	0x08105309
 8105260:	08105309 	.word	0x08105309
 8105264:	08105309 	.word	0x08105309
 8105268:	08105309 	.word	0x08105309
 810526c:	08105309 	.word	0x08105309
 8105270:	08105309 	.word	0x08105309
 8105274:	081052e9 	.word	0x081052e9
 8105278:	08105309 	.word	0x08105309
 810527c:	08105309 	.word	0x08105309
 8105280:	08105309 	.word	0x08105309
 8105284:	08105309 	.word	0x08105309
 8105288:	08105309 	.word	0x08105309
 810528c:	08105309 	.word	0x08105309
 8105290:	08105309 	.word	0x08105309
 8105294:	081052f1 	.word	0x081052f1
 8105298:	08105309 	.word	0x08105309
 810529c:	08105309 	.word	0x08105309
 81052a0:	08105309 	.word	0x08105309
 81052a4:	08105309 	.word	0x08105309
 81052a8:	08105309 	.word	0x08105309
 81052ac:	08105309 	.word	0x08105309
 81052b0:	08105309 	.word	0x08105309
 81052b4:	081052f9 	.word	0x081052f9
 81052b8:	08105309 	.word	0x08105309
 81052bc:	08105309 	.word	0x08105309
 81052c0:	08105309 	.word	0x08105309
 81052c4:	08105309 	.word	0x08105309
 81052c8:	08105309 	.word	0x08105309
 81052cc:	08105309 	.word	0x08105309
 81052d0:	08105309 	.word	0x08105309
 81052d4:	08105301 	.word	0x08105301
 81052d8:	2301      	movs	r3, #1
 81052da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052de:	e0bc      	b.n	810545a <UART_SetConfig+0x5a2>
 81052e0:	2304      	movs	r3, #4
 81052e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052e6:	e0b8      	b.n	810545a <UART_SetConfig+0x5a2>
 81052e8:	2308      	movs	r3, #8
 81052ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052ee:	e0b4      	b.n	810545a <UART_SetConfig+0x5a2>
 81052f0:	2310      	movs	r3, #16
 81052f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052f6:	e0b0      	b.n	810545a <UART_SetConfig+0x5a2>
 81052f8:	2320      	movs	r3, #32
 81052fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052fe:	e0ac      	b.n	810545a <UART_SetConfig+0x5a2>
 8105300:	2340      	movs	r3, #64	; 0x40
 8105302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105306:	e0a8      	b.n	810545a <UART_SetConfig+0x5a2>
 8105308:	2380      	movs	r3, #128	; 0x80
 810530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810530e:	e0a4      	b.n	810545a <UART_SetConfig+0x5a2>
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	4a90      	ldr	r2, [pc, #576]	; (8105558 <UART_SetConfig+0x6a0>)
 8105316:	4293      	cmp	r3, r2
 8105318:	d130      	bne.n	810537c <UART_SetConfig+0x4c4>
 810531a:	4b8e      	ldr	r3, [pc, #568]	; (8105554 <UART_SetConfig+0x69c>)
 810531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810531e:	f003 0307 	and.w	r3, r3, #7
 8105322:	2b05      	cmp	r3, #5
 8105324:	d826      	bhi.n	8105374 <UART_SetConfig+0x4bc>
 8105326:	a201      	add	r2, pc, #4	; (adr r2, 810532c <UART_SetConfig+0x474>)
 8105328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810532c:	08105345 	.word	0x08105345
 8105330:	0810534d 	.word	0x0810534d
 8105334:	08105355 	.word	0x08105355
 8105338:	0810535d 	.word	0x0810535d
 810533c:	08105365 	.word	0x08105365
 8105340:	0810536d 	.word	0x0810536d
 8105344:	2300      	movs	r3, #0
 8105346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810534a:	e086      	b.n	810545a <UART_SetConfig+0x5a2>
 810534c:	2304      	movs	r3, #4
 810534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105352:	e082      	b.n	810545a <UART_SetConfig+0x5a2>
 8105354:	2308      	movs	r3, #8
 8105356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810535a:	e07e      	b.n	810545a <UART_SetConfig+0x5a2>
 810535c:	2310      	movs	r3, #16
 810535e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105362:	e07a      	b.n	810545a <UART_SetConfig+0x5a2>
 8105364:	2320      	movs	r3, #32
 8105366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810536a:	e076      	b.n	810545a <UART_SetConfig+0x5a2>
 810536c:	2340      	movs	r3, #64	; 0x40
 810536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105372:	e072      	b.n	810545a <UART_SetConfig+0x5a2>
 8105374:	2380      	movs	r3, #128	; 0x80
 8105376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810537a:	e06e      	b.n	810545a <UART_SetConfig+0x5a2>
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	4a76      	ldr	r2, [pc, #472]	; (810555c <UART_SetConfig+0x6a4>)
 8105382:	4293      	cmp	r3, r2
 8105384:	d130      	bne.n	81053e8 <UART_SetConfig+0x530>
 8105386:	4b73      	ldr	r3, [pc, #460]	; (8105554 <UART_SetConfig+0x69c>)
 8105388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810538a:	f003 0307 	and.w	r3, r3, #7
 810538e:	2b05      	cmp	r3, #5
 8105390:	d826      	bhi.n	81053e0 <UART_SetConfig+0x528>
 8105392:	a201      	add	r2, pc, #4	; (adr r2, 8105398 <UART_SetConfig+0x4e0>)
 8105394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105398:	081053b1 	.word	0x081053b1
 810539c:	081053b9 	.word	0x081053b9
 81053a0:	081053c1 	.word	0x081053c1
 81053a4:	081053c9 	.word	0x081053c9
 81053a8:	081053d1 	.word	0x081053d1
 81053ac:	081053d9 	.word	0x081053d9
 81053b0:	2300      	movs	r3, #0
 81053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053b6:	e050      	b.n	810545a <UART_SetConfig+0x5a2>
 81053b8:	2304      	movs	r3, #4
 81053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053be:	e04c      	b.n	810545a <UART_SetConfig+0x5a2>
 81053c0:	2308      	movs	r3, #8
 81053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053c6:	e048      	b.n	810545a <UART_SetConfig+0x5a2>
 81053c8:	2310      	movs	r3, #16
 81053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053ce:	e044      	b.n	810545a <UART_SetConfig+0x5a2>
 81053d0:	2320      	movs	r3, #32
 81053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053d6:	e040      	b.n	810545a <UART_SetConfig+0x5a2>
 81053d8:	2340      	movs	r3, #64	; 0x40
 81053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053de:	e03c      	b.n	810545a <UART_SetConfig+0x5a2>
 81053e0:	2380      	movs	r3, #128	; 0x80
 81053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053e6:	e038      	b.n	810545a <UART_SetConfig+0x5a2>
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	4a5c      	ldr	r2, [pc, #368]	; (8105560 <UART_SetConfig+0x6a8>)
 81053ee:	4293      	cmp	r3, r2
 81053f0:	d130      	bne.n	8105454 <UART_SetConfig+0x59c>
 81053f2:	4b58      	ldr	r3, [pc, #352]	; (8105554 <UART_SetConfig+0x69c>)
 81053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81053f6:	f003 0307 	and.w	r3, r3, #7
 81053fa:	2b05      	cmp	r3, #5
 81053fc:	d826      	bhi.n	810544c <UART_SetConfig+0x594>
 81053fe:	a201      	add	r2, pc, #4	; (adr r2, 8105404 <UART_SetConfig+0x54c>)
 8105400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105404:	0810541d 	.word	0x0810541d
 8105408:	08105425 	.word	0x08105425
 810540c:	0810542d 	.word	0x0810542d
 8105410:	08105435 	.word	0x08105435
 8105414:	0810543d 	.word	0x0810543d
 8105418:	08105445 	.word	0x08105445
 810541c:	2302      	movs	r3, #2
 810541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105422:	e01a      	b.n	810545a <UART_SetConfig+0x5a2>
 8105424:	2304      	movs	r3, #4
 8105426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810542a:	e016      	b.n	810545a <UART_SetConfig+0x5a2>
 810542c:	2308      	movs	r3, #8
 810542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105432:	e012      	b.n	810545a <UART_SetConfig+0x5a2>
 8105434:	2310      	movs	r3, #16
 8105436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810543a:	e00e      	b.n	810545a <UART_SetConfig+0x5a2>
 810543c:	2320      	movs	r3, #32
 810543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105442:	e00a      	b.n	810545a <UART_SetConfig+0x5a2>
 8105444:	2340      	movs	r3, #64	; 0x40
 8105446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810544a:	e006      	b.n	810545a <UART_SetConfig+0x5a2>
 810544c:	2380      	movs	r3, #128	; 0x80
 810544e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105452:	e002      	b.n	810545a <UART_SetConfig+0x5a2>
 8105454:	2380      	movs	r3, #128	; 0x80
 8105456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a40      	ldr	r2, [pc, #256]	; (8105560 <UART_SetConfig+0x6a8>)
 8105460:	4293      	cmp	r3, r2
 8105462:	f040 80ef 	bne.w	8105644 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105466:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810546a:	2b20      	cmp	r3, #32
 810546c:	dc46      	bgt.n	81054fc <UART_SetConfig+0x644>
 810546e:	2b02      	cmp	r3, #2
 8105470:	f2c0 8081 	blt.w	8105576 <UART_SetConfig+0x6be>
 8105474:	3b02      	subs	r3, #2
 8105476:	2b1e      	cmp	r3, #30
 8105478:	d87d      	bhi.n	8105576 <UART_SetConfig+0x6be>
 810547a:	a201      	add	r2, pc, #4	; (adr r2, 8105480 <UART_SetConfig+0x5c8>)
 810547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105480:	08105503 	.word	0x08105503
 8105484:	08105577 	.word	0x08105577
 8105488:	0810550b 	.word	0x0810550b
 810548c:	08105577 	.word	0x08105577
 8105490:	08105577 	.word	0x08105577
 8105494:	08105577 	.word	0x08105577
 8105498:	0810551b 	.word	0x0810551b
 810549c:	08105577 	.word	0x08105577
 81054a0:	08105577 	.word	0x08105577
 81054a4:	08105577 	.word	0x08105577
 81054a8:	08105577 	.word	0x08105577
 81054ac:	08105577 	.word	0x08105577
 81054b0:	08105577 	.word	0x08105577
 81054b4:	08105577 	.word	0x08105577
 81054b8:	0810552b 	.word	0x0810552b
 81054bc:	08105577 	.word	0x08105577
 81054c0:	08105577 	.word	0x08105577
 81054c4:	08105577 	.word	0x08105577
 81054c8:	08105577 	.word	0x08105577
 81054cc:	08105577 	.word	0x08105577
 81054d0:	08105577 	.word	0x08105577
 81054d4:	08105577 	.word	0x08105577
 81054d8:	08105577 	.word	0x08105577
 81054dc:	08105577 	.word	0x08105577
 81054e0:	08105577 	.word	0x08105577
 81054e4:	08105577 	.word	0x08105577
 81054e8:	08105577 	.word	0x08105577
 81054ec:	08105577 	.word	0x08105577
 81054f0:	08105577 	.word	0x08105577
 81054f4:	08105577 	.word	0x08105577
 81054f8:	08105569 	.word	0x08105569
 81054fc:	2b40      	cmp	r3, #64	; 0x40
 81054fe:	d036      	beq.n	810556e <UART_SetConfig+0x6b6>
 8105500:	e039      	b.n	8105576 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105502:	f7fe fc13 	bl	8103d2c <HAL_RCCEx_GetD3PCLK1Freq>
 8105506:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105508:	e03b      	b.n	8105582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810550a:	f107 0314 	add.w	r3, r7, #20
 810550e:	4618      	mov	r0, r3
 8105510:	f7fe fc22 	bl	8103d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105514:	69bb      	ldr	r3, [r7, #24]
 8105516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105518:	e033      	b.n	8105582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810551a:	f107 0308 	add.w	r3, r7, #8
 810551e:	4618      	mov	r0, r3
 8105520:	f7fe fd6e 	bl	8104000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105524:	68fb      	ldr	r3, [r7, #12]
 8105526:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105528:	e02b      	b.n	8105582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810552a:	4b0a      	ldr	r3, [pc, #40]	; (8105554 <UART_SetConfig+0x69c>)
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	f003 0320 	and.w	r3, r3, #32
 8105532:	2b00      	cmp	r3, #0
 8105534:	d009      	beq.n	810554a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105536:	4b07      	ldr	r3, [pc, #28]	; (8105554 <UART_SetConfig+0x69c>)
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	08db      	lsrs	r3, r3, #3
 810553c:	f003 0303 	and.w	r3, r3, #3
 8105540:	4a08      	ldr	r2, [pc, #32]	; (8105564 <UART_SetConfig+0x6ac>)
 8105542:	fa22 f303 	lsr.w	r3, r2, r3
 8105546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105548:	e01b      	b.n	8105582 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810554a:	4b06      	ldr	r3, [pc, #24]	; (8105564 <UART_SetConfig+0x6ac>)
 810554c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810554e:	e018      	b.n	8105582 <UART_SetConfig+0x6ca>
 8105550:	40011400 	.word	0x40011400
 8105554:	58024400 	.word	0x58024400
 8105558:	40007800 	.word	0x40007800
 810555c:	40007c00 	.word	0x40007c00
 8105560:	58000c00 	.word	0x58000c00
 8105564:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105568:	4bc4      	ldr	r3, [pc, #784]	; (810587c <UART_SetConfig+0x9c4>)
 810556a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810556c:	e009      	b.n	8105582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810556e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105574:	e005      	b.n	8105582 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8105576:	2300      	movs	r3, #0
 8105578:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810557a:	2301      	movs	r3, #1
 810557c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105584:	2b00      	cmp	r3, #0
 8105586:	f000 81da 	beq.w	810593e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810558e:	4abc      	ldr	r2, [pc, #752]	; (8105880 <UART_SetConfig+0x9c8>)
 8105590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105594:	461a      	mov	r2, r3
 8105596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105598:	fbb3 f3f2 	udiv	r3, r3, r2
 810559c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	685a      	ldr	r2, [r3, #4]
 81055a2:	4613      	mov	r3, r2
 81055a4:	005b      	lsls	r3, r3, #1
 81055a6:	4413      	add	r3, r2
 81055a8:	6a3a      	ldr	r2, [r7, #32]
 81055aa:	429a      	cmp	r2, r3
 81055ac:	d305      	bcc.n	81055ba <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	685b      	ldr	r3, [r3, #4]
 81055b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81055b4:	6a3a      	ldr	r2, [r7, #32]
 81055b6:	429a      	cmp	r2, r3
 81055b8:	d903      	bls.n	81055c2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81055ba:	2301      	movs	r3, #1
 81055bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81055c0:	e1bd      	b.n	810593e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81055c4:	4618      	mov	r0, r3
 81055c6:	f04f 0100 	mov.w	r1, #0
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81055ce:	4aac      	ldr	r2, [pc, #688]	; (8105880 <UART_SetConfig+0x9c8>)
 81055d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81055d4:	b29a      	uxth	r2, r3
 81055d6:	f04f 0300 	mov.w	r3, #0
 81055da:	f7fa fee9 	bl	81003b0 <__aeabi_uldivmod>
 81055de:	4602      	mov	r2, r0
 81055e0:	460b      	mov	r3, r1
 81055e2:	4610      	mov	r0, r2
 81055e4:	4619      	mov	r1, r3
 81055e6:	f04f 0200 	mov.w	r2, #0
 81055ea:	f04f 0300 	mov.w	r3, #0
 81055ee:	020b      	lsls	r3, r1, #8
 81055f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81055f4:	0202      	lsls	r2, r0, #8
 81055f6:	6879      	ldr	r1, [r7, #4]
 81055f8:	6849      	ldr	r1, [r1, #4]
 81055fa:	0849      	lsrs	r1, r1, #1
 81055fc:	4608      	mov	r0, r1
 81055fe:	f04f 0100 	mov.w	r1, #0
 8105602:	1814      	adds	r4, r2, r0
 8105604:	eb43 0501 	adc.w	r5, r3, r1
 8105608:	687b      	ldr	r3, [r7, #4]
 810560a:	685b      	ldr	r3, [r3, #4]
 810560c:	461a      	mov	r2, r3
 810560e:	f04f 0300 	mov.w	r3, #0
 8105612:	4620      	mov	r0, r4
 8105614:	4629      	mov	r1, r5
 8105616:	f7fa fecb 	bl	81003b0 <__aeabi_uldivmod>
 810561a:	4602      	mov	r2, r0
 810561c:	460b      	mov	r3, r1
 810561e:	4613      	mov	r3, r2
 8105620:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105628:	d308      	bcc.n	810563c <UART_SetConfig+0x784>
 810562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810562c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105630:	d204      	bcs.n	810563c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	681b      	ldr	r3, [r3, #0]
 8105636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105638:	60da      	str	r2, [r3, #12]
 810563a:	e180      	b.n	810593e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810563c:	2301      	movs	r3, #1
 810563e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105642:	e17c      	b.n	810593e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	69db      	ldr	r3, [r3, #28]
 8105648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810564c:	f040 80be 	bne.w	81057cc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8105650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105654:	2b20      	cmp	r3, #32
 8105656:	dc49      	bgt.n	81056ec <UART_SetConfig+0x834>
 8105658:	2b00      	cmp	r3, #0
 810565a:	db7c      	blt.n	8105756 <UART_SetConfig+0x89e>
 810565c:	2b20      	cmp	r3, #32
 810565e:	d87a      	bhi.n	8105756 <UART_SetConfig+0x89e>
 8105660:	a201      	add	r2, pc, #4	; (adr r2, 8105668 <UART_SetConfig+0x7b0>)
 8105662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105666:	bf00      	nop
 8105668:	081056f3 	.word	0x081056f3
 810566c:	081056fb 	.word	0x081056fb
 8105670:	08105757 	.word	0x08105757
 8105674:	08105757 	.word	0x08105757
 8105678:	08105703 	.word	0x08105703
 810567c:	08105757 	.word	0x08105757
 8105680:	08105757 	.word	0x08105757
 8105684:	08105757 	.word	0x08105757
 8105688:	08105713 	.word	0x08105713
 810568c:	08105757 	.word	0x08105757
 8105690:	08105757 	.word	0x08105757
 8105694:	08105757 	.word	0x08105757
 8105698:	08105757 	.word	0x08105757
 810569c:	08105757 	.word	0x08105757
 81056a0:	08105757 	.word	0x08105757
 81056a4:	08105757 	.word	0x08105757
 81056a8:	08105723 	.word	0x08105723
 81056ac:	08105757 	.word	0x08105757
 81056b0:	08105757 	.word	0x08105757
 81056b4:	08105757 	.word	0x08105757
 81056b8:	08105757 	.word	0x08105757
 81056bc:	08105757 	.word	0x08105757
 81056c0:	08105757 	.word	0x08105757
 81056c4:	08105757 	.word	0x08105757
 81056c8:	08105757 	.word	0x08105757
 81056cc:	08105757 	.word	0x08105757
 81056d0:	08105757 	.word	0x08105757
 81056d4:	08105757 	.word	0x08105757
 81056d8:	08105757 	.word	0x08105757
 81056dc:	08105757 	.word	0x08105757
 81056e0:	08105757 	.word	0x08105757
 81056e4:	08105757 	.word	0x08105757
 81056e8:	08105749 	.word	0x08105749
 81056ec:	2b40      	cmp	r3, #64	; 0x40
 81056ee:	d02e      	beq.n	810574e <UART_SetConfig+0x896>
 81056f0:	e031      	b.n	8105756 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81056f2:	f7fd fbaf 	bl	8102e54 <HAL_RCC_GetPCLK1Freq>
 81056f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81056f8:	e033      	b.n	8105762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81056fa:	f7fd fbc1 	bl	8102e80 <HAL_RCC_GetPCLK2Freq>
 81056fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105700:	e02f      	b.n	8105762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105702:	f107 0314 	add.w	r3, r7, #20
 8105706:	4618      	mov	r0, r3
 8105708:	f7fe fb26 	bl	8103d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810570c:	69bb      	ldr	r3, [r7, #24]
 810570e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105710:	e027      	b.n	8105762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105712:	f107 0308 	add.w	r3, r7, #8
 8105716:	4618      	mov	r0, r3
 8105718:	f7fe fc72 	bl	8104000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105720:	e01f      	b.n	8105762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105722:	4b58      	ldr	r3, [pc, #352]	; (8105884 <UART_SetConfig+0x9cc>)
 8105724:	681b      	ldr	r3, [r3, #0]
 8105726:	f003 0320 	and.w	r3, r3, #32
 810572a:	2b00      	cmp	r3, #0
 810572c:	d009      	beq.n	8105742 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810572e:	4b55      	ldr	r3, [pc, #340]	; (8105884 <UART_SetConfig+0x9cc>)
 8105730:	681b      	ldr	r3, [r3, #0]
 8105732:	08db      	lsrs	r3, r3, #3
 8105734:	f003 0303 	and.w	r3, r3, #3
 8105738:	4a53      	ldr	r2, [pc, #332]	; (8105888 <UART_SetConfig+0x9d0>)
 810573a:	fa22 f303 	lsr.w	r3, r2, r3
 810573e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105740:	e00f      	b.n	8105762 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8105742:	4b51      	ldr	r3, [pc, #324]	; (8105888 <UART_SetConfig+0x9d0>)
 8105744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105746:	e00c      	b.n	8105762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105748:	4b4c      	ldr	r3, [pc, #304]	; (810587c <UART_SetConfig+0x9c4>)
 810574a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810574c:	e009      	b.n	8105762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810574e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105754:	e005      	b.n	8105762 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8105756:	2300      	movs	r3, #0
 8105758:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810575a:	2301      	movs	r3, #1
 810575c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8105762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105764:	2b00      	cmp	r3, #0
 8105766:	f000 80ea 	beq.w	810593e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810576e:	4a44      	ldr	r2, [pc, #272]	; (8105880 <UART_SetConfig+0x9c8>)
 8105770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105774:	461a      	mov	r2, r3
 8105776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105778:	fbb3 f3f2 	udiv	r3, r3, r2
 810577c:	005a      	lsls	r2, r3, #1
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	685b      	ldr	r3, [r3, #4]
 8105782:	085b      	lsrs	r3, r3, #1
 8105784:	441a      	add	r2, r3
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	685b      	ldr	r3, [r3, #4]
 810578a:	fbb2 f3f3 	udiv	r3, r2, r3
 810578e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105792:	2b0f      	cmp	r3, #15
 8105794:	d916      	bls.n	81057c4 <UART_SetConfig+0x90c>
 8105796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810579c:	d212      	bcs.n	81057c4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057a0:	b29b      	uxth	r3, r3
 81057a2:	f023 030f 	bic.w	r3, r3, #15
 81057a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057aa:	085b      	lsrs	r3, r3, #1
 81057ac:	b29b      	uxth	r3, r3
 81057ae:	f003 0307 	and.w	r3, r3, #7
 81057b2:	b29a      	uxth	r2, r3
 81057b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81057b6:	4313      	orrs	r3, r2
 81057b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81057c0:	60da      	str	r2, [r3, #12]
 81057c2:	e0bc      	b.n	810593e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81057c4:	2301      	movs	r3, #1
 81057c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81057ca:	e0b8      	b.n	810593e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 81057cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81057d0:	2b20      	cmp	r3, #32
 81057d2:	dc4b      	bgt.n	810586c <UART_SetConfig+0x9b4>
 81057d4:	2b00      	cmp	r3, #0
 81057d6:	f2c0 8087 	blt.w	81058e8 <UART_SetConfig+0xa30>
 81057da:	2b20      	cmp	r3, #32
 81057dc:	f200 8084 	bhi.w	81058e8 <UART_SetConfig+0xa30>
 81057e0:	a201      	add	r2, pc, #4	; (adr r2, 81057e8 <UART_SetConfig+0x930>)
 81057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057e6:	bf00      	nop
 81057e8:	08105873 	.word	0x08105873
 81057ec:	0810588d 	.word	0x0810588d
 81057f0:	081058e9 	.word	0x081058e9
 81057f4:	081058e9 	.word	0x081058e9
 81057f8:	08105895 	.word	0x08105895
 81057fc:	081058e9 	.word	0x081058e9
 8105800:	081058e9 	.word	0x081058e9
 8105804:	081058e9 	.word	0x081058e9
 8105808:	081058a5 	.word	0x081058a5
 810580c:	081058e9 	.word	0x081058e9
 8105810:	081058e9 	.word	0x081058e9
 8105814:	081058e9 	.word	0x081058e9
 8105818:	081058e9 	.word	0x081058e9
 810581c:	081058e9 	.word	0x081058e9
 8105820:	081058e9 	.word	0x081058e9
 8105824:	081058e9 	.word	0x081058e9
 8105828:	081058b5 	.word	0x081058b5
 810582c:	081058e9 	.word	0x081058e9
 8105830:	081058e9 	.word	0x081058e9
 8105834:	081058e9 	.word	0x081058e9
 8105838:	081058e9 	.word	0x081058e9
 810583c:	081058e9 	.word	0x081058e9
 8105840:	081058e9 	.word	0x081058e9
 8105844:	081058e9 	.word	0x081058e9
 8105848:	081058e9 	.word	0x081058e9
 810584c:	081058e9 	.word	0x081058e9
 8105850:	081058e9 	.word	0x081058e9
 8105854:	081058e9 	.word	0x081058e9
 8105858:	081058e9 	.word	0x081058e9
 810585c:	081058e9 	.word	0x081058e9
 8105860:	081058e9 	.word	0x081058e9
 8105864:	081058e9 	.word	0x081058e9
 8105868:	081058db 	.word	0x081058db
 810586c:	2b40      	cmp	r3, #64	; 0x40
 810586e:	d037      	beq.n	81058e0 <UART_SetConfig+0xa28>
 8105870:	e03a      	b.n	81058e8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105872:	f7fd faef 	bl	8102e54 <HAL_RCC_GetPCLK1Freq>
 8105876:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105878:	e03c      	b.n	81058f4 <UART_SetConfig+0xa3c>
 810587a:	bf00      	nop
 810587c:	003d0900 	.word	0x003d0900
 8105880:	0810709c 	.word	0x0810709c
 8105884:	58024400 	.word	0x58024400
 8105888:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810588c:	f7fd faf8 	bl	8102e80 <HAL_RCC_GetPCLK2Freq>
 8105890:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105892:	e02f      	b.n	81058f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105894:	f107 0314 	add.w	r3, r7, #20
 8105898:	4618      	mov	r0, r3
 810589a:	f7fe fa5d 	bl	8103d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810589e:	69bb      	ldr	r3, [r7, #24]
 81058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058a2:	e027      	b.n	81058f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81058a4:	f107 0308 	add.w	r3, r7, #8
 81058a8:	4618      	mov	r0, r3
 81058aa:	f7fe fba9 	bl	8104000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058b2:	e01f      	b.n	81058f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058b4:	4b2c      	ldr	r3, [pc, #176]	; (8105968 <UART_SetConfig+0xab0>)
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	f003 0320 	and.w	r3, r3, #32
 81058bc:	2b00      	cmp	r3, #0
 81058be:	d009      	beq.n	81058d4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81058c0:	4b29      	ldr	r3, [pc, #164]	; (8105968 <UART_SetConfig+0xab0>)
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	08db      	lsrs	r3, r3, #3
 81058c6:	f003 0303 	and.w	r3, r3, #3
 81058ca:	4a28      	ldr	r2, [pc, #160]	; (810596c <UART_SetConfig+0xab4>)
 81058cc:	fa22 f303 	lsr.w	r3, r2, r3
 81058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81058d2:	e00f      	b.n	81058f4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 81058d4:	4b25      	ldr	r3, [pc, #148]	; (810596c <UART_SetConfig+0xab4>)
 81058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058d8:	e00c      	b.n	81058f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81058da:	4b25      	ldr	r3, [pc, #148]	; (8105970 <UART_SetConfig+0xab8>)
 81058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058de:	e009      	b.n	81058f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81058e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058e6:	e005      	b.n	81058f4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 81058e8:	2300      	movs	r3, #0
 81058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81058ec:	2301      	movs	r3, #1
 81058ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81058f2:	bf00      	nop
    }

    if (pclk != 0U)
 81058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81058f6:	2b00      	cmp	r3, #0
 81058f8:	d021      	beq.n	810593e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81058fa:	687b      	ldr	r3, [r7, #4]
 81058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81058fe:	4a1d      	ldr	r2, [pc, #116]	; (8105974 <UART_SetConfig+0xabc>)
 8105900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105904:	461a      	mov	r2, r3
 8105906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105908:	fbb3 f2f2 	udiv	r2, r3, r2
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	685b      	ldr	r3, [r3, #4]
 8105910:	085b      	lsrs	r3, r3, #1
 8105912:	441a      	add	r2, r3
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	685b      	ldr	r3, [r3, #4]
 8105918:	fbb2 f3f3 	udiv	r3, r2, r3
 810591c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105920:	2b0f      	cmp	r3, #15
 8105922:	d909      	bls.n	8105938 <UART_SetConfig+0xa80>
 8105924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810592a:	d205      	bcs.n	8105938 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810592e:	b29a      	uxth	r2, r3
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	681b      	ldr	r3, [r3, #0]
 8105934:	60da      	str	r2, [r3, #12]
 8105936:	e002      	b.n	810593e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8105938:	2301      	movs	r3, #1
 810593a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	2201      	movs	r2, #1
 8105942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	2201      	movs	r2, #1
 810594a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	2200      	movs	r2, #0
 8105952:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	2200      	movs	r2, #0
 8105958:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810595a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810595e:	4618      	mov	r0, r3
 8105960:	3738      	adds	r7, #56	; 0x38
 8105962:	46bd      	mov	sp, r7
 8105964:	bdb0      	pop	{r4, r5, r7, pc}
 8105966:	bf00      	nop
 8105968:	58024400 	.word	0x58024400
 810596c:	03d09000 	.word	0x03d09000
 8105970:	003d0900 	.word	0x003d0900
 8105974:	0810709c 	.word	0x0810709c

08105978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105978:	b480      	push	{r7}
 810597a:	b083      	sub	sp, #12
 810597c:	af00      	add	r7, sp, #0
 810597e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105984:	f003 0301 	and.w	r3, r3, #1
 8105988:	2b00      	cmp	r3, #0
 810598a:	d00a      	beq.n	81059a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	685b      	ldr	r3, [r3, #4]
 8105992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	681b      	ldr	r3, [r3, #0]
 810599e:	430a      	orrs	r2, r1
 81059a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059a6:	f003 0302 	and.w	r3, r3, #2
 81059aa:	2b00      	cmp	r3, #0
 81059ac:	d00a      	beq.n	81059c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	685b      	ldr	r3, [r3, #4]
 81059b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	430a      	orrs	r2, r1
 81059c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059c8:	f003 0304 	and.w	r3, r3, #4
 81059cc:	2b00      	cmp	r3, #0
 81059ce:	d00a      	beq.n	81059e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	681b      	ldr	r3, [r3, #0]
 81059d4:	685b      	ldr	r3, [r3, #4]
 81059d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	681b      	ldr	r3, [r3, #0]
 81059e2:	430a      	orrs	r2, r1
 81059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059ea:	f003 0308 	and.w	r3, r3, #8
 81059ee:	2b00      	cmp	r3, #0
 81059f0:	d00a      	beq.n	8105a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	681b      	ldr	r3, [r3, #0]
 81059f6:	685b      	ldr	r3, [r3, #4]
 81059f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	681b      	ldr	r3, [r3, #0]
 8105a04:	430a      	orrs	r2, r1
 8105a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a0c:	f003 0310 	and.w	r3, r3, #16
 8105a10:	2b00      	cmp	r3, #0
 8105a12:	d00a      	beq.n	8105a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	689b      	ldr	r3, [r3, #8]
 8105a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	430a      	orrs	r2, r1
 8105a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a2e:	f003 0320 	and.w	r3, r3, #32
 8105a32:	2b00      	cmp	r3, #0
 8105a34:	d00a      	beq.n	8105a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	689b      	ldr	r3, [r3, #8]
 8105a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	681b      	ldr	r3, [r3, #0]
 8105a48:	430a      	orrs	r2, r1
 8105a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105a54:	2b00      	cmp	r3, #0
 8105a56:	d01a      	beq.n	8105a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	681b      	ldr	r3, [r3, #0]
 8105a5c:	685b      	ldr	r3, [r3, #4]
 8105a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	430a      	orrs	r2, r1
 8105a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a76:	d10a      	bne.n	8105a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	681b      	ldr	r3, [r3, #0]
 8105a7c:	685b      	ldr	r3, [r3, #4]
 8105a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	681b      	ldr	r3, [r3, #0]
 8105a8a:	430a      	orrs	r2, r1
 8105a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105a96:	2b00      	cmp	r3, #0
 8105a98:	d00a      	beq.n	8105ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	685b      	ldr	r3, [r3, #4]
 8105aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	430a      	orrs	r2, r1
 8105aae:	605a      	str	r2, [r3, #4]
  }
}
 8105ab0:	bf00      	nop
 8105ab2:	370c      	adds	r7, #12
 8105ab4:	46bd      	mov	sp, r7
 8105ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aba:	4770      	bx	lr

08105abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105abc:	b580      	push	{r7, lr}
 8105abe:	b086      	sub	sp, #24
 8105ac0:	af02      	add	r7, sp, #8
 8105ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	2200      	movs	r2, #0
 8105ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105acc:	f7fb fee8 	bl	81018a0 <HAL_GetTick>
 8105ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	681b      	ldr	r3, [r3, #0]
 8105ad8:	f003 0308 	and.w	r3, r3, #8
 8105adc:	2b08      	cmp	r3, #8
 8105ade:	d10e      	bne.n	8105afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105ae4:	9300      	str	r3, [sp, #0]
 8105ae6:	68fb      	ldr	r3, [r7, #12]
 8105ae8:	2200      	movs	r2, #0
 8105aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105aee:	6878      	ldr	r0, [r7, #4]
 8105af0:	f000 f82f 	bl	8105b52 <UART_WaitOnFlagUntilTimeout>
 8105af4:	4603      	mov	r3, r0
 8105af6:	2b00      	cmp	r3, #0
 8105af8:	d001      	beq.n	8105afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105afa:	2303      	movs	r3, #3
 8105afc:	e025      	b.n	8105b4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	681b      	ldr	r3, [r3, #0]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	f003 0304 	and.w	r3, r3, #4
 8105b08:	2b04      	cmp	r3, #4
 8105b0a:	d10e      	bne.n	8105b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105b10:	9300      	str	r3, [sp, #0]
 8105b12:	68fb      	ldr	r3, [r7, #12]
 8105b14:	2200      	movs	r2, #0
 8105b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105b1a:	6878      	ldr	r0, [r7, #4]
 8105b1c:	f000 f819 	bl	8105b52 <UART_WaitOnFlagUntilTimeout>
 8105b20:	4603      	mov	r3, r0
 8105b22:	2b00      	cmp	r3, #0
 8105b24:	d001      	beq.n	8105b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105b26:	2303      	movs	r3, #3
 8105b28:	e00f      	b.n	8105b4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	2220      	movs	r2, #32
 8105b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	2220      	movs	r2, #32
 8105b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	2200      	movs	r2, #0
 8105b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	2200      	movs	r2, #0
 8105b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105b48:	2300      	movs	r3, #0
}
 8105b4a:	4618      	mov	r0, r3
 8105b4c:	3710      	adds	r7, #16
 8105b4e:	46bd      	mov	sp, r7
 8105b50:	bd80      	pop	{r7, pc}

08105b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105b52:	b580      	push	{r7, lr}
 8105b54:	b09c      	sub	sp, #112	; 0x70
 8105b56:	af00      	add	r7, sp, #0
 8105b58:	60f8      	str	r0, [r7, #12]
 8105b5a:	60b9      	str	r1, [r7, #8]
 8105b5c:	603b      	str	r3, [r7, #0]
 8105b5e:	4613      	mov	r3, r2
 8105b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105b62:	e0a9      	b.n	8105cb8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105b6a:	f000 80a5 	beq.w	8105cb8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105b6e:	f7fb fe97 	bl	81018a0 <HAL_GetTick>
 8105b72:	4602      	mov	r2, r0
 8105b74:	683b      	ldr	r3, [r7, #0]
 8105b76:	1ad3      	subs	r3, r2, r3
 8105b78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8105b7a:	429a      	cmp	r2, r3
 8105b7c:	d302      	bcc.n	8105b84 <UART_WaitOnFlagUntilTimeout+0x32>
 8105b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105b80:	2b00      	cmp	r3, #0
 8105b82:	d140      	bne.n	8105c06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105b84:	68fb      	ldr	r3, [r7, #12]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105b8c:	e853 3f00 	ldrex	r3, [r3]
 8105b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105b98:	667b      	str	r3, [r7, #100]	; 0x64
 8105b9a:	68fb      	ldr	r3, [r7, #12]
 8105b9c:	681b      	ldr	r3, [r3, #0]
 8105b9e:	461a      	mov	r2, r3
 8105ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105ba4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8105baa:	e841 2300 	strex	r3, r2, [r1]
 8105bae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105bb2:	2b00      	cmp	r3, #0
 8105bb4:	d1e6      	bne.n	8105b84 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105bb6:	68fb      	ldr	r3, [r7, #12]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	3308      	adds	r3, #8
 8105bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105bc0:	e853 3f00 	ldrex	r3, [r3]
 8105bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105bc8:	f023 0301 	bic.w	r3, r3, #1
 8105bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8105bce:	68fb      	ldr	r3, [r7, #12]
 8105bd0:	681b      	ldr	r3, [r3, #0]
 8105bd2:	3308      	adds	r3, #8
 8105bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8105bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8105bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105bde:	e841 2300 	strex	r3, r2, [r1]
 8105be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8105be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105be6:	2b00      	cmp	r3, #0
 8105be8:	d1e5      	bne.n	8105bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8105bea:	68fb      	ldr	r3, [r7, #12]
 8105bec:	2220      	movs	r2, #32
 8105bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8105bf2:	68fb      	ldr	r3, [r7, #12]
 8105bf4:	2220      	movs	r2, #32
 8105bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8105bfa:	68fb      	ldr	r3, [r7, #12]
 8105bfc:	2200      	movs	r2, #0
 8105bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8105c02:	2303      	movs	r3, #3
 8105c04:	e069      	b.n	8105cda <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105c06:	68fb      	ldr	r3, [r7, #12]
 8105c08:	681b      	ldr	r3, [r3, #0]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	f003 0304 	and.w	r3, r3, #4
 8105c10:	2b00      	cmp	r3, #0
 8105c12:	d051      	beq.n	8105cb8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105c14:	68fb      	ldr	r3, [r7, #12]
 8105c16:	681b      	ldr	r3, [r3, #0]
 8105c18:	69db      	ldr	r3, [r3, #28]
 8105c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105c22:	d149      	bne.n	8105cb8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105c24:	68fb      	ldr	r3, [r7, #12]
 8105c26:	681b      	ldr	r3, [r3, #0]
 8105c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105c2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105c2e:	68fb      	ldr	r3, [r7, #12]
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105c36:	e853 3f00 	ldrex	r3, [r3]
 8105c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105c42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105c44:	68fb      	ldr	r3, [r7, #12]
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	461a      	mov	r2, r3
 8105c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8105c4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8105c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105c54:	e841 2300 	strex	r3, r2, [r1]
 8105c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8105c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105c5c:	2b00      	cmp	r3, #0
 8105c5e:	d1e6      	bne.n	8105c2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105c60:	68fb      	ldr	r3, [r7, #12]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	3308      	adds	r3, #8
 8105c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c68:	697b      	ldr	r3, [r7, #20]
 8105c6a:	e853 3f00 	ldrex	r3, [r3]
 8105c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8105c70:	693b      	ldr	r3, [r7, #16]
 8105c72:	f023 0301 	bic.w	r3, r3, #1
 8105c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8105c78:	68fb      	ldr	r3, [r7, #12]
 8105c7a:	681b      	ldr	r3, [r3, #0]
 8105c7c:	3308      	adds	r3, #8
 8105c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105c80:	623a      	str	r2, [r7, #32]
 8105c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105c84:	69f9      	ldr	r1, [r7, #28]
 8105c86:	6a3a      	ldr	r2, [r7, #32]
 8105c88:	e841 2300 	strex	r3, r2, [r1]
 8105c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8105c8e:	69bb      	ldr	r3, [r7, #24]
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	d1e5      	bne.n	8105c60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8105c94:	68fb      	ldr	r3, [r7, #12]
 8105c96:	2220      	movs	r2, #32
 8105c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8105c9c:	68fb      	ldr	r3, [r7, #12]
 8105c9e:	2220      	movs	r2, #32
 8105ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105ca4:	68fb      	ldr	r3, [r7, #12]
 8105ca6:	2220      	movs	r2, #32
 8105ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105cac:	68fb      	ldr	r3, [r7, #12]
 8105cae:	2200      	movs	r2, #0
 8105cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105cb4:	2303      	movs	r3, #3
 8105cb6:	e010      	b.n	8105cda <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105cb8:	68fb      	ldr	r3, [r7, #12]
 8105cba:	681b      	ldr	r3, [r3, #0]
 8105cbc:	69da      	ldr	r2, [r3, #28]
 8105cbe:	68bb      	ldr	r3, [r7, #8]
 8105cc0:	4013      	ands	r3, r2
 8105cc2:	68ba      	ldr	r2, [r7, #8]
 8105cc4:	429a      	cmp	r2, r3
 8105cc6:	bf0c      	ite	eq
 8105cc8:	2301      	moveq	r3, #1
 8105cca:	2300      	movne	r3, #0
 8105ccc:	b2db      	uxtb	r3, r3
 8105cce:	461a      	mov	r2, r3
 8105cd0:	79fb      	ldrb	r3, [r7, #7]
 8105cd2:	429a      	cmp	r2, r3
 8105cd4:	f43f af46 	beq.w	8105b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105cd8:	2300      	movs	r3, #0
}
 8105cda:	4618      	mov	r0, r3
 8105cdc:	3770      	adds	r7, #112	; 0x70
 8105cde:	46bd      	mov	sp, r7
 8105ce0:	bd80      	pop	{r7, pc}

08105ce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8105ce2:	b480      	push	{r7}
 8105ce4:	b095      	sub	sp, #84	; 0x54
 8105ce6:	af00      	add	r7, sp, #0
 8105ce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105cf2:	e853 3f00 	ldrex	r3, [r3]
 8105cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8105cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8105cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105d00:	687b      	ldr	r3, [r7, #4]
 8105d02:	681b      	ldr	r3, [r3, #0]
 8105d04:	461a      	mov	r2, r3
 8105d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105d08:	643b      	str	r3, [r7, #64]	; 0x40
 8105d0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8105d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105d10:	e841 2300 	strex	r3, r2, [r1]
 8105d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d18:	2b00      	cmp	r3, #0
 8105d1a:	d1e6      	bne.n	8105cea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	3308      	adds	r3, #8
 8105d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105d24:	6a3b      	ldr	r3, [r7, #32]
 8105d26:	e853 3f00 	ldrex	r3, [r3]
 8105d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8105d2c:	69fb      	ldr	r3, [r7, #28]
 8105d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105d32:	f023 0301 	bic.w	r3, r3, #1
 8105d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	681b      	ldr	r3, [r3, #0]
 8105d3c:	3308      	adds	r3, #8
 8105d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8105d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105d48:	e841 2300 	strex	r3, r2, [r1]
 8105d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d50:	2b00      	cmp	r3, #0
 8105d52:	d1e3      	bne.n	8105d1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105d58:	2b01      	cmp	r3, #1
 8105d5a:	d118      	bne.n	8105d8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105d62:	68fb      	ldr	r3, [r7, #12]
 8105d64:	e853 3f00 	ldrex	r3, [r3]
 8105d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8105d6a:	68bb      	ldr	r3, [r7, #8]
 8105d6c:	f023 0310 	bic.w	r3, r3, #16
 8105d70:	647b      	str	r3, [r7, #68]	; 0x44
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	461a      	mov	r2, r3
 8105d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8105d7a:	61bb      	str	r3, [r7, #24]
 8105d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d7e:	6979      	ldr	r1, [r7, #20]
 8105d80:	69ba      	ldr	r2, [r7, #24]
 8105d82:	e841 2300 	strex	r3, r2, [r1]
 8105d86:	613b      	str	r3, [r7, #16]
   return(result);
 8105d88:	693b      	ldr	r3, [r7, #16]
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d1e6      	bne.n	8105d5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	2220      	movs	r2, #32
 8105d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	2200      	movs	r2, #0
 8105d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	2200      	movs	r2, #0
 8105da0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8105da2:	bf00      	nop
 8105da4:	3754      	adds	r7, #84	; 0x54
 8105da6:	46bd      	mov	sp, r7
 8105da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dac:	4770      	bx	lr

08105dae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8105dae:	b580      	push	{r7, lr}
 8105db0:	b084      	sub	sp, #16
 8105db2:	af00      	add	r7, sp, #0
 8105db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8105db6:	687b      	ldr	r3, [r7, #4]
 8105db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8105dbc:	68fb      	ldr	r3, [r7, #12]
 8105dbe:	2200      	movs	r2, #0
 8105dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8105dc4:	68fb      	ldr	r3, [r7, #12]
 8105dc6:	2200      	movs	r2, #0
 8105dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8105dcc:	68f8      	ldr	r0, [r7, #12]
 8105dce:	f7ff f85d 	bl	8104e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105dd2:	bf00      	nop
 8105dd4:	3710      	adds	r7, #16
 8105dd6:	46bd      	mov	sp, r7
 8105dd8:	bd80      	pop	{r7, pc}

08105dda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8105dda:	b580      	push	{r7, lr}
 8105ddc:	b088      	sub	sp, #32
 8105dde:	af00      	add	r7, sp, #0
 8105de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	681b      	ldr	r3, [r3, #0]
 8105de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105de8:	68fb      	ldr	r3, [r7, #12]
 8105dea:	e853 3f00 	ldrex	r3, [r3]
 8105dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8105df0:	68bb      	ldr	r3, [r7, #8]
 8105df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105df6:	61fb      	str	r3, [r7, #28]
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	681b      	ldr	r3, [r3, #0]
 8105dfc:	461a      	mov	r2, r3
 8105dfe:	69fb      	ldr	r3, [r7, #28]
 8105e00:	61bb      	str	r3, [r7, #24]
 8105e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105e04:	6979      	ldr	r1, [r7, #20]
 8105e06:	69ba      	ldr	r2, [r7, #24]
 8105e08:	e841 2300 	strex	r3, r2, [r1]
 8105e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8105e0e:	693b      	ldr	r3, [r7, #16]
 8105e10:	2b00      	cmp	r3, #0
 8105e12:	d1e6      	bne.n	8105de2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	2220      	movs	r2, #32
 8105e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	2200      	movs	r2, #0
 8105e20:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8105e22:	6878      	ldr	r0, [r7, #4]
 8105e24:	f7ff f828 	bl	8104e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105e28:	bf00      	nop
 8105e2a:	3720      	adds	r7, #32
 8105e2c:	46bd      	mov	sp, r7
 8105e2e:	bd80      	pop	{r7, pc}

08105e30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8105e30:	b480      	push	{r7}
 8105e32:	b083      	sub	sp, #12
 8105e34:	af00      	add	r7, sp, #0
 8105e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8105e38:	bf00      	nop
 8105e3a:	370c      	adds	r7, #12
 8105e3c:	46bd      	mov	sp, r7
 8105e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e42:	4770      	bx	lr

08105e44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8105e44:	b480      	push	{r7}
 8105e46:	b083      	sub	sp, #12
 8105e48:	af00      	add	r7, sp, #0
 8105e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8105e4c:	bf00      	nop
 8105e4e:	370c      	adds	r7, #12
 8105e50:	46bd      	mov	sp, r7
 8105e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e56:	4770      	bx	lr

08105e58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8105e58:	b480      	push	{r7}
 8105e5a:	b083      	sub	sp, #12
 8105e5c:	af00      	add	r7, sp, #0
 8105e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8105e60:	bf00      	nop
 8105e62:	370c      	adds	r7, #12
 8105e64:	46bd      	mov	sp, r7
 8105e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e6a:	4770      	bx	lr

08105e6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105e6c:	b480      	push	{r7}
 8105e6e:	b085      	sub	sp, #20
 8105e70:	af00      	add	r7, sp, #0
 8105e72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105e74:	687b      	ldr	r3, [r7, #4]
 8105e76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105e7a:	2b01      	cmp	r3, #1
 8105e7c:	d101      	bne.n	8105e82 <HAL_UARTEx_DisableFifoMode+0x16>
 8105e7e:	2302      	movs	r3, #2
 8105e80:	e027      	b.n	8105ed2 <HAL_UARTEx_DisableFifoMode+0x66>
 8105e82:	687b      	ldr	r3, [r7, #4]
 8105e84:	2201      	movs	r2, #1
 8105e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	2224      	movs	r2, #36	; 0x24
 8105e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105e92:	687b      	ldr	r3, [r7, #4]
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	681a      	ldr	r2, [r3, #0]
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	681b      	ldr	r3, [r3, #0]
 8105ea4:	f022 0201 	bic.w	r2, r2, #1
 8105ea8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105eaa:	68fb      	ldr	r3, [r7, #12]
 8105eac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105eb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	2200      	movs	r2, #0
 8105eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	68fa      	ldr	r2, [r7, #12]
 8105ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	2220      	movs	r2, #32
 8105ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	2200      	movs	r2, #0
 8105ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105ed0:	2300      	movs	r3, #0
}
 8105ed2:	4618      	mov	r0, r3
 8105ed4:	3714      	adds	r7, #20
 8105ed6:	46bd      	mov	sp, r7
 8105ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105edc:	4770      	bx	lr

08105ede <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105ede:	b580      	push	{r7, lr}
 8105ee0:	b084      	sub	sp, #16
 8105ee2:	af00      	add	r7, sp, #0
 8105ee4:	6078      	str	r0, [r7, #4]
 8105ee6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105eee:	2b01      	cmp	r3, #1
 8105ef0:	d101      	bne.n	8105ef6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105ef2:	2302      	movs	r3, #2
 8105ef4:	e02d      	b.n	8105f52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	2201      	movs	r2, #1
 8105efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	2224      	movs	r2, #36	; 0x24
 8105f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	681b      	ldr	r3, [r3, #0]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	681b      	ldr	r3, [r3, #0]
 8105f12:	681a      	ldr	r2, [r3, #0]
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	f022 0201 	bic.w	r2, r2, #1
 8105f1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105f1e:	687b      	ldr	r3, [r7, #4]
 8105f20:	681b      	ldr	r3, [r3, #0]
 8105f22:	689b      	ldr	r3, [r3, #8]
 8105f24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	683a      	ldr	r2, [r7, #0]
 8105f2e:	430a      	orrs	r2, r1
 8105f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105f32:	6878      	ldr	r0, [r7, #4]
 8105f34:	f000 f850 	bl	8105fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	68fa      	ldr	r2, [r7, #12]
 8105f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	2220      	movs	r2, #32
 8105f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	2200      	movs	r2, #0
 8105f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105f50:	2300      	movs	r3, #0
}
 8105f52:	4618      	mov	r0, r3
 8105f54:	3710      	adds	r7, #16
 8105f56:	46bd      	mov	sp, r7
 8105f58:	bd80      	pop	{r7, pc}

08105f5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105f5a:	b580      	push	{r7, lr}
 8105f5c:	b084      	sub	sp, #16
 8105f5e:	af00      	add	r7, sp, #0
 8105f60:	6078      	str	r0, [r7, #4]
 8105f62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105f6a:	2b01      	cmp	r3, #1
 8105f6c:	d101      	bne.n	8105f72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105f6e:	2302      	movs	r3, #2
 8105f70:	e02d      	b.n	8105fce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	2201      	movs	r2, #1
 8105f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	2224      	movs	r2, #36	; 0x24
 8105f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	681b      	ldr	r3, [r3, #0]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	681a      	ldr	r2, [r3, #0]
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	f022 0201 	bic.w	r2, r2, #1
 8105f98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	681b      	ldr	r3, [r3, #0]
 8105f9e:	689b      	ldr	r3, [r3, #8]
 8105fa0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	683a      	ldr	r2, [r7, #0]
 8105faa:	430a      	orrs	r2, r1
 8105fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105fae:	6878      	ldr	r0, [r7, #4]
 8105fb0:	f000 f812 	bl	8105fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	68fa      	ldr	r2, [r7, #12]
 8105fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	2220      	movs	r2, #32
 8105fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	2200      	movs	r2, #0
 8105fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105fcc:	2300      	movs	r3, #0
}
 8105fce:	4618      	mov	r0, r3
 8105fd0:	3710      	adds	r7, #16
 8105fd2:	46bd      	mov	sp, r7
 8105fd4:	bd80      	pop	{r7, pc}
	...

08105fd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105fd8:	b480      	push	{r7}
 8105fda:	b085      	sub	sp, #20
 8105fdc:	af00      	add	r7, sp, #0
 8105fde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fe4:	2b00      	cmp	r3, #0
 8105fe6:	d108      	bne.n	8105ffa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	2201      	movs	r2, #1
 8105fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	2201      	movs	r2, #1
 8105ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105ff8:	e031      	b.n	810605e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105ffa:	2310      	movs	r3, #16
 8105ffc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105ffe:	2310      	movs	r3, #16
 8106000:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	689b      	ldr	r3, [r3, #8]
 8106008:	0e5b      	lsrs	r3, r3, #25
 810600a:	b2db      	uxtb	r3, r3
 810600c:	f003 0307 	and.w	r3, r3, #7
 8106010:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	689b      	ldr	r3, [r3, #8]
 8106018:	0f5b      	lsrs	r3, r3, #29
 810601a:	b2db      	uxtb	r3, r3
 810601c:	f003 0307 	and.w	r3, r3, #7
 8106020:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106022:	7bbb      	ldrb	r3, [r7, #14]
 8106024:	7b3a      	ldrb	r2, [r7, #12]
 8106026:	4911      	ldr	r1, [pc, #68]	; (810606c <UARTEx_SetNbDataToProcess+0x94>)
 8106028:	5c8a      	ldrb	r2, [r1, r2]
 810602a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810602e:	7b3a      	ldrb	r2, [r7, #12]
 8106030:	490f      	ldr	r1, [pc, #60]	; (8106070 <UARTEx_SetNbDataToProcess+0x98>)
 8106032:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106034:	fb93 f3f2 	sdiv	r3, r3, r2
 8106038:	b29a      	uxth	r2, r3
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106040:	7bfb      	ldrb	r3, [r7, #15]
 8106042:	7b7a      	ldrb	r2, [r7, #13]
 8106044:	4909      	ldr	r1, [pc, #36]	; (810606c <UARTEx_SetNbDataToProcess+0x94>)
 8106046:	5c8a      	ldrb	r2, [r1, r2]
 8106048:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810604c:	7b7a      	ldrb	r2, [r7, #13]
 810604e:	4908      	ldr	r1, [pc, #32]	; (8106070 <UARTEx_SetNbDataToProcess+0x98>)
 8106050:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106052:	fb93 f3f2 	sdiv	r3, r3, r2
 8106056:	b29a      	uxth	r2, r3
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810605e:	bf00      	nop
 8106060:	3714      	adds	r7, #20
 8106062:	46bd      	mov	sp, r7
 8106064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106068:	4770      	bx	lr
 810606a:	bf00      	nop
 810606c:	081070b4 	.word	0x081070b4
 8106070:	081070bc 	.word	0x081070bc

08106074 <__errno>:
 8106074:	4b01      	ldr	r3, [pc, #4]	; (810607c <__errno+0x8>)
 8106076:	6818      	ldr	r0, [r3, #0]
 8106078:	4770      	bx	lr
 810607a:	bf00      	nop
 810607c:	10000018 	.word	0x10000018

08106080 <__libc_init_array>:
 8106080:	b570      	push	{r4, r5, r6, lr}
 8106082:	4d0d      	ldr	r5, [pc, #52]	; (81060b8 <__libc_init_array+0x38>)
 8106084:	4c0d      	ldr	r4, [pc, #52]	; (81060bc <__libc_init_array+0x3c>)
 8106086:	1b64      	subs	r4, r4, r5
 8106088:	10a4      	asrs	r4, r4, #2
 810608a:	2600      	movs	r6, #0
 810608c:	42a6      	cmp	r6, r4
 810608e:	d109      	bne.n	81060a4 <__libc_init_array+0x24>
 8106090:	4d0b      	ldr	r5, [pc, #44]	; (81060c0 <__libc_init_array+0x40>)
 8106092:	4c0c      	ldr	r4, [pc, #48]	; (81060c4 <__libc_init_array+0x44>)
 8106094:	f000 fc5c 	bl	8106950 <_init>
 8106098:	1b64      	subs	r4, r4, r5
 810609a:	10a4      	asrs	r4, r4, #2
 810609c:	2600      	movs	r6, #0
 810609e:	42a6      	cmp	r6, r4
 81060a0:	d105      	bne.n	81060ae <__libc_init_array+0x2e>
 81060a2:	bd70      	pop	{r4, r5, r6, pc}
 81060a4:	f855 3b04 	ldr.w	r3, [r5], #4
 81060a8:	4798      	blx	r3
 81060aa:	3601      	adds	r6, #1
 81060ac:	e7ee      	b.n	810608c <__libc_init_array+0xc>
 81060ae:	f855 3b04 	ldr.w	r3, [r5], #4
 81060b2:	4798      	blx	r3
 81060b4:	3601      	adds	r6, #1
 81060b6:	e7f2      	b.n	810609e <__libc_init_array+0x1e>
 81060b8:	08107100 	.word	0x08107100
 81060bc:	08107100 	.word	0x08107100
 81060c0:	08107100 	.word	0x08107100
 81060c4:	08107104 	.word	0x08107104

081060c8 <memcpy>:
 81060c8:	440a      	add	r2, r1
 81060ca:	4291      	cmp	r1, r2
 81060cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 81060d0:	d100      	bne.n	81060d4 <memcpy+0xc>
 81060d2:	4770      	bx	lr
 81060d4:	b510      	push	{r4, lr}
 81060d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 81060da:	f803 4f01 	strb.w	r4, [r3, #1]!
 81060de:	4291      	cmp	r1, r2
 81060e0:	d1f9      	bne.n	81060d6 <memcpy+0xe>
 81060e2:	bd10      	pop	{r4, pc}

081060e4 <memset>:
 81060e4:	4402      	add	r2, r0
 81060e6:	4603      	mov	r3, r0
 81060e8:	4293      	cmp	r3, r2
 81060ea:	d100      	bne.n	81060ee <memset+0xa>
 81060ec:	4770      	bx	lr
 81060ee:	f803 1b01 	strb.w	r1, [r3], #1
 81060f2:	e7f9      	b.n	81060e8 <memset+0x4>

081060f4 <siprintf>:
 81060f4:	b40e      	push	{r1, r2, r3}
 81060f6:	b500      	push	{lr}
 81060f8:	b09c      	sub	sp, #112	; 0x70
 81060fa:	ab1d      	add	r3, sp, #116	; 0x74
 81060fc:	9002      	str	r0, [sp, #8]
 81060fe:	9006      	str	r0, [sp, #24]
 8106100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8106104:	4809      	ldr	r0, [pc, #36]	; (810612c <siprintf+0x38>)
 8106106:	9107      	str	r1, [sp, #28]
 8106108:	9104      	str	r1, [sp, #16]
 810610a:	4909      	ldr	r1, [pc, #36]	; (8106130 <siprintf+0x3c>)
 810610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8106110:	9105      	str	r1, [sp, #20]
 8106112:	6800      	ldr	r0, [r0, #0]
 8106114:	9301      	str	r3, [sp, #4]
 8106116:	a902      	add	r1, sp, #8
 8106118:	f000 f876 	bl	8106208 <_svfiprintf_r>
 810611c:	9b02      	ldr	r3, [sp, #8]
 810611e:	2200      	movs	r2, #0
 8106120:	701a      	strb	r2, [r3, #0]
 8106122:	b01c      	add	sp, #112	; 0x70
 8106124:	f85d eb04 	ldr.w	lr, [sp], #4
 8106128:	b003      	add	sp, #12
 810612a:	4770      	bx	lr
 810612c:	10000018 	.word	0x10000018
 8106130:	ffff0208 	.word	0xffff0208

08106134 <strcat>:
 8106134:	b510      	push	{r4, lr}
 8106136:	4602      	mov	r2, r0
 8106138:	7814      	ldrb	r4, [r2, #0]
 810613a:	4613      	mov	r3, r2
 810613c:	3201      	adds	r2, #1
 810613e:	2c00      	cmp	r4, #0
 8106140:	d1fa      	bne.n	8106138 <strcat+0x4>
 8106142:	3b01      	subs	r3, #1
 8106144:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106148:	f803 2f01 	strb.w	r2, [r3, #1]!
 810614c:	2a00      	cmp	r2, #0
 810614e:	d1f9      	bne.n	8106144 <strcat+0x10>
 8106150:	bd10      	pop	{r4, pc}

08106152 <__ssputs_r>:
 8106152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106156:	688e      	ldr	r6, [r1, #8]
 8106158:	429e      	cmp	r6, r3
 810615a:	4682      	mov	sl, r0
 810615c:	460c      	mov	r4, r1
 810615e:	4690      	mov	r8, r2
 8106160:	461f      	mov	r7, r3
 8106162:	d838      	bhi.n	81061d6 <__ssputs_r+0x84>
 8106164:	898a      	ldrh	r2, [r1, #12]
 8106166:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810616a:	d032      	beq.n	81061d2 <__ssputs_r+0x80>
 810616c:	6825      	ldr	r5, [r4, #0]
 810616e:	6909      	ldr	r1, [r1, #16]
 8106170:	eba5 0901 	sub.w	r9, r5, r1
 8106174:	6965      	ldr	r5, [r4, #20]
 8106176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810617a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810617e:	3301      	adds	r3, #1
 8106180:	444b      	add	r3, r9
 8106182:	106d      	asrs	r5, r5, #1
 8106184:	429d      	cmp	r5, r3
 8106186:	bf38      	it	cc
 8106188:	461d      	movcc	r5, r3
 810618a:	0553      	lsls	r3, r2, #21
 810618c:	d531      	bpl.n	81061f2 <__ssputs_r+0xa0>
 810618e:	4629      	mov	r1, r5
 8106190:	f000 fb38 	bl	8106804 <_malloc_r>
 8106194:	4606      	mov	r6, r0
 8106196:	b950      	cbnz	r0, 81061ae <__ssputs_r+0x5c>
 8106198:	230c      	movs	r3, #12
 810619a:	f8ca 3000 	str.w	r3, [sl]
 810619e:	89a3      	ldrh	r3, [r4, #12]
 81061a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81061a4:	81a3      	strh	r3, [r4, #12]
 81061a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81061aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81061ae:	6921      	ldr	r1, [r4, #16]
 81061b0:	464a      	mov	r2, r9
 81061b2:	f7ff ff89 	bl	81060c8 <memcpy>
 81061b6:	89a3      	ldrh	r3, [r4, #12]
 81061b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81061bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81061c0:	81a3      	strh	r3, [r4, #12]
 81061c2:	6126      	str	r6, [r4, #16]
 81061c4:	6165      	str	r5, [r4, #20]
 81061c6:	444e      	add	r6, r9
 81061c8:	eba5 0509 	sub.w	r5, r5, r9
 81061cc:	6026      	str	r6, [r4, #0]
 81061ce:	60a5      	str	r5, [r4, #8]
 81061d0:	463e      	mov	r6, r7
 81061d2:	42be      	cmp	r6, r7
 81061d4:	d900      	bls.n	81061d8 <__ssputs_r+0x86>
 81061d6:	463e      	mov	r6, r7
 81061d8:	4632      	mov	r2, r6
 81061da:	6820      	ldr	r0, [r4, #0]
 81061dc:	4641      	mov	r1, r8
 81061de:	f000 faa7 	bl	8106730 <memmove>
 81061e2:	68a3      	ldr	r3, [r4, #8]
 81061e4:	6822      	ldr	r2, [r4, #0]
 81061e6:	1b9b      	subs	r3, r3, r6
 81061e8:	4432      	add	r2, r6
 81061ea:	60a3      	str	r3, [r4, #8]
 81061ec:	6022      	str	r2, [r4, #0]
 81061ee:	2000      	movs	r0, #0
 81061f0:	e7db      	b.n	81061aa <__ssputs_r+0x58>
 81061f2:	462a      	mov	r2, r5
 81061f4:	f000 fb60 	bl	81068b8 <_realloc_r>
 81061f8:	4606      	mov	r6, r0
 81061fa:	2800      	cmp	r0, #0
 81061fc:	d1e1      	bne.n	81061c2 <__ssputs_r+0x70>
 81061fe:	6921      	ldr	r1, [r4, #16]
 8106200:	4650      	mov	r0, sl
 8106202:	f000 faaf 	bl	8106764 <_free_r>
 8106206:	e7c7      	b.n	8106198 <__ssputs_r+0x46>

08106208 <_svfiprintf_r>:
 8106208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810620c:	4698      	mov	r8, r3
 810620e:	898b      	ldrh	r3, [r1, #12]
 8106210:	061b      	lsls	r3, r3, #24
 8106212:	b09d      	sub	sp, #116	; 0x74
 8106214:	4607      	mov	r7, r0
 8106216:	460d      	mov	r5, r1
 8106218:	4614      	mov	r4, r2
 810621a:	d50e      	bpl.n	810623a <_svfiprintf_r+0x32>
 810621c:	690b      	ldr	r3, [r1, #16]
 810621e:	b963      	cbnz	r3, 810623a <_svfiprintf_r+0x32>
 8106220:	2140      	movs	r1, #64	; 0x40
 8106222:	f000 faef 	bl	8106804 <_malloc_r>
 8106226:	6028      	str	r0, [r5, #0]
 8106228:	6128      	str	r0, [r5, #16]
 810622a:	b920      	cbnz	r0, 8106236 <_svfiprintf_r+0x2e>
 810622c:	230c      	movs	r3, #12
 810622e:	603b      	str	r3, [r7, #0]
 8106230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8106234:	e0d1      	b.n	81063da <_svfiprintf_r+0x1d2>
 8106236:	2340      	movs	r3, #64	; 0x40
 8106238:	616b      	str	r3, [r5, #20]
 810623a:	2300      	movs	r3, #0
 810623c:	9309      	str	r3, [sp, #36]	; 0x24
 810623e:	2320      	movs	r3, #32
 8106240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8106244:	f8cd 800c 	str.w	r8, [sp, #12]
 8106248:	2330      	movs	r3, #48	; 0x30
 810624a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 81063f4 <_svfiprintf_r+0x1ec>
 810624e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8106252:	f04f 0901 	mov.w	r9, #1
 8106256:	4623      	mov	r3, r4
 8106258:	469a      	mov	sl, r3
 810625a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810625e:	b10a      	cbz	r2, 8106264 <_svfiprintf_r+0x5c>
 8106260:	2a25      	cmp	r2, #37	; 0x25
 8106262:	d1f9      	bne.n	8106258 <_svfiprintf_r+0x50>
 8106264:	ebba 0b04 	subs.w	fp, sl, r4
 8106268:	d00b      	beq.n	8106282 <_svfiprintf_r+0x7a>
 810626a:	465b      	mov	r3, fp
 810626c:	4622      	mov	r2, r4
 810626e:	4629      	mov	r1, r5
 8106270:	4638      	mov	r0, r7
 8106272:	f7ff ff6e 	bl	8106152 <__ssputs_r>
 8106276:	3001      	adds	r0, #1
 8106278:	f000 80aa 	beq.w	81063d0 <_svfiprintf_r+0x1c8>
 810627c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810627e:	445a      	add	r2, fp
 8106280:	9209      	str	r2, [sp, #36]	; 0x24
 8106282:	f89a 3000 	ldrb.w	r3, [sl]
 8106286:	2b00      	cmp	r3, #0
 8106288:	f000 80a2 	beq.w	81063d0 <_svfiprintf_r+0x1c8>
 810628c:	2300      	movs	r3, #0
 810628e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8106292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106296:	f10a 0a01 	add.w	sl, sl, #1
 810629a:	9304      	str	r3, [sp, #16]
 810629c:	9307      	str	r3, [sp, #28]
 810629e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81062a2:	931a      	str	r3, [sp, #104]	; 0x68
 81062a4:	4654      	mov	r4, sl
 81062a6:	2205      	movs	r2, #5
 81062a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81062ac:	4851      	ldr	r0, [pc, #324]	; (81063f4 <_svfiprintf_r+0x1ec>)
 81062ae:	f7fa f82f 	bl	8100310 <memchr>
 81062b2:	9a04      	ldr	r2, [sp, #16]
 81062b4:	b9d8      	cbnz	r0, 81062ee <_svfiprintf_r+0xe6>
 81062b6:	06d0      	lsls	r0, r2, #27
 81062b8:	bf44      	itt	mi
 81062ba:	2320      	movmi	r3, #32
 81062bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81062c0:	0711      	lsls	r1, r2, #28
 81062c2:	bf44      	itt	mi
 81062c4:	232b      	movmi	r3, #43	; 0x2b
 81062c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81062ca:	f89a 3000 	ldrb.w	r3, [sl]
 81062ce:	2b2a      	cmp	r3, #42	; 0x2a
 81062d0:	d015      	beq.n	81062fe <_svfiprintf_r+0xf6>
 81062d2:	9a07      	ldr	r2, [sp, #28]
 81062d4:	4654      	mov	r4, sl
 81062d6:	2000      	movs	r0, #0
 81062d8:	f04f 0c0a 	mov.w	ip, #10
 81062dc:	4621      	mov	r1, r4
 81062de:	f811 3b01 	ldrb.w	r3, [r1], #1
 81062e2:	3b30      	subs	r3, #48	; 0x30
 81062e4:	2b09      	cmp	r3, #9
 81062e6:	d94e      	bls.n	8106386 <_svfiprintf_r+0x17e>
 81062e8:	b1b0      	cbz	r0, 8106318 <_svfiprintf_r+0x110>
 81062ea:	9207      	str	r2, [sp, #28]
 81062ec:	e014      	b.n	8106318 <_svfiprintf_r+0x110>
 81062ee:	eba0 0308 	sub.w	r3, r0, r8
 81062f2:	fa09 f303 	lsl.w	r3, r9, r3
 81062f6:	4313      	orrs	r3, r2
 81062f8:	9304      	str	r3, [sp, #16]
 81062fa:	46a2      	mov	sl, r4
 81062fc:	e7d2      	b.n	81062a4 <_svfiprintf_r+0x9c>
 81062fe:	9b03      	ldr	r3, [sp, #12]
 8106300:	1d19      	adds	r1, r3, #4
 8106302:	681b      	ldr	r3, [r3, #0]
 8106304:	9103      	str	r1, [sp, #12]
 8106306:	2b00      	cmp	r3, #0
 8106308:	bfbb      	ittet	lt
 810630a:	425b      	neglt	r3, r3
 810630c:	f042 0202 	orrlt.w	r2, r2, #2
 8106310:	9307      	strge	r3, [sp, #28]
 8106312:	9307      	strlt	r3, [sp, #28]
 8106314:	bfb8      	it	lt
 8106316:	9204      	strlt	r2, [sp, #16]
 8106318:	7823      	ldrb	r3, [r4, #0]
 810631a:	2b2e      	cmp	r3, #46	; 0x2e
 810631c:	d10c      	bne.n	8106338 <_svfiprintf_r+0x130>
 810631e:	7863      	ldrb	r3, [r4, #1]
 8106320:	2b2a      	cmp	r3, #42	; 0x2a
 8106322:	d135      	bne.n	8106390 <_svfiprintf_r+0x188>
 8106324:	9b03      	ldr	r3, [sp, #12]
 8106326:	1d1a      	adds	r2, r3, #4
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	9203      	str	r2, [sp, #12]
 810632c:	2b00      	cmp	r3, #0
 810632e:	bfb8      	it	lt
 8106330:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8106334:	3402      	adds	r4, #2
 8106336:	9305      	str	r3, [sp, #20]
 8106338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8106404 <_svfiprintf_r+0x1fc>
 810633c:	7821      	ldrb	r1, [r4, #0]
 810633e:	2203      	movs	r2, #3
 8106340:	4650      	mov	r0, sl
 8106342:	f7f9 ffe5 	bl	8100310 <memchr>
 8106346:	b140      	cbz	r0, 810635a <_svfiprintf_r+0x152>
 8106348:	2340      	movs	r3, #64	; 0x40
 810634a:	eba0 000a 	sub.w	r0, r0, sl
 810634e:	fa03 f000 	lsl.w	r0, r3, r0
 8106352:	9b04      	ldr	r3, [sp, #16]
 8106354:	4303      	orrs	r3, r0
 8106356:	3401      	adds	r4, #1
 8106358:	9304      	str	r3, [sp, #16]
 810635a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810635e:	4826      	ldr	r0, [pc, #152]	; (81063f8 <_svfiprintf_r+0x1f0>)
 8106360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106364:	2206      	movs	r2, #6
 8106366:	f7f9 ffd3 	bl	8100310 <memchr>
 810636a:	2800      	cmp	r0, #0
 810636c:	d038      	beq.n	81063e0 <_svfiprintf_r+0x1d8>
 810636e:	4b23      	ldr	r3, [pc, #140]	; (81063fc <_svfiprintf_r+0x1f4>)
 8106370:	bb1b      	cbnz	r3, 81063ba <_svfiprintf_r+0x1b2>
 8106372:	9b03      	ldr	r3, [sp, #12]
 8106374:	3307      	adds	r3, #7
 8106376:	f023 0307 	bic.w	r3, r3, #7
 810637a:	3308      	adds	r3, #8
 810637c:	9303      	str	r3, [sp, #12]
 810637e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106380:	4433      	add	r3, r6
 8106382:	9309      	str	r3, [sp, #36]	; 0x24
 8106384:	e767      	b.n	8106256 <_svfiprintf_r+0x4e>
 8106386:	fb0c 3202 	mla	r2, ip, r2, r3
 810638a:	460c      	mov	r4, r1
 810638c:	2001      	movs	r0, #1
 810638e:	e7a5      	b.n	81062dc <_svfiprintf_r+0xd4>
 8106390:	2300      	movs	r3, #0
 8106392:	3401      	adds	r4, #1
 8106394:	9305      	str	r3, [sp, #20]
 8106396:	4619      	mov	r1, r3
 8106398:	f04f 0c0a 	mov.w	ip, #10
 810639c:	4620      	mov	r0, r4
 810639e:	f810 2b01 	ldrb.w	r2, [r0], #1
 81063a2:	3a30      	subs	r2, #48	; 0x30
 81063a4:	2a09      	cmp	r2, #9
 81063a6:	d903      	bls.n	81063b0 <_svfiprintf_r+0x1a8>
 81063a8:	2b00      	cmp	r3, #0
 81063aa:	d0c5      	beq.n	8106338 <_svfiprintf_r+0x130>
 81063ac:	9105      	str	r1, [sp, #20]
 81063ae:	e7c3      	b.n	8106338 <_svfiprintf_r+0x130>
 81063b0:	fb0c 2101 	mla	r1, ip, r1, r2
 81063b4:	4604      	mov	r4, r0
 81063b6:	2301      	movs	r3, #1
 81063b8:	e7f0      	b.n	810639c <_svfiprintf_r+0x194>
 81063ba:	ab03      	add	r3, sp, #12
 81063bc:	9300      	str	r3, [sp, #0]
 81063be:	462a      	mov	r2, r5
 81063c0:	4b0f      	ldr	r3, [pc, #60]	; (8106400 <_svfiprintf_r+0x1f8>)
 81063c2:	a904      	add	r1, sp, #16
 81063c4:	4638      	mov	r0, r7
 81063c6:	f3af 8000 	nop.w
 81063ca:	1c42      	adds	r2, r0, #1
 81063cc:	4606      	mov	r6, r0
 81063ce:	d1d6      	bne.n	810637e <_svfiprintf_r+0x176>
 81063d0:	89ab      	ldrh	r3, [r5, #12]
 81063d2:	065b      	lsls	r3, r3, #25
 81063d4:	f53f af2c 	bmi.w	8106230 <_svfiprintf_r+0x28>
 81063d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 81063da:	b01d      	add	sp, #116	; 0x74
 81063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81063e0:	ab03      	add	r3, sp, #12
 81063e2:	9300      	str	r3, [sp, #0]
 81063e4:	462a      	mov	r2, r5
 81063e6:	4b06      	ldr	r3, [pc, #24]	; (8106400 <_svfiprintf_r+0x1f8>)
 81063e8:	a904      	add	r1, sp, #16
 81063ea:	4638      	mov	r0, r7
 81063ec:	f000 f87a 	bl	81064e4 <_printf_i>
 81063f0:	e7eb      	b.n	81063ca <_svfiprintf_r+0x1c2>
 81063f2:	bf00      	nop
 81063f4:	081070c4 	.word	0x081070c4
 81063f8:	081070ce 	.word	0x081070ce
 81063fc:	00000000 	.word	0x00000000
 8106400:	08106153 	.word	0x08106153
 8106404:	081070ca 	.word	0x081070ca

08106408 <_printf_common>:
 8106408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810640c:	4616      	mov	r6, r2
 810640e:	4699      	mov	r9, r3
 8106410:	688a      	ldr	r2, [r1, #8]
 8106412:	690b      	ldr	r3, [r1, #16]
 8106414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106418:	4293      	cmp	r3, r2
 810641a:	bfb8      	it	lt
 810641c:	4613      	movlt	r3, r2
 810641e:	6033      	str	r3, [r6, #0]
 8106420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106424:	4607      	mov	r7, r0
 8106426:	460c      	mov	r4, r1
 8106428:	b10a      	cbz	r2, 810642e <_printf_common+0x26>
 810642a:	3301      	adds	r3, #1
 810642c:	6033      	str	r3, [r6, #0]
 810642e:	6823      	ldr	r3, [r4, #0]
 8106430:	0699      	lsls	r1, r3, #26
 8106432:	bf42      	ittt	mi
 8106434:	6833      	ldrmi	r3, [r6, #0]
 8106436:	3302      	addmi	r3, #2
 8106438:	6033      	strmi	r3, [r6, #0]
 810643a:	6825      	ldr	r5, [r4, #0]
 810643c:	f015 0506 	ands.w	r5, r5, #6
 8106440:	d106      	bne.n	8106450 <_printf_common+0x48>
 8106442:	f104 0a19 	add.w	sl, r4, #25
 8106446:	68e3      	ldr	r3, [r4, #12]
 8106448:	6832      	ldr	r2, [r6, #0]
 810644a:	1a9b      	subs	r3, r3, r2
 810644c:	42ab      	cmp	r3, r5
 810644e:	dc26      	bgt.n	810649e <_printf_common+0x96>
 8106450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106454:	1e13      	subs	r3, r2, #0
 8106456:	6822      	ldr	r2, [r4, #0]
 8106458:	bf18      	it	ne
 810645a:	2301      	movne	r3, #1
 810645c:	0692      	lsls	r2, r2, #26
 810645e:	d42b      	bmi.n	81064b8 <_printf_common+0xb0>
 8106460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106464:	4649      	mov	r1, r9
 8106466:	4638      	mov	r0, r7
 8106468:	47c0      	blx	r8
 810646a:	3001      	adds	r0, #1
 810646c:	d01e      	beq.n	81064ac <_printf_common+0xa4>
 810646e:	6823      	ldr	r3, [r4, #0]
 8106470:	68e5      	ldr	r5, [r4, #12]
 8106472:	6832      	ldr	r2, [r6, #0]
 8106474:	f003 0306 	and.w	r3, r3, #6
 8106478:	2b04      	cmp	r3, #4
 810647a:	bf08      	it	eq
 810647c:	1aad      	subeq	r5, r5, r2
 810647e:	68a3      	ldr	r3, [r4, #8]
 8106480:	6922      	ldr	r2, [r4, #16]
 8106482:	bf0c      	ite	eq
 8106484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106488:	2500      	movne	r5, #0
 810648a:	4293      	cmp	r3, r2
 810648c:	bfc4      	itt	gt
 810648e:	1a9b      	subgt	r3, r3, r2
 8106490:	18ed      	addgt	r5, r5, r3
 8106492:	2600      	movs	r6, #0
 8106494:	341a      	adds	r4, #26
 8106496:	42b5      	cmp	r5, r6
 8106498:	d11a      	bne.n	81064d0 <_printf_common+0xc8>
 810649a:	2000      	movs	r0, #0
 810649c:	e008      	b.n	81064b0 <_printf_common+0xa8>
 810649e:	2301      	movs	r3, #1
 81064a0:	4652      	mov	r2, sl
 81064a2:	4649      	mov	r1, r9
 81064a4:	4638      	mov	r0, r7
 81064a6:	47c0      	blx	r8
 81064a8:	3001      	adds	r0, #1
 81064aa:	d103      	bne.n	81064b4 <_printf_common+0xac>
 81064ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81064b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81064b4:	3501      	adds	r5, #1
 81064b6:	e7c6      	b.n	8106446 <_printf_common+0x3e>
 81064b8:	18e1      	adds	r1, r4, r3
 81064ba:	1c5a      	adds	r2, r3, #1
 81064bc:	2030      	movs	r0, #48	; 0x30
 81064be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81064c2:	4422      	add	r2, r4
 81064c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81064c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81064cc:	3302      	adds	r3, #2
 81064ce:	e7c7      	b.n	8106460 <_printf_common+0x58>
 81064d0:	2301      	movs	r3, #1
 81064d2:	4622      	mov	r2, r4
 81064d4:	4649      	mov	r1, r9
 81064d6:	4638      	mov	r0, r7
 81064d8:	47c0      	blx	r8
 81064da:	3001      	adds	r0, #1
 81064dc:	d0e6      	beq.n	81064ac <_printf_common+0xa4>
 81064de:	3601      	adds	r6, #1
 81064e0:	e7d9      	b.n	8106496 <_printf_common+0x8e>
	...

081064e4 <_printf_i>:
 81064e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81064e8:	460c      	mov	r4, r1
 81064ea:	4691      	mov	r9, r2
 81064ec:	7e27      	ldrb	r7, [r4, #24]
 81064ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 81064f0:	2f78      	cmp	r7, #120	; 0x78
 81064f2:	4680      	mov	r8, r0
 81064f4:	469a      	mov	sl, r3
 81064f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81064fa:	d807      	bhi.n	810650c <_printf_i+0x28>
 81064fc:	2f62      	cmp	r7, #98	; 0x62
 81064fe:	d80a      	bhi.n	8106516 <_printf_i+0x32>
 8106500:	2f00      	cmp	r7, #0
 8106502:	f000 80d8 	beq.w	81066b6 <_printf_i+0x1d2>
 8106506:	2f58      	cmp	r7, #88	; 0x58
 8106508:	f000 80a3 	beq.w	8106652 <_printf_i+0x16e>
 810650c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8106510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106514:	e03a      	b.n	810658c <_printf_i+0xa8>
 8106516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810651a:	2b15      	cmp	r3, #21
 810651c:	d8f6      	bhi.n	810650c <_printf_i+0x28>
 810651e:	a001      	add	r0, pc, #4	; (adr r0, 8106524 <_printf_i+0x40>)
 8106520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8106524:	0810657d 	.word	0x0810657d
 8106528:	08106591 	.word	0x08106591
 810652c:	0810650d 	.word	0x0810650d
 8106530:	0810650d 	.word	0x0810650d
 8106534:	0810650d 	.word	0x0810650d
 8106538:	0810650d 	.word	0x0810650d
 810653c:	08106591 	.word	0x08106591
 8106540:	0810650d 	.word	0x0810650d
 8106544:	0810650d 	.word	0x0810650d
 8106548:	0810650d 	.word	0x0810650d
 810654c:	0810650d 	.word	0x0810650d
 8106550:	0810669d 	.word	0x0810669d
 8106554:	081065c1 	.word	0x081065c1
 8106558:	0810667f 	.word	0x0810667f
 810655c:	0810650d 	.word	0x0810650d
 8106560:	0810650d 	.word	0x0810650d
 8106564:	081066bf 	.word	0x081066bf
 8106568:	0810650d 	.word	0x0810650d
 810656c:	081065c1 	.word	0x081065c1
 8106570:	0810650d 	.word	0x0810650d
 8106574:	0810650d 	.word	0x0810650d
 8106578:	08106687 	.word	0x08106687
 810657c:	680b      	ldr	r3, [r1, #0]
 810657e:	1d1a      	adds	r2, r3, #4
 8106580:	681b      	ldr	r3, [r3, #0]
 8106582:	600a      	str	r2, [r1, #0]
 8106584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8106588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810658c:	2301      	movs	r3, #1
 810658e:	e0a3      	b.n	81066d8 <_printf_i+0x1f4>
 8106590:	6825      	ldr	r5, [r4, #0]
 8106592:	6808      	ldr	r0, [r1, #0]
 8106594:	062e      	lsls	r6, r5, #24
 8106596:	f100 0304 	add.w	r3, r0, #4
 810659a:	d50a      	bpl.n	81065b2 <_printf_i+0xce>
 810659c:	6805      	ldr	r5, [r0, #0]
 810659e:	600b      	str	r3, [r1, #0]
 81065a0:	2d00      	cmp	r5, #0
 81065a2:	da03      	bge.n	81065ac <_printf_i+0xc8>
 81065a4:	232d      	movs	r3, #45	; 0x2d
 81065a6:	426d      	negs	r5, r5
 81065a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81065ac:	485e      	ldr	r0, [pc, #376]	; (8106728 <_printf_i+0x244>)
 81065ae:	230a      	movs	r3, #10
 81065b0:	e019      	b.n	81065e6 <_printf_i+0x102>
 81065b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 81065b6:	6805      	ldr	r5, [r0, #0]
 81065b8:	600b      	str	r3, [r1, #0]
 81065ba:	bf18      	it	ne
 81065bc:	b22d      	sxthne	r5, r5
 81065be:	e7ef      	b.n	81065a0 <_printf_i+0xbc>
 81065c0:	680b      	ldr	r3, [r1, #0]
 81065c2:	6825      	ldr	r5, [r4, #0]
 81065c4:	1d18      	adds	r0, r3, #4
 81065c6:	6008      	str	r0, [r1, #0]
 81065c8:	0628      	lsls	r0, r5, #24
 81065ca:	d501      	bpl.n	81065d0 <_printf_i+0xec>
 81065cc:	681d      	ldr	r5, [r3, #0]
 81065ce:	e002      	b.n	81065d6 <_printf_i+0xf2>
 81065d0:	0669      	lsls	r1, r5, #25
 81065d2:	d5fb      	bpl.n	81065cc <_printf_i+0xe8>
 81065d4:	881d      	ldrh	r5, [r3, #0]
 81065d6:	4854      	ldr	r0, [pc, #336]	; (8106728 <_printf_i+0x244>)
 81065d8:	2f6f      	cmp	r7, #111	; 0x6f
 81065da:	bf0c      	ite	eq
 81065dc:	2308      	moveq	r3, #8
 81065de:	230a      	movne	r3, #10
 81065e0:	2100      	movs	r1, #0
 81065e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81065e6:	6866      	ldr	r6, [r4, #4]
 81065e8:	60a6      	str	r6, [r4, #8]
 81065ea:	2e00      	cmp	r6, #0
 81065ec:	bfa2      	ittt	ge
 81065ee:	6821      	ldrge	r1, [r4, #0]
 81065f0:	f021 0104 	bicge.w	r1, r1, #4
 81065f4:	6021      	strge	r1, [r4, #0]
 81065f6:	b90d      	cbnz	r5, 81065fc <_printf_i+0x118>
 81065f8:	2e00      	cmp	r6, #0
 81065fa:	d04d      	beq.n	8106698 <_printf_i+0x1b4>
 81065fc:	4616      	mov	r6, r2
 81065fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8106602:	fb03 5711 	mls	r7, r3, r1, r5
 8106606:	5dc7      	ldrb	r7, [r0, r7]
 8106608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810660c:	462f      	mov	r7, r5
 810660e:	42bb      	cmp	r3, r7
 8106610:	460d      	mov	r5, r1
 8106612:	d9f4      	bls.n	81065fe <_printf_i+0x11a>
 8106614:	2b08      	cmp	r3, #8
 8106616:	d10b      	bne.n	8106630 <_printf_i+0x14c>
 8106618:	6823      	ldr	r3, [r4, #0]
 810661a:	07df      	lsls	r7, r3, #31
 810661c:	d508      	bpl.n	8106630 <_printf_i+0x14c>
 810661e:	6923      	ldr	r3, [r4, #16]
 8106620:	6861      	ldr	r1, [r4, #4]
 8106622:	4299      	cmp	r1, r3
 8106624:	bfde      	ittt	le
 8106626:	2330      	movle	r3, #48	; 0x30
 8106628:	f806 3c01 	strble.w	r3, [r6, #-1]
 810662c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8106630:	1b92      	subs	r2, r2, r6
 8106632:	6122      	str	r2, [r4, #16]
 8106634:	f8cd a000 	str.w	sl, [sp]
 8106638:	464b      	mov	r3, r9
 810663a:	aa03      	add	r2, sp, #12
 810663c:	4621      	mov	r1, r4
 810663e:	4640      	mov	r0, r8
 8106640:	f7ff fee2 	bl	8106408 <_printf_common>
 8106644:	3001      	adds	r0, #1
 8106646:	d14c      	bne.n	81066e2 <_printf_i+0x1fe>
 8106648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810664c:	b004      	add	sp, #16
 810664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106652:	4835      	ldr	r0, [pc, #212]	; (8106728 <_printf_i+0x244>)
 8106654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8106658:	6823      	ldr	r3, [r4, #0]
 810665a:	680e      	ldr	r6, [r1, #0]
 810665c:	061f      	lsls	r7, r3, #24
 810665e:	f856 5b04 	ldr.w	r5, [r6], #4
 8106662:	600e      	str	r6, [r1, #0]
 8106664:	d514      	bpl.n	8106690 <_printf_i+0x1ac>
 8106666:	07d9      	lsls	r1, r3, #31
 8106668:	bf44      	itt	mi
 810666a:	f043 0320 	orrmi.w	r3, r3, #32
 810666e:	6023      	strmi	r3, [r4, #0]
 8106670:	b91d      	cbnz	r5, 810667a <_printf_i+0x196>
 8106672:	6823      	ldr	r3, [r4, #0]
 8106674:	f023 0320 	bic.w	r3, r3, #32
 8106678:	6023      	str	r3, [r4, #0]
 810667a:	2310      	movs	r3, #16
 810667c:	e7b0      	b.n	81065e0 <_printf_i+0xfc>
 810667e:	6823      	ldr	r3, [r4, #0]
 8106680:	f043 0320 	orr.w	r3, r3, #32
 8106684:	6023      	str	r3, [r4, #0]
 8106686:	2378      	movs	r3, #120	; 0x78
 8106688:	4828      	ldr	r0, [pc, #160]	; (810672c <_printf_i+0x248>)
 810668a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810668e:	e7e3      	b.n	8106658 <_printf_i+0x174>
 8106690:	065e      	lsls	r6, r3, #25
 8106692:	bf48      	it	mi
 8106694:	b2ad      	uxthmi	r5, r5
 8106696:	e7e6      	b.n	8106666 <_printf_i+0x182>
 8106698:	4616      	mov	r6, r2
 810669a:	e7bb      	b.n	8106614 <_printf_i+0x130>
 810669c:	680b      	ldr	r3, [r1, #0]
 810669e:	6826      	ldr	r6, [r4, #0]
 81066a0:	6960      	ldr	r0, [r4, #20]
 81066a2:	1d1d      	adds	r5, r3, #4
 81066a4:	600d      	str	r5, [r1, #0]
 81066a6:	0635      	lsls	r5, r6, #24
 81066a8:	681b      	ldr	r3, [r3, #0]
 81066aa:	d501      	bpl.n	81066b0 <_printf_i+0x1cc>
 81066ac:	6018      	str	r0, [r3, #0]
 81066ae:	e002      	b.n	81066b6 <_printf_i+0x1d2>
 81066b0:	0671      	lsls	r1, r6, #25
 81066b2:	d5fb      	bpl.n	81066ac <_printf_i+0x1c8>
 81066b4:	8018      	strh	r0, [r3, #0]
 81066b6:	2300      	movs	r3, #0
 81066b8:	6123      	str	r3, [r4, #16]
 81066ba:	4616      	mov	r6, r2
 81066bc:	e7ba      	b.n	8106634 <_printf_i+0x150>
 81066be:	680b      	ldr	r3, [r1, #0]
 81066c0:	1d1a      	adds	r2, r3, #4
 81066c2:	600a      	str	r2, [r1, #0]
 81066c4:	681e      	ldr	r6, [r3, #0]
 81066c6:	6862      	ldr	r2, [r4, #4]
 81066c8:	2100      	movs	r1, #0
 81066ca:	4630      	mov	r0, r6
 81066cc:	f7f9 fe20 	bl	8100310 <memchr>
 81066d0:	b108      	cbz	r0, 81066d6 <_printf_i+0x1f2>
 81066d2:	1b80      	subs	r0, r0, r6
 81066d4:	6060      	str	r0, [r4, #4]
 81066d6:	6863      	ldr	r3, [r4, #4]
 81066d8:	6123      	str	r3, [r4, #16]
 81066da:	2300      	movs	r3, #0
 81066dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81066e0:	e7a8      	b.n	8106634 <_printf_i+0x150>
 81066e2:	6923      	ldr	r3, [r4, #16]
 81066e4:	4632      	mov	r2, r6
 81066e6:	4649      	mov	r1, r9
 81066e8:	4640      	mov	r0, r8
 81066ea:	47d0      	blx	sl
 81066ec:	3001      	adds	r0, #1
 81066ee:	d0ab      	beq.n	8106648 <_printf_i+0x164>
 81066f0:	6823      	ldr	r3, [r4, #0]
 81066f2:	079b      	lsls	r3, r3, #30
 81066f4:	d413      	bmi.n	810671e <_printf_i+0x23a>
 81066f6:	68e0      	ldr	r0, [r4, #12]
 81066f8:	9b03      	ldr	r3, [sp, #12]
 81066fa:	4298      	cmp	r0, r3
 81066fc:	bfb8      	it	lt
 81066fe:	4618      	movlt	r0, r3
 8106700:	e7a4      	b.n	810664c <_printf_i+0x168>
 8106702:	2301      	movs	r3, #1
 8106704:	4632      	mov	r2, r6
 8106706:	4649      	mov	r1, r9
 8106708:	4640      	mov	r0, r8
 810670a:	47d0      	blx	sl
 810670c:	3001      	adds	r0, #1
 810670e:	d09b      	beq.n	8106648 <_printf_i+0x164>
 8106710:	3501      	adds	r5, #1
 8106712:	68e3      	ldr	r3, [r4, #12]
 8106714:	9903      	ldr	r1, [sp, #12]
 8106716:	1a5b      	subs	r3, r3, r1
 8106718:	42ab      	cmp	r3, r5
 810671a:	dcf2      	bgt.n	8106702 <_printf_i+0x21e>
 810671c:	e7eb      	b.n	81066f6 <_printf_i+0x212>
 810671e:	2500      	movs	r5, #0
 8106720:	f104 0619 	add.w	r6, r4, #25
 8106724:	e7f5      	b.n	8106712 <_printf_i+0x22e>
 8106726:	bf00      	nop
 8106728:	081070d5 	.word	0x081070d5
 810672c:	081070e6 	.word	0x081070e6

08106730 <memmove>:
 8106730:	4288      	cmp	r0, r1
 8106732:	b510      	push	{r4, lr}
 8106734:	eb01 0402 	add.w	r4, r1, r2
 8106738:	d902      	bls.n	8106740 <memmove+0x10>
 810673a:	4284      	cmp	r4, r0
 810673c:	4623      	mov	r3, r4
 810673e:	d807      	bhi.n	8106750 <memmove+0x20>
 8106740:	1e43      	subs	r3, r0, #1
 8106742:	42a1      	cmp	r1, r4
 8106744:	d008      	beq.n	8106758 <memmove+0x28>
 8106746:	f811 2b01 	ldrb.w	r2, [r1], #1
 810674a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810674e:	e7f8      	b.n	8106742 <memmove+0x12>
 8106750:	4402      	add	r2, r0
 8106752:	4601      	mov	r1, r0
 8106754:	428a      	cmp	r2, r1
 8106756:	d100      	bne.n	810675a <memmove+0x2a>
 8106758:	bd10      	pop	{r4, pc}
 810675a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810675e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8106762:	e7f7      	b.n	8106754 <memmove+0x24>

08106764 <_free_r>:
 8106764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106766:	2900      	cmp	r1, #0
 8106768:	d048      	beq.n	81067fc <_free_r+0x98>
 810676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810676e:	9001      	str	r0, [sp, #4]
 8106770:	2b00      	cmp	r3, #0
 8106772:	f1a1 0404 	sub.w	r4, r1, #4
 8106776:	bfb8      	it	lt
 8106778:	18e4      	addlt	r4, r4, r3
 810677a:	f000 f8d3 	bl	8106924 <__malloc_lock>
 810677e:	4a20      	ldr	r2, [pc, #128]	; (8106800 <_free_r+0x9c>)
 8106780:	9801      	ldr	r0, [sp, #4]
 8106782:	6813      	ldr	r3, [r2, #0]
 8106784:	4615      	mov	r5, r2
 8106786:	b933      	cbnz	r3, 8106796 <_free_r+0x32>
 8106788:	6063      	str	r3, [r4, #4]
 810678a:	6014      	str	r4, [r2, #0]
 810678c:	b003      	add	sp, #12
 810678e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106792:	f000 b8cd 	b.w	8106930 <__malloc_unlock>
 8106796:	42a3      	cmp	r3, r4
 8106798:	d90b      	bls.n	81067b2 <_free_r+0x4e>
 810679a:	6821      	ldr	r1, [r4, #0]
 810679c:	1862      	adds	r2, r4, r1
 810679e:	4293      	cmp	r3, r2
 81067a0:	bf04      	itt	eq
 81067a2:	681a      	ldreq	r2, [r3, #0]
 81067a4:	685b      	ldreq	r3, [r3, #4]
 81067a6:	6063      	str	r3, [r4, #4]
 81067a8:	bf04      	itt	eq
 81067aa:	1852      	addeq	r2, r2, r1
 81067ac:	6022      	streq	r2, [r4, #0]
 81067ae:	602c      	str	r4, [r5, #0]
 81067b0:	e7ec      	b.n	810678c <_free_r+0x28>
 81067b2:	461a      	mov	r2, r3
 81067b4:	685b      	ldr	r3, [r3, #4]
 81067b6:	b10b      	cbz	r3, 81067bc <_free_r+0x58>
 81067b8:	42a3      	cmp	r3, r4
 81067ba:	d9fa      	bls.n	81067b2 <_free_r+0x4e>
 81067bc:	6811      	ldr	r1, [r2, #0]
 81067be:	1855      	adds	r5, r2, r1
 81067c0:	42a5      	cmp	r5, r4
 81067c2:	d10b      	bne.n	81067dc <_free_r+0x78>
 81067c4:	6824      	ldr	r4, [r4, #0]
 81067c6:	4421      	add	r1, r4
 81067c8:	1854      	adds	r4, r2, r1
 81067ca:	42a3      	cmp	r3, r4
 81067cc:	6011      	str	r1, [r2, #0]
 81067ce:	d1dd      	bne.n	810678c <_free_r+0x28>
 81067d0:	681c      	ldr	r4, [r3, #0]
 81067d2:	685b      	ldr	r3, [r3, #4]
 81067d4:	6053      	str	r3, [r2, #4]
 81067d6:	4421      	add	r1, r4
 81067d8:	6011      	str	r1, [r2, #0]
 81067da:	e7d7      	b.n	810678c <_free_r+0x28>
 81067dc:	d902      	bls.n	81067e4 <_free_r+0x80>
 81067de:	230c      	movs	r3, #12
 81067e0:	6003      	str	r3, [r0, #0]
 81067e2:	e7d3      	b.n	810678c <_free_r+0x28>
 81067e4:	6825      	ldr	r5, [r4, #0]
 81067e6:	1961      	adds	r1, r4, r5
 81067e8:	428b      	cmp	r3, r1
 81067ea:	bf04      	itt	eq
 81067ec:	6819      	ldreq	r1, [r3, #0]
 81067ee:	685b      	ldreq	r3, [r3, #4]
 81067f0:	6063      	str	r3, [r4, #4]
 81067f2:	bf04      	itt	eq
 81067f4:	1949      	addeq	r1, r1, r5
 81067f6:	6021      	streq	r1, [r4, #0]
 81067f8:	6054      	str	r4, [r2, #4]
 81067fa:	e7c7      	b.n	810678c <_free_r+0x28>
 81067fc:	b003      	add	sp, #12
 81067fe:	bd30      	pop	{r4, r5, pc}
 8106800:	100008bc 	.word	0x100008bc

08106804 <_malloc_r>:
 8106804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106806:	1ccd      	adds	r5, r1, #3
 8106808:	f025 0503 	bic.w	r5, r5, #3
 810680c:	3508      	adds	r5, #8
 810680e:	2d0c      	cmp	r5, #12
 8106810:	bf38      	it	cc
 8106812:	250c      	movcc	r5, #12
 8106814:	2d00      	cmp	r5, #0
 8106816:	4606      	mov	r6, r0
 8106818:	db01      	blt.n	810681e <_malloc_r+0x1a>
 810681a:	42a9      	cmp	r1, r5
 810681c:	d903      	bls.n	8106826 <_malloc_r+0x22>
 810681e:	230c      	movs	r3, #12
 8106820:	6033      	str	r3, [r6, #0]
 8106822:	2000      	movs	r0, #0
 8106824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106826:	f000 f87d 	bl	8106924 <__malloc_lock>
 810682a:	4921      	ldr	r1, [pc, #132]	; (81068b0 <_malloc_r+0xac>)
 810682c:	680a      	ldr	r2, [r1, #0]
 810682e:	4614      	mov	r4, r2
 8106830:	b99c      	cbnz	r4, 810685a <_malloc_r+0x56>
 8106832:	4f20      	ldr	r7, [pc, #128]	; (81068b4 <_malloc_r+0xb0>)
 8106834:	683b      	ldr	r3, [r7, #0]
 8106836:	b923      	cbnz	r3, 8106842 <_malloc_r+0x3e>
 8106838:	4621      	mov	r1, r4
 810683a:	4630      	mov	r0, r6
 810683c:	f000 f862 	bl	8106904 <_sbrk_r>
 8106840:	6038      	str	r0, [r7, #0]
 8106842:	4629      	mov	r1, r5
 8106844:	4630      	mov	r0, r6
 8106846:	f000 f85d 	bl	8106904 <_sbrk_r>
 810684a:	1c43      	adds	r3, r0, #1
 810684c:	d123      	bne.n	8106896 <_malloc_r+0x92>
 810684e:	230c      	movs	r3, #12
 8106850:	6033      	str	r3, [r6, #0]
 8106852:	4630      	mov	r0, r6
 8106854:	f000 f86c 	bl	8106930 <__malloc_unlock>
 8106858:	e7e3      	b.n	8106822 <_malloc_r+0x1e>
 810685a:	6823      	ldr	r3, [r4, #0]
 810685c:	1b5b      	subs	r3, r3, r5
 810685e:	d417      	bmi.n	8106890 <_malloc_r+0x8c>
 8106860:	2b0b      	cmp	r3, #11
 8106862:	d903      	bls.n	810686c <_malloc_r+0x68>
 8106864:	6023      	str	r3, [r4, #0]
 8106866:	441c      	add	r4, r3
 8106868:	6025      	str	r5, [r4, #0]
 810686a:	e004      	b.n	8106876 <_malloc_r+0x72>
 810686c:	6863      	ldr	r3, [r4, #4]
 810686e:	42a2      	cmp	r2, r4
 8106870:	bf0c      	ite	eq
 8106872:	600b      	streq	r3, [r1, #0]
 8106874:	6053      	strne	r3, [r2, #4]
 8106876:	4630      	mov	r0, r6
 8106878:	f000 f85a 	bl	8106930 <__malloc_unlock>
 810687c:	f104 000b 	add.w	r0, r4, #11
 8106880:	1d23      	adds	r3, r4, #4
 8106882:	f020 0007 	bic.w	r0, r0, #7
 8106886:	1ac2      	subs	r2, r0, r3
 8106888:	d0cc      	beq.n	8106824 <_malloc_r+0x20>
 810688a:	1a1b      	subs	r3, r3, r0
 810688c:	50a3      	str	r3, [r4, r2]
 810688e:	e7c9      	b.n	8106824 <_malloc_r+0x20>
 8106890:	4622      	mov	r2, r4
 8106892:	6864      	ldr	r4, [r4, #4]
 8106894:	e7cc      	b.n	8106830 <_malloc_r+0x2c>
 8106896:	1cc4      	adds	r4, r0, #3
 8106898:	f024 0403 	bic.w	r4, r4, #3
 810689c:	42a0      	cmp	r0, r4
 810689e:	d0e3      	beq.n	8106868 <_malloc_r+0x64>
 81068a0:	1a21      	subs	r1, r4, r0
 81068a2:	4630      	mov	r0, r6
 81068a4:	f000 f82e 	bl	8106904 <_sbrk_r>
 81068a8:	3001      	adds	r0, #1
 81068aa:	d1dd      	bne.n	8106868 <_malloc_r+0x64>
 81068ac:	e7cf      	b.n	810684e <_malloc_r+0x4a>
 81068ae:	bf00      	nop
 81068b0:	100008bc 	.word	0x100008bc
 81068b4:	100008c0 	.word	0x100008c0

081068b8 <_realloc_r>:
 81068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81068ba:	4607      	mov	r7, r0
 81068bc:	4614      	mov	r4, r2
 81068be:	460e      	mov	r6, r1
 81068c0:	b921      	cbnz	r1, 81068cc <_realloc_r+0x14>
 81068c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 81068c6:	4611      	mov	r1, r2
 81068c8:	f7ff bf9c 	b.w	8106804 <_malloc_r>
 81068cc:	b922      	cbnz	r2, 81068d8 <_realloc_r+0x20>
 81068ce:	f7ff ff49 	bl	8106764 <_free_r>
 81068d2:	4625      	mov	r5, r4
 81068d4:	4628      	mov	r0, r5
 81068d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81068d8:	f000 f830 	bl	810693c <_malloc_usable_size_r>
 81068dc:	42a0      	cmp	r0, r4
 81068de:	d20f      	bcs.n	8106900 <_realloc_r+0x48>
 81068e0:	4621      	mov	r1, r4
 81068e2:	4638      	mov	r0, r7
 81068e4:	f7ff ff8e 	bl	8106804 <_malloc_r>
 81068e8:	4605      	mov	r5, r0
 81068ea:	2800      	cmp	r0, #0
 81068ec:	d0f2      	beq.n	81068d4 <_realloc_r+0x1c>
 81068ee:	4631      	mov	r1, r6
 81068f0:	4622      	mov	r2, r4
 81068f2:	f7ff fbe9 	bl	81060c8 <memcpy>
 81068f6:	4631      	mov	r1, r6
 81068f8:	4638      	mov	r0, r7
 81068fa:	f7ff ff33 	bl	8106764 <_free_r>
 81068fe:	e7e9      	b.n	81068d4 <_realloc_r+0x1c>
 8106900:	4635      	mov	r5, r6
 8106902:	e7e7      	b.n	81068d4 <_realloc_r+0x1c>

08106904 <_sbrk_r>:
 8106904:	b538      	push	{r3, r4, r5, lr}
 8106906:	4d06      	ldr	r5, [pc, #24]	; (8106920 <_sbrk_r+0x1c>)
 8106908:	2300      	movs	r3, #0
 810690a:	4604      	mov	r4, r0
 810690c:	4608      	mov	r0, r1
 810690e:	602b      	str	r3, [r5, #0]
 8106910:	f7fa febe 	bl	8101690 <_sbrk>
 8106914:	1c43      	adds	r3, r0, #1
 8106916:	d102      	bne.n	810691e <_sbrk_r+0x1a>
 8106918:	682b      	ldr	r3, [r5, #0]
 810691a:	b103      	cbz	r3, 810691e <_sbrk_r+0x1a>
 810691c:	6023      	str	r3, [r4, #0]
 810691e:	bd38      	pop	{r3, r4, r5, pc}
 8106920:	100009f8 	.word	0x100009f8

08106924 <__malloc_lock>:
 8106924:	4801      	ldr	r0, [pc, #4]	; (810692c <__malloc_lock+0x8>)
 8106926:	f000 b811 	b.w	810694c <__retarget_lock_acquire_recursive>
 810692a:	bf00      	nop
 810692c:	10000a00 	.word	0x10000a00

08106930 <__malloc_unlock>:
 8106930:	4801      	ldr	r0, [pc, #4]	; (8106938 <__malloc_unlock+0x8>)
 8106932:	f000 b80c 	b.w	810694e <__retarget_lock_release_recursive>
 8106936:	bf00      	nop
 8106938:	10000a00 	.word	0x10000a00

0810693c <_malloc_usable_size_r>:
 810693c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106940:	1f18      	subs	r0, r3, #4
 8106942:	2b00      	cmp	r3, #0
 8106944:	bfbc      	itt	lt
 8106946:	580b      	ldrlt	r3, [r1, r0]
 8106948:	18c0      	addlt	r0, r0, r3
 810694a:	4770      	bx	lr

0810694c <__retarget_lock_acquire_recursive>:
 810694c:	4770      	bx	lr

0810694e <__retarget_lock_release_recursive>:
 810694e:	4770      	bx	lr

08106950 <_init>:
 8106950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106952:	bf00      	nop
 8106954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106956:	bc08      	pop	{r3}
 8106958:	469e      	mov	lr, r3
 810695a:	4770      	bx	lr

0810695c <_fini>:
 810695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810695e:	bf00      	nop
 8106960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106962:	bc08      	pop	{r3}
 8106964:	469e      	mov	lr, r3
 8106966:	4770      	bx	lr
