
0528_final_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08106a1c  08106a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08107218  08107218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08107220  08107220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08107224  08107224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  10000000  08107228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000098c  1000007c  081072a4  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000a08  081072a4  00020a08  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d41e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003171  00000000  00000000  0003d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  00040640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc0  00000000  00000000  000412b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039386  00000000  00000000  00041e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001302a  00000000  00000000  0007b1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177ed0  00000000  00000000  0008e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002060f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003690  00000000  00000000  0020614c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000007c 	.word	0x1000007c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106a04 	.word	0x08106a04

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000080 	.word	0x10000080
 81002dc:	08106a04 	.word	0x08106a04

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_uldivmod>:
 81003b0:	b953      	cbnz	r3, 81003c8 <__aeabi_uldivmod+0x18>
 81003b2:	b94a      	cbnz	r2, 81003c8 <__aeabi_uldivmod+0x18>
 81003b4:	2900      	cmp	r1, #0
 81003b6:	bf08      	it	eq
 81003b8:	2800      	cmpeq	r0, #0
 81003ba:	bf1c      	itt	ne
 81003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 81003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 81003c4:	f000 b96e 	b.w	81006a4 <__aeabi_idiv0>
 81003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003d0:	f000 f806 	bl	81003e0 <__udivmoddi4>
 81003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003dc:	b004      	add	sp, #16
 81003de:	4770      	bx	lr

081003e0 <__udivmoddi4>:
 81003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003e4:	9d08      	ldr	r5, [sp, #32]
 81003e6:	4604      	mov	r4, r0
 81003e8:	468c      	mov	ip, r1
 81003ea:	2b00      	cmp	r3, #0
 81003ec:	f040 8083 	bne.w	81004f6 <__udivmoddi4+0x116>
 81003f0:	428a      	cmp	r2, r1
 81003f2:	4617      	mov	r7, r2
 81003f4:	d947      	bls.n	8100486 <__udivmoddi4+0xa6>
 81003f6:	fab2 f282 	clz	r2, r2
 81003fa:	b142      	cbz	r2, 810040e <__udivmoddi4+0x2e>
 81003fc:	f1c2 0020 	rsb	r0, r2, #32
 8100400:	fa24 f000 	lsr.w	r0, r4, r0
 8100404:	4091      	lsls	r1, r2
 8100406:	4097      	lsls	r7, r2
 8100408:	ea40 0c01 	orr.w	ip, r0, r1
 810040c:	4094      	lsls	r4, r2
 810040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100412:	0c23      	lsrs	r3, r4, #16
 8100414:	fbbc f6f8 	udiv	r6, ip, r8
 8100418:	fa1f fe87 	uxth.w	lr, r7
 810041c:	fb08 c116 	mls	r1, r8, r6, ip
 8100420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100424:	fb06 f10e 	mul.w	r1, r6, lr
 8100428:	4299      	cmp	r1, r3
 810042a:	d909      	bls.n	8100440 <__udivmoddi4+0x60>
 810042c:	18fb      	adds	r3, r7, r3
 810042e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100432:	f080 8119 	bcs.w	8100668 <__udivmoddi4+0x288>
 8100436:	4299      	cmp	r1, r3
 8100438:	f240 8116 	bls.w	8100668 <__udivmoddi4+0x288>
 810043c:	3e02      	subs	r6, #2
 810043e:	443b      	add	r3, r7
 8100440:	1a5b      	subs	r3, r3, r1
 8100442:	b2a4      	uxth	r4, r4
 8100444:	fbb3 f0f8 	udiv	r0, r3, r8
 8100448:	fb08 3310 	mls	r3, r8, r0, r3
 810044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100450:	fb00 fe0e 	mul.w	lr, r0, lr
 8100454:	45a6      	cmp	lr, r4
 8100456:	d909      	bls.n	810046c <__udivmoddi4+0x8c>
 8100458:	193c      	adds	r4, r7, r4
 810045a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810045e:	f080 8105 	bcs.w	810066c <__udivmoddi4+0x28c>
 8100462:	45a6      	cmp	lr, r4
 8100464:	f240 8102 	bls.w	810066c <__udivmoddi4+0x28c>
 8100468:	3802      	subs	r0, #2
 810046a:	443c      	add	r4, r7
 810046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100470:	eba4 040e 	sub.w	r4, r4, lr
 8100474:	2600      	movs	r6, #0
 8100476:	b11d      	cbz	r5, 8100480 <__udivmoddi4+0xa0>
 8100478:	40d4      	lsrs	r4, r2
 810047a:	2300      	movs	r3, #0
 810047c:	e9c5 4300 	strd	r4, r3, [r5]
 8100480:	4631      	mov	r1, r6
 8100482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100486:	b902      	cbnz	r2, 810048a <__udivmoddi4+0xaa>
 8100488:	deff      	udf	#255	; 0xff
 810048a:	fab2 f282 	clz	r2, r2
 810048e:	2a00      	cmp	r2, #0
 8100490:	d150      	bne.n	8100534 <__udivmoddi4+0x154>
 8100492:	1bcb      	subs	r3, r1, r7
 8100494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100498:	fa1f f887 	uxth.w	r8, r7
 810049c:	2601      	movs	r6, #1
 810049e:	fbb3 fcfe 	udiv	ip, r3, lr
 81004a2:	0c21      	lsrs	r1, r4, #16
 81004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 81004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004ac:	fb08 f30c 	mul.w	r3, r8, ip
 81004b0:	428b      	cmp	r3, r1
 81004b2:	d907      	bls.n	81004c4 <__udivmoddi4+0xe4>
 81004b4:	1879      	adds	r1, r7, r1
 81004b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 81004ba:	d202      	bcs.n	81004c2 <__udivmoddi4+0xe2>
 81004bc:	428b      	cmp	r3, r1
 81004be:	f200 80e9 	bhi.w	8100694 <__udivmoddi4+0x2b4>
 81004c2:	4684      	mov	ip, r0
 81004c4:	1ac9      	subs	r1, r1, r3
 81004c6:	b2a3      	uxth	r3, r4
 81004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 81004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 81004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004d4:	fb08 f800 	mul.w	r8, r8, r0
 81004d8:	45a0      	cmp	r8, r4
 81004da:	d907      	bls.n	81004ec <__udivmoddi4+0x10c>
 81004dc:	193c      	adds	r4, r7, r4
 81004de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 81004e2:	d202      	bcs.n	81004ea <__udivmoddi4+0x10a>
 81004e4:	45a0      	cmp	r8, r4
 81004e6:	f200 80d9 	bhi.w	810069c <__udivmoddi4+0x2bc>
 81004ea:	4618      	mov	r0, r3
 81004ec:	eba4 0408 	sub.w	r4, r4, r8
 81004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004f4:	e7bf      	b.n	8100476 <__udivmoddi4+0x96>
 81004f6:	428b      	cmp	r3, r1
 81004f8:	d909      	bls.n	810050e <__udivmoddi4+0x12e>
 81004fa:	2d00      	cmp	r5, #0
 81004fc:	f000 80b1 	beq.w	8100662 <__udivmoddi4+0x282>
 8100500:	2600      	movs	r6, #0
 8100502:	e9c5 0100 	strd	r0, r1, [r5]
 8100506:	4630      	mov	r0, r6
 8100508:	4631      	mov	r1, r6
 810050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810050e:	fab3 f683 	clz	r6, r3
 8100512:	2e00      	cmp	r6, #0
 8100514:	d14a      	bne.n	81005ac <__udivmoddi4+0x1cc>
 8100516:	428b      	cmp	r3, r1
 8100518:	d302      	bcc.n	8100520 <__udivmoddi4+0x140>
 810051a:	4282      	cmp	r2, r0
 810051c:	f200 80b8 	bhi.w	8100690 <__udivmoddi4+0x2b0>
 8100520:	1a84      	subs	r4, r0, r2
 8100522:	eb61 0103 	sbc.w	r1, r1, r3
 8100526:	2001      	movs	r0, #1
 8100528:	468c      	mov	ip, r1
 810052a:	2d00      	cmp	r5, #0
 810052c:	d0a8      	beq.n	8100480 <__udivmoddi4+0xa0>
 810052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8100532:	e7a5      	b.n	8100480 <__udivmoddi4+0xa0>
 8100534:	f1c2 0320 	rsb	r3, r2, #32
 8100538:	fa20 f603 	lsr.w	r6, r0, r3
 810053c:	4097      	lsls	r7, r2
 810053e:	fa01 f002 	lsl.w	r0, r1, r2
 8100542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100546:	40d9      	lsrs	r1, r3
 8100548:	4330      	orrs	r0, r6
 810054a:	0c03      	lsrs	r3, r0, #16
 810054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100550:	fa1f f887 	uxth.w	r8, r7
 8100554:	fb0e 1116 	mls	r1, lr, r6, r1
 8100558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810055c:	fb06 f108 	mul.w	r1, r6, r8
 8100560:	4299      	cmp	r1, r3
 8100562:	fa04 f402 	lsl.w	r4, r4, r2
 8100566:	d909      	bls.n	810057c <__udivmoddi4+0x19c>
 8100568:	18fb      	adds	r3, r7, r3
 810056a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 810056e:	f080 808d 	bcs.w	810068c <__udivmoddi4+0x2ac>
 8100572:	4299      	cmp	r1, r3
 8100574:	f240 808a 	bls.w	810068c <__udivmoddi4+0x2ac>
 8100578:	3e02      	subs	r6, #2
 810057a:	443b      	add	r3, r7
 810057c:	1a5b      	subs	r3, r3, r1
 810057e:	b281      	uxth	r1, r0
 8100580:	fbb3 f0fe 	udiv	r0, r3, lr
 8100584:	fb0e 3310 	mls	r3, lr, r0, r3
 8100588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810058c:	fb00 f308 	mul.w	r3, r0, r8
 8100590:	428b      	cmp	r3, r1
 8100592:	d907      	bls.n	81005a4 <__udivmoddi4+0x1c4>
 8100594:	1879      	adds	r1, r7, r1
 8100596:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 810059a:	d273      	bcs.n	8100684 <__udivmoddi4+0x2a4>
 810059c:	428b      	cmp	r3, r1
 810059e:	d971      	bls.n	8100684 <__udivmoddi4+0x2a4>
 81005a0:	3802      	subs	r0, #2
 81005a2:	4439      	add	r1, r7
 81005a4:	1acb      	subs	r3, r1, r3
 81005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81005aa:	e778      	b.n	810049e <__udivmoddi4+0xbe>
 81005ac:	f1c6 0c20 	rsb	ip, r6, #32
 81005b0:	fa03 f406 	lsl.w	r4, r3, r6
 81005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 81005b8:	431c      	orrs	r4, r3
 81005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 81005be:	fa01 f306 	lsl.w	r3, r1, r6
 81005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 81005ca:	431f      	orrs	r7, r3
 81005cc:	0c3b      	lsrs	r3, r7, #16
 81005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 81005d2:	fa1f f884 	uxth.w	r8, r4
 81005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005de:	fb09 fa08 	mul.w	sl, r9, r8
 81005e2:	458a      	cmp	sl, r1
 81005e4:	fa02 f206 	lsl.w	r2, r2, r6
 81005e8:	fa00 f306 	lsl.w	r3, r0, r6
 81005ec:	d908      	bls.n	8100600 <__udivmoddi4+0x220>
 81005ee:	1861      	adds	r1, r4, r1
 81005f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 81005f4:	d248      	bcs.n	8100688 <__udivmoddi4+0x2a8>
 81005f6:	458a      	cmp	sl, r1
 81005f8:	d946      	bls.n	8100688 <__udivmoddi4+0x2a8>
 81005fa:	f1a9 0902 	sub.w	r9, r9, #2
 81005fe:	4421      	add	r1, r4
 8100600:	eba1 010a 	sub.w	r1, r1, sl
 8100604:	b2bf      	uxth	r7, r7
 8100606:	fbb1 f0fe 	udiv	r0, r1, lr
 810060a:	fb0e 1110 	mls	r1, lr, r0, r1
 810060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100612:	fb00 f808 	mul.w	r8, r0, r8
 8100616:	45b8      	cmp	r8, r7
 8100618:	d907      	bls.n	810062a <__udivmoddi4+0x24a>
 810061a:	19e7      	adds	r7, r4, r7
 810061c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8100620:	d22e      	bcs.n	8100680 <__udivmoddi4+0x2a0>
 8100622:	45b8      	cmp	r8, r7
 8100624:	d92c      	bls.n	8100680 <__udivmoddi4+0x2a0>
 8100626:	3802      	subs	r0, #2
 8100628:	4427      	add	r7, r4
 810062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810062e:	eba7 0708 	sub.w	r7, r7, r8
 8100632:	fba0 8902 	umull	r8, r9, r0, r2
 8100636:	454f      	cmp	r7, r9
 8100638:	46c6      	mov	lr, r8
 810063a:	4649      	mov	r1, r9
 810063c:	d31a      	bcc.n	8100674 <__udivmoddi4+0x294>
 810063e:	d017      	beq.n	8100670 <__udivmoddi4+0x290>
 8100640:	b15d      	cbz	r5, 810065a <__udivmoddi4+0x27a>
 8100642:	ebb3 020e 	subs.w	r2, r3, lr
 8100646:	eb67 0701 	sbc.w	r7, r7, r1
 810064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810064e:	40f2      	lsrs	r2, r6
 8100650:	ea4c 0202 	orr.w	r2, ip, r2
 8100654:	40f7      	lsrs	r7, r6
 8100656:	e9c5 2700 	strd	r2, r7, [r5]
 810065a:	2600      	movs	r6, #0
 810065c:	4631      	mov	r1, r6
 810065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100662:	462e      	mov	r6, r5
 8100664:	4628      	mov	r0, r5
 8100666:	e70b      	b.n	8100480 <__udivmoddi4+0xa0>
 8100668:	4606      	mov	r6, r0
 810066a:	e6e9      	b.n	8100440 <__udivmoddi4+0x60>
 810066c:	4618      	mov	r0, r3
 810066e:	e6fd      	b.n	810046c <__udivmoddi4+0x8c>
 8100670:	4543      	cmp	r3, r8
 8100672:	d2e5      	bcs.n	8100640 <__udivmoddi4+0x260>
 8100674:	ebb8 0e02 	subs.w	lr, r8, r2
 8100678:	eb69 0104 	sbc.w	r1, r9, r4
 810067c:	3801      	subs	r0, #1
 810067e:	e7df      	b.n	8100640 <__udivmoddi4+0x260>
 8100680:	4608      	mov	r0, r1
 8100682:	e7d2      	b.n	810062a <__udivmoddi4+0x24a>
 8100684:	4660      	mov	r0, ip
 8100686:	e78d      	b.n	81005a4 <__udivmoddi4+0x1c4>
 8100688:	4681      	mov	r9, r0
 810068a:	e7b9      	b.n	8100600 <__udivmoddi4+0x220>
 810068c:	4666      	mov	r6, ip
 810068e:	e775      	b.n	810057c <__udivmoddi4+0x19c>
 8100690:	4630      	mov	r0, r6
 8100692:	e74a      	b.n	810052a <__udivmoddi4+0x14a>
 8100694:	f1ac 0c02 	sub.w	ip, ip, #2
 8100698:	4439      	add	r1, r7
 810069a:	e713      	b.n	81004c4 <__udivmoddi4+0xe4>
 810069c:	3802      	subs	r0, #2
 810069e:	443c      	add	r4, r7
 81006a0:	e724      	b.n	81004ec <__udivmoddi4+0x10c>
 81006a2:	bf00      	nop

081006a4 <__aeabi_idiv0>:
 81006a4:	4770      	bx	lr
 81006a6:	bf00      	nop

081006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a8:	b480      	push	{r7}
 81006aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006ac:	4b0b      	ldr	r3, [pc, #44]	; (81006dc <SystemInit+0x34>)
 81006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81006b2:	4a0a      	ldr	r2, [pc, #40]	; (81006dc <SystemInit+0x34>)
 81006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006bc:	4b07      	ldr	r3, [pc, #28]	; (81006dc <SystemInit+0x34>)
 81006be:	691b      	ldr	r3, [r3, #16]
 81006c0:	4a06      	ldr	r2, [pc, #24]	; (81006dc <SystemInit+0x34>)
 81006c2:	f043 0310 	orr.w	r3, r3, #16
 81006c6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81006c8:	4b04      	ldr	r3, [pc, #16]	; (81006dc <SystemInit+0x34>)
 81006ca:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81006ce:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006d0:	bf00      	nop
 81006d2:	46bd      	mov	sp, r7
 81006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d8:	4770      	bx	lr
 81006da:	bf00      	nop
 81006dc:	e000ed00 	.word	0xe000ed00

081006e0 <ESP_Init>:
		<div class=\"btn\">";

/*****************************************************************************************************************************************/

void ESP_Init ()
{
 81006e0:	b580      	push	{r7, lr}
 81006e2:	b094      	sub	sp, #80	; 0x50
 81006e4:	af00      	add	r7, sp, #0
	char data[80];

	Ringbuf_init();
 81006e6:	f000 fb2b 	bl	8100d40 <Ringbuf_init>

#if ESP_ENABLE == 1
	Uart_sendstring("Test...\r\n", wifi_uart);
 81006ea:	4922      	ldr	r1, [pc, #136]	; (8100774 <ESP_Init+0x94>)
 81006ec:	4822      	ldr	r0, [pc, #136]	; (8100778 <ESP_Init+0x98>)
 81006ee:	f000 fce2 	bl	81010b6 <Uart_sendstring>
	/********* AT **********/
	Uart_flush(wifi_uart);
 81006f2:	4820      	ldr	r0, [pc, #128]	; (8100774 <ESP_Init+0x94>)
 81006f4:	f000 fbd0 	bl	8100e98 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 81006f8:	491e      	ldr	r1, [pc, #120]	; (8100774 <ESP_Init+0x94>)
 81006fa:	4820      	ldr	r0, [pc, #128]	; (810077c <ESP_Init+0x9c>)
 81006fc:	f000 fcdb 	bl	81010b6 <Uart_sendstring>
	while(!(Wait_for("OK\r\n", wifi_uart)));
 8100700:	bf00      	nop
 8100702:	491c      	ldr	r1, [pc, #112]	; (8100774 <ESP_Init+0x94>)
 8100704:	481e      	ldr	r0, [pc, #120]	; (8100780 <ESP_Init+0xa0>)
 8100706:	f000 fd6b 	bl	81011e0 <Wait_for>
 810070a:	4603      	mov	r3, r0
 810070c:	2b00      	cmp	r3, #0
 810070e:	d0f8      	beq.n	8100702 <ESP_Init+0x22>


	Uart_flush(wifi_uart);
 8100710:	4818      	ldr	r0, [pc, #96]	; (8100774 <ESP_Init+0x94>)
 8100712:	f000 fbc1 	bl	8100e98 <Uart_flush>
	Uart_sendstring("AT+CWMODE=2\r\n", wifi_uart);
 8100716:	4917      	ldr	r1, [pc, #92]	; (8100774 <ESP_Init+0x94>)
 8100718:	481a      	ldr	r0, [pc, #104]	; (8100784 <ESP_Init+0xa4>)
 810071a:	f000 fccc 	bl	81010b6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 810071e:	bf00      	nop
 8100720:	4914      	ldr	r1, [pc, #80]	; (8100774 <ESP_Init+0x94>)
 8100722:	4817      	ldr	r0, [pc, #92]	; (8100780 <ESP_Init+0xa0>)
 8100724:	f000 fd5c 	bl	81011e0 <Wait_for>
 8100728:	4603      	mov	r3, r0
 810072a:	2b00      	cmp	r3, #0
 810072c:	d0f8      	beq.n	8100720 <ESP_Init+0x40>


	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 810072e:	4811      	ldr	r0, [pc, #68]	; (8100774 <ESP_Init+0x94>)
 8100730:	f000 fbb2 	bl	8100e98 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8100734:	490f      	ldr	r1, [pc, #60]	; (8100774 <ESP_Init+0x94>)
 8100736:	4814      	ldr	r0, [pc, #80]	; (8100788 <ESP_Init+0xa8>)
 8100738:	f000 fcbd 	bl	81010b6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 810073c:	bf00      	nop
 810073e:	490d      	ldr	r1, [pc, #52]	; (8100774 <ESP_Init+0x94>)
 8100740:	480f      	ldr	r0, [pc, #60]	; (8100780 <ESP_Init+0xa0>)
 8100742:	f000 fd4d 	bl	81011e0 <Wait_for>
 8100746:	4603      	mov	r3, r0
 8100748:	2b00      	cmp	r3, #0
 810074a:	d0f8      	beq.n	810073e <ESP_Init+0x5e>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 810074c:	4809      	ldr	r0, [pc, #36]	; (8100774 <ESP_Init+0x94>)
 810074e:	f000 fba3 	bl	8100e98 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 8100752:	4908      	ldr	r1, [pc, #32]	; (8100774 <ESP_Init+0x94>)
 8100754:	480d      	ldr	r0, [pc, #52]	; (810078c <ESP_Init+0xac>)
 8100756:	f000 fcae 	bl	81010b6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 810075a:	bf00      	nop
 810075c:	4905      	ldr	r1, [pc, #20]	; (8100774 <ESP_Init+0x94>)
 810075e:	4808      	ldr	r0, [pc, #32]	; (8100780 <ESP_Init+0xa0>)
 8100760:	f000 fd3e 	bl	81011e0 <Wait_for>
 8100764:	4603      	mov	r3, r0
 8100766:	2b00      	cmp	r3, #0
 8100768:	d0f8      	beq.n	810075c <ESP_Init+0x7c>

#endif
	//char pData[]="AT OK\r\n";
	//HAL_UART_Transmit(&huart3, (uint8_t *)pData, 7, 0xfff);

}
 810076a:	bf00      	nop
 810076c:	bf00      	nop
 810076e:	3750      	adds	r7, #80	; 0x50
 8100770:	46bd      	mov	sp, r7
 8100772:	bd80      	pop	{r7, pc}
 8100774:	100008d4 	.word	0x100008d4
 8100778:	08106e64 	.word	0x08106e64
 810077c:	08106e70 	.word	0x08106e70
 8100780:	08106e78 	.word	0x08106e78
 8100784:	08106e80 	.word	0x08106e80
 8100788:	08106e90 	.word	0x08106e90
 810078c:	08106ea0 	.word	0x08106ea0

08100790 <Server_Send>:


int Server_Send (char *str, int Link_ID)
{
 8100790:	b580      	push	{r7, lr}
 8100792:	b098      	sub	sp, #96	; 0x60
 8100794:	af00      	add	r7, sp, #0
 8100796:	6078      	str	r0, [r7, #4]
 8100798:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 810079a:	6878      	ldr	r0, [r7, #4]
 810079c:	f7ff fdaa 	bl	81002f4 <strlen>
 81007a0:	4603      	mov	r3, r0
 81007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 81007a4:	f107 000c 	add.w	r0, r7, #12
 81007a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81007aa:	683a      	ldr	r2, [r7, #0]
 81007ac:	491a      	ldr	r1, [pc, #104]	; (8100818 <Server_Send+0x88>)
 81007ae:	f005 fcfb 	bl	81061a8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 81007b2:	f107 030c 	add.w	r3, r7, #12
 81007b6:	4919      	ldr	r1, [pc, #100]	; (810081c <Server_Send+0x8c>)
 81007b8:	4618      	mov	r0, r3
 81007ba:	f000 fc7c 	bl	81010b6 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 81007be:	bf00      	nop
 81007c0:	4916      	ldr	r1, [pc, #88]	; (810081c <Server_Send+0x8c>)
 81007c2:	4817      	ldr	r0, [pc, #92]	; (8100820 <Server_Send+0x90>)
 81007c4:	f000 fd0c 	bl	81011e0 <Wait_for>
 81007c8:	4603      	mov	r3, r0
 81007ca:	2b00      	cmp	r3, #0
 81007cc:	d0f8      	beq.n	81007c0 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 81007ce:	4913      	ldr	r1, [pc, #76]	; (810081c <Server_Send+0x8c>)
 81007d0:	6878      	ldr	r0, [r7, #4]
 81007d2:	f000 fc70 	bl	81010b6 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 81007d6:	bf00      	nop
 81007d8:	4910      	ldr	r1, [pc, #64]	; (810081c <Server_Send+0x8c>)
 81007da:	4812      	ldr	r0, [pc, #72]	; (8100824 <Server_Send+0x94>)
 81007dc:	f000 fd00 	bl	81011e0 <Wait_for>
 81007e0:	4603      	mov	r3, r0
 81007e2:	2b00      	cmp	r3, #0
 81007e4:	d0f8      	beq.n	81007d8 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 81007e6:	f107 030c 	add.w	r3, r7, #12
 81007ea:	490f      	ldr	r1, [pc, #60]	; (8100828 <Server_Send+0x98>)
 81007ec:	4618      	mov	r0, r3
 81007ee:	f005 fcdb 	bl	81061a8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 81007f2:	f107 030c 	add.w	r3, r7, #12
 81007f6:	4909      	ldr	r1, [pc, #36]	; (810081c <Server_Send+0x8c>)
 81007f8:	4618      	mov	r0, r3
 81007fa:	f000 fc5c 	bl	81010b6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 81007fe:	bf00      	nop
 8100800:	4906      	ldr	r1, [pc, #24]	; (810081c <Server_Send+0x8c>)
 8100802:	480a      	ldr	r0, [pc, #40]	; (810082c <Server_Send+0x9c>)
 8100804:	f000 fcec 	bl	81011e0 <Wait_for>
 8100808:	4603      	mov	r3, r0
 810080a:	2b00      	cmp	r3, #0
 810080c:	d0f8      	beq.n	8100800 <Server_Send+0x70>
	return 1;
 810080e:	2301      	movs	r3, #1
}
 8100810:	4618      	mov	r0, r3
 8100812:	3760      	adds	r7, #96	; 0x60
 8100814:	46bd      	mov	sp, r7
 8100816:	bd80      	pop	{r7, pc}
 8100818:	08106eb4 	.word	0x08106eb4
 810081c:	100008d4 	.word	0x100008d4
 8100820:	08106ec8 	.word	0x08106ec8
 8100824:	08106ecc 	.word	0x08106ecc
 8100828:	08106ed4 	.word	0x08106ed4
 810082c:	08106e78 	.word	0x08106e78

08100830 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8100830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100832:	f6ad 0dec 	subw	sp, sp, #2284	; 0x8ec
 8100836:	af02      	add	r7, sp, #8
 8100838:	1d3b      	adds	r3, r7, #4
 810083a:	6018      	str	r0, [r3, #0]
 810083c:	463b      	mov	r3, r7
 810083e:	6019      	str	r1, [r3, #0]
	char datatosend[2048] = {0};
 8100840:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100844:	2200      	movs	r2, #0
 8100846:	601a      	str	r2, [r3, #0]
 8100848:	3304      	adds	r3, #4
 810084a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 810084e:	2100      	movs	r1, #0
 8100850:	4618      	mov	r0, r3
 8100852:	f005 fca1 	bl	8106198 <memset>
	if (!(strcmp (str, "/farm")))
 8100856:	1d3b      	adds	r3, r7, #4
 8100858:	498f      	ldr	r1, [pc, #572]	; (8100a98 <Server_Handle+0x268>)
 810085a:	6818      	ldr	r0, [r3, #0]
 810085c:	f7ff fd40 	bl	81002e0 <strcmp>
 8100860:	4603      	mov	r3, r0
 8100862:	2b00      	cmp	r3, #0
 8100864:	f040 81f3 	bne.w	8100c4e <Server_Handle+0x41e>
	{
		char localbuf[200];
		sprintf(datatosend, farm_top);
 8100868:	4b8c      	ldr	r3, [pc, #560]	; (8100a9c <Server_Handle+0x26c>)
 810086a:	681a      	ldr	r2, [r3, #0]
 810086c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100870:	4611      	mov	r1, r2
 8100872:	4618      	mov	r0, r3
 8100874:	f005 fc98 	bl	81061a8 <siprintf>
		uint8_t fan_on = 0;
 8100878:	2300      	movs	r3, #0
 810087a:	f887 38df 	strb.w	r3, [r7, #2271]	; 0x8df
		uint8_t light_on = 0;
 810087e:	2300      	movs	r3, #0
 8100880:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
		uint8_t water_on = 0;
 8100884:	2300      	movs	r3, #0
 8100886:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
		uint8_t tc = 0;
 810088a:	2300      	movs	r3, #0
 810088c:	f887 38dc 	strb.w	r3, [r7, #2268]	; 0x8dc
		uint8_t rd = 0;
 8100890:	2300      	movs	r3, #0
 8100892:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
		uint8_t r = 0;
 8100896:	2300      	movs	r3, #0
 8100898:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
		uint8_t g = 0;
 810089c:	2300      	movs	r3, #0
 810089e:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
		uint8_t b = 0;
 81008a2:	2300      	movs	r3, #0
 81008a4:	f887 38d8 	strb.w	r3, [r7, #2264]	; 0x8d8
		uint8_t soil = 0;
 81008a8:	2300      	movs	r3, #0
 81008aa:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7

		if(HAL_HSEM_Take(9, 0) == HAL_OK) {
 81008ae:	2100      	movs	r1, #0
 81008b0:	2009      	movs	r0, #9
 81008b2:	f002 f8ab 	bl	8102a0c <HAL_HSEM_Take>
 81008b6:	4603      	mov	r3, r0
 81008b8:	2b00      	cmp	r3, #0
 81008ba:	d130      	bne.n	810091e <Server_Handle+0xee>
			fan_on = shared_ptr->fan_on;
 81008bc:	4b78      	ldr	r3, [pc, #480]	; (8100aa0 <Server_Handle+0x270>)
 81008be:	681b      	ldr	r3, [r3, #0]
 81008c0:	781b      	ldrb	r3, [r3, #0]
 81008c2:	f887 38df 	strb.w	r3, [r7, #2271]	; 0x8df
			light_on = shared_ptr->light_on;
 81008c6:	4b76      	ldr	r3, [pc, #472]	; (8100aa0 <Server_Handle+0x270>)
 81008c8:	681b      	ldr	r3, [r3, #0]
 81008ca:	785b      	ldrb	r3, [r3, #1]
 81008cc:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
			water_on = shared_ptr->water_on;
 81008d0:	4b73      	ldr	r3, [pc, #460]	; (8100aa0 <Server_Handle+0x270>)
 81008d2:	681b      	ldr	r3, [r3, #0]
 81008d4:	789b      	ldrb	r3, [r3, #2]
 81008d6:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
			tc = shared_ptr->tc;
 81008da:	4b71      	ldr	r3, [pc, #452]	; (8100aa0 <Server_Handle+0x270>)
 81008dc:	681b      	ldr	r3, [r3, #0]
 81008de:	78db      	ldrb	r3, [r3, #3]
 81008e0:	f887 38dc 	strb.w	r3, [r7, #2268]	; 0x8dc
			rd = shared_ptr->rd;
 81008e4:	4b6e      	ldr	r3, [pc, #440]	; (8100aa0 <Server_Handle+0x270>)
 81008e6:	681b      	ldr	r3, [r3, #0]
 81008e8:	791b      	ldrb	r3, [r3, #4]
 81008ea:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
			r = shared_ptr->r;
 81008ee:	4b6c      	ldr	r3, [pc, #432]	; (8100aa0 <Server_Handle+0x270>)
 81008f0:	681b      	ldr	r3, [r3, #0]
 81008f2:	795b      	ldrb	r3, [r3, #5]
 81008f4:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
			g = shared_ptr->g;
 81008f8:	4b69      	ldr	r3, [pc, #420]	; (8100aa0 <Server_Handle+0x270>)
 81008fa:	681b      	ldr	r3, [r3, #0]
 81008fc:	799b      	ldrb	r3, [r3, #6]
 81008fe:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
			b = shared_ptr->b;
 8100902:	4b67      	ldr	r3, [pc, #412]	; (8100aa0 <Server_Handle+0x270>)
 8100904:	681b      	ldr	r3, [r3, #0]
 8100906:	79db      	ldrb	r3, [r3, #7]
 8100908:	f887 38d8 	strb.w	r3, [r7, #2264]	; 0x8d8
			soil = shared_ptr->soil;
 810090c:	4b64      	ldr	r3, [pc, #400]	; (8100aa0 <Server_Handle+0x270>)
 810090e:	681b      	ldr	r3, [r3, #0]
 8100910:	7a1b      	ldrb	r3, [r3, #8]
 8100912:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
			HAL_HSEM_Release(9,0);
 8100916:	2100      	movs	r1, #0
 8100918:	2009      	movs	r0, #9
 810091a:	f002 f89b 	bl	8102a54 <HAL_HSEM_Release>
		}

		if(fan_on)
 810091e:	f897 38df 	ldrb.w	r3, [r7, #2271]	; 0x8df
 8100922:	2b00      	cmp	r3, #0
 8100924:	d016      	beq.n	8100954 <Server_Handle+0x124>
		{
			strcat (datatosend, "<a href=\"/fanon\">風扇</a>");
 8100926:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810092a:	4618      	mov	r0, r3
 810092c:	f7ff fce2 	bl	81002f4 <strlen>
 8100930:	4603      	mov	r3, r0
 8100932:	461a      	mov	r2, r3
 8100934:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100938:	4413      	add	r3, r2
 810093a:	4a5a      	ldr	r2, [pc, #360]	; (8100aa4 <Server_Handle+0x274>)
 810093c:	461d      	mov	r5, r3
 810093e:	4614      	mov	r4, r2
 8100940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100942:	6028      	str	r0, [r5, #0]
 8100944:	6069      	str	r1, [r5, #4]
 8100946:	60aa      	str	r2, [r5, #8]
 8100948:	60eb      	str	r3, [r5, #12]
 810094a:	cc07      	ldmia	r4!, {r0, r1, r2}
 810094c:	6128      	str	r0, [r5, #16]
 810094e:	6169      	str	r1, [r5, #20]
 8100950:	61aa      	str	r2, [r5, #24]
 8100952:	e01f      	b.n	8100994 <Server_Handle+0x164>
		}
		else
		{
			strcat (datatosend, "<a href=\"/fanon\" class=\"off\">風扇</a>");
 8100954:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100958:	4618      	mov	r0, r3
 810095a:	f7ff fccb 	bl	81002f4 <strlen>
 810095e:	4603      	mov	r3, r0
 8100960:	461a      	mov	r2, r3
 8100962:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100966:	4413      	add	r3, r2
 8100968:	4a4f      	ldr	r2, [pc, #316]	; (8100aa8 <Server_Handle+0x278>)
 810096a:	4614      	mov	r4, r2
 810096c:	469c      	mov	ip, r3
 810096e:	f104 0e20 	add.w	lr, r4, #32
 8100972:	4665      	mov	r5, ip
 8100974:	4626      	mov	r6, r4
 8100976:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8100978:	6028      	str	r0, [r5, #0]
 810097a:	6069      	str	r1, [r5, #4]
 810097c:	60aa      	str	r2, [r5, #8]
 810097e:	60eb      	str	r3, [r5, #12]
 8100980:	3410      	adds	r4, #16
 8100982:	f10c 0c10 	add.w	ip, ip, #16
 8100986:	4574      	cmp	r4, lr
 8100988:	d1f3      	bne.n	8100972 <Server_Handle+0x142>
 810098a:	4662      	mov	r2, ip
 810098c:	4623      	mov	r3, r4
 810098e:	cb03      	ldmia	r3!, {r0, r1}
 8100990:	6010      	str	r0, [r2, #0]
 8100992:	6051      	str	r1, [r2, #4]
		}
		strcat (datatosend, "</div><div class=\"btn\">");
 8100994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100998:	4618      	mov	r0, r3
 810099a:	f7ff fcab 	bl	81002f4 <strlen>
 810099e:	4603      	mov	r3, r0
 81009a0:	461a      	mov	r2, r3
 81009a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009a6:	4413      	add	r3, r2
 81009a8:	4a40      	ldr	r2, [pc, #256]	; (8100aac <Server_Handle+0x27c>)
 81009aa:	461d      	mov	r5, r3
 81009ac:	4614      	mov	r4, r2
 81009ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81009b0:	6028      	str	r0, [r5, #0]
 81009b2:	6069      	str	r1, [r5, #4]
 81009b4:	60aa      	str	r2, [r5, #8]
 81009b6:	60eb      	str	r3, [r5, #12]
 81009b8:	cc03      	ldmia	r4!, {r0, r1}
 81009ba:	6128      	str	r0, [r5, #16]
 81009bc:	6169      	str	r1, [r5, #20]
		if(light_on)
 81009be:	f897 38de 	ldrb.w	r3, [r7, #2270]	; 0x8de
 81009c2:	2b00      	cmp	r3, #0
 81009c4:	d016      	beq.n	81009f4 <Server_Handle+0x1c4>
		{
			strcat (datatosend, "<a href\"/lighto\">燈光</a>");
 81009c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009ca:	4618      	mov	r0, r3
 81009cc:	f7ff fc92 	bl	81002f4 <strlen>
 81009d0:	4603      	mov	r3, r0
 81009d2:	461a      	mov	r2, r3
 81009d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009d8:	4413      	add	r3, r2
 81009da:	4a35      	ldr	r2, [pc, #212]	; (8100ab0 <Server_Handle+0x280>)
 81009dc:	461d      	mov	r5, r3
 81009de:	4614      	mov	r4, r2
 81009e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81009e2:	6028      	str	r0, [r5, #0]
 81009e4:	6069      	str	r1, [r5, #4]
 81009e6:	60aa      	str	r2, [r5, #8]
 81009e8:	60eb      	str	r3, [r5, #12]
 81009ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 81009ec:	6128      	str	r0, [r5, #16]
 81009ee:	6169      	str	r1, [r5, #20]
 81009f0:	61aa      	str	r2, [r5, #24]
 81009f2:	e01f      	b.n	8100a34 <Server_Handle+0x204>
		}
		else
		{
			strcat (datatosend, "<a href\"/lighto\" class=\"off\">燈光</a>");
 81009f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81009f8:	4618      	mov	r0, r3
 81009fa:	f7ff fc7b 	bl	81002f4 <strlen>
 81009fe:	4603      	mov	r3, r0
 8100a00:	461a      	mov	r2, r3
 8100a02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a06:	4413      	add	r3, r2
 8100a08:	4a2a      	ldr	r2, [pc, #168]	; (8100ab4 <Server_Handle+0x284>)
 8100a0a:	4614      	mov	r4, r2
 8100a0c:	469c      	mov	ip, r3
 8100a0e:	f104 0e20 	add.w	lr, r4, #32
 8100a12:	4665      	mov	r5, ip
 8100a14:	4626      	mov	r6, r4
 8100a16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8100a18:	6028      	str	r0, [r5, #0]
 8100a1a:	6069      	str	r1, [r5, #4]
 8100a1c:	60aa      	str	r2, [r5, #8]
 8100a1e:	60eb      	str	r3, [r5, #12]
 8100a20:	3410      	adds	r4, #16
 8100a22:	f10c 0c10 	add.w	ip, ip, #16
 8100a26:	4574      	cmp	r4, lr
 8100a28:	d1f3      	bne.n	8100a12 <Server_Handle+0x1e2>
 8100a2a:	4662      	mov	r2, ip
 8100a2c:	4623      	mov	r3, r4
 8100a2e:	cb03      	ldmia	r3!, {r0, r1}
 8100a30:	6010      	str	r0, [r2, #0]
 8100a32:	6051      	str	r1, [r2, #4]
		}
		strcat (datatosend, "</div><div class=\"btn\">");
 8100a34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a38:	4618      	mov	r0, r3
 8100a3a:	f7ff fc5b 	bl	81002f4 <strlen>
 8100a3e:	4603      	mov	r3, r0
 8100a40:	461a      	mov	r2, r3
 8100a42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a46:	4413      	add	r3, r2
 8100a48:	4a18      	ldr	r2, [pc, #96]	; (8100aac <Server_Handle+0x27c>)
 8100a4a:	461d      	mov	r5, r3
 8100a4c:	4614      	mov	r4, r2
 8100a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100a50:	6028      	str	r0, [r5, #0]
 8100a52:	6069      	str	r1, [r5, #4]
 8100a54:	60aa      	str	r2, [r5, #8]
 8100a56:	60eb      	str	r3, [r5, #12]
 8100a58:	cc03      	ldmia	r4!, {r0, r1}
 8100a5a:	6128      	str	r0, [r5, #16]
 8100a5c:	6169      	str	r1, [r5, #20]
		if(water_on)
 8100a5e:	f897 38dd 	ldrb.w	r3, [r7, #2269]	; 0x8dd
 8100a62:	2b00      	cmp	r3, #0
 8100a64:	d02a      	beq.n	8100abc <Server_Handle+0x28c>
		{
			strcat (datatosend, "<a href=\"/wateron\">澆水</a>");
 8100a66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a6a:	4618      	mov	r0, r3
 8100a6c:	f7ff fc42 	bl	81002f4 <strlen>
 8100a70:	4603      	mov	r3, r0
 8100a72:	461a      	mov	r2, r3
 8100a74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100a78:	4413      	add	r3, r2
 8100a7a:	4a0f      	ldr	r2, [pc, #60]	; (8100ab8 <Server_Handle+0x288>)
 8100a7c:	461d      	mov	r5, r3
 8100a7e:	4614      	mov	r4, r2
 8100a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100a82:	6028      	str	r0, [r5, #0]
 8100a84:	6069      	str	r1, [r5, #4]
 8100a86:	60aa      	str	r2, [r5, #8]
 8100a88:	60eb      	str	r3, [r5, #12]
 8100a8a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8100a8c:	6128      	str	r0, [r5, #16]
 8100a8e:	6169      	str	r1, [r5, #20]
 8100a90:	61aa      	str	r2, [r5, #24]
 8100a92:	8823      	ldrh	r3, [r4, #0]
 8100a94:	83ab      	strh	r3, [r5, #28]
 8100a96:	e033      	b.n	8100b00 <Server_Handle+0x2d0>
 8100a98:	08106ee4 	.word	0x08106ee4
 8100a9c:	1000000c 	.word	0x1000000c
 8100aa0:	081071b8 	.word	0x081071b8
 8100aa4:	08106eec 	.word	0x08106eec
 8100aa8:	08106f08 	.word	0x08106f08
 8100aac:	08106f30 	.word	0x08106f30
 8100ab0:	08106f48 	.word	0x08106f48
 8100ab4:	08106f64 	.word	0x08106f64
 8100ab8:	08106f8c 	.word	0x08106f8c
		}
		else
		{
			strcat (datatosend, "<a href=\"/wateron\" class=\"off\">澆水</a>");
 8100abc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100ac0:	4618      	mov	r0, r3
 8100ac2:	f7ff fc17 	bl	81002f4 <strlen>
 8100ac6:	4603      	mov	r3, r0
 8100ac8:	461a      	mov	r2, r3
 8100aca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100ace:	4413      	add	r3, r2
 8100ad0:	4a69      	ldr	r2, [pc, #420]	; (8100c78 <Server_Handle+0x448>)
 8100ad2:	4614      	mov	r4, r2
 8100ad4:	469c      	mov	ip, r3
 8100ad6:	f104 0e20 	add.w	lr, r4, #32
 8100ada:	4665      	mov	r5, ip
 8100adc:	4626      	mov	r6, r4
 8100ade:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8100ae0:	6028      	str	r0, [r5, #0]
 8100ae2:	6069      	str	r1, [r5, #4]
 8100ae4:	60aa      	str	r2, [r5, #8]
 8100ae6:	60eb      	str	r3, [r5, #12]
 8100ae8:	3410      	adds	r4, #16
 8100aea:	f10c 0c10 	add.w	ip, ip, #16
 8100aee:	4574      	cmp	r4, lr
 8100af0:	d1f3      	bne.n	8100ada <Server_Handle+0x2aa>
 8100af2:	4662      	mov	r2, ip
 8100af4:	4623      	mov	r3, r4
 8100af6:	cb03      	ldmia	r3!, {r0, r1}
 8100af8:	6010      	str	r0, [r2, #0]
 8100afa:	6051      	str	r1, [r2, #4]
 8100afc:	881b      	ldrh	r3, [r3, #0]
 8100afe:	8113      	strh	r3, [r2, #8]
		}

		strcat (datatosend, "</div></div><div class=\"center flex col\"><div class=\"flex row center\"><div class=\"td c1\">溫度:</div>");
 8100b00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b04:	4618      	mov	r0, r3
 8100b06:	f7ff fbf5 	bl	81002f4 <strlen>
 8100b0a:	4603      	mov	r3, r0
 8100b0c:	461a      	mov	r2, r3
 8100b0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b12:	4413      	add	r3, r2
 8100b14:	4a59      	ldr	r2, [pc, #356]	; (8100c7c <Server_Handle+0x44c>)
 8100b16:	4618      	mov	r0, r3
 8100b18:	4611      	mov	r1, r2
 8100b1a:	2367      	movs	r3, #103	; 0x67
 8100b1c:	461a      	mov	r2, r3
 8100b1e:	f005 fb2d 	bl	810617c <memcpy>
		sprintf (localbuf, "<div class=\"c2\">%d</div>", tc);
 8100b22:	f897 28dc 	ldrb.w	r2, [r7, #2268]	; 0x8dc
 8100b26:	f107 030c 	add.w	r3, r7, #12
 8100b2a:	4955      	ldr	r1, [pc, #340]	; (8100c80 <Server_Handle+0x450>)
 8100b2c:	4618      	mov	r0, r3
 8100b2e:	f005 fb3b 	bl	81061a8 <siprintf>
		strcat (datatosend, localbuf);
 8100b32:	f107 020c 	add.w	r2, r7, #12
 8100b36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b3a:	4611      	mov	r1, r2
 8100b3c:	4618      	mov	r0, r3
 8100b3e:	f005 fb53 	bl	81061e8 <strcat>
		strcat (datatosend, "</div><div class=\"flex row center\"><div class=\"c1\">濕度:</div>");
 8100b42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b46:	4618      	mov	r0, r3
 8100b48:	f7ff fbd4 	bl	81002f4 <strlen>
 8100b4c:	4603      	mov	r3, r0
 8100b4e:	461a      	mov	r2, r3
 8100b50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b54:	4413      	add	r3, r2
 8100b56:	4a4b      	ldr	r2, [pc, #300]	; (8100c84 <Server_Handle+0x454>)
 8100b58:	4618      	mov	r0, r3
 8100b5a:	4611      	mov	r1, r2
 8100b5c:	2341      	movs	r3, #65	; 0x41
 8100b5e:	461a      	mov	r2, r3
 8100b60:	f005 fb0c 	bl	810617c <memcpy>
		sprintf (localbuf, "<div class=\"c2\">%d</div>", rd);
 8100b64:	f897 28db 	ldrb.w	r2, [r7, #2267]	; 0x8db
 8100b68:	f107 030c 	add.w	r3, r7, #12
 8100b6c:	4944      	ldr	r1, [pc, #272]	; (8100c80 <Server_Handle+0x450>)
 8100b6e:	4618      	mov	r0, r3
 8100b70:	f005 fb1a 	bl	81061a8 <siprintf>
		strcat (datatosend, localbuf);
 8100b74:	f107 020c 	add.w	r2, r7, #12
 8100b78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b7c:	4611      	mov	r1, r2
 8100b7e:	4618      	mov	r0, r3
 8100b80:	f005 fb32 	bl	81061e8 <strcat>
		strcat (datatosend, "</div><div class=\"flex row center\"><div class=\"c1\">光線:</div>");
 8100b84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b88:	4618      	mov	r0, r3
 8100b8a:	f7ff fbb3 	bl	81002f4 <strlen>
 8100b8e:	4603      	mov	r3, r0
 8100b90:	461a      	mov	r2, r3
 8100b92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b96:	4413      	add	r3, r2
 8100b98:	4a3b      	ldr	r2, [pc, #236]	; (8100c88 <Server_Handle+0x458>)
 8100b9a:	4618      	mov	r0, r3
 8100b9c:	4611      	mov	r1, r2
 8100b9e:	2341      	movs	r3, #65	; 0x41
 8100ba0:	461a      	mov	r2, r3
 8100ba2:	f005 faeb 	bl	810617c <memcpy>
		sprintf (localbuf, "<div class=\"c2\">R:%d G:%d B:%d</div>", r, g, b);
 8100ba6:	f897 28da 	ldrb.w	r2, [r7, #2266]	; 0x8da
 8100baa:	f897 18d9 	ldrb.w	r1, [r7, #2265]	; 0x8d9
 8100bae:	f897 38d8 	ldrb.w	r3, [r7, #2264]	; 0x8d8
 8100bb2:	f107 000c 	add.w	r0, r7, #12
 8100bb6:	9300      	str	r3, [sp, #0]
 8100bb8:	460b      	mov	r3, r1
 8100bba:	4934      	ldr	r1, [pc, #208]	; (8100c8c <Server_Handle+0x45c>)
 8100bbc:	f005 faf4 	bl	81061a8 <siprintf>
		strcat (datatosend, localbuf);
 8100bc0:	f107 020c 	add.w	r2, r7, #12
 8100bc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100bc8:	4611      	mov	r1, r2
 8100bca:	4618      	mov	r0, r3
 8100bcc:	f005 fb0c 	bl	81061e8 <strcat>
		strcat (datatosend, "</div><div class=\"flex row center\"><div class=\"c1\">土壤:</div>");
 8100bd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100bd4:	4618      	mov	r0, r3
 8100bd6:	f7ff fb8d 	bl	81002f4 <strlen>
 8100bda:	4603      	mov	r3, r0
 8100bdc:	461a      	mov	r2, r3
 8100bde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100be2:	4413      	add	r3, r2
 8100be4:	4a2a      	ldr	r2, [pc, #168]	; (8100c90 <Server_Handle+0x460>)
 8100be6:	4618      	mov	r0, r3
 8100be8:	4611      	mov	r1, r2
 8100bea:	2341      	movs	r3, #65	; 0x41
 8100bec:	461a      	mov	r2, r3
 8100bee:	f005 fac5 	bl	810617c <memcpy>
		sprintf (localbuf, "<div class=\"c2\">%d</div>", soil);
 8100bf2:	f897 28d7 	ldrb.w	r2, [r7, #2263]	; 0x8d7
 8100bf6:	f107 030c 	add.w	r3, r7, #12
 8100bfa:	4921      	ldr	r1, [pc, #132]	; (8100c80 <Server_Handle+0x450>)
 8100bfc:	4618      	mov	r0, r3
 8100bfe:	f005 fad3 	bl	81061a8 <siprintf>
		strcat (datatosend, localbuf);
 8100c02:	f107 020c 	add.w	r2, r7, #12
 8100c06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c0a:	4611      	mov	r1, r2
 8100c0c:	4618      	mov	r0, r3
 8100c0e:	f005 faeb 	bl	81061e8 <strcat>
		strcat (datatosend, "</div></body></html>");
 8100c12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c16:	4618      	mov	r0, r3
 8100c18:	f7ff fb6c 	bl	81002f4 <strlen>
 8100c1c:	4603      	mov	r3, r0
 8100c1e:	461a      	mov	r2, r3
 8100c20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c24:	4413      	add	r3, r2
 8100c26:	4a1b      	ldr	r2, [pc, #108]	; (8100c94 <Server_Handle+0x464>)
 8100c28:	461d      	mov	r5, r3
 8100c2a:	4614      	mov	r4, r2
 8100c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100c2e:	6028      	str	r0, [r5, #0]
 8100c30:	6069      	str	r1, [r5, #4]
 8100c32:	60aa      	str	r2, [r5, #8]
 8100c34:	60eb      	str	r3, [r5, #12]
 8100c36:	6820      	ldr	r0, [r4, #0]
 8100c38:	6128      	str	r0, [r5, #16]
 8100c3a:	7923      	ldrb	r3, [r4, #4]
 8100c3c:	752b      	strb	r3, [r5, #20]

		Server_Send(datatosend, Link_ID);
 8100c3e:	463b      	mov	r3, r7
 8100c40:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8100c44:	6819      	ldr	r1, [r3, #0]
 8100c46:	4610      	mov	r0, r2
 8100c48:	f7ff fda2 	bl	8100790 <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 8100c4c:	e00e      	b.n	8100c6c <Server_Handle+0x43c>
		sprintf (datatosend, home);
 8100c4e:	4b12      	ldr	r3, [pc, #72]	; (8100c98 <Server_Handle+0x468>)
 8100c50:	681a      	ldr	r2, [r3, #0]
 8100c52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c56:	4611      	mov	r1, r2
 8100c58:	4618      	mov	r0, r3
 8100c5a:	f005 faa5 	bl	81061a8 <siprintf>
		Server_Send(datatosend, Link_ID);
 8100c5e:	463b      	mov	r3, r7
 8100c60:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8100c64:	6819      	ldr	r1, [r3, #0]
 8100c66:	4610      	mov	r0, r2
 8100c68:	f7ff fd92 	bl	8100790 <Server_Send>
}
 8100c6c:	bf00      	nop
 8100c6e:	f607 07e4 	addw	r7, r7, #2276	; 0x8e4
 8100c72:	46bd      	mov	sp, r7
 8100c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8100c76:	bf00      	nop
 8100c78:	08106fac 	.word	0x08106fac
 8100c7c:	08106fd8 	.word	0x08106fd8
 8100c80:	08107040 	.word	0x08107040
 8100c84:	0810705c 	.word	0x0810705c
 8100c88:	081070a0 	.word	0x081070a0
 8100c8c:	081070e4 	.word	0x081070e4
 8100c90:	0810710c 	.word	0x0810710c
 8100c94:	08107150 	.word	0x08107150
 8100c98:	10000008 	.word	0x10000008

08100c9c <Server_Start>:

void Server_Start (void)
{
 8100c9c:	b580      	push	{r7, lr}
 8100c9e:	b0a2      	sub	sp, #136	; 0x88
 8100ca0:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 8100ca2:	2300      	movs	r3, #0
 8100ca4:	60bb      	str	r3, [r7, #8]
 8100ca6:	f107 030c 	add.w	r3, r7, #12
 8100caa:	227c      	movs	r2, #124	; 0x7c
 8100cac:	2100      	movs	r1, #0
 8100cae:	4618      	mov	r0, r3
 8100cb0:	f005 fa72 	bl	8106198 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8100cb4:	bf00      	nop
 8100cb6:	1dfa      	adds	r2, r7, #7
 8100cb8:	4b1b      	ldr	r3, [pc, #108]	; (8100d28 <Server_Start+0x8c>)
 8100cba:	2101      	movs	r1, #1
 8100cbc:	481b      	ldr	r0, [pc, #108]	; (8100d2c <Server_Start+0x90>)
 8100cbe:	f000 f9cb 	bl	8101058 <Get_after>
 8100cc2:	4603      	mov	r3, r0
 8100cc4:	2b00      	cmp	r3, #0
 8100cc6:	d0f6      	beq.n	8100cb6 <Server_Start+0x1a>

	Link_ID -= 48;
 8100cc8:	79fb      	ldrb	r3, [r7, #7]
 8100cca:	3b30      	subs	r3, #48	; 0x30
 8100ccc:	b2db      	uxtb	r3, r3
 8100cce:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader,wifi_uart)));
 8100cd0:	bf00      	nop
 8100cd2:	f107 0308 	add.w	r3, r7, #8
 8100cd6:	4a14      	ldr	r2, [pc, #80]	; (8100d28 <Server_Start+0x8c>)
 8100cd8:	4619      	mov	r1, r3
 8100cda:	4815      	ldr	r0, [pc, #84]	; (8100d30 <Server_Start+0x94>)
 8100cdc:	f000 fa02 	bl	81010e4 <Copy_upto>
 8100ce0:	4603      	mov	r3, r0
 8100ce2:	2b00      	cmp	r3, #0
 8100ce4:	d0f5      	beq.n	8100cd2 <Server_Start+0x36>
	if (Look_for("/farm", buftostoreheader) == 1)
 8100ce6:	f107 0308 	add.w	r3, r7, #8
 8100cea:	4619      	mov	r1, r3
 8100cec:	4811      	ldr	r0, [pc, #68]	; (8100d34 <Server_Start+0x98>)
 8100cee:	f000 f880 	bl	8100df2 <Look_for>
 8100cf2:	4603      	mov	r3, r0
 8100cf4:	2b01      	cmp	r3, #1
 8100cf6:	d105      	bne.n	8100d04 <Server_Start+0x68>
	{
		Server_Handle("/farm",Link_ID);
 8100cf8:	79fb      	ldrb	r3, [r7, #7]
 8100cfa:	4619      	mov	r1, r3
 8100cfc:	480d      	ldr	r0, [pc, #52]	; (8100d34 <Server_Start+0x98>)
 8100cfe:	f7ff fd97 	bl	8100830 <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 8100d02:	e00d      	b.n	8100d20 <Server_Start+0x84>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8100d04:	f107 0308 	add.w	r3, r7, #8
 8100d08:	4619      	mov	r1, r3
 8100d0a:	480b      	ldr	r0, [pc, #44]	; (8100d38 <Server_Start+0x9c>)
 8100d0c:	f000 f871 	bl	8100df2 <Look_for>
 8100d10:	4603      	mov	r3, r0
 8100d12:	2b01      	cmp	r3, #1
 8100d14:	d004      	beq.n	8100d20 <Server_Start+0x84>
		Server_Handle("/ ", Link_ID);
 8100d16:	79fb      	ldrb	r3, [r7, #7]
 8100d18:	4619      	mov	r1, r3
 8100d1a:	4808      	ldr	r0, [pc, #32]	; (8100d3c <Server_Start+0xa0>)
 8100d1c:	f7ff fd88 	bl	8100830 <Server_Handle>
}
 8100d20:	bf00      	nop
 8100d22:	3788      	adds	r7, #136	; 0x88
 8100d24:	46bd      	mov	sp, r7
 8100d26:	bd80      	pop	{r7, pc}
 8100d28:	100008d4 	.word	0x100008d4
 8100d2c:	08107168 	.word	0x08107168
 8100d30:	08107170 	.word	0x08107170
 8100d34:	08106ee4 	.word	0x08106ee4
 8100d38:	0810717c 	.word	0x0810717c
 8100d3c:	0810718c 	.word	0x0810718c

08100d40 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8100d40:	b480      	push	{r7}
 8100d42:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8100d44:	4b10      	ldr	r3, [pc, #64]	; (8100d88 <Ringbuf_init+0x48>)
 8100d46:	4a11      	ldr	r2, [pc, #68]	; (8100d8c <Ringbuf_init+0x4c>)
 8100d48:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8100d4a:	4b11      	ldr	r3, [pc, #68]	; (8100d90 <Ringbuf_init+0x50>)
 8100d4c:	4a11      	ldr	r2, [pc, #68]	; (8100d94 <Ringbuf_init+0x54>)
 8100d4e:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8100d50:	4b11      	ldr	r3, [pc, #68]	; (8100d98 <Ringbuf_init+0x58>)
 8100d52:	4a12      	ldr	r2, [pc, #72]	; (8100d9c <Ringbuf_init+0x5c>)
 8100d54:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8100d56:	4b12      	ldr	r3, [pc, #72]	; (8100da0 <Ringbuf_init+0x60>)
 8100d58:	4a12      	ldr	r2, [pc, #72]	; (8100da4 <Ringbuf_init+0x64>)
 8100d5a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8100d5c:	4b12      	ldr	r3, [pc, #72]	; (8100da8 <Ringbuf_init+0x68>)
 8100d5e:	681b      	ldr	r3, [r3, #0]
 8100d60:	689a      	ldr	r2, [r3, #8]
 8100d62:	4b11      	ldr	r3, [pc, #68]	; (8100da8 <Ringbuf_init+0x68>)
 8100d64:	681b      	ldr	r3, [r3, #0]
 8100d66:	f042 0201 	orr.w	r2, r2, #1
 8100d6a:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8100d6c:	4b0e      	ldr	r3, [pc, #56]	; (8100da8 <Ringbuf_init+0x68>)
 8100d6e:	681b      	ldr	r3, [r3, #0]
 8100d70:	681a      	ldr	r2, [r3, #0]
 8100d72:	4b0d      	ldr	r3, [pc, #52]	; (8100da8 <Ringbuf_init+0x68>)
 8100d74:	681b      	ldr	r3, [r3, #0]
 8100d76:	f042 0220 	orr.w	r2, r2, #32
 8100d7a:	601a      	str	r2, [r3, #0]


}
 8100d7c:	bf00      	nop
 8100d7e:	46bd      	mov	sp, r7
 8100d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d84:	4770      	bx	lr
 8100d86:	bf00      	nop
 8100d88:	100008c8 	.word	0x100008c8
 8100d8c:	10000098 	.word	0x10000098
 8100d90:	100008cc 	.word	0x100008cc
 8100d94:	100002a0 	.word	0x100002a0
 8100d98:	100008d0 	.word	0x100008d0
 8100d9c:	100004a8 	.word	0x100004a8
 8100da0:	100008c4 	.word	0x100008c4
 8100da4:	100006b0 	.word	0x100006b0
 8100da8:	100008d4 	.word	0x100008d4

08100dac <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8100dac:	b480      	push	{r7}
 8100dae:	b085      	sub	sp, #20
 8100db0:	af00      	add	r7, sp, #0
 8100db2:	4603      	mov	r3, r0
 8100db4:	6039      	str	r1, [r7, #0]
 8100db6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8100db8:	683b      	ldr	r3, [r7, #0]
 8100dba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100dbe:	3301      	adds	r3, #1
 8100dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100dc4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8100dc6:	683b      	ldr	r3, [r7, #0]
 8100dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8100dcc:	68fb      	ldr	r3, [r7, #12]
 8100dce:	429a      	cmp	r2, r3
 8100dd0:	d009      	beq.n	8100de6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8100dd2:	683b      	ldr	r3, [r7, #0]
 8100dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100dd8:	683a      	ldr	r2, [r7, #0]
 8100dda:	79f9      	ldrb	r1, [r7, #7]
 8100ddc:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8100dde:	68fa      	ldr	r2, [r7, #12]
 8100de0:	683b      	ldr	r3, [r7, #0]
 8100de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8100de6:	bf00      	nop
 8100de8:	3714      	adds	r7, #20
 8100dea:	46bd      	mov	sp, r7
 8100dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100df0:	4770      	bx	lr

08100df2 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8100df2:	b580      	push	{r7, lr}
 8100df4:	b086      	sub	sp, #24
 8100df6:	af00      	add	r7, sp, #0
 8100df8:	6078      	str	r0, [r7, #4]
 8100dfa:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8100dfc:	6878      	ldr	r0, [r7, #4]
 8100dfe:	f7ff fa79 	bl	81002f4 <strlen>
 8100e02:	4603      	mov	r3, r0
 8100e04:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8100e06:	6838      	ldr	r0, [r7, #0]
 8100e08:	f7ff fa74 	bl	81002f4 <strlen>
 8100e0c:	4603      	mov	r3, r0
 8100e0e:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8100e10:	2300      	movs	r3, #0
 8100e12:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8100e14:	2300      	movs	r3, #0
 8100e16:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8100e18:	e002      	b.n	8100e20 <Look_for+0x2e>
 8100e1a:	693b      	ldr	r3, [r7, #16]
 8100e1c:	3301      	adds	r3, #1
 8100e1e:	613b      	str	r3, [r7, #16]
 8100e20:	697b      	ldr	r3, [r7, #20]
 8100e22:	687a      	ldr	r2, [r7, #4]
 8100e24:	4413      	add	r3, r2
 8100e26:	781a      	ldrb	r2, [r3, #0]
 8100e28:	693b      	ldr	r3, [r7, #16]
 8100e2a:	6839      	ldr	r1, [r7, #0]
 8100e2c:	440b      	add	r3, r1
 8100e2e:	781b      	ldrb	r3, [r3, #0]
 8100e30:	429a      	cmp	r2, r3
 8100e32:	d1f2      	bne.n	8100e1a <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8100e34:	697b      	ldr	r3, [r7, #20]
 8100e36:	687a      	ldr	r2, [r7, #4]
 8100e38:	4413      	add	r3, r2
 8100e3a:	781a      	ldrb	r2, [r3, #0]
 8100e3c:	693b      	ldr	r3, [r7, #16]
 8100e3e:	6839      	ldr	r1, [r7, #0]
 8100e40:	440b      	add	r3, r1
 8100e42:	781b      	ldrb	r3, [r3, #0]
 8100e44:	429a      	cmp	r2, r3
 8100e46:	d111      	bne.n	8100e6c <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8100e48:	e005      	b.n	8100e56 <Look_for+0x64>
	{
		so_far++;
 8100e4a:	697b      	ldr	r3, [r7, #20]
 8100e4c:	3301      	adds	r3, #1
 8100e4e:	617b      	str	r3, [r7, #20]
		indx++;
 8100e50:	693b      	ldr	r3, [r7, #16]
 8100e52:	3301      	adds	r3, #1
 8100e54:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8100e56:	697b      	ldr	r3, [r7, #20]
 8100e58:	687a      	ldr	r2, [r7, #4]
 8100e5a:	4413      	add	r3, r2
 8100e5c:	781a      	ldrb	r2, [r3, #0]
 8100e5e:	693b      	ldr	r3, [r7, #16]
 8100e60:	6839      	ldr	r1, [r7, #0]
 8100e62:	440b      	add	r3, r1
 8100e64:	781b      	ldrb	r3, [r3, #0]
 8100e66:	429a      	cmp	r2, r3
 8100e68:	d0ef      	beq.n	8100e4a <Look_for+0x58>
 8100e6a:	e008      	b.n	8100e7e <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8100e6c:	2300      	movs	r3, #0
 8100e6e:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8100e70:	693a      	ldr	r2, [r7, #16]
 8100e72:	68bb      	ldr	r3, [r7, #8]
 8100e74:	429a      	cmp	r2, r3
 8100e76:	dbcf      	blt.n	8100e18 <Look_for+0x26>
 8100e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100e7c:	e007      	b.n	8100e8e <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8100e7e:	697a      	ldr	r2, [r7, #20]
 8100e80:	68fb      	ldr	r3, [r7, #12]
 8100e82:	429a      	cmp	r2, r3
 8100e84:	d101      	bne.n	8100e8a <Look_for+0x98>
 8100e86:	2301      	movs	r3, #1
 8100e88:	e001      	b.n	8100e8e <Look_for+0x9c>
	else return -1;
 8100e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100e8e:	4618      	mov	r0, r3
 8100e90:	3718      	adds	r7, #24
 8100e92:	46bd      	mov	sp, r7
 8100e94:	bd80      	pop	{r7, pc}
	...

08100e98 <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 8100e98:	b580      	push	{r7, lr}
 8100e9a:	b082      	sub	sp, #8
 8100e9c:	af00      	add	r7, sp, #0
 8100e9e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	4a0a      	ldr	r2, [pc, #40]	; (8100ecc <Uart_flush+0x34>)
 8100ea4:	4293      	cmp	r3, r2
 8100ea6:	d10c      	bne.n	8100ec2 <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8100ea8:	4b09      	ldr	r3, [pc, #36]	; (8100ed0 <Uart_flush+0x38>)
 8100eaa:	681b      	ldr	r3, [r3, #0]
 8100eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100eb0:	2100      	movs	r1, #0
 8100eb2:	4618      	mov	r0, r3
 8100eb4:	f005 f970 	bl	8106198 <memset>
		_rx_buffer1->head = 0;
 8100eb8:	4b05      	ldr	r3, [pc, #20]	; (8100ed0 <Uart_flush+0x38>)
 8100eba:	681b      	ldr	r3, [r3, #0]
 8100ebc:	2200      	movs	r2, #0
 8100ebe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

}
 8100ec2:	bf00      	nop
 8100ec4:	3708      	adds	r7, #8
 8100ec6:	46bd      	mov	sp, r7
 8100ec8:	bd80      	pop	{r7, pc}
 8100eca:	bf00      	nop
 8100ecc:	100008d4 	.word	0x100008d4
 8100ed0:	100008c8 	.word	0x100008c8

08100ed4 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8100ed4:	b480      	push	{r7}
 8100ed6:	b083      	sub	sp, #12
 8100ed8:	af00      	add	r7, sp, #0
 8100eda:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8100edc:	687b      	ldr	r3, [r7, #4]
 8100ede:	4a10      	ldr	r2, [pc, #64]	; (8100f20 <Uart_peek+0x4c>)
 8100ee0:	4293      	cmp	r3, r2
 8100ee2:	d114      	bne.n	8100f0e <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8100ee4:	4b0f      	ldr	r3, [pc, #60]	; (8100f24 <Uart_peek+0x50>)
 8100ee6:	681b      	ldr	r3, [r3, #0]
 8100ee8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8100eec:	4b0d      	ldr	r3, [pc, #52]	; (8100f24 <Uart_peek+0x50>)
 8100eee:	681b      	ldr	r3, [r3, #0]
 8100ef0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100ef4:	429a      	cmp	r2, r3
 8100ef6:	d102      	bne.n	8100efe <Uart_peek+0x2a>
		  {
		    return -1;
 8100ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100efc:	e009      	b.n	8100f12 <Uart_peek+0x3e>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8100efe:	4b09      	ldr	r3, [pc, #36]	; (8100f24 <Uart_peek+0x50>)
 8100f00:	681a      	ldr	r2, [r3, #0]
 8100f02:	4b08      	ldr	r3, [pc, #32]	; (8100f24 <Uart_peek+0x50>)
 8100f04:	681b      	ldr	r3, [r3, #0]
 8100f06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100f0a:	5cd3      	ldrb	r3, [r2, r3]
 8100f0c:	e001      	b.n	8100f12 <Uart_peek+0x3e>
		  }
	}


	return -1;
 8100f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100f12:	4618      	mov	r0, r3
 8100f14:	370c      	adds	r7, #12
 8100f16:	46bd      	mov	sp, r7
 8100f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f1c:	4770      	bx	lr
 8100f1e:	bf00      	nop
 8100f20:	100008d4 	.word	0x100008d4
 8100f24:	100008c8 	.word	0x100008c8

08100f28 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8100f28:	b480      	push	{r7}
 8100f2a:	b085      	sub	sp, #20
 8100f2c:	af00      	add	r7, sp, #0
 8100f2e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	4a16      	ldr	r2, [pc, #88]	; (8100f8c <Uart_read+0x64>)
 8100f34:	4293      	cmp	r3, r2
 8100f36:	d121      	bne.n	8100f7c <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8100f38:	4b15      	ldr	r3, [pc, #84]	; (8100f90 <Uart_read+0x68>)
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8100f40:	4b13      	ldr	r3, [pc, #76]	; (8100f90 <Uart_read+0x68>)
 8100f42:	681b      	ldr	r3, [r3, #0]
 8100f44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100f48:	429a      	cmp	r2, r3
 8100f4a:	d102      	bne.n	8100f52 <Uart_read+0x2a>
		  {
		    return -1;
 8100f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100f50:	e016      	b.n	8100f80 <Uart_read+0x58>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8100f52:	4b0f      	ldr	r3, [pc, #60]	; (8100f90 <Uart_read+0x68>)
 8100f54:	681a      	ldr	r2, [r3, #0]
 8100f56:	4b0e      	ldr	r3, [pc, #56]	; (8100f90 <Uart_read+0x68>)
 8100f58:	681b      	ldr	r3, [r3, #0]
 8100f5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100f5e:	5cd3      	ldrb	r3, [r2, r3]
 8100f60:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8100f62:	4b0b      	ldr	r3, [pc, #44]	; (8100f90 <Uart_read+0x68>)
 8100f64:	681b      	ldr	r3, [r3, #0]
 8100f66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8100f6a:	1c5a      	adds	r2, r3, #1
 8100f6c:	4b08      	ldr	r3, [pc, #32]	; (8100f90 <Uart_read+0x68>)
 8100f6e:	681b      	ldr	r3, [r3, #0]
 8100f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8100f74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8100f78:	7bfb      	ldrb	r3, [r7, #15]
 8100f7a:	e001      	b.n	8100f80 <Uart_read+0x58>
		  }
	}
	else return -1;
 8100f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8100f80:	4618      	mov	r0, r3
 8100f82:	3714      	adds	r7, #20
 8100f84:	46bd      	mov	sp, r7
 8100f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f8a:	4770      	bx	lr
 8100f8c:	100008d4 	.word	0x100008d4
 8100f90:	100008c8 	.word	0x100008c8

08100f94 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8100f94:	b480      	push	{r7}
 8100f96:	b085      	sub	sp, #20
 8100f98:	af00      	add	r7, sp, #0
 8100f9a:	6078      	str	r0, [r7, #4]
 8100f9c:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8100f9e:	687b      	ldr	r3, [r7, #4]
 8100fa0:	2b00      	cmp	r3, #0
 8100fa2:	db29      	blt.n	8100ff8 <Uart_write+0x64>
	{
		if (uart == device_uart){
 8100fa4:	683b      	ldr	r3, [r7, #0]
 8100fa6:	4a17      	ldr	r2, [pc, #92]	; (8101004 <Uart_write+0x70>)
 8100fa8:	4293      	cmp	r3, r2
 8100faa:	d125      	bne.n	8100ff8 <Uart_write+0x64>
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8100fac:	4b16      	ldr	r3, [pc, #88]	; (8101008 <Uart_write+0x74>)
 8100fae:	681b      	ldr	r3, [r3, #0]
 8100fb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100fb4:	3301      	adds	r3, #1
 8100fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fba:	60fb      	str	r3, [r7, #12]

			// If the output buffer is full, there's nothing for it other than to
			// wait for the interrupt handler to empty it a bit
			// ???: return 0 here instead?
			while (i == _tx_buffer1->tail);
 8100fbc:	bf00      	nop
 8100fbe:	4b12      	ldr	r3, [pc, #72]	; (8101008 <Uart_write+0x74>)
 8100fc0:	681b      	ldr	r3, [r3, #0]
 8100fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8100fc6:	68fb      	ldr	r3, [r7, #12]
 8100fc8:	429a      	cmp	r2, r3
 8100fca:	d0f8      	beq.n	8100fbe <Uart_write+0x2a>

			_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8100fcc:	4b0e      	ldr	r3, [pc, #56]	; (8101008 <Uart_write+0x74>)
 8100fce:	681a      	ldr	r2, [r3, #0]
 8100fd0:	4b0d      	ldr	r3, [pc, #52]	; (8101008 <Uart_write+0x74>)
 8100fd2:	681b      	ldr	r3, [r3, #0]
 8100fd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8100fd8:	6879      	ldr	r1, [r7, #4]
 8100fda:	b2c9      	uxtb	r1, r1
 8100fdc:	54d1      	strb	r1, [r2, r3]
			_tx_buffer1->head = i;
 8100fde:	4b0a      	ldr	r3, [pc, #40]	; (8101008 <Uart_write+0x74>)
 8100fe0:	681b      	ldr	r3, [r3, #0]
 8100fe2:	68fa      	ldr	r2, [r7, #12]
 8100fe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

			__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8100fe8:	4b06      	ldr	r3, [pc, #24]	; (8101004 <Uart_write+0x70>)
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	681a      	ldr	r2, [r3, #0]
 8100fee:	4b05      	ldr	r3, [pc, #20]	; (8101004 <Uart_write+0x70>)
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8100ff6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8100ff8:	bf00      	nop
 8100ffa:	3714      	adds	r7, #20
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101002:	4770      	bx	lr
 8101004:	100008d4 	.word	0x100008d4
 8101008:	100008cc 	.word	0x100008cc

0810100c <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 810100c:	b480      	push	{r7}
 810100e:	b083      	sub	sp, #12
 8101010:	af00      	add	r7, sp, #0
 8101012:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8101014:	687b      	ldr	r3, [r7, #4]
 8101016:	4a0e      	ldr	r2, [pc, #56]	; (8101050 <IsDataAvailable+0x44>)
 8101018:	4293      	cmp	r3, r2
 810101a:	d111      	bne.n	8101040 <IsDataAvailable+0x34>
 810101c:	4b0d      	ldr	r3, [pc, #52]	; (8101054 <IsDataAvailable+0x48>)
 810101e:	681b      	ldr	r3, [r3, #0]
 8101020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8101024:	b29a      	uxth	r2, r3
 8101026:	4b0b      	ldr	r3, [pc, #44]	; (8101054 <IsDataAvailable+0x48>)
 8101028:	681b      	ldr	r3, [r3, #0]
 810102a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810102e:	b29b      	uxth	r3, r3
 8101030:	1ad3      	subs	r3, r2, r3
 8101032:	b29b      	uxth	r3, r3
 8101034:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8101038:	b29b      	uxth	r3, r3
 810103a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810103e:	e001      	b.n	8101044 <IsDataAvailable+0x38>
	return -1;
 8101040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101044:	4618      	mov	r0, r3
 8101046:	370c      	adds	r7, #12
 8101048:	46bd      	mov	sp, r7
 810104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810104e:	4770      	bx	lr
 8101050:	100008d4 	.word	0x100008d4
 8101054:	100008c8 	.word	0x100008c8

08101058 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8101058:	b580      	push	{r7, lr}
 810105a:	b086      	sub	sp, #24
 810105c:	af00      	add	r7, sp, #0
 810105e:	60f8      	str	r0, [r7, #12]
 8101060:	607a      	str	r2, [r7, #4]
 8101062:	603b      	str	r3, [r7, #0]
 8101064:	460b      	mov	r3, r1
 8101066:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8101068:	bf00      	nop
 810106a:	6839      	ldr	r1, [r7, #0]
 810106c:	68f8      	ldr	r0, [r7, #12]
 810106e:	f000 f8b7 	bl	81011e0 <Wait_for>
 8101072:	4603      	mov	r3, r0
 8101074:	2b01      	cmp	r3, #1
 8101076:	d1f8      	bne.n	810106a <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8101078:	2300      	movs	r3, #0
 810107a:	617b      	str	r3, [r7, #20]
 810107c:	e012      	b.n	81010a4 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 810107e:	bf00      	nop
 8101080:	6838      	ldr	r0, [r7, #0]
 8101082:	f7ff ffc3 	bl	810100c <IsDataAvailable>
 8101086:	4603      	mov	r3, r0
 8101088:	2b00      	cmp	r3, #0
 810108a:	d0f9      	beq.n	8101080 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 810108c:	6838      	ldr	r0, [r7, #0]
 810108e:	f7ff ff4b 	bl	8100f28 <Uart_read>
 8101092:	4601      	mov	r1, r0
 8101094:	697b      	ldr	r3, [r7, #20]
 8101096:	687a      	ldr	r2, [r7, #4]
 8101098:	4413      	add	r3, r2
 810109a:	b2ca      	uxtb	r2, r1
 810109c:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 810109e:	697b      	ldr	r3, [r7, #20]
 81010a0:	3301      	adds	r3, #1
 81010a2:	617b      	str	r3, [r7, #20]
 81010a4:	7afb      	ldrb	r3, [r7, #11]
 81010a6:	697a      	ldr	r2, [r7, #20]
 81010a8:	429a      	cmp	r2, r3
 81010aa:	dbe8      	blt.n	810107e <Get_after+0x26>
	}
	return 1;
 81010ac:	2301      	movs	r3, #1
}
 81010ae:	4618      	mov	r0, r3
 81010b0:	3718      	adds	r7, #24
 81010b2:	46bd      	mov	sp, r7
 81010b4:	bd80      	pop	{r7, pc}

081010b6 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 81010b6:	b580      	push	{r7, lr}
 81010b8:	b082      	sub	sp, #8
 81010ba:	af00      	add	r7, sp, #0
 81010bc:	6078      	str	r0, [r7, #4]
 81010be:	6039      	str	r1, [r7, #0]
	//HAL_UART_Transmit(uart, (uint8_t*)"~5~v296", 7, 0xffff);
	while(*s!='\0') Uart_write(*s++, uart);
 81010c0:	e007      	b.n	81010d2 <Uart_sendstring+0x1c>
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	1c5a      	adds	r2, r3, #1
 81010c6:	607a      	str	r2, [r7, #4]
 81010c8:	781b      	ldrb	r3, [r3, #0]
 81010ca:	6839      	ldr	r1, [r7, #0]
 81010cc:	4618      	mov	r0, r3
 81010ce:	f7ff ff61 	bl	8100f94 <Uart_write>
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	781b      	ldrb	r3, [r3, #0]
 81010d6:	2b00      	cmp	r3, #0
 81010d8:	d1f3      	bne.n	81010c2 <Uart_sendstring+0xc>
	//HAL_UART_Transmit(uart, (uint8_t*)"~3~v298", 7, 0xffff);
}
 81010da:	bf00      	nop
 81010dc:	bf00      	nop
 81010de:	3708      	adds	r7, #8
 81010e0:	46bd      	mov	sp, r7
 81010e2:	bd80      	pop	{r7, pc}

081010e4 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 81010e4:	b580      	push	{r7, lr}
 81010e6:	b088      	sub	sp, #32
 81010e8:	af00      	add	r7, sp, #0
 81010ea:	60f8      	str	r0, [r7, #12]
 81010ec:	60b9      	str	r1, [r7, #8]
 81010ee:	607a      	str	r2, [r7, #4]
	int so_far =0;
 81010f0:	2300      	movs	r3, #0
 81010f2:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 81010f4:	68f8      	ldr	r0, [r7, #12]
 81010f6:	f7ff f8fd 	bl	81002f4 <strlen>
 81010fa:	4603      	mov	r3, r0
 81010fc:	617b      	str	r3, [r7, #20]
	int indx = 0;
 81010fe:	2300      	movs	r3, #0
 8101100:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8101102:	bf00      	nop
 8101104:	6878      	ldr	r0, [r7, #4]
 8101106:	f7ff ff81 	bl	810100c <IsDataAvailable>
 810110a:	4603      	mov	r3, r0
 810110c:	2b00      	cmp	r3, #0
 810110e:	d0f9      	beq.n	8101104 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8101110:	e01f      	b.n	8101152 <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8101112:	4b32      	ldr	r3, [pc, #200]	; (81011dc <Copy_upto+0xf8>)
 8101114:	6819      	ldr	r1, [r3, #0]
 8101116:	4b31      	ldr	r3, [pc, #196]	; (81011dc <Copy_upto+0xf8>)
 8101118:	681b      	ldr	r3, [r3, #0]
 810111a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 810111e:	69bb      	ldr	r3, [r7, #24]
 8101120:	68b8      	ldr	r0, [r7, #8]
 8101122:	4403      	add	r3, r0
 8101124:	5c8a      	ldrb	r2, [r1, r2]
 8101126:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8101128:	4b2c      	ldr	r3, [pc, #176]	; (81011dc <Copy_upto+0xf8>)
 810112a:	681b      	ldr	r3, [r3, #0]
 810112c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8101130:	1c5a      	adds	r2, r3, #1
 8101132:	4b2a      	ldr	r3, [pc, #168]	; (81011dc <Copy_upto+0xf8>)
 8101134:	681b      	ldr	r3, [r3, #0]
 8101136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810113a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 810113e:	69bb      	ldr	r3, [r7, #24]
 8101140:	3301      	adds	r3, #1
 8101142:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8101144:	bf00      	nop
 8101146:	6878      	ldr	r0, [r7, #4]
 8101148:	f7ff ff60 	bl	810100c <IsDataAvailable>
 810114c:	4603      	mov	r3, r0
 810114e:	2b00      	cmp	r3, #0
 8101150:	d0f9      	beq.n	8101146 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8101152:	6878      	ldr	r0, [r7, #4]
 8101154:	f7ff febe 	bl	8100ed4 <Uart_peek>
 8101158:	4601      	mov	r1, r0
 810115a:	69fb      	ldr	r3, [r7, #28]
 810115c:	68fa      	ldr	r2, [r7, #12]
 810115e:	4413      	add	r3, r2
 8101160:	781b      	ldrb	r3, [r3, #0]
 8101162:	4299      	cmp	r1, r3
 8101164:	d1d5      	bne.n	8101112 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8101166:	e01b      	b.n	81011a0 <Copy_upto+0xbc>
	{
		so_far++;
 8101168:	69fb      	ldr	r3, [r7, #28]
 810116a:	3301      	adds	r3, #1
 810116c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 810116e:	6878      	ldr	r0, [r7, #4]
 8101170:	f7ff feda 	bl	8100f28 <Uart_read>
 8101174:	4601      	mov	r1, r0
 8101176:	69bb      	ldr	r3, [r7, #24]
 8101178:	1c5a      	adds	r2, r3, #1
 810117a:	61ba      	str	r2, [r7, #24]
 810117c:	461a      	mov	r2, r3
 810117e:	68bb      	ldr	r3, [r7, #8]
 8101180:	4413      	add	r3, r2
 8101182:	b2ca      	uxtb	r2, r1
 8101184:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8101186:	69fa      	ldr	r2, [r7, #28]
 8101188:	697b      	ldr	r3, [r7, #20]
 810118a:	429a      	cmp	r2, r3
 810118c:	d101      	bne.n	8101192 <Copy_upto+0xae>
 810118e:	2301      	movs	r3, #1
 8101190:	e01f      	b.n	81011d2 <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8101192:	bf00      	nop
 8101194:	6878      	ldr	r0, [r7, #4]
 8101196:	f7ff ff39 	bl	810100c <IsDataAvailable>
 810119a:	4603      	mov	r3, r0
 810119c:	2b00      	cmp	r3, #0
 810119e:	d0f9      	beq.n	8101194 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 81011a0:	6878      	ldr	r0, [r7, #4]
 81011a2:	f7ff fe97 	bl	8100ed4 <Uart_peek>
 81011a6:	4601      	mov	r1, r0
 81011a8:	69fb      	ldr	r3, [r7, #28]
 81011aa:	68fa      	ldr	r2, [r7, #12]
 81011ac:	4413      	add	r3, r2
 81011ae:	781b      	ldrb	r3, [r3, #0]
 81011b0:	4299      	cmp	r1, r3
 81011b2:	d0d9      	beq.n	8101168 <Copy_upto+0x84>
	}

	if (so_far != len)
 81011b4:	69fa      	ldr	r2, [r7, #28]
 81011b6:	697b      	ldr	r3, [r7, #20]
 81011b8:	429a      	cmp	r2, r3
 81011ba:	d002      	beq.n	81011c2 <Copy_upto+0xde>
	{
		so_far = 0;
 81011bc:	2300      	movs	r3, #0
 81011be:	61fb      	str	r3, [r7, #28]
		goto again;
 81011c0:	e79f      	b.n	8101102 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 81011c2:	69fa      	ldr	r2, [r7, #28]
 81011c4:	697b      	ldr	r3, [r7, #20]
 81011c6:	429a      	cmp	r2, r3
 81011c8:	d101      	bne.n	81011ce <Copy_upto+0xea>
 81011ca:	2301      	movs	r3, #1
 81011cc:	e001      	b.n	81011d2 <Copy_upto+0xee>
	else return -1;
 81011ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 81011d2:	4618      	mov	r0, r3
 81011d4:	3720      	adds	r7, #32
 81011d6:	46bd      	mov	sp, r7
 81011d8:	bd80      	pop	{r7, pc}
 81011da:	bf00      	nop
 81011dc:	100008c8 	.word	0x100008c8

081011e0 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 81011e0:	b580      	push	{r7, lr}
 81011e2:	b084      	sub	sp, #16
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	6078      	str	r0, [r7, #4]
 81011e8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 81011ea:	2300      	movs	r3, #0
 81011ec:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 81011ee:	6878      	ldr	r0, [r7, #4]
 81011f0:	f7ff f880 	bl	81002f4 <strlen>
 81011f4:	4603      	mov	r3, r0
 81011f6:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 81011f8:	bf00      	nop
 81011fa:	6838      	ldr	r0, [r7, #0]
 81011fc:	f7ff ff06 	bl	810100c <IsDataAvailable>
 8101200:	4603      	mov	r3, r0
 8101202:	2b00      	cmp	r3, #0
 8101204:	d0f9      	beq.n	81011fa <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8101206:	6838      	ldr	r0, [r7, #0]
 8101208:	f7ff fe64 	bl	8100ed4 <Uart_peek>
 810120c:	4601      	mov	r1, r0
 810120e:	68fb      	ldr	r3, [r7, #12]
 8101210:	687a      	ldr	r2, [r7, #4]
 8101212:	4413      	add	r3, r2
 8101214:	781b      	ldrb	r3, [r3, #0]
 8101216:	4299      	cmp	r1, r3
 8101218:	d01e      	beq.n	8101258 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 810121a:	4b1e      	ldr	r3, [pc, #120]	; (8101294 <Wait_for+0xb4>)
 810121c:	681b      	ldr	r3, [r3, #0]
 810121e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8101222:	1c5a      	adds	r2, r3, #1
 8101224:	4b1b      	ldr	r3, [pc, #108]	; (8101294 <Wait_for+0xb4>)
 8101226:	681b      	ldr	r3, [r3, #0]
 8101228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810122c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8101230:	e7e2      	b.n	81011f8 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8101232:	68fb      	ldr	r3, [r7, #12]
 8101234:	3301      	adds	r3, #1
 8101236:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8101238:	6838      	ldr	r0, [r7, #0]
 810123a:	f7ff fe75 	bl	8100f28 <Uart_read>
		if (so_far == len) return 1;
 810123e:	68fa      	ldr	r2, [r7, #12]
 8101240:	68bb      	ldr	r3, [r7, #8]
 8101242:	429a      	cmp	r2, r3
 8101244:	d101      	bne.n	810124a <Wait_for+0x6a>
 8101246:	2301      	movs	r3, #1
 8101248:	e01f      	b.n	810128a <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 810124a:	bf00      	nop
 810124c:	6838      	ldr	r0, [r7, #0]
 810124e:	f7ff fedd 	bl	810100c <IsDataAvailable>
 8101252:	4603      	mov	r3, r0
 8101254:	2b00      	cmp	r3, #0
 8101256:	d0f9      	beq.n	810124c <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8101258:	6838      	ldr	r0, [r7, #0]
 810125a:	f7ff fe3b 	bl	8100ed4 <Uart_peek>
 810125e:	4601      	mov	r1, r0
 8101260:	68fb      	ldr	r3, [r7, #12]
 8101262:	687a      	ldr	r2, [r7, #4]
 8101264:	4413      	add	r3, r2
 8101266:	781b      	ldrb	r3, [r3, #0]
 8101268:	4299      	cmp	r1, r3
 810126a:	d0e2      	beq.n	8101232 <Wait_for+0x52>
	}

	if (so_far != len)
 810126c:	68fa      	ldr	r2, [r7, #12]
 810126e:	68bb      	ldr	r3, [r7, #8]
 8101270:	429a      	cmp	r2, r3
 8101272:	d002      	beq.n	810127a <Wait_for+0x9a>
	{
		so_far = 0;
 8101274:	2300      	movs	r3, #0
 8101276:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8101278:	e7be      	b.n	81011f8 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 810127a:	68fa      	ldr	r2, [r7, #12]
 810127c:	68bb      	ldr	r3, [r7, #8]
 810127e:	429a      	cmp	r2, r3
 8101280:	d101      	bne.n	8101286 <Wait_for+0xa6>
 8101282:	2301      	movs	r3, #1
 8101284:	e001      	b.n	810128a <Wait_for+0xaa>
	else return -1;
 8101286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 810128a:	4618      	mov	r0, r3
 810128c:	3710      	adds	r7, #16
 810128e:	46bd      	mov	sp, r7
 8101290:	bd80      	pop	{r7, pc}
 8101292:	bf00      	nop
 8101294:	100008c8 	.word	0x100008c8

08101298 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8101298:	b580      	push	{r7, lr}
 810129a:	b086      	sub	sp, #24
 810129c:	af00      	add	r7, sp, #0
 810129e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(huart, (uint8_t*)"~5~v393", 7, 0xffff);

	uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81012a0:	687b      	ldr	r3, [r7, #4]
 81012a2:	681b      	ldr	r3, [r3, #0]
 81012a4:	69db      	ldr	r3, [r3, #28]
 81012a6:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	681b      	ldr	r3, [r3, #0]
 81012ac:	681b      	ldr	r3, [r3, #0]
 81012ae:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET))
 81012b0:	697b      	ldr	r3, [r7, #20]
 81012b2:	f003 0320 	and.w	r3, r3, #32
 81012b6:	2b00      	cmp	r3, #0
 81012b8:	d017      	beq.n	81012ea <Uart_isr+0x52>
 81012ba:	693b      	ldr	r3, [r7, #16]
 81012bc:	f003 0320 	and.w	r3, r3, #32
 81012c0:	2b00      	cmp	r3, #0
 81012c2:	d012      	beq.n	81012ea <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	681b      	ldr	r3, [r3, #0]
 81012c8:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81012d0:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	4a23      	ldr	r2, [pc, #140]	; (8101364 <Uart_isr+0xcc>)
 81012d6:	4293      	cmp	r3, r2
 81012d8:	d13d      	bne.n	8101356 <Uart_isr+0xbe>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 81012da:	4b23      	ldr	r3, [pc, #140]	; (8101368 <Uart_isr+0xd0>)
 81012dc:	681a      	ldr	r2, [r3, #0]
 81012de:	7bfb      	ldrb	r3, [r7, #15]
 81012e0:	4611      	mov	r1, r2
 81012e2:	4618      	mov	r0, r3
 81012e4:	f7ff fd62 	bl	8100dac <store_char>
        }


        return;
 81012e8:	e035      	b.n	8101356 <Uart_isr+0xbe>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE_TXFNF) != RESET) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET))
 81012ea:	697b      	ldr	r3, [r7, #20]
 81012ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81012f0:	2b00      	cmp	r3, #0
 81012f2:	d033      	beq.n	810135c <Uart_isr+0xc4>
 81012f4:	693b      	ldr	r3, [r7, #16]
 81012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81012fa:	2b00      	cmp	r3, #0
 81012fc:	d02e      	beq.n	810135c <Uart_isr+0xc4>
    {
    	if (huart == device_uart){
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	4a18      	ldr	r2, [pc, #96]	; (8101364 <Uart_isr+0xcc>)
 8101302:	4293      	cmp	r3, r2
 8101304:	d129      	bne.n	810135a <Uart_isr+0xc2>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8101306:	4b19      	ldr	r3, [pc, #100]	; (810136c <Uart_isr+0xd4>)
 8101308:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 810130c:	4b17      	ldr	r3, [pc, #92]	; (810136c <Uart_isr+0xd4>)
 810130e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8101312:	429a      	cmp	r2, r3
 8101314:	d108      	bne.n	8101328 <Uart_isr+0x90>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	681b      	ldr	r3, [r3, #0]
 810131a:	681a      	ldr	r2, [r3, #0]
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8101324:	601a      	str	r2, [r3, #0]
    	      huart->Instance->TDR = c;

    	    }
    	}

    	return;
 8101326:	e018      	b.n	810135a <Uart_isr+0xc2>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8101328:	4b10      	ldr	r3, [pc, #64]	; (810136c <Uart_isr+0xd4>)
 810132a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810132e:	4a0f      	ldr	r2, [pc, #60]	; (810136c <Uart_isr+0xd4>)
 8101330:	5cd3      	ldrb	r3, [r2, r3]
 8101332:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8101334:	4b0d      	ldr	r3, [pc, #52]	; (810136c <Uart_isr+0xd4>)
 8101336:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 810133a:	3301      	adds	r3, #1
 810133c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101340:	4a0a      	ldr	r2, [pc, #40]	; (810136c <Uart_isr+0xd4>)
 8101342:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->ISR;
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	681b      	ldr	r3, [r3, #0]
 810134a:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	681b      	ldr	r3, [r3, #0]
 8101350:	7bba      	ldrb	r2, [r7, #14]
 8101352:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8101354:	e001      	b.n	810135a <Uart_isr+0xc2>
        return;
 8101356:	bf00      	nop
 8101358:	e000      	b.n	810135c <Uart_isr+0xc4>
    	return;
 810135a:	bf00      	nop
    }
}
 810135c:	3718      	adds	r7, #24
 810135e:	46bd      	mov	sp, r7
 8101360:	bd80      	pop	{r7, pc}
 8101362:	bf00      	nop
 8101364:	100008d4 	.word	0x100008d4
 8101368:	100008c8 	.word	0x100008c8
 810136c:	100002a0 	.word	0x100002a0

08101370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101370:	b580      	push	{r7, lr}
 8101372:	b088      	sub	sp, #32
 8101374:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101376:	4b2d      	ldr	r3, [pc, #180]	; (810142c <main+0xbc>)
 8101378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810137c:	4a2b      	ldr	r2, [pc, #172]	; (810142c <main+0xbc>)
 810137e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101386:	4b29      	ldr	r3, [pc, #164]	; (810142c <main+0xbc>)
 8101388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101390:	607b      	str	r3, [r7, #4]
 8101392:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101394:	2001      	movs	r0, #1
 8101396:	f001 fb71 	bl	8102a7c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810139a:	f001 fbfb 	bl	8102b94 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810139e:	2201      	movs	r2, #1
 81013a0:	2102      	movs	r1, #2
 81013a2:	2000      	movs	r0, #0
 81013a4:	f001 fb7c 	bl	8102aa0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81013a8:	4b21      	ldr	r3, [pc, #132]	; (8101430 <main+0xc0>)
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	091b      	lsrs	r3, r3, #4
 81013ae:	f003 030f 	and.w	r3, r3, #15
 81013b2:	2b07      	cmp	r3, #7
 81013b4:	d108      	bne.n	81013c8 <main+0x58>
 81013b6:	4b1f      	ldr	r3, [pc, #124]	; (8101434 <main+0xc4>)
 81013b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81013bc:	4a1d      	ldr	r2, [pc, #116]	; (8101434 <main+0xc4>)
 81013be:	f043 0301 	orr.w	r3, r3, #1
 81013c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81013c6:	e007      	b.n	81013d8 <main+0x68>
 81013c8:	4b1a      	ldr	r3, [pc, #104]	; (8101434 <main+0xc4>)
 81013ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81013ce:	4a19      	ldr	r2, [pc, #100]	; (8101434 <main+0xc4>)
 81013d0:	f043 0301 	orr.w	r3, r3, #1
 81013d4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81013d8:	f000 fa14 	bl	8101804 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81013dc:	f000 f87e 	bl	81014dc <MX_GPIO_Init>
  MX_UART7_Init();
 81013e0:	f000 f830 	bl	8101444 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
	char pData4[]="CM4 START\r\n";
 81013e4:	4a14      	ldr	r2, [pc, #80]	; (8101438 <main+0xc8>)
 81013e6:	f107 0314 	add.w	r3, r7, #20
 81013ea:	ca07      	ldmia	r2, {r0, r1, r2}
 81013ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t *)pData4, 11, 0xffff);
 81013f0:	f107 0114 	add.w	r1, r7, #20
 81013f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81013f8:	220b      	movs	r2, #11
 81013fa:	4810      	ldr	r0, [pc, #64]	; (810143c <main+0xcc>)
 81013fc:	f003 f962 	bl	81046c4 <HAL_UART_Transmit>

  ESP_Init();
 8101400:	f7ff f96e 	bl	81006e0 <ESP_Init>
	char pData5[]="init end\r\n";
 8101404:	4a0e      	ldr	r2, [pc, #56]	; (8101440 <main+0xd0>)
 8101406:	f107 0308 	add.w	r3, r7, #8
 810140a:	ca07      	ldmia	r2, {r0, r1, r2}
 810140c:	c303      	stmia	r3!, {r0, r1}
 810140e:	801a      	strh	r2, [r3, #0]
 8101410:	3302      	adds	r3, #2
 8101412:	0c12      	lsrs	r2, r2, #16
 8101414:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)pData5, 11, 0xffff);
 8101416:	f107 0108 	add.w	r1, r7, #8
 810141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810141e:	220b      	movs	r2, #11
 8101420:	4806      	ldr	r0, [pc, #24]	; (810143c <main+0xcc>)
 8101422:	f003 f94f 	bl	81046c4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  Server_Start();
 8101426:	f7ff fc39 	bl	8100c9c <Server_Start>
 810142a:	e7fc      	b.n	8101426 <main+0xb6>
 810142c:	58024400 	.word	0x58024400
 8101430:	e000ed00 	.word	0xe000ed00
 8101434:	58026400 	.word	0x58026400
 8101438:	08107190 	.word	0x08107190
 810143c:	10000964 	.word	0x10000964
 8101440:	0810719c 	.word	0x0810719c

08101444 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8101444:	b580      	push	{r7, lr}
 8101446:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8101448:	4b22      	ldr	r3, [pc, #136]	; (81014d4 <MX_UART7_Init+0x90>)
 810144a:	4a23      	ldr	r2, [pc, #140]	; (81014d8 <MX_UART7_Init+0x94>)
 810144c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 810144e:	4b21      	ldr	r3, [pc, #132]	; (81014d4 <MX_UART7_Init+0x90>)
 8101450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101454:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8101456:	4b1f      	ldr	r3, [pc, #124]	; (81014d4 <MX_UART7_Init+0x90>)
 8101458:	2200      	movs	r2, #0
 810145a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 810145c:	4b1d      	ldr	r3, [pc, #116]	; (81014d4 <MX_UART7_Init+0x90>)
 810145e:	2200      	movs	r2, #0
 8101460:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8101462:	4b1c      	ldr	r3, [pc, #112]	; (81014d4 <MX_UART7_Init+0x90>)
 8101464:	2200      	movs	r2, #0
 8101466:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8101468:	4b1a      	ldr	r3, [pc, #104]	; (81014d4 <MX_UART7_Init+0x90>)
 810146a:	220c      	movs	r2, #12
 810146c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810146e:	4b19      	ldr	r3, [pc, #100]	; (81014d4 <MX_UART7_Init+0x90>)
 8101470:	2200      	movs	r2, #0
 8101472:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8101474:	4b17      	ldr	r3, [pc, #92]	; (81014d4 <MX_UART7_Init+0x90>)
 8101476:	2200      	movs	r2, #0
 8101478:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810147a:	4b16      	ldr	r3, [pc, #88]	; (81014d4 <MX_UART7_Init+0x90>)
 810147c:	2200      	movs	r2, #0
 810147e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101480:	4b14      	ldr	r3, [pc, #80]	; (81014d4 <MX_UART7_Init+0x90>)
 8101482:	2200      	movs	r2, #0
 8101484:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101486:	4b13      	ldr	r3, [pc, #76]	; (81014d4 <MX_UART7_Init+0x90>)
 8101488:	2200      	movs	r2, #0
 810148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 810148c:	4811      	ldr	r0, [pc, #68]	; (81014d4 <MX_UART7_Init+0x90>)
 810148e:	f003 f8c9 	bl	8104624 <HAL_UART_Init>
 8101492:	4603      	mov	r3, r0
 8101494:	2b00      	cmp	r3, #0
 8101496:	d001      	beq.n	810149c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8101498:	f000 f86c 	bl	8101574 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810149c:	2100      	movs	r1, #0
 810149e:	480d      	ldr	r0, [pc, #52]	; (81014d4 <MX_UART7_Init+0x90>)
 81014a0:	f004 fd77 	bl	8105f92 <HAL_UARTEx_SetTxFifoThreshold>
 81014a4:	4603      	mov	r3, r0
 81014a6:	2b00      	cmp	r3, #0
 81014a8:	d001      	beq.n	81014ae <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 81014aa:	f000 f863 	bl	8101574 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81014ae:	2100      	movs	r1, #0
 81014b0:	4808      	ldr	r0, [pc, #32]	; (81014d4 <MX_UART7_Init+0x90>)
 81014b2:	f004 fdac 	bl	810600e <HAL_UARTEx_SetRxFifoThreshold>
 81014b6:	4603      	mov	r3, r0
 81014b8:	2b00      	cmp	r3, #0
 81014ba:	d001      	beq.n	81014c0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 81014bc:	f000 f85a 	bl	8101574 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 81014c0:	4804      	ldr	r0, [pc, #16]	; (81014d4 <MX_UART7_Init+0x90>)
 81014c2:	f004 fd2d 	bl	8105f20 <HAL_UARTEx_DisableFifoMode>
 81014c6:	4603      	mov	r3, r0
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	d001      	beq.n	81014d0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 81014cc:	f000 f852 	bl	8101574 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 81014d0:	bf00      	nop
 81014d2:	bd80      	pop	{r7, pc}
 81014d4:	100008d4 	.word	0x100008d4
 81014d8:	40007800 	.word	0x40007800

081014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81014dc:	b580      	push	{r7, lr}
 81014de:	b088      	sub	sp, #32
 81014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014e2:	f107 030c 	add.w	r3, r7, #12
 81014e6:	2200      	movs	r2, #0
 81014e8:	601a      	str	r2, [r3, #0]
 81014ea:	605a      	str	r2, [r3, #4]
 81014ec:	609a      	str	r2, [r3, #8]
 81014ee:	60da      	str	r2, [r3, #12]
 81014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81014f2:	4b1e      	ldr	r3, [pc, #120]	; (810156c <MX_GPIO_Init+0x90>)
 81014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014f8:	4a1c      	ldr	r2, [pc, #112]	; (810156c <MX_GPIO_Init+0x90>)
 81014fa:	f043 0320 	orr.w	r3, r3, #32
 81014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101502:	4b1a      	ldr	r3, [pc, #104]	; (810156c <MX_GPIO_Init+0x90>)
 8101504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101508:	f003 0320 	and.w	r3, r3, #32
 810150c:	60bb      	str	r3, [r7, #8]
 810150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101510:	4b16      	ldr	r3, [pc, #88]	; (810156c <MX_GPIO_Init+0x90>)
 8101512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101516:	4a15      	ldr	r2, [pc, #84]	; (810156c <MX_GPIO_Init+0x90>)
 8101518:	f043 0302 	orr.w	r3, r3, #2
 810151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101520:	4b12      	ldr	r3, [pc, #72]	; (810156c <MX_GPIO_Init+0x90>)
 8101522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101526:	f003 0302 	and.w	r3, r3, #2
 810152a:	607b      	str	r3, [r7, #4]
 810152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 810152e:	2200      	movs	r2, #0
 8101530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101534:	480e      	ldr	r0, [pc, #56]	; (8101570 <MX_GPIO_Init+0x94>)
 8101536:	f001 fa4f 	bl	81029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 810153a:	2201      	movs	r2, #1
 810153c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8101540:	480b      	ldr	r0, [pc, #44]	; (8101570 <MX_GPIO_Init+0x94>)
 8101542:	f001 fa49 	bl	81029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8101546:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 810154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810154c:	2301      	movs	r3, #1
 810154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101550:	2300      	movs	r3, #0
 8101552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101554:	2300      	movs	r3, #0
 8101556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101558:	f107 030c 	add.w	r3, r7, #12
 810155c:	4619      	mov	r1, r3
 810155e:	4804      	ldr	r0, [pc, #16]	; (8101570 <MX_GPIO_Init+0x94>)
 8101560:	f001 f88a 	bl	8102678 <HAL_GPIO_Init>

}
 8101564:	bf00      	nop
 8101566:	3720      	adds	r7, #32
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}
 810156c:	58024400 	.word	0x58024400
 8101570:	58020400 	.word	0x58020400

08101574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101574:	b480      	push	{r7}
 8101576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101578:	b672      	cpsid	i
}
 810157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810157c:	e7fe      	b.n	810157c <Error_Handler+0x8>
	...

08101580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101580:	b480      	push	{r7}
 8101582:	b083      	sub	sp, #12
 8101584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101586:	4b0a      	ldr	r3, [pc, #40]	; (81015b0 <HAL_MspInit+0x30>)
 8101588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810158c:	4a08      	ldr	r2, [pc, #32]	; (81015b0 <HAL_MspInit+0x30>)
 810158e:	f043 0302 	orr.w	r3, r3, #2
 8101592:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101596:	4b06      	ldr	r3, [pc, #24]	; (81015b0 <HAL_MspInit+0x30>)
 8101598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810159c:	f003 0302 	and.w	r3, r3, #2
 81015a0:	607b      	str	r3, [r7, #4]
 81015a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81015a4:	bf00      	nop
 81015a6:	370c      	adds	r7, #12
 81015a8:	46bd      	mov	sp, r7
 81015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ae:	4770      	bx	lr
 81015b0:	58024400 	.word	0x58024400

081015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81015b4:	b580      	push	{r7, lr}
 81015b6:	b0ba      	sub	sp, #232	; 0xe8
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015c0:	2200      	movs	r2, #0
 81015c2:	601a      	str	r2, [r3, #0]
 81015c4:	605a      	str	r2, [r3, #4]
 81015c6:	609a      	str	r2, [r3, #8]
 81015c8:	60da      	str	r2, [r3, #12]
 81015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015cc:	f107 0318 	add.w	r3, r7, #24
 81015d0:	22bc      	movs	r2, #188	; 0xbc
 81015d2:	2100      	movs	r1, #0
 81015d4:	4618      	mov	r0, r3
 81015d6:	f004 fddf 	bl	8106198 <memset>
  if(huart->Instance==UART7)
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	4a3a      	ldr	r2, [pc, #232]	; (81016c8 <HAL_UART_MspInit+0x114>)
 81015e0:	4293      	cmp	r3, r2
 81015e2:	d14a      	bne.n	810167a <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 81015e4:	2302      	movs	r3, #2
 81015e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81015e8:	2300      	movs	r3, #0
 81015ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015ee:	f107 0318 	add.w	r3, r7, #24
 81015f2:	4618      	mov	r0, r3
 81015f4:	f001 fcb4 	bl	8102f60 <HAL_RCCEx_PeriphCLKConfig>
 81015f8:	4603      	mov	r3, r0
 81015fa:	2b00      	cmp	r3, #0
 81015fc:	d001      	beq.n	8101602 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81015fe:	f7ff ffb9 	bl	8101574 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8101602:	4b32      	ldr	r3, [pc, #200]	; (81016cc <HAL_UART_MspInit+0x118>)
 8101604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101608:	4a30      	ldr	r2, [pc, #192]	; (81016cc <HAL_UART_MspInit+0x118>)
 810160a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810160e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101612:	4b2e      	ldr	r3, [pc, #184]	; (81016cc <HAL_UART_MspInit+0x118>)
 8101614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810161c:	617b      	str	r3, [r7, #20]
 810161e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101620:	4b2a      	ldr	r3, [pc, #168]	; (81016cc <HAL_UART_MspInit+0x118>)
 8101622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101626:	4a29      	ldr	r2, [pc, #164]	; (81016cc <HAL_UART_MspInit+0x118>)
 8101628:	f043 0320 	orr.w	r3, r3, #32
 810162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101630:	4b26      	ldr	r3, [pc, #152]	; (81016cc <HAL_UART_MspInit+0x118>)
 8101632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101636:	f003 0320 	and.w	r3, r3, #32
 810163a:	613b      	str	r3, [r7, #16]
 810163c:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810163e:	23c0      	movs	r3, #192	; 0xc0
 8101640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101644:	2302      	movs	r3, #2
 8101646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810164a:	2300      	movs	r3, #0
 810164c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101650:	2300      	movs	r3, #0
 8101652:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8101656:	2307      	movs	r3, #7
 8101658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810165c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101660:	4619      	mov	r1, r3
 8101662:	481b      	ldr	r0, [pc, #108]	; (81016d0 <HAL_UART_MspInit+0x11c>)
 8101664:	f001 f808 	bl	8102678 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8101668:	2200      	movs	r2, #0
 810166a:	2100      	movs	r1, #0
 810166c:	2052      	movs	r0, #82	; 0x52
 810166e:	f000 fa58 	bl	8101b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8101672:	2052      	movs	r0, #82	; 0x52
 8101674:	f000 fa6f 	bl	8101b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101678:	e022      	b.n	81016c0 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	4a15      	ldr	r2, [pc, #84]	; (81016d4 <HAL_UART_MspInit+0x120>)
 8101680:	4293      	cmp	r3, r2
 8101682:	d11d      	bne.n	81016c0 <HAL_UART_MspInit+0x10c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101684:	2302      	movs	r3, #2
 8101686:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101688:	2300      	movs	r3, #0
 810168a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810168e:	f107 0318 	add.w	r3, r7, #24
 8101692:	4618      	mov	r0, r3
 8101694:	f001 fc64 	bl	8102f60 <HAL_RCCEx_PeriphCLKConfig>
 8101698:	4603      	mov	r3, r0
 810169a:	2b00      	cmp	r3, #0
 810169c:	d001      	beq.n	81016a2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 810169e:	f7ff ff69 	bl	8101574 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81016a2:	4b0a      	ldr	r3, [pc, #40]	; (81016cc <HAL_UART_MspInit+0x118>)
 81016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016a8:	4a08      	ldr	r2, [pc, #32]	; (81016cc <HAL_UART_MspInit+0x118>)
 81016aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81016ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81016b2:	4b06      	ldr	r3, [pc, #24]	; (81016cc <HAL_UART_MspInit+0x118>)
 81016b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81016bc:	60fb      	str	r3, [r7, #12]
 81016be:	68fb      	ldr	r3, [r7, #12]
}
 81016c0:	bf00      	nop
 81016c2:	37e8      	adds	r7, #232	; 0xe8
 81016c4:	46bd      	mov	sp, r7
 81016c6:	bd80      	pop	{r7, pc}
 81016c8:	40007800 	.word	0x40007800
 81016cc:	58024400 	.word	0x58024400
 81016d0:	58021400 	.word	0x58021400
 81016d4:	40004800 	.word	0x40004800

081016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81016d8:	b480      	push	{r7}
 81016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81016dc:	e7fe      	b.n	81016dc <NMI_Handler+0x4>

081016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81016de:	b480      	push	{r7}
 81016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81016e2:	e7fe      	b.n	81016e2 <HardFault_Handler+0x4>

081016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81016e4:	b480      	push	{r7}
 81016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81016e8:	e7fe      	b.n	81016e8 <MemManage_Handler+0x4>

081016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81016ea:	b480      	push	{r7}
 81016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81016ee:	e7fe      	b.n	81016ee <BusFault_Handler+0x4>

081016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81016f0:	b480      	push	{r7}
 81016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81016f4:	e7fe      	b.n	81016f4 <UsageFault_Handler+0x4>

081016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81016f6:	b480      	push	{r7}
 81016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81016fa:	bf00      	nop
 81016fc:	46bd      	mov	sp, r7
 81016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101702:	4770      	bx	lr

08101704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101704:	b480      	push	{r7}
 8101706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101708:	bf00      	nop
 810170a:	46bd      	mov	sp, r7
 810170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101710:	4770      	bx	lr

08101712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101712:	b480      	push	{r7}
 8101714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101716:	bf00      	nop
 8101718:	46bd      	mov	sp, r7
 810171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810171e:	4770      	bx	lr

08101720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101720:	b580      	push	{r7, lr}
 8101722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101724:	f000 f902 	bl	810192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101728:	bf00      	nop
 810172a:	bd80      	pop	{r7, pc}

0810172c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 810172c:	b580      	push	{r7, lr}
 810172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
  Uart_isr(&huart7);
 8101730:	4803      	ldr	r0, [pc, #12]	; (8101740 <UART7_IRQHandler+0x14>)
 8101732:	f7ff fdb1 	bl	8101298 <Uart_isr>

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8101736:	4802      	ldr	r0, [pc, #8]	; (8101740 <UART7_IRQHandler+0x14>)
 8101738:	f003 f85a 	bl	81047f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 810173c:	bf00      	nop
 810173e:	bd80      	pop	{r7, pc}
 8101740:	100008d4 	.word	0x100008d4

08101744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101744:	b580      	push	{r7, lr}
 8101746:	b086      	sub	sp, #24
 8101748:	af00      	add	r7, sp, #0
 810174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810174c:	4a14      	ldr	r2, [pc, #80]	; (81017a0 <_sbrk+0x5c>)
 810174e:	4b15      	ldr	r3, [pc, #84]	; (81017a4 <_sbrk+0x60>)
 8101750:	1ad3      	subs	r3, r2, r3
 8101752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101754:	697b      	ldr	r3, [r7, #20]
 8101756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101758:	4b13      	ldr	r3, [pc, #76]	; (81017a8 <_sbrk+0x64>)
 810175a:	681b      	ldr	r3, [r3, #0]
 810175c:	2b00      	cmp	r3, #0
 810175e:	d102      	bne.n	8101766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101760:	4b11      	ldr	r3, [pc, #68]	; (81017a8 <_sbrk+0x64>)
 8101762:	4a12      	ldr	r2, [pc, #72]	; (81017ac <_sbrk+0x68>)
 8101764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101766:	4b10      	ldr	r3, [pc, #64]	; (81017a8 <_sbrk+0x64>)
 8101768:	681a      	ldr	r2, [r3, #0]
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	4413      	add	r3, r2
 810176e:	693a      	ldr	r2, [r7, #16]
 8101770:	429a      	cmp	r2, r3
 8101772:	d207      	bcs.n	8101784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101774:	f004 fcd8 	bl	8106128 <__errno>
 8101778:	4603      	mov	r3, r0
 810177a:	220c      	movs	r2, #12
 810177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810177e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101782:	e009      	b.n	8101798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101784:	4b08      	ldr	r3, [pc, #32]	; (81017a8 <_sbrk+0x64>)
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810178a:	4b07      	ldr	r3, [pc, #28]	; (81017a8 <_sbrk+0x64>)
 810178c:	681a      	ldr	r2, [r3, #0]
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	4413      	add	r3, r2
 8101792:	4a05      	ldr	r2, [pc, #20]	; (81017a8 <_sbrk+0x64>)
 8101794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101796:	68fb      	ldr	r3, [r7, #12]
}
 8101798:	4618      	mov	r0, r3
 810179a:	3718      	adds	r7, #24
 810179c:	46bd      	mov	sp, r7
 810179e:	bd80      	pop	{r7, pc}
 81017a0:	10048000 	.word	0x10048000
 81017a4:	00000400 	.word	0x00000400
 81017a8:	100008b8 	.word	0x100008b8
 81017ac:	10000a08 	.word	0x10000a08

081017b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81017b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81017e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81017b4:	f7fe ff78 	bl	81006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81017b8:	480c      	ldr	r0, [pc, #48]	; (81017ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81017ba:	490d      	ldr	r1, [pc, #52]	; (81017f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81017bc:	4a0d      	ldr	r2, [pc, #52]	; (81017f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81017c0:	e002      	b.n	81017c8 <LoopCopyDataInit>

081017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81017c6:	3304      	adds	r3, #4

081017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81017cc:	d3f9      	bcc.n	81017c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81017ce:	4a0a      	ldr	r2, [pc, #40]	; (81017f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81017d0:	4c0a      	ldr	r4, [pc, #40]	; (81017fc <LoopFillZerobss+0x22>)
  movs r3, #0
 81017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81017d4:	e001      	b.n	81017da <LoopFillZerobss>

081017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81017d8:	3204      	adds	r2, #4

081017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81017dc:	d3fb      	bcc.n	81017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81017de:	f004 fca9 	bl	8106134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81017e2:	f7ff fdc5 	bl	8101370 <main>
  bx  lr
 81017e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81017e8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81017ec:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81017f0:	1000007c 	.word	0x1000007c
  ldr r2, =_sidata
 81017f4:	08107228 	.word	0x08107228
  ldr r2, =_sbss
 81017f8:	1000007c 	.word	0x1000007c
  ldr r4, =_ebss
 81017fc:	10000a08 	.word	0x10000a08

08101800 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101800:	e7fe      	b.n	8101800 <ADC3_IRQHandler>
	...

08101804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101804:	b580      	push	{r7, lr}
 8101806:	b082      	sub	sp, #8
 8101808:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810180a:	4b28      	ldr	r3, [pc, #160]	; (81018ac <HAL_Init+0xa8>)
 810180c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101810:	4a26      	ldr	r2, [pc, #152]	; (81018ac <HAL_Init+0xa8>)
 8101812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101816:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810181a:	4b24      	ldr	r3, [pc, #144]	; (81018ac <HAL_Init+0xa8>)
 810181c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101824:	603b      	str	r3, [r7, #0]
 8101826:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101828:	4b21      	ldr	r3, [pc, #132]	; (81018b0 <HAL_Init+0xac>)
 810182a:	681b      	ldr	r3, [r3, #0]
 810182c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101830:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101834:	4a1e      	ldr	r2, [pc, #120]	; (81018b0 <HAL_Init+0xac>)
 8101836:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810183a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810183c:	4b1c      	ldr	r3, [pc, #112]	; (81018b0 <HAL_Init+0xac>)
 810183e:	681b      	ldr	r3, [r3, #0]
 8101840:	4a1b      	ldr	r2, [pc, #108]	; (81018b0 <HAL_Init+0xac>)
 8101842:	f043 0301 	orr.w	r3, r3, #1
 8101846:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101848:	2003      	movs	r0, #3
 810184a:	f000 f95f 	bl	8101b0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810184e:	f001 f9af 	bl	8102bb0 <HAL_RCC_GetSysClockFreq>
 8101852:	4602      	mov	r2, r0
 8101854:	4b15      	ldr	r3, [pc, #84]	; (81018ac <HAL_Init+0xa8>)
 8101856:	699b      	ldr	r3, [r3, #24]
 8101858:	0a1b      	lsrs	r3, r3, #8
 810185a:	f003 030f 	and.w	r3, r3, #15
 810185e:	4915      	ldr	r1, [pc, #84]	; (81018b4 <HAL_Init+0xb0>)
 8101860:	5ccb      	ldrb	r3, [r1, r3]
 8101862:	f003 031f 	and.w	r3, r3, #31
 8101866:	fa22 f303 	lsr.w	r3, r2, r3
 810186a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810186c:	4b0f      	ldr	r3, [pc, #60]	; (81018ac <HAL_Init+0xa8>)
 810186e:	699b      	ldr	r3, [r3, #24]
 8101870:	f003 030f 	and.w	r3, r3, #15
 8101874:	4a0f      	ldr	r2, [pc, #60]	; (81018b4 <HAL_Init+0xb0>)
 8101876:	5cd3      	ldrb	r3, [r2, r3]
 8101878:	f003 031f 	and.w	r3, r3, #31
 810187c:	687a      	ldr	r2, [r7, #4]
 810187e:	fa22 f303 	lsr.w	r3, r2, r3
 8101882:	4a0d      	ldr	r2, [pc, #52]	; (81018b8 <HAL_Init+0xb4>)
 8101884:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101886:	4b0c      	ldr	r3, [pc, #48]	; (81018b8 <HAL_Init+0xb4>)
 8101888:	681b      	ldr	r3, [r3, #0]
 810188a:	4a0c      	ldr	r2, [pc, #48]	; (81018bc <HAL_Init+0xb8>)
 810188c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810188e:	2000      	movs	r0, #0
 8101890:	f000 f816 	bl	81018c0 <HAL_InitTick>
 8101894:	4603      	mov	r3, r0
 8101896:	2b00      	cmp	r3, #0
 8101898:	d001      	beq.n	810189e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810189a:	2301      	movs	r3, #1
 810189c:	e002      	b.n	81018a4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810189e:	f7ff fe6f 	bl	8101580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81018a2:	2300      	movs	r3, #0
}
 81018a4:	4618      	mov	r0, r3
 81018a6:	3708      	adds	r7, #8
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	58024400 	.word	0x58024400
 81018b0:	40024400 	.word	0x40024400
 81018b4:	081071a8 	.word	0x081071a8
 81018b8:	10000004 	.word	0x10000004
 81018bc:	10000000 	.word	0x10000000

081018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81018c0:	b580      	push	{r7, lr}
 81018c2:	b082      	sub	sp, #8
 81018c4:	af00      	add	r7, sp, #0
 81018c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81018c8:	4b15      	ldr	r3, [pc, #84]	; (8101920 <HAL_InitTick+0x60>)
 81018ca:	781b      	ldrb	r3, [r3, #0]
 81018cc:	2b00      	cmp	r3, #0
 81018ce:	d101      	bne.n	81018d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81018d0:	2301      	movs	r3, #1
 81018d2:	e021      	b.n	8101918 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81018d4:	4b13      	ldr	r3, [pc, #76]	; (8101924 <HAL_InitTick+0x64>)
 81018d6:	681a      	ldr	r2, [r3, #0]
 81018d8:	4b11      	ldr	r3, [pc, #68]	; (8101920 <HAL_InitTick+0x60>)
 81018da:	781b      	ldrb	r3, [r3, #0]
 81018dc:	4619      	mov	r1, r3
 81018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 81018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81018ea:	4618      	mov	r0, r3
 81018ec:	f000 f941 	bl	8101b72 <HAL_SYSTICK_Config>
 81018f0:	4603      	mov	r3, r0
 81018f2:	2b00      	cmp	r3, #0
 81018f4:	d001      	beq.n	81018fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81018f6:	2301      	movs	r3, #1
 81018f8:	e00e      	b.n	8101918 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81018fa:	687b      	ldr	r3, [r7, #4]
 81018fc:	2b0f      	cmp	r3, #15
 81018fe:	d80a      	bhi.n	8101916 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101900:	2200      	movs	r2, #0
 8101902:	6879      	ldr	r1, [r7, #4]
 8101904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8101908:	f000 f90b 	bl	8101b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810190c:	4a06      	ldr	r2, [pc, #24]	; (8101928 <HAL_InitTick+0x68>)
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101912:	2300      	movs	r3, #0
 8101914:	e000      	b.n	8101918 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101916:	2301      	movs	r3, #1
}
 8101918:	4618      	mov	r0, r3
 810191a:	3708      	adds	r7, #8
 810191c:	46bd      	mov	sp, r7
 810191e:	bd80      	pop	{r7, pc}
 8101920:	10000014 	.word	0x10000014
 8101924:	10000000 	.word	0x10000000
 8101928:	10000010 	.word	0x10000010

0810192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810192c:	b480      	push	{r7}
 810192e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101930:	4b06      	ldr	r3, [pc, #24]	; (810194c <HAL_IncTick+0x20>)
 8101932:	781b      	ldrb	r3, [r3, #0]
 8101934:	461a      	mov	r2, r3
 8101936:	4b06      	ldr	r3, [pc, #24]	; (8101950 <HAL_IncTick+0x24>)
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	4413      	add	r3, r2
 810193c:	4a04      	ldr	r2, [pc, #16]	; (8101950 <HAL_IncTick+0x24>)
 810193e:	6013      	str	r3, [r2, #0]
}
 8101940:	bf00      	nop
 8101942:	46bd      	mov	sp, r7
 8101944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101948:	4770      	bx	lr
 810194a:	bf00      	nop
 810194c:	10000014 	.word	0x10000014
 8101950:	100009f4 	.word	0x100009f4

08101954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101954:	b480      	push	{r7}
 8101956:	af00      	add	r7, sp, #0
  return uwTick;
 8101958:	4b03      	ldr	r3, [pc, #12]	; (8101968 <HAL_GetTick+0x14>)
 810195a:	681b      	ldr	r3, [r3, #0]
}
 810195c:	4618      	mov	r0, r3
 810195e:	46bd      	mov	sp, r7
 8101960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101964:	4770      	bx	lr
 8101966:	bf00      	nop
 8101968:	100009f4 	.word	0x100009f4

0810196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810196c:	b480      	push	{r7}
 810196e:	b085      	sub	sp, #20
 8101970:	af00      	add	r7, sp, #0
 8101972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	f003 0307 	and.w	r3, r3, #7
 810197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810197c:	4b0c      	ldr	r3, [pc, #48]	; (81019b0 <__NVIC_SetPriorityGrouping+0x44>)
 810197e:	68db      	ldr	r3, [r3, #12]
 8101980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101982:	68ba      	ldr	r2, [r7, #8]
 8101984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101988:	4013      	ands	r3, r2
 810198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810198c:	68fb      	ldr	r3, [r7, #12]
 810198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101990:	68bb      	ldr	r3, [r7, #8]
 8101992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810199e:	4a04      	ldr	r2, [pc, #16]	; (81019b0 <__NVIC_SetPriorityGrouping+0x44>)
 81019a0:	68bb      	ldr	r3, [r7, #8]
 81019a2:	60d3      	str	r3, [r2, #12]
}
 81019a4:	bf00      	nop
 81019a6:	3714      	adds	r7, #20
 81019a8:	46bd      	mov	sp, r7
 81019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ae:	4770      	bx	lr
 81019b0:	e000ed00 	.word	0xe000ed00

081019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81019b4:	b480      	push	{r7}
 81019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81019b8:	4b04      	ldr	r3, [pc, #16]	; (81019cc <__NVIC_GetPriorityGrouping+0x18>)
 81019ba:	68db      	ldr	r3, [r3, #12]
 81019bc:	0a1b      	lsrs	r3, r3, #8
 81019be:	f003 0307 	and.w	r3, r3, #7
}
 81019c2:	4618      	mov	r0, r3
 81019c4:	46bd      	mov	sp, r7
 81019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ca:	4770      	bx	lr
 81019cc:	e000ed00 	.word	0xe000ed00

081019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81019d0:	b480      	push	{r7}
 81019d2:	b083      	sub	sp, #12
 81019d4:	af00      	add	r7, sp, #0
 81019d6:	4603      	mov	r3, r0
 81019d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019de:	2b00      	cmp	r3, #0
 81019e0:	db0b      	blt.n	81019fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81019e2:	88fb      	ldrh	r3, [r7, #6]
 81019e4:	f003 021f 	and.w	r2, r3, #31
 81019e8:	4907      	ldr	r1, [pc, #28]	; (8101a08 <__NVIC_EnableIRQ+0x38>)
 81019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019ee:	095b      	lsrs	r3, r3, #5
 81019f0:	2001      	movs	r0, #1
 81019f2:	fa00 f202 	lsl.w	r2, r0, r2
 81019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81019fa:	bf00      	nop
 81019fc:	370c      	adds	r7, #12
 81019fe:	46bd      	mov	sp, r7
 8101a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a04:	4770      	bx	lr
 8101a06:	bf00      	nop
 8101a08:	e000e100 	.word	0xe000e100

08101a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101a0c:	b480      	push	{r7}
 8101a0e:	b083      	sub	sp, #12
 8101a10:	af00      	add	r7, sp, #0
 8101a12:	4603      	mov	r3, r0
 8101a14:	6039      	str	r1, [r7, #0]
 8101a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a1c:	2b00      	cmp	r3, #0
 8101a1e:	db0a      	blt.n	8101a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a20:	683b      	ldr	r3, [r7, #0]
 8101a22:	b2da      	uxtb	r2, r3
 8101a24:	490c      	ldr	r1, [pc, #48]	; (8101a58 <__NVIC_SetPriority+0x4c>)
 8101a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a2a:	0112      	lsls	r2, r2, #4
 8101a2c:	b2d2      	uxtb	r2, r2
 8101a2e:	440b      	add	r3, r1
 8101a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101a34:	e00a      	b.n	8101a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a36:	683b      	ldr	r3, [r7, #0]
 8101a38:	b2da      	uxtb	r2, r3
 8101a3a:	4908      	ldr	r1, [pc, #32]	; (8101a5c <__NVIC_SetPriority+0x50>)
 8101a3c:	88fb      	ldrh	r3, [r7, #6]
 8101a3e:	f003 030f 	and.w	r3, r3, #15
 8101a42:	3b04      	subs	r3, #4
 8101a44:	0112      	lsls	r2, r2, #4
 8101a46:	b2d2      	uxtb	r2, r2
 8101a48:	440b      	add	r3, r1
 8101a4a:	761a      	strb	r2, [r3, #24]
}
 8101a4c:	bf00      	nop
 8101a4e:	370c      	adds	r7, #12
 8101a50:	46bd      	mov	sp, r7
 8101a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a56:	4770      	bx	lr
 8101a58:	e000e100 	.word	0xe000e100
 8101a5c:	e000ed00 	.word	0xe000ed00

08101a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a60:	b480      	push	{r7}
 8101a62:	b089      	sub	sp, #36	; 0x24
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	60f8      	str	r0, [r7, #12]
 8101a68:	60b9      	str	r1, [r7, #8]
 8101a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101a6c:	68fb      	ldr	r3, [r7, #12]
 8101a6e:	f003 0307 	and.w	r3, r3, #7
 8101a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101a74:	69fb      	ldr	r3, [r7, #28]
 8101a76:	f1c3 0307 	rsb	r3, r3, #7
 8101a7a:	2b04      	cmp	r3, #4
 8101a7c:	bf28      	it	cs
 8101a7e:	2304      	movcs	r3, #4
 8101a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101a82:	69fb      	ldr	r3, [r7, #28]
 8101a84:	3304      	adds	r3, #4
 8101a86:	2b06      	cmp	r3, #6
 8101a88:	d902      	bls.n	8101a90 <NVIC_EncodePriority+0x30>
 8101a8a:	69fb      	ldr	r3, [r7, #28]
 8101a8c:	3b03      	subs	r3, #3
 8101a8e:	e000      	b.n	8101a92 <NVIC_EncodePriority+0x32>
 8101a90:	2300      	movs	r3, #0
 8101a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8101a98:	69bb      	ldr	r3, [r7, #24]
 8101a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a9e:	43da      	mvns	r2, r3
 8101aa0:	68bb      	ldr	r3, [r7, #8]
 8101aa2:	401a      	ands	r2, r3
 8101aa4:	697b      	ldr	r3, [r7, #20]
 8101aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101aac:	697b      	ldr	r3, [r7, #20]
 8101aae:	fa01 f303 	lsl.w	r3, r1, r3
 8101ab2:	43d9      	mvns	r1, r3
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101ab8:	4313      	orrs	r3, r2
         );
}
 8101aba:	4618      	mov	r0, r3
 8101abc:	3724      	adds	r7, #36	; 0x24
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ac4:	4770      	bx	lr
	...

08101ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101ac8:	b580      	push	{r7, lr}
 8101aca:	b082      	sub	sp, #8
 8101acc:	af00      	add	r7, sp, #0
 8101ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	3b01      	subs	r3, #1
 8101ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101ad8:	d301      	bcc.n	8101ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101ada:	2301      	movs	r3, #1
 8101adc:	e00f      	b.n	8101afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101ade:	4a0a      	ldr	r2, [pc, #40]	; (8101b08 <SysTick_Config+0x40>)
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	3b01      	subs	r3, #1
 8101ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101ae6:	210f      	movs	r1, #15
 8101ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8101aec:	f7ff ff8e 	bl	8101a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101af0:	4b05      	ldr	r3, [pc, #20]	; (8101b08 <SysTick_Config+0x40>)
 8101af2:	2200      	movs	r2, #0
 8101af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101af6:	4b04      	ldr	r3, [pc, #16]	; (8101b08 <SysTick_Config+0x40>)
 8101af8:	2207      	movs	r2, #7
 8101afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101afc:	2300      	movs	r3, #0
}
 8101afe:	4618      	mov	r0, r3
 8101b00:	3708      	adds	r7, #8
 8101b02:	46bd      	mov	sp, r7
 8101b04:	bd80      	pop	{r7, pc}
 8101b06:	bf00      	nop
 8101b08:	e000e010 	.word	0xe000e010

08101b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101b0c:	b580      	push	{r7, lr}
 8101b0e:	b082      	sub	sp, #8
 8101b10:	af00      	add	r7, sp, #0
 8101b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101b14:	6878      	ldr	r0, [r7, #4]
 8101b16:	f7ff ff29 	bl	810196c <__NVIC_SetPriorityGrouping>
}
 8101b1a:	bf00      	nop
 8101b1c:	3708      	adds	r7, #8
 8101b1e:	46bd      	mov	sp, r7
 8101b20:	bd80      	pop	{r7, pc}

08101b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101b22:	b580      	push	{r7, lr}
 8101b24:	b086      	sub	sp, #24
 8101b26:	af00      	add	r7, sp, #0
 8101b28:	4603      	mov	r3, r0
 8101b2a:	60b9      	str	r1, [r7, #8]
 8101b2c:	607a      	str	r2, [r7, #4]
 8101b2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101b30:	f7ff ff40 	bl	81019b4 <__NVIC_GetPriorityGrouping>
 8101b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101b36:	687a      	ldr	r2, [r7, #4]
 8101b38:	68b9      	ldr	r1, [r7, #8]
 8101b3a:	6978      	ldr	r0, [r7, #20]
 8101b3c:	f7ff ff90 	bl	8101a60 <NVIC_EncodePriority>
 8101b40:	4602      	mov	r2, r0
 8101b42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101b46:	4611      	mov	r1, r2
 8101b48:	4618      	mov	r0, r3
 8101b4a:	f7ff ff5f 	bl	8101a0c <__NVIC_SetPriority>
}
 8101b4e:	bf00      	nop
 8101b50:	3718      	adds	r7, #24
 8101b52:	46bd      	mov	sp, r7
 8101b54:	bd80      	pop	{r7, pc}

08101b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101b56:	b580      	push	{r7, lr}
 8101b58:	b082      	sub	sp, #8
 8101b5a:	af00      	add	r7, sp, #0
 8101b5c:	4603      	mov	r3, r0
 8101b5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b64:	4618      	mov	r0, r3
 8101b66:	f7ff ff33 	bl	81019d0 <__NVIC_EnableIRQ>
}
 8101b6a:	bf00      	nop
 8101b6c:	3708      	adds	r7, #8
 8101b6e:	46bd      	mov	sp, r7
 8101b70:	bd80      	pop	{r7, pc}

08101b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101b72:	b580      	push	{r7, lr}
 8101b74:	b082      	sub	sp, #8
 8101b76:	af00      	add	r7, sp, #0
 8101b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101b7a:	6878      	ldr	r0, [r7, #4]
 8101b7c:	f7ff ffa4 	bl	8101ac8 <SysTick_Config>
 8101b80:	4603      	mov	r3, r0
}
 8101b82:	4618      	mov	r0, r3
 8101b84:	3708      	adds	r7, #8
 8101b86:	46bd      	mov	sp, r7
 8101b88:	bd80      	pop	{r7, pc}
	...

08101b8c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101b8c:	b480      	push	{r7}
 8101b8e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101b90:	4b07      	ldr	r3, [pc, #28]	; (8101bb0 <HAL_GetCurrentCPUID+0x24>)
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	091b      	lsrs	r3, r3, #4
 8101b96:	f003 030f 	and.w	r3, r3, #15
 8101b9a:	2b07      	cmp	r3, #7
 8101b9c:	d101      	bne.n	8101ba2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b9e:	2303      	movs	r3, #3
 8101ba0:	e000      	b.n	8101ba4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101ba2:	2301      	movs	r3, #1
  }
}
 8101ba4:	4618      	mov	r0, r3
 8101ba6:	46bd      	mov	sp, r7
 8101ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bac:	4770      	bx	lr
 8101bae:	bf00      	nop
 8101bb0:	e000ed00 	.word	0xe000ed00

08101bb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8101bb4:	b580      	push	{r7, lr}
 8101bb6:	b086      	sub	sp, #24
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8101bbc:	f7ff feca 	bl	8101954 <HAL_GetTick>
 8101bc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	2b00      	cmp	r3, #0
 8101bc6:	d101      	bne.n	8101bcc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8101bc8:	2301      	movs	r3, #1
 8101bca:	e2dc      	b.n	8102186 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8101bd2:	b2db      	uxtb	r3, r3
 8101bd4:	2b02      	cmp	r3, #2
 8101bd6:	d008      	beq.n	8101bea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	2280      	movs	r2, #128	; 0x80
 8101bdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	2200      	movs	r2, #0
 8101be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8101be6:	2301      	movs	r3, #1
 8101be8:	e2cd      	b.n	8102186 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	4a76      	ldr	r2, [pc, #472]	; (8101dc8 <HAL_DMA_Abort+0x214>)
 8101bf0:	4293      	cmp	r3, r2
 8101bf2:	d04a      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	4a74      	ldr	r2, [pc, #464]	; (8101dcc <HAL_DMA_Abort+0x218>)
 8101bfa:	4293      	cmp	r3, r2
 8101bfc:	d045      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	4a73      	ldr	r2, [pc, #460]	; (8101dd0 <HAL_DMA_Abort+0x21c>)
 8101c04:	4293      	cmp	r3, r2
 8101c06:	d040      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	4a71      	ldr	r2, [pc, #452]	; (8101dd4 <HAL_DMA_Abort+0x220>)
 8101c0e:	4293      	cmp	r3, r2
 8101c10:	d03b      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	4a70      	ldr	r2, [pc, #448]	; (8101dd8 <HAL_DMA_Abort+0x224>)
 8101c18:	4293      	cmp	r3, r2
 8101c1a:	d036      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c1c:	687b      	ldr	r3, [r7, #4]
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	4a6e      	ldr	r2, [pc, #440]	; (8101ddc <HAL_DMA_Abort+0x228>)
 8101c22:	4293      	cmp	r3, r2
 8101c24:	d031      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	681b      	ldr	r3, [r3, #0]
 8101c2a:	4a6d      	ldr	r2, [pc, #436]	; (8101de0 <HAL_DMA_Abort+0x22c>)
 8101c2c:	4293      	cmp	r3, r2
 8101c2e:	d02c      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	4a6b      	ldr	r2, [pc, #428]	; (8101de4 <HAL_DMA_Abort+0x230>)
 8101c36:	4293      	cmp	r3, r2
 8101c38:	d027      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	681b      	ldr	r3, [r3, #0]
 8101c3e:	4a6a      	ldr	r2, [pc, #424]	; (8101de8 <HAL_DMA_Abort+0x234>)
 8101c40:	4293      	cmp	r3, r2
 8101c42:	d022      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	681b      	ldr	r3, [r3, #0]
 8101c48:	4a68      	ldr	r2, [pc, #416]	; (8101dec <HAL_DMA_Abort+0x238>)
 8101c4a:	4293      	cmp	r3, r2
 8101c4c:	d01d      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	4a67      	ldr	r2, [pc, #412]	; (8101df0 <HAL_DMA_Abort+0x23c>)
 8101c54:	4293      	cmp	r3, r2
 8101c56:	d018      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	681b      	ldr	r3, [r3, #0]
 8101c5c:	4a65      	ldr	r2, [pc, #404]	; (8101df4 <HAL_DMA_Abort+0x240>)
 8101c5e:	4293      	cmp	r3, r2
 8101c60:	d013      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	4a64      	ldr	r2, [pc, #400]	; (8101df8 <HAL_DMA_Abort+0x244>)
 8101c68:	4293      	cmp	r3, r2
 8101c6a:	d00e      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	681b      	ldr	r3, [r3, #0]
 8101c70:	4a62      	ldr	r2, [pc, #392]	; (8101dfc <HAL_DMA_Abort+0x248>)
 8101c72:	4293      	cmp	r3, r2
 8101c74:	d009      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	4a61      	ldr	r2, [pc, #388]	; (8101e00 <HAL_DMA_Abort+0x24c>)
 8101c7c:	4293      	cmp	r3, r2
 8101c7e:	d004      	beq.n	8101c8a <HAL_DMA_Abort+0xd6>
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	4a5f      	ldr	r2, [pc, #380]	; (8101e04 <HAL_DMA_Abort+0x250>)
 8101c86:	4293      	cmp	r3, r2
 8101c88:	d101      	bne.n	8101c8e <HAL_DMA_Abort+0xda>
 8101c8a:	2301      	movs	r3, #1
 8101c8c:	e000      	b.n	8101c90 <HAL_DMA_Abort+0xdc>
 8101c8e:	2300      	movs	r3, #0
 8101c90:	2b00      	cmp	r3, #0
 8101c92:	d013      	beq.n	8101cbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	681a      	ldr	r2, [r3, #0]
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	681b      	ldr	r3, [r3, #0]
 8101c9e:	f022 021e 	bic.w	r2, r2, #30
 8101ca2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	695a      	ldr	r2, [r3, #20]
 8101caa:	687b      	ldr	r3, [r7, #4]
 8101cac:	681b      	ldr	r3, [r3, #0]
 8101cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8101cb2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	617b      	str	r3, [r7, #20]
 8101cba:	e00a      	b.n	8101cd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	681a      	ldr	r2, [r3, #0]
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	f022 020e 	bic.w	r2, r2, #14
 8101cca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	681b      	ldr	r3, [r3, #0]
 8101cd6:	4a3c      	ldr	r2, [pc, #240]	; (8101dc8 <HAL_DMA_Abort+0x214>)
 8101cd8:	4293      	cmp	r3, r2
 8101cda:	d072      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	4a3a      	ldr	r2, [pc, #232]	; (8101dcc <HAL_DMA_Abort+0x218>)
 8101ce2:	4293      	cmp	r3, r2
 8101ce4:	d06d      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	4a39      	ldr	r2, [pc, #228]	; (8101dd0 <HAL_DMA_Abort+0x21c>)
 8101cec:	4293      	cmp	r3, r2
 8101cee:	d068      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	4a37      	ldr	r2, [pc, #220]	; (8101dd4 <HAL_DMA_Abort+0x220>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d063      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	4a36      	ldr	r2, [pc, #216]	; (8101dd8 <HAL_DMA_Abort+0x224>)
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d05e      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a34      	ldr	r2, [pc, #208]	; (8101ddc <HAL_DMA_Abort+0x228>)
 8101d0a:	4293      	cmp	r3, r2
 8101d0c:	d059      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	681b      	ldr	r3, [r3, #0]
 8101d12:	4a33      	ldr	r2, [pc, #204]	; (8101de0 <HAL_DMA_Abort+0x22c>)
 8101d14:	4293      	cmp	r3, r2
 8101d16:	d054      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	4a31      	ldr	r2, [pc, #196]	; (8101de4 <HAL_DMA_Abort+0x230>)
 8101d1e:	4293      	cmp	r3, r2
 8101d20:	d04f      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	4a30      	ldr	r2, [pc, #192]	; (8101de8 <HAL_DMA_Abort+0x234>)
 8101d28:	4293      	cmp	r3, r2
 8101d2a:	d04a      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	4a2e      	ldr	r2, [pc, #184]	; (8101dec <HAL_DMA_Abort+0x238>)
 8101d32:	4293      	cmp	r3, r2
 8101d34:	d045      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	4a2d      	ldr	r2, [pc, #180]	; (8101df0 <HAL_DMA_Abort+0x23c>)
 8101d3c:	4293      	cmp	r3, r2
 8101d3e:	d040      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	681b      	ldr	r3, [r3, #0]
 8101d44:	4a2b      	ldr	r2, [pc, #172]	; (8101df4 <HAL_DMA_Abort+0x240>)
 8101d46:	4293      	cmp	r3, r2
 8101d48:	d03b      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	681b      	ldr	r3, [r3, #0]
 8101d4e:	4a2a      	ldr	r2, [pc, #168]	; (8101df8 <HAL_DMA_Abort+0x244>)
 8101d50:	4293      	cmp	r3, r2
 8101d52:	d036      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	681b      	ldr	r3, [r3, #0]
 8101d58:	4a28      	ldr	r2, [pc, #160]	; (8101dfc <HAL_DMA_Abort+0x248>)
 8101d5a:	4293      	cmp	r3, r2
 8101d5c:	d031      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	4a27      	ldr	r2, [pc, #156]	; (8101e00 <HAL_DMA_Abort+0x24c>)
 8101d64:	4293      	cmp	r3, r2
 8101d66:	d02c      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	4a25      	ldr	r2, [pc, #148]	; (8101e04 <HAL_DMA_Abort+0x250>)
 8101d6e:	4293      	cmp	r3, r2
 8101d70:	d027      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	4a24      	ldr	r2, [pc, #144]	; (8101e08 <HAL_DMA_Abort+0x254>)
 8101d78:	4293      	cmp	r3, r2
 8101d7a:	d022      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	4a22      	ldr	r2, [pc, #136]	; (8101e0c <HAL_DMA_Abort+0x258>)
 8101d82:	4293      	cmp	r3, r2
 8101d84:	d01d      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	4a21      	ldr	r2, [pc, #132]	; (8101e10 <HAL_DMA_Abort+0x25c>)
 8101d8c:	4293      	cmp	r3, r2
 8101d8e:	d018      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	4a1f      	ldr	r2, [pc, #124]	; (8101e14 <HAL_DMA_Abort+0x260>)
 8101d96:	4293      	cmp	r3, r2
 8101d98:	d013      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	4a1e      	ldr	r2, [pc, #120]	; (8101e18 <HAL_DMA_Abort+0x264>)
 8101da0:	4293      	cmp	r3, r2
 8101da2:	d00e      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	681b      	ldr	r3, [r3, #0]
 8101da8:	4a1c      	ldr	r2, [pc, #112]	; (8101e1c <HAL_DMA_Abort+0x268>)
 8101daa:	4293      	cmp	r3, r2
 8101dac:	d009      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	4a1b      	ldr	r2, [pc, #108]	; (8101e20 <HAL_DMA_Abort+0x26c>)
 8101db4:	4293      	cmp	r3, r2
 8101db6:	d004      	beq.n	8101dc2 <HAL_DMA_Abort+0x20e>
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	681b      	ldr	r3, [r3, #0]
 8101dbc:	4a19      	ldr	r2, [pc, #100]	; (8101e24 <HAL_DMA_Abort+0x270>)
 8101dbe:	4293      	cmp	r3, r2
 8101dc0:	d132      	bne.n	8101e28 <HAL_DMA_Abort+0x274>
 8101dc2:	2301      	movs	r3, #1
 8101dc4:	e031      	b.n	8101e2a <HAL_DMA_Abort+0x276>
 8101dc6:	bf00      	nop
 8101dc8:	40020010 	.word	0x40020010
 8101dcc:	40020028 	.word	0x40020028
 8101dd0:	40020040 	.word	0x40020040
 8101dd4:	40020058 	.word	0x40020058
 8101dd8:	40020070 	.word	0x40020070
 8101ddc:	40020088 	.word	0x40020088
 8101de0:	400200a0 	.word	0x400200a0
 8101de4:	400200b8 	.word	0x400200b8
 8101de8:	40020410 	.word	0x40020410
 8101dec:	40020428 	.word	0x40020428
 8101df0:	40020440 	.word	0x40020440
 8101df4:	40020458 	.word	0x40020458
 8101df8:	40020470 	.word	0x40020470
 8101dfc:	40020488 	.word	0x40020488
 8101e00:	400204a0 	.word	0x400204a0
 8101e04:	400204b8 	.word	0x400204b8
 8101e08:	58025408 	.word	0x58025408
 8101e0c:	5802541c 	.word	0x5802541c
 8101e10:	58025430 	.word	0x58025430
 8101e14:	58025444 	.word	0x58025444
 8101e18:	58025458 	.word	0x58025458
 8101e1c:	5802546c 	.word	0x5802546c
 8101e20:	58025480 	.word	0x58025480
 8101e24:	58025494 	.word	0x58025494
 8101e28:	2300      	movs	r3, #0
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d007      	beq.n	8101e3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101e32:	681a      	ldr	r2, [r3, #0]
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	4a6d      	ldr	r2, [pc, #436]	; (8101ff8 <HAL_DMA_Abort+0x444>)
 8101e44:	4293      	cmp	r3, r2
 8101e46:	d04a      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	4a6b      	ldr	r2, [pc, #428]	; (8101ffc <HAL_DMA_Abort+0x448>)
 8101e4e:	4293      	cmp	r3, r2
 8101e50:	d045      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a6a      	ldr	r2, [pc, #424]	; (8102000 <HAL_DMA_Abort+0x44c>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	d040      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a68      	ldr	r2, [pc, #416]	; (8102004 <HAL_DMA_Abort+0x450>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d03b      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a67      	ldr	r2, [pc, #412]	; (8102008 <HAL_DMA_Abort+0x454>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d036      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4a65      	ldr	r2, [pc, #404]	; (810200c <HAL_DMA_Abort+0x458>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d031      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	4a64      	ldr	r2, [pc, #400]	; (8102010 <HAL_DMA_Abort+0x45c>)
 8101e80:	4293      	cmp	r3, r2
 8101e82:	d02c      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	4a62      	ldr	r2, [pc, #392]	; (8102014 <HAL_DMA_Abort+0x460>)
 8101e8a:	4293      	cmp	r3, r2
 8101e8c:	d027      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	4a61      	ldr	r2, [pc, #388]	; (8102018 <HAL_DMA_Abort+0x464>)
 8101e94:	4293      	cmp	r3, r2
 8101e96:	d022      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	4a5f      	ldr	r2, [pc, #380]	; (810201c <HAL_DMA_Abort+0x468>)
 8101e9e:	4293      	cmp	r3, r2
 8101ea0:	d01d      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	4a5e      	ldr	r2, [pc, #376]	; (8102020 <HAL_DMA_Abort+0x46c>)
 8101ea8:	4293      	cmp	r3, r2
 8101eaa:	d018      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	4a5c      	ldr	r2, [pc, #368]	; (8102024 <HAL_DMA_Abort+0x470>)
 8101eb2:	4293      	cmp	r3, r2
 8101eb4:	d013      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	4a5b      	ldr	r2, [pc, #364]	; (8102028 <HAL_DMA_Abort+0x474>)
 8101ebc:	4293      	cmp	r3, r2
 8101ebe:	d00e      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	4a59      	ldr	r2, [pc, #356]	; (810202c <HAL_DMA_Abort+0x478>)
 8101ec6:	4293      	cmp	r3, r2
 8101ec8:	d009      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	681b      	ldr	r3, [r3, #0]
 8101ece:	4a58      	ldr	r2, [pc, #352]	; (8102030 <HAL_DMA_Abort+0x47c>)
 8101ed0:	4293      	cmp	r3, r2
 8101ed2:	d004      	beq.n	8101ede <HAL_DMA_Abort+0x32a>
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	4a56      	ldr	r2, [pc, #344]	; (8102034 <HAL_DMA_Abort+0x480>)
 8101eda:	4293      	cmp	r3, r2
 8101edc:	d108      	bne.n	8101ef0 <HAL_DMA_Abort+0x33c>
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	681b      	ldr	r3, [r3, #0]
 8101ee2:	681a      	ldr	r2, [r3, #0]
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	f022 0201 	bic.w	r2, r2, #1
 8101eec:	601a      	str	r2, [r3, #0]
 8101eee:	e007      	b.n	8101f00 <HAL_DMA_Abort+0x34c>
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	681a      	ldr	r2, [r3, #0]
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	f022 0201 	bic.w	r2, r2, #1
 8101efe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101f00:	e013      	b.n	8101f2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101f02:	f7ff fd27 	bl	8101954 <HAL_GetTick>
 8101f06:	4602      	mov	r2, r0
 8101f08:	693b      	ldr	r3, [r7, #16]
 8101f0a:	1ad3      	subs	r3, r2, r3
 8101f0c:	2b05      	cmp	r3, #5
 8101f0e:	d90c      	bls.n	8101f2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	2220      	movs	r2, #32
 8101f14:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	2203      	movs	r2, #3
 8101f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	2200      	movs	r2, #0
 8101f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8101f26:	2301      	movs	r3, #1
 8101f28:	e12d      	b.n	8102186 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101f2a:	697b      	ldr	r3, [r7, #20]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	f003 0301 	and.w	r3, r3, #1
 8101f32:	2b00      	cmp	r3, #0
 8101f34:	d1e5      	bne.n	8101f02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	4a2f      	ldr	r2, [pc, #188]	; (8101ff8 <HAL_DMA_Abort+0x444>)
 8101f3c:	4293      	cmp	r3, r2
 8101f3e:	d04a      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	4a2d      	ldr	r2, [pc, #180]	; (8101ffc <HAL_DMA_Abort+0x448>)
 8101f46:	4293      	cmp	r3, r2
 8101f48:	d045      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	4a2c      	ldr	r2, [pc, #176]	; (8102000 <HAL_DMA_Abort+0x44c>)
 8101f50:	4293      	cmp	r3, r2
 8101f52:	d040      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	4a2a      	ldr	r2, [pc, #168]	; (8102004 <HAL_DMA_Abort+0x450>)
 8101f5a:	4293      	cmp	r3, r2
 8101f5c:	d03b      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	681b      	ldr	r3, [r3, #0]
 8101f62:	4a29      	ldr	r2, [pc, #164]	; (8102008 <HAL_DMA_Abort+0x454>)
 8101f64:	4293      	cmp	r3, r2
 8101f66:	d036      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	4a27      	ldr	r2, [pc, #156]	; (810200c <HAL_DMA_Abort+0x458>)
 8101f6e:	4293      	cmp	r3, r2
 8101f70:	d031      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	4a26      	ldr	r2, [pc, #152]	; (8102010 <HAL_DMA_Abort+0x45c>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d02c      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	4a24      	ldr	r2, [pc, #144]	; (8102014 <HAL_DMA_Abort+0x460>)
 8101f82:	4293      	cmp	r3, r2
 8101f84:	d027      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	4a23      	ldr	r2, [pc, #140]	; (8102018 <HAL_DMA_Abort+0x464>)
 8101f8c:	4293      	cmp	r3, r2
 8101f8e:	d022      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	4a21      	ldr	r2, [pc, #132]	; (810201c <HAL_DMA_Abort+0x468>)
 8101f96:	4293      	cmp	r3, r2
 8101f98:	d01d      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a20      	ldr	r2, [pc, #128]	; (8102020 <HAL_DMA_Abort+0x46c>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d018      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a1e      	ldr	r2, [pc, #120]	; (8102024 <HAL_DMA_Abort+0x470>)
 8101faa:	4293      	cmp	r3, r2
 8101fac:	d013      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	4a1d      	ldr	r2, [pc, #116]	; (8102028 <HAL_DMA_Abort+0x474>)
 8101fb4:	4293      	cmp	r3, r2
 8101fb6:	d00e      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	4a1b      	ldr	r2, [pc, #108]	; (810202c <HAL_DMA_Abort+0x478>)
 8101fbe:	4293      	cmp	r3, r2
 8101fc0:	d009      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	4a1a      	ldr	r2, [pc, #104]	; (8102030 <HAL_DMA_Abort+0x47c>)
 8101fc8:	4293      	cmp	r3, r2
 8101fca:	d004      	beq.n	8101fd6 <HAL_DMA_Abort+0x422>
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	4a18      	ldr	r2, [pc, #96]	; (8102034 <HAL_DMA_Abort+0x480>)
 8101fd2:	4293      	cmp	r3, r2
 8101fd4:	d101      	bne.n	8101fda <HAL_DMA_Abort+0x426>
 8101fd6:	2301      	movs	r3, #1
 8101fd8:	e000      	b.n	8101fdc <HAL_DMA_Abort+0x428>
 8101fda:	2300      	movs	r3, #0
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d02b      	beq.n	8102038 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101fe4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101fea:	f003 031f 	and.w	r3, r3, #31
 8101fee:	223f      	movs	r2, #63	; 0x3f
 8101ff0:	409a      	lsls	r2, r3
 8101ff2:	68bb      	ldr	r3, [r7, #8]
 8101ff4:	609a      	str	r2, [r3, #8]
 8101ff6:	e02a      	b.n	810204e <HAL_DMA_Abort+0x49a>
 8101ff8:	40020010 	.word	0x40020010
 8101ffc:	40020028 	.word	0x40020028
 8102000:	40020040 	.word	0x40020040
 8102004:	40020058 	.word	0x40020058
 8102008:	40020070 	.word	0x40020070
 810200c:	40020088 	.word	0x40020088
 8102010:	400200a0 	.word	0x400200a0
 8102014:	400200b8 	.word	0x400200b8
 8102018:	40020410 	.word	0x40020410
 810201c:	40020428 	.word	0x40020428
 8102020:	40020440 	.word	0x40020440
 8102024:	40020458 	.word	0x40020458
 8102028:	40020470 	.word	0x40020470
 810202c:	40020488 	.word	0x40020488
 8102030:	400204a0 	.word	0x400204a0
 8102034:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810203c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102042:	f003 031f 	and.w	r3, r3, #31
 8102046:	2201      	movs	r2, #1
 8102048:	409a      	lsls	r2, r3
 810204a:	68fb      	ldr	r3, [r7, #12]
 810204c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	4a4f      	ldr	r2, [pc, #316]	; (8102190 <HAL_DMA_Abort+0x5dc>)
 8102054:	4293      	cmp	r3, r2
 8102056:	d072      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	4a4d      	ldr	r2, [pc, #308]	; (8102194 <HAL_DMA_Abort+0x5e0>)
 810205e:	4293      	cmp	r3, r2
 8102060:	d06d      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	4a4c      	ldr	r2, [pc, #304]	; (8102198 <HAL_DMA_Abort+0x5e4>)
 8102068:	4293      	cmp	r3, r2
 810206a:	d068      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	4a4a      	ldr	r2, [pc, #296]	; (810219c <HAL_DMA_Abort+0x5e8>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d063      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4a49      	ldr	r2, [pc, #292]	; (81021a0 <HAL_DMA_Abort+0x5ec>)
 810207c:	4293      	cmp	r3, r2
 810207e:	d05e      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	4a47      	ldr	r2, [pc, #284]	; (81021a4 <HAL_DMA_Abort+0x5f0>)
 8102086:	4293      	cmp	r3, r2
 8102088:	d059      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	4a46      	ldr	r2, [pc, #280]	; (81021a8 <HAL_DMA_Abort+0x5f4>)
 8102090:	4293      	cmp	r3, r2
 8102092:	d054      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	4a44      	ldr	r2, [pc, #272]	; (81021ac <HAL_DMA_Abort+0x5f8>)
 810209a:	4293      	cmp	r3, r2
 810209c:	d04f      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	4a43      	ldr	r2, [pc, #268]	; (81021b0 <HAL_DMA_Abort+0x5fc>)
 81020a4:	4293      	cmp	r3, r2
 81020a6:	d04a      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	4a41      	ldr	r2, [pc, #260]	; (81021b4 <HAL_DMA_Abort+0x600>)
 81020ae:	4293      	cmp	r3, r2
 81020b0:	d045      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	4a40      	ldr	r2, [pc, #256]	; (81021b8 <HAL_DMA_Abort+0x604>)
 81020b8:	4293      	cmp	r3, r2
 81020ba:	d040      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	4a3e      	ldr	r2, [pc, #248]	; (81021bc <HAL_DMA_Abort+0x608>)
 81020c2:	4293      	cmp	r3, r2
 81020c4:	d03b      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	4a3d      	ldr	r2, [pc, #244]	; (81021c0 <HAL_DMA_Abort+0x60c>)
 81020cc:	4293      	cmp	r3, r2
 81020ce:	d036      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	4a3b      	ldr	r2, [pc, #236]	; (81021c4 <HAL_DMA_Abort+0x610>)
 81020d6:	4293      	cmp	r3, r2
 81020d8:	d031      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	681b      	ldr	r3, [r3, #0]
 81020de:	4a3a      	ldr	r2, [pc, #232]	; (81021c8 <HAL_DMA_Abort+0x614>)
 81020e0:	4293      	cmp	r3, r2
 81020e2:	d02c      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	4a38      	ldr	r2, [pc, #224]	; (81021cc <HAL_DMA_Abort+0x618>)
 81020ea:	4293      	cmp	r3, r2
 81020ec:	d027      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	681b      	ldr	r3, [r3, #0]
 81020f2:	4a37      	ldr	r2, [pc, #220]	; (81021d0 <HAL_DMA_Abort+0x61c>)
 81020f4:	4293      	cmp	r3, r2
 81020f6:	d022      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	4a35      	ldr	r2, [pc, #212]	; (81021d4 <HAL_DMA_Abort+0x620>)
 81020fe:	4293      	cmp	r3, r2
 8102100:	d01d      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	681b      	ldr	r3, [r3, #0]
 8102106:	4a34      	ldr	r2, [pc, #208]	; (81021d8 <HAL_DMA_Abort+0x624>)
 8102108:	4293      	cmp	r3, r2
 810210a:	d018      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	681b      	ldr	r3, [r3, #0]
 8102110:	4a32      	ldr	r2, [pc, #200]	; (81021dc <HAL_DMA_Abort+0x628>)
 8102112:	4293      	cmp	r3, r2
 8102114:	d013      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	681b      	ldr	r3, [r3, #0]
 810211a:	4a31      	ldr	r2, [pc, #196]	; (81021e0 <HAL_DMA_Abort+0x62c>)
 810211c:	4293      	cmp	r3, r2
 810211e:	d00e      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	4a2f      	ldr	r2, [pc, #188]	; (81021e4 <HAL_DMA_Abort+0x630>)
 8102126:	4293      	cmp	r3, r2
 8102128:	d009      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	681b      	ldr	r3, [r3, #0]
 810212e:	4a2e      	ldr	r2, [pc, #184]	; (81021e8 <HAL_DMA_Abort+0x634>)
 8102130:	4293      	cmp	r3, r2
 8102132:	d004      	beq.n	810213e <HAL_DMA_Abort+0x58a>
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	681b      	ldr	r3, [r3, #0]
 8102138:	4a2c      	ldr	r2, [pc, #176]	; (81021ec <HAL_DMA_Abort+0x638>)
 810213a:	4293      	cmp	r3, r2
 810213c:	d101      	bne.n	8102142 <HAL_DMA_Abort+0x58e>
 810213e:	2301      	movs	r3, #1
 8102140:	e000      	b.n	8102144 <HAL_DMA_Abort+0x590>
 8102142:	2300      	movs	r3, #0
 8102144:	2b00      	cmp	r3, #0
 8102146:	d015      	beq.n	8102174 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102148:	687b      	ldr	r3, [r7, #4]
 810214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810214c:	687a      	ldr	r2, [r7, #4]
 810214e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102150:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8102152:	687b      	ldr	r3, [r7, #4]
 8102154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102156:	2b00      	cmp	r3, #0
 8102158:	d00c      	beq.n	8102174 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810215e:	681a      	ldr	r2, [r3, #0]
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102168:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810216e:	687a      	ldr	r2, [r7, #4]
 8102170:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102172:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	2201      	movs	r2, #1
 8102178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	2200      	movs	r2, #0
 8102180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8102184:	2300      	movs	r3, #0
}
 8102186:	4618      	mov	r0, r3
 8102188:	3718      	adds	r7, #24
 810218a:	46bd      	mov	sp, r7
 810218c:	bd80      	pop	{r7, pc}
 810218e:	bf00      	nop
 8102190:	40020010 	.word	0x40020010
 8102194:	40020028 	.word	0x40020028
 8102198:	40020040 	.word	0x40020040
 810219c:	40020058 	.word	0x40020058
 81021a0:	40020070 	.word	0x40020070
 81021a4:	40020088 	.word	0x40020088
 81021a8:	400200a0 	.word	0x400200a0
 81021ac:	400200b8 	.word	0x400200b8
 81021b0:	40020410 	.word	0x40020410
 81021b4:	40020428 	.word	0x40020428
 81021b8:	40020440 	.word	0x40020440
 81021bc:	40020458 	.word	0x40020458
 81021c0:	40020470 	.word	0x40020470
 81021c4:	40020488 	.word	0x40020488
 81021c8:	400204a0 	.word	0x400204a0
 81021cc:	400204b8 	.word	0x400204b8
 81021d0:	58025408 	.word	0x58025408
 81021d4:	5802541c 	.word	0x5802541c
 81021d8:	58025430 	.word	0x58025430
 81021dc:	58025444 	.word	0x58025444
 81021e0:	58025458 	.word	0x58025458
 81021e4:	5802546c 	.word	0x5802546c
 81021e8:	58025480 	.word	0x58025480
 81021ec:	58025494 	.word	0x58025494

081021f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81021f0:	b580      	push	{r7, lr}
 81021f2:	b084      	sub	sp, #16
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	2b00      	cmp	r3, #0
 81021fc:	d101      	bne.n	8102202 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81021fe:	2301      	movs	r3, #1
 8102200:	e205      	b.n	810260e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102208:	b2db      	uxtb	r3, r3
 810220a:	2b02      	cmp	r3, #2
 810220c:	d004      	beq.n	8102218 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	2280      	movs	r2, #128	; 0x80
 8102212:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102214:	2301      	movs	r3, #1
 8102216:	e1fa      	b.n	810260e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	4a8c      	ldr	r2, [pc, #560]	; (8102450 <HAL_DMA_Abort_IT+0x260>)
 810221e:	4293      	cmp	r3, r2
 8102220:	d04a      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	4a8b      	ldr	r2, [pc, #556]	; (8102454 <HAL_DMA_Abort_IT+0x264>)
 8102228:	4293      	cmp	r3, r2
 810222a:	d045      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	4a89      	ldr	r2, [pc, #548]	; (8102458 <HAL_DMA_Abort_IT+0x268>)
 8102232:	4293      	cmp	r3, r2
 8102234:	d040      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	4a88      	ldr	r2, [pc, #544]	; (810245c <HAL_DMA_Abort_IT+0x26c>)
 810223c:	4293      	cmp	r3, r2
 810223e:	d03b      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102240:	687b      	ldr	r3, [r7, #4]
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	4a86      	ldr	r2, [pc, #536]	; (8102460 <HAL_DMA_Abort_IT+0x270>)
 8102246:	4293      	cmp	r3, r2
 8102248:	d036      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	681b      	ldr	r3, [r3, #0]
 810224e:	4a85      	ldr	r2, [pc, #532]	; (8102464 <HAL_DMA_Abort_IT+0x274>)
 8102250:	4293      	cmp	r3, r2
 8102252:	d031      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	4a83      	ldr	r2, [pc, #524]	; (8102468 <HAL_DMA_Abort_IT+0x278>)
 810225a:	4293      	cmp	r3, r2
 810225c:	d02c      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	681b      	ldr	r3, [r3, #0]
 8102262:	4a82      	ldr	r2, [pc, #520]	; (810246c <HAL_DMA_Abort_IT+0x27c>)
 8102264:	4293      	cmp	r3, r2
 8102266:	d027      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102268:	687b      	ldr	r3, [r7, #4]
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	4a80      	ldr	r2, [pc, #512]	; (8102470 <HAL_DMA_Abort_IT+0x280>)
 810226e:	4293      	cmp	r3, r2
 8102270:	d022      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	4a7f      	ldr	r2, [pc, #508]	; (8102474 <HAL_DMA_Abort_IT+0x284>)
 8102278:	4293      	cmp	r3, r2
 810227a:	d01d      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 810227c:	687b      	ldr	r3, [r7, #4]
 810227e:	681b      	ldr	r3, [r3, #0]
 8102280:	4a7d      	ldr	r2, [pc, #500]	; (8102478 <HAL_DMA_Abort_IT+0x288>)
 8102282:	4293      	cmp	r3, r2
 8102284:	d018      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	4a7c      	ldr	r2, [pc, #496]	; (810247c <HAL_DMA_Abort_IT+0x28c>)
 810228c:	4293      	cmp	r3, r2
 810228e:	d013      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	4a7a      	ldr	r2, [pc, #488]	; (8102480 <HAL_DMA_Abort_IT+0x290>)
 8102296:	4293      	cmp	r3, r2
 8102298:	d00e      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	4a79      	ldr	r2, [pc, #484]	; (8102484 <HAL_DMA_Abort_IT+0x294>)
 81022a0:	4293      	cmp	r3, r2
 81022a2:	d009      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	4a77      	ldr	r2, [pc, #476]	; (8102488 <HAL_DMA_Abort_IT+0x298>)
 81022aa:	4293      	cmp	r3, r2
 81022ac:	d004      	beq.n	81022b8 <HAL_DMA_Abort_IT+0xc8>
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	4a76      	ldr	r2, [pc, #472]	; (810248c <HAL_DMA_Abort_IT+0x29c>)
 81022b4:	4293      	cmp	r3, r2
 81022b6:	d101      	bne.n	81022bc <HAL_DMA_Abort_IT+0xcc>
 81022b8:	2301      	movs	r3, #1
 81022ba:	e000      	b.n	81022be <HAL_DMA_Abort_IT+0xce>
 81022bc:	2300      	movs	r3, #0
 81022be:	2b00      	cmp	r3, #0
 81022c0:	d065      	beq.n	810238e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	2204      	movs	r2, #4
 81022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	681b      	ldr	r3, [r3, #0]
 81022ce:	4a60      	ldr	r2, [pc, #384]	; (8102450 <HAL_DMA_Abort_IT+0x260>)
 81022d0:	4293      	cmp	r3, r2
 81022d2:	d04a      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	4a5e      	ldr	r2, [pc, #376]	; (8102454 <HAL_DMA_Abort_IT+0x264>)
 81022da:	4293      	cmp	r3, r2
 81022dc:	d045      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	681b      	ldr	r3, [r3, #0]
 81022e2:	4a5d      	ldr	r2, [pc, #372]	; (8102458 <HAL_DMA_Abort_IT+0x268>)
 81022e4:	4293      	cmp	r3, r2
 81022e6:	d040      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 81022e8:	687b      	ldr	r3, [r7, #4]
 81022ea:	681b      	ldr	r3, [r3, #0]
 81022ec:	4a5b      	ldr	r2, [pc, #364]	; (810245c <HAL_DMA_Abort_IT+0x26c>)
 81022ee:	4293      	cmp	r3, r2
 81022f0:	d03b      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	4a5a      	ldr	r2, [pc, #360]	; (8102460 <HAL_DMA_Abort_IT+0x270>)
 81022f8:	4293      	cmp	r3, r2
 81022fa:	d036      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	4a58      	ldr	r2, [pc, #352]	; (8102464 <HAL_DMA_Abort_IT+0x274>)
 8102302:	4293      	cmp	r3, r2
 8102304:	d031      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	4a57      	ldr	r2, [pc, #348]	; (8102468 <HAL_DMA_Abort_IT+0x278>)
 810230c:	4293      	cmp	r3, r2
 810230e:	d02c      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	4a55      	ldr	r2, [pc, #340]	; (810246c <HAL_DMA_Abort_IT+0x27c>)
 8102316:	4293      	cmp	r3, r2
 8102318:	d027      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	681b      	ldr	r3, [r3, #0]
 810231e:	4a54      	ldr	r2, [pc, #336]	; (8102470 <HAL_DMA_Abort_IT+0x280>)
 8102320:	4293      	cmp	r3, r2
 8102322:	d022      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102324:	687b      	ldr	r3, [r7, #4]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	4a52      	ldr	r2, [pc, #328]	; (8102474 <HAL_DMA_Abort_IT+0x284>)
 810232a:	4293      	cmp	r3, r2
 810232c:	d01d      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	4a51      	ldr	r2, [pc, #324]	; (8102478 <HAL_DMA_Abort_IT+0x288>)
 8102334:	4293      	cmp	r3, r2
 8102336:	d018      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	4a4f      	ldr	r2, [pc, #316]	; (810247c <HAL_DMA_Abort_IT+0x28c>)
 810233e:	4293      	cmp	r3, r2
 8102340:	d013      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	4a4e      	ldr	r2, [pc, #312]	; (8102480 <HAL_DMA_Abort_IT+0x290>)
 8102348:	4293      	cmp	r3, r2
 810234a:	d00e      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	4a4c      	ldr	r2, [pc, #304]	; (8102484 <HAL_DMA_Abort_IT+0x294>)
 8102352:	4293      	cmp	r3, r2
 8102354:	d009      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	4a4b      	ldr	r2, [pc, #300]	; (8102488 <HAL_DMA_Abort_IT+0x298>)
 810235c:	4293      	cmp	r3, r2
 810235e:	d004      	beq.n	810236a <HAL_DMA_Abort_IT+0x17a>
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	4a49      	ldr	r2, [pc, #292]	; (810248c <HAL_DMA_Abort_IT+0x29c>)
 8102366:	4293      	cmp	r3, r2
 8102368:	d108      	bne.n	810237c <HAL_DMA_Abort_IT+0x18c>
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	681b      	ldr	r3, [r3, #0]
 810236e:	681a      	ldr	r2, [r3, #0]
 8102370:	687b      	ldr	r3, [r7, #4]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	f022 0201 	bic.w	r2, r2, #1
 8102378:	601a      	str	r2, [r3, #0]
 810237a:	e147      	b.n	810260c <HAL_DMA_Abort_IT+0x41c>
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	681a      	ldr	r2, [r3, #0]
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	f022 0201 	bic.w	r2, r2, #1
 810238a:	601a      	str	r2, [r3, #0]
 810238c:	e13e      	b.n	810260c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	681a      	ldr	r2, [r3, #0]
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	681b      	ldr	r3, [r3, #0]
 8102398:	f022 020e 	bic.w	r2, r2, #14
 810239c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	681b      	ldr	r3, [r3, #0]
 81023a2:	4a2b      	ldr	r2, [pc, #172]	; (8102450 <HAL_DMA_Abort_IT+0x260>)
 81023a4:	4293      	cmp	r3, r2
 81023a6:	d04a      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	4a29      	ldr	r2, [pc, #164]	; (8102454 <HAL_DMA_Abort_IT+0x264>)
 81023ae:	4293      	cmp	r3, r2
 81023b0:	d045      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	4a28      	ldr	r2, [pc, #160]	; (8102458 <HAL_DMA_Abort_IT+0x268>)
 81023b8:	4293      	cmp	r3, r2
 81023ba:	d040      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	4a26      	ldr	r2, [pc, #152]	; (810245c <HAL_DMA_Abort_IT+0x26c>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d03b      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	4a25      	ldr	r2, [pc, #148]	; (8102460 <HAL_DMA_Abort_IT+0x270>)
 81023cc:	4293      	cmp	r3, r2
 81023ce:	d036      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	4a23      	ldr	r2, [pc, #140]	; (8102464 <HAL_DMA_Abort_IT+0x274>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d031      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a22      	ldr	r2, [pc, #136]	; (8102468 <HAL_DMA_Abort_IT+0x278>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d02c      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a20      	ldr	r2, [pc, #128]	; (810246c <HAL_DMA_Abort_IT+0x27c>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d027      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	4a1f      	ldr	r2, [pc, #124]	; (8102470 <HAL_DMA_Abort_IT+0x280>)
 81023f4:	4293      	cmp	r3, r2
 81023f6:	d022      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4a1d      	ldr	r2, [pc, #116]	; (8102474 <HAL_DMA_Abort_IT+0x284>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d01d      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	4a1c      	ldr	r2, [pc, #112]	; (8102478 <HAL_DMA_Abort_IT+0x288>)
 8102408:	4293      	cmp	r3, r2
 810240a:	d018      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a1a      	ldr	r2, [pc, #104]	; (810247c <HAL_DMA_Abort_IT+0x28c>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d013      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a19      	ldr	r2, [pc, #100]	; (8102480 <HAL_DMA_Abort_IT+0x290>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d00e      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a17      	ldr	r2, [pc, #92]	; (8102484 <HAL_DMA_Abort_IT+0x294>)
 8102426:	4293      	cmp	r3, r2
 8102428:	d009      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	4a16      	ldr	r2, [pc, #88]	; (8102488 <HAL_DMA_Abort_IT+0x298>)
 8102430:	4293      	cmp	r3, r2
 8102432:	d004      	beq.n	810243e <HAL_DMA_Abort_IT+0x24e>
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	4a14      	ldr	r2, [pc, #80]	; (810248c <HAL_DMA_Abort_IT+0x29c>)
 810243a:	4293      	cmp	r3, r2
 810243c:	d128      	bne.n	8102490 <HAL_DMA_Abort_IT+0x2a0>
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	681a      	ldr	r2, [r3, #0]
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	f022 0201 	bic.w	r2, r2, #1
 810244c:	601a      	str	r2, [r3, #0]
 810244e:	e027      	b.n	81024a0 <HAL_DMA_Abort_IT+0x2b0>
 8102450:	40020010 	.word	0x40020010
 8102454:	40020028 	.word	0x40020028
 8102458:	40020040 	.word	0x40020040
 810245c:	40020058 	.word	0x40020058
 8102460:	40020070 	.word	0x40020070
 8102464:	40020088 	.word	0x40020088
 8102468:	400200a0 	.word	0x400200a0
 810246c:	400200b8 	.word	0x400200b8
 8102470:	40020410 	.word	0x40020410
 8102474:	40020428 	.word	0x40020428
 8102478:	40020440 	.word	0x40020440
 810247c:	40020458 	.word	0x40020458
 8102480:	40020470 	.word	0x40020470
 8102484:	40020488 	.word	0x40020488
 8102488:	400204a0 	.word	0x400204a0
 810248c:	400204b8 	.word	0x400204b8
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	681b      	ldr	r3, [r3, #0]
 8102494:	681a      	ldr	r2, [r3, #0]
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	681b      	ldr	r3, [r3, #0]
 810249a:	f022 0201 	bic.w	r2, r2, #1
 810249e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	681b      	ldr	r3, [r3, #0]
 81024a4:	4a5c      	ldr	r2, [pc, #368]	; (8102618 <HAL_DMA_Abort_IT+0x428>)
 81024a6:	4293      	cmp	r3, r2
 81024a8:	d072      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	4a5b      	ldr	r2, [pc, #364]	; (810261c <HAL_DMA_Abort_IT+0x42c>)
 81024b0:	4293      	cmp	r3, r2
 81024b2:	d06d      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	4a59      	ldr	r2, [pc, #356]	; (8102620 <HAL_DMA_Abort_IT+0x430>)
 81024ba:	4293      	cmp	r3, r2
 81024bc:	d068      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	4a58      	ldr	r2, [pc, #352]	; (8102624 <HAL_DMA_Abort_IT+0x434>)
 81024c4:	4293      	cmp	r3, r2
 81024c6:	d063      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	4a56      	ldr	r2, [pc, #344]	; (8102628 <HAL_DMA_Abort_IT+0x438>)
 81024ce:	4293      	cmp	r3, r2
 81024d0:	d05e      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	4a55      	ldr	r2, [pc, #340]	; (810262c <HAL_DMA_Abort_IT+0x43c>)
 81024d8:	4293      	cmp	r3, r2
 81024da:	d059      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	681b      	ldr	r3, [r3, #0]
 81024e0:	4a53      	ldr	r2, [pc, #332]	; (8102630 <HAL_DMA_Abort_IT+0x440>)
 81024e2:	4293      	cmp	r3, r2
 81024e4:	d054      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	681b      	ldr	r3, [r3, #0]
 81024ea:	4a52      	ldr	r2, [pc, #328]	; (8102634 <HAL_DMA_Abort_IT+0x444>)
 81024ec:	4293      	cmp	r3, r2
 81024ee:	d04f      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	4a50      	ldr	r2, [pc, #320]	; (8102638 <HAL_DMA_Abort_IT+0x448>)
 81024f6:	4293      	cmp	r3, r2
 81024f8:	d04a      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	4a4f      	ldr	r2, [pc, #316]	; (810263c <HAL_DMA_Abort_IT+0x44c>)
 8102500:	4293      	cmp	r3, r2
 8102502:	d045      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	4a4d      	ldr	r2, [pc, #308]	; (8102640 <HAL_DMA_Abort_IT+0x450>)
 810250a:	4293      	cmp	r3, r2
 810250c:	d040      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	4a4c      	ldr	r2, [pc, #304]	; (8102644 <HAL_DMA_Abort_IT+0x454>)
 8102514:	4293      	cmp	r3, r2
 8102516:	d03b      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	4a4a      	ldr	r2, [pc, #296]	; (8102648 <HAL_DMA_Abort_IT+0x458>)
 810251e:	4293      	cmp	r3, r2
 8102520:	d036      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	4a49      	ldr	r2, [pc, #292]	; (810264c <HAL_DMA_Abort_IT+0x45c>)
 8102528:	4293      	cmp	r3, r2
 810252a:	d031      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	4a47      	ldr	r2, [pc, #284]	; (8102650 <HAL_DMA_Abort_IT+0x460>)
 8102532:	4293      	cmp	r3, r2
 8102534:	d02c      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a46      	ldr	r2, [pc, #280]	; (8102654 <HAL_DMA_Abort_IT+0x464>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d027      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	4a44      	ldr	r2, [pc, #272]	; (8102658 <HAL_DMA_Abort_IT+0x468>)
 8102546:	4293      	cmp	r3, r2
 8102548:	d022      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	4a43      	ldr	r2, [pc, #268]	; (810265c <HAL_DMA_Abort_IT+0x46c>)
 8102550:	4293      	cmp	r3, r2
 8102552:	d01d      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	4a41      	ldr	r2, [pc, #260]	; (8102660 <HAL_DMA_Abort_IT+0x470>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d018      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a40      	ldr	r2, [pc, #256]	; (8102664 <HAL_DMA_Abort_IT+0x474>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d013      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a3e      	ldr	r2, [pc, #248]	; (8102668 <HAL_DMA_Abort_IT+0x478>)
 810256e:	4293      	cmp	r3, r2
 8102570:	d00e      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a3d      	ldr	r2, [pc, #244]	; (810266c <HAL_DMA_Abort_IT+0x47c>)
 8102578:	4293      	cmp	r3, r2
 810257a:	d009      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	4a3b      	ldr	r2, [pc, #236]	; (8102670 <HAL_DMA_Abort_IT+0x480>)
 8102582:	4293      	cmp	r3, r2
 8102584:	d004      	beq.n	8102590 <HAL_DMA_Abort_IT+0x3a0>
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	4a3a      	ldr	r2, [pc, #232]	; (8102674 <HAL_DMA_Abort_IT+0x484>)
 810258c:	4293      	cmp	r3, r2
 810258e:	d101      	bne.n	8102594 <HAL_DMA_Abort_IT+0x3a4>
 8102590:	2301      	movs	r3, #1
 8102592:	e000      	b.n	8102596 <HAL_DMA_Abort_IT+0x3a6>
 8102594:	2300      	movs	r3, #0
 8102596:	2b00      	cmp	r3, #0
 8102598:	d028      	beq.n	81025ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810259e:	681a      	ldr	r2, [r3, #0]
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81025a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81025b4:	f003 031f 	and.w	r3, r3, #31
 81025b8:	2201      	movs	r2, #1
 81025ba:	409a      	lsls	r2, r3
 81025bc:	68fb      	ldr	r3, [r7, #12]
 81025be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81025c4:	687a      	ldr	r2, [r7, #4]
 81025c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81025c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81025ce:	2b00      	cmp	r3, #0
 81025d0:	d00c      	beq.n	81025ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81025d6:	681a      	ldr	r2, [r3, #0]
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81025dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81025e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81025e6:	687a      	ldr	r2, [r7, #4]
 81025e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81025ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	2201      	movs	r2, #1
 81025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	2200      	movs	r2, #0
 81025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102600:	2b00      	cmp	r3, #0
 8102602:	d003      	beq.n	810260c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102608:	6878      	ldr	r0, [r7, #4]
 810260a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810260c:	2300      	movs	r3, #0
}
 810260e:	4618      	mov	r0, r3
 8102610:	3710      	adds	r7, #16
 8102612:	46bd      	mov	sp, r7
 8102614:	bd80      	pop	{r7, pc}
 8102616:	bf00      	nop
 8102618:	40020010 	.word	0x40020010
 810261c:	40020028 	.word	0x40020028
 8102620:	40020040 	.word	0x40020040
 8102624:	40020058 	.word	0x40020058
 8102628:	40020070 	.word	0x40020070
 810262c:	40020088 	.word	0x40020088
 8102630:	400200a0 	.word	0x400200a0
 8102634:	400200b8 	.word	0x400200b8
 8102638:	40020410 	.word	0x40020410
 810263c:	40020428 	.word	0x40020428
 8102640:	40020440 	.word	0x40020440
 8102644:	40020458 	.word	0x40020458
 8102648:	40020470 	.word	0x40020470
 810264c:	40020488 	.word	0x40020488
 8102650:	400204a0 	.word	0x400204a0
 8102654:	400204b8 	.word	0x400204b8
 8102658:	58025408 	.word	0x58025408
 810265c:	5802541c 	.word	0x5802541c
 8102660:	58025430 	.word	0x58025430
 8102664:	58025444 	.word	0x58025444
 8102668:	58025458 	.word	0x58025458
 810266c:	5802546c 	.word	0x5802546c
 8102670:	58025480 	.word	0x58025480
 8102674:	58025494 	.word	0x58025494

08102678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102678:	b480      	push	{r7}
 810267a:	b089      	sub	sp, #36	; 0x24
 810267c:	af00      	add	r7, sp, #0
 810267e:	6078      	str	r0, [r7, #4]
 8102680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102682:	2300      	movs	r3, #0
 8102684:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102686:	4b89      	ldr	r3, [pc, #548]	; (81028ac <HAL_GPIO_Init+0x234>)
 8102688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810268a:	e194      	b.n	81029b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810268c:	683b      	ldr	r3, [r7, #0]
 810268e:	681a      	ldr	r2, [r3, #0]
 8102690:	2101      	movs	r1, #1
 8102692:	69fb      	ldr	r3, [r7, #28]
 8102694:	fa01 f303 	lsl.w	r3, r1, r3
 8102698:	4013      	ands	r3, r2
 810269a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810269c:	693b      	ldr	r3, [r7, #16]
 810269e:	2b00      	cmp	r3, #0
 81026a0:	f000 8186 	beq.w	81029b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81026a4:	683b      	ldr	r3, [r7, #0]
 81026a6:	685b      	ldr	r3, [r3, #4]
 81026a8:	f003 0303 	and.w	r3, r3, #3
 81026ac:	2b01      	cmp	r3, #1
 81026ae:	d005      	beq.n	81026bc <HAL_GPIO_Init+0x44>
 81026b0:	683b      	ldr	r3, [r7, #0]
 81026b2:	685b      	ldr	r3, [r3, #4]
 81026b4:	f003 0303 	and.w	r3, r3, #3
 81026b8:	2b02      	cmp	r3, #2
 81026ba:	d130      	bne.n	810271e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	689b      	ldr	r3, [r3, #8]
 81026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81026c2:	69fb      	ldr	r3, [r7, #28]
 81026c4:	005b      	lsls	r3, r3, #1
 81026c6:	2203      	movs	r2, #3
 81026c8:	fa02 f303 	lsl.w	r3, r2, r3
 81026cc:	43db      	mvns	r3, r3
 81026ce:	69ba      	ldr	r2, [r7, #24]
 81026d0:	4013      	ands	r3, r2
 81026d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81026d4:	683b      	ldr	r3, [r7, #0]
 81026d6:	68da      	ldr	r2, [r3, #12]
 81026d8:	69fb      	ldr	r3, [r7, #28]
 81026da:	005b      	lsls	r3, r3, #1
 81026dc:	fa02 f303 	lsl.w	r3, r2, r3
 81026e0:	69ba      	ldr	r2, [r7, #24]
 81026e2:	4313      	orrs	r3, r2
 81026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	69ba      	ldr	r2, [r7, #24]
 81026ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	685b      	ldr	r3, [r3, #4]
 81026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81026f2:	2201      	movs	r2, #1
 81026f4:	69fb      	ldr	r3, [r7, #28]
 81026f6:	fa02 f303 	lsl.w	r3, r2, r3
 81026fa:	43db      	mvns	r3, r3
 81026fc:	69ba      	ldr	r2, [r7, #24]
 81026fe:	4013      	ands	r3, r2
 8102700:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102702:	683b      	ldr	r3, [r7, #0]
 8102704:	685b      	ldr	r3, [r3, #4]
 8102706:	091b      	lsrs	r3, r3, #4
 8102708:	f003 0201 	and.w	r2, r3, #1
 810270c:	69fb      	ldr	r3, [r7, #28]
 810270e:	fa02 f303 	lsl.w	r3, r2, r3
 8102712:	69ba      	ldr	r2, [r7, #24]
 8102714:	4313      	orrs	r3, r2
 8102716:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	69ba      	ldr	r2, [r7, #24]
 810271c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810271e:	683b      	ldr	r3, [r7, #0]
 8102720:	685b      	ldr	r3, [r3, #4]
 8102722:	f003 0303 	and.w	r3, r3, #3
 8102726:	2b03      	cmp	r3, #3
 8102728:	d017      	beq.n	810275a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	68db      	ldr	r3, [r3, #12]
 810272e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102730:	69fb      	ldr	r3, [r7, #28]
 8102732:	005b      	lsls	r3, r3, #1
 8102734:	2203      	movs	r2, #3
 8102736:	fa02 f303 	lsl.w	r3, r2, r3
 810273a:	43db      	mvns	r3, r3
 810273c:	69ba      	ldr	r2, [r7, #24]
 810273e:	4013      	ands	r3, r2
 8102740:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102742:	683b      	ldr	r3, [r7, #0]
 8102744:	689a      	ldr	r2, [r3, #8]
 8102746:	69fb      	ldr	r3, [r7, #28]
 8102748:	005b      	lsls	r3, r3, #1
 810274a:	fa02 f303 	lsl.w	r3, r2, r3
 810274e:	69ba      	ldr	r2, [r7, #24]
 8102750:	4313      	orrs	r3, r2
 8102752:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	69ba      	ldr	r2, [r7, #24]
 8102758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810275a:	683b      	ldr	r3, [r7, #0]
 810275c:	685b      	ldr	r3, [r3, #4]
 810275e:	f003 0303 	and.w	r3, r3, #3
 8102762:	2b02      	cmp	r3, #2
 8102764:	d123      	bne.n	81027ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102766:	69fb      	ldr	r3, [r7, #28]
 8102768:	08da      	lsrs	r2, r3, #3
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	3208      	adds	r2, #8
 810276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102774:	69fb      	ldr	r3, [r7, #28]
 8102776:	f003 0307 	and.w	r3, r3, #7
 810277a:	009b      	lsls	r3, r3, #2
 810277c:	220f      	movs	r2, #15
 810277e:	fa02 f303 	lsl.w	r3, r2, r3
 8102782:	43db      	mvns	r3, r3
 8102784:	69ba      	ldr	r2, [r7, #24]
 8102786:	4013      	ands	r3, r2
 8102788:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810278a:	683b      	ldr	r3, [r7, #0]
 810278c:	691a      	ldr	r2, [r3, #16]
 810278e:	69fb      	ldr	r3, [r7, #28]
 8102790:	f003 0307 	and.w	r3, r3, #7
 8102794:	009b      	lsls	r3, r3, #2
 8102796:	fa02 f303 	lsl.w	r3, r2, r3
 810279a:	69ba      	ldr	r2, [r7, #24]
 810279c:	4313      	orrs	r3, r2
 810279e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81027a0:	69fb      	ldr	r3, [r7, #28]
 81027a2:	08da      	lsrs	r2, r3, #3
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	3208      	adds	r2, #8
 81027a8:	69b9      	ldr	r1, [r7, #24]
 81027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81027b4:	69fb      	ldr	r3, [r7, #28]
 81027b6:	005b      	lsls	r3, r3, #1
 81027b8:	2203      	movs	r2, #3
 81027ba:	fa02 f303 	lsl.w	r3, r2, r3
 81027be:	43db      	mvns	r3, r3
 81027c0:	69ba      	ldr	r2, [r7, #24]
 81027c2:	4013      	ands	r3, r2
 81027c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81027c6:	683b      	ldr	r3, [r7, #0]
 81027c8:	685b      	ldr	r3, [r3, #4]
 81027ca:	f003 0203 	and.w	r2, r3, #3
 81027ce:	69fb      	ldr	r3, [r7, #28]
 81027d0:	005b      	lsls	r3, r3, #1
 81027d2:	fa02 f303 	lsl.w	r3, r2, r3
 81027d6:	69ba      	ldr	r2, [r7, #24]
 81027d8:	4313      	orrs	r3, r2
 81027da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	69ba      	ldr	r2, [r7, #24]
 81027e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81027e2:	683b      	ldr	r3, [r7, #0]
 81027e4:	685b      	ldr	r3, [r3, #4]
 81027e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	f000 80e0 	beq.w	81029b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81027f0:	4b2f      	ldr	r3, [pc, #188]	; (81028b0 <HAL_GPIO_Init+0x238>)
 81027f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81027f6:	4a2e      	ldr	r2, [pc, #184]	; (81028b0 <HAL_GPIO_Init+0x238>)
 81027f8:	f043 0302 	orr.w	r3, r3, #2
 81027fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102800:	4b2b      	ldr	r3, [pc, #172]	; (81028b0 <HAL_GPIO_Init+0x238>)
 8102802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102806:	f003 0302 	and.w	r3, r3, #2
 810280a:	60fb      	str	r3, [r7, #12]
 810280c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810280e:	4a29      	ldr	r2, [pc, #164]	; (81028b4 <HAL_GPIO_Init+0x23c>)
 8102810:	69fb      	ldr	r3, [r7, #28]
 8102812:	089b      	lsrs	r3, r3, #2
 8102814:	3302      	adds	r3, #2
 8102816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810281c:	69fb      	ldr	r3, [r7, #28]
 810281e:	f003 0303 	and.w	r3, r3, #3
 8102822:	009b      	lsls	r3, r3, #2
 8102824:	220f      	movs	r2, #15
 8102826:	fa02 f303 	lsl.w	r3, r2, r3
 810282a:	43db      	mvns	r3, r3
 810282c:	69ba      	ldr	r2, [r7, #24]
 810282e:	4013      	ands	r3, r2
 8102830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	4a20      	ldr	r2, [pc, #128]	; (81028b8 <HAL_GPIO_Init+0x240>)
 8102836:	4293      	cmp	r3, r2
 8102838:	d052      	beq.n	81028e0 <HAL_GPIO_Init+0x268>
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	4a1f      	ldr	r2, [pc, #124]	; (81028bc <HAL_GPIO_Init+0x244>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d031      	beq.n	81028a6 <HAL_GPIO_Init+0x22e>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	4a1e      	ldr	r2, [pc, #120]	; (81028c0 <HAL_GPIO_Init+0x248>)
 8102846:	4293      	cmp	r3, r2
 8102848:	d02b      	beq.n	81028a2 <HAL_GPIO_Init+0x22a>
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	4a1d      	ldr	r2, [pc, #116]	; (81028c4 <HAL_GPIO_Init+0x24c>)
 810284e:	4293      	cmp	r3, r2
 8102850:	d025      	beq.n	810289e <HAL_GPIO_Init+0x226>
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	4a1c      	ldr	r2, [pc, #112]	; (81028c8 <HAL_GPIO_Init+0x250>)
 8102856:	4293      	cmp	r3, r2
 8102858:	d01f      	beq.n	810289a <HAL_GPIO_Init+0x222>
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	4a1b      	ldr	r2, [pc, #108]	; (81028cc <HAL_GPIO_Init+0x254>)
 810285e:	4293      	cmp	r3, r2
 8102860:	d019      	beq.n	8102896 <HAL_GPIO_Init+0x21e>
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	4a1a      	ldr	r2, [pc, #104]	; (81028d0 <HAL_GPIO_Init+0x258>)
 8102866:	4293      	cmp	r3, r2
 8102868:	d013      	beq.n	8102892 <HAL_GPIO_Init+0x21a>
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	4a19      	ldr	r2, [pc, #100]	; (81028d4 <HAL_GPIO_Init+0x25c>)
 810286e:	4293      	cmp	r3, r2
 8102870:	d00d      	beq.n	810288e <HAL_GPIO_Init+0x216>
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	4a18      	ldr	r2, [pc, #96]	; (81028d8 <HAL_GPIO_Init+0x260>)
 8102876:	4293      	cmp	r3, r2
 8102878:	d007      	beq.n	810288a <HAL_GPIO_Init+0x212>
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	4a17      	ldr	r2, [pc, #92]	; (81028dc <HAL_GPIO_Init+0x264>)
 810287e:	4293      	cmp	r3, r2
 8102880:	d101      	bne.n	8102886 <HAL_GPIO_Init+0x20e>
 8102882:	2309      	movs	r3, #9
 8102884:	e02d      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 8102886:	230a      	movs	r3, #10
 8102888:	e02b      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 810288a:	2308      	movs	r3, #8
 810288c:	e029      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 810288e:	2307      	movs	r3, #7
 8102890:	e027      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 8102892:	2306      	movs	r3, #6
 8102894:	e025      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 8102896:	2305      	movs	r3, #5
 8102898:	e023      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 810289a:	2304      	movs	r3, #4
 810289c:	e021      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 810289e:	2303      	movs	r3, #3
 81028a0:	e01f      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 81028a2:	2302      	movs	r3, #2
 81028a4:	e01d      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 81028a6:	2301      	movs	r3, #1
 81028a8:	e01b      	b.n	81028e2 <HAL_GPIO_Init+0x26a>
 81028aa:	bf00      	nop
 81028ac:	580000c0 	.word	0x580000c0
 81028b0:	58024400 	.word	0x58024400
 81028b4:	58000400 	.word	0x58000400
 81028b8:	58020000 	.word	0x58020000
 81028bc:	58020400 	.word	0x58020400
 81028c0:	58020800 	.word	0x58020800
 81028c4:	58020c00 	.word	0x58020c00
 81028c8:	58021000 	.word	0x58021000
 81028cc:	58021400 	.word	0x58021400
 81028d0:	58021800 	.word	0x58021800
 81028d4:	58021c00 	.word	0x58021c00
 81028d8:	58022000 	.word	0x58022000
 81028dc:	58022400 	.word	0x58022400
 81028e0:	2300      	movs	r3, #0
 81028e2:	69fa      	ldr	r2, [r7, #28]
 81028e4:	f002 0203 	and.w	r2, r2, #3
 81028e8:	0092      	lsls	r2, r2, #2
 81028ea:	4093      	lsls	r3, r2
 81028ec:	69ba      	ldr	r2, [r7, #24]
 81028ee:	4313      	orrs	r3, r2
 81028f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81028f2:	4938      	ldr	r1, [pc, #224]	; (81029d4 <HAL_GPIO_Init+0x35c>)
 81028f4:	69fb      	ldr	r3, [r7, #28]
 81028f6:	089b      	lsrs	r3, r3, #2
 81028f8:	3302      	adds	r3, #2
 81028fa:	69ba      	ldr	r2, [r7, #24]
 81028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102904:	681b      	ldr	r3, [r3, #0]
 8102906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102908:	693b      	ldr	r3, [r7, #16]
 810290a:	43db      	mvns	r3, r3
 810290c:	69ba      	ldr	r2, [r7, #24]
 810290e:	4013      	ands	r3, r2
 8102910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102912:	683b      	ldr	r3, [r7, #0]
 8102914:	685b      	ldr	r3, [r3, #4]
 8102916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810291a:	2b00      	cmp	r3, #0
 810291c:	d003      	beq.n	8102926 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810291e:	69ba      	ldr	r2, [r7, #24]
 8102920:	693b      	ldr	r3, [r7, #16]
 8102922:	4313      	orrs	r3, r2
 8102924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810292a:	69bb      	ldr	r3, [r7, #24]
 810292c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102932:	685b      	ldr	r3, [r3, #4]
 8102934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102936:	693b      	ldr	r3, [r7, #16]
 8102938:	43db      	mvns	r3, r3
 810293a:	69ba      	ldr	r2, [r7, #24]
 810293c:	4013      	ands	r3, r2
 810293e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102940:	683b      	ldr	r3, [r7, #0]
 8102942:	685b      	ldr	r3, [r3, #4]
 8102944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102948:	2b00      	cmp	r3, #0
 810294a:	d003      	beq.n	8102954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810294c:	69ba      	ldr	r2, [r7, #24]
 810294e:	693b      	ldr	r3, [r7, #16]
 8102950:	4313      	orrs	r3, r2
 8102952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102958:	69bb      	ldr	r3, [r7, #24]
 810295a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810295c:	697b      	ldr	r3, [r7, #20]
 810295e:	685b      	ldr	r3, [r3, #4]
 8102960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102962:	693b      	ldr	r3, [r7, #16]
 8102964:	43db      	mvns	r3, r3
 8102966:	69ba      	ldr	r2, [r7, #24]
 8102968:	4013      	ands	r3, r2
 810296a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810296c:	683b      	ldr	r3, [r7, #0]
 810296e:	685b      	ldr	r3, [r3, #4]
 8102970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102974:	2b00      	cmp	r3, #0
 8102976:	d003      	beq.n	8102980 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102978:	69ba      	ldr	r2, [r7, #24]
 810297a:	693b      	ldr	r3, [r7, #16]
 810297c:	4313      	orrs	r3, r2
 810297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102980:	697b      	ldr	r3, [r7, #20]
 8102982:	69ba      	ldr	r2, [r7, #24]
 8102984:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102986:	697b      	ldr	r3, [r7, #20]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810298c:	693b      	ldr	r3, [r7, #16]
 810298e:	43db      	mvns	r3, r3
 8102990:	69ba      	ldr	r2, [r7, #24]
 8102992:	4013      	ands	r3, r2
 8102994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102996:	683b      	ldr	r3, [r7, #0]
 8102998:	685b      	ldr	r3, [r3, #4]
 810299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d003      	beq.n	81029aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81029a2:	69ba      	ldr	r2, [r7, #24]
 81029a4:	693b      	ldr	r3, [r7, #16]
 81029a6:	4313      	orrs	r3, r2
 81029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81029aa:	697b      	ldr	r3, [r7, #20]
 81029ac:	69ba      	ldr	r2, [r7, #24]
 81029ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81029b0:	69fb      	ldr	r3, [r7, #28]
 81029b2:	3301      	adds	r3, #1
 81029b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81029b6:	683b      	ldr	r3, [r7, #0]
 81029b8:	681a      	ldr	r2, [r3, #0]
 81029ba:	69fb      	ldr	r3, [r7, #28]
 81029bc:	fa22 f303 	lsr.w	r3, r2, r3
 81029c0:	2b00      	cmp	r3, #0
 81029c2:	f47f ae63 	bne.w	810268c <HAL_GPIO_Init+0x14>
  }
}
 81029c6:	bf00      	nop
 81029c8:	bf00      	nop
 81029ca:	3724      	adds	r7, #36	; 0x24
 81029cc:	46bd      	mov	sp, r7
 81029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d2:	4770      	bx	lr
 81029d4:	58000400 	.word	0x58000400

081029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81029d8:	b480      	push	{r7}
 81029da:	b083      	sub	sp, #12
 81029dc:	af00      	add	r7, sp, #0
 81029de:	6078      	str	r0, [r7, #4]
 81029e0:	460b      	mov	r3, r1
 81029e2:	807b      	strh	r3, [r7, #2]
 81029e4:	4613      	mov	r3, r2
 81029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81029e8:	787b      	ldrb	r3, [r7, #1]
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d003      	beq.n	81029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81029ee:	887a      	ldrh	r2, [r7, #2]
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81029f4:	e003      	b.n	81029fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81029f6:	887b      	ldrh	r3, [r7, #2]
 81029f8:	041a      	lsls	r2, r3, #16
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	619a      	str	r2, [r3, #24]
}
 81029fe:	bf00      	nop
 8102a00:	370c      	adds	r7, #12
 8102a02:	46bd      	mov	sp, r7
 8102a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a08:	4770      	bx	lr
	...

08102a0c <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8102a0c:	b480      	push	{r7}
 8102a0e:	b083      	sub	sp, #12
 8102a10:	af00      	add	r7, sp, #0
 8102a12:	6078      	str	r0, [r7, #4]
 8102a14:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8102a16:	490e      	ldr	r1, [pc, #56]	; (8102a50 <HAL_HSEM_Take+0x44>)
 8102a18:	683b      	ldr	r3, [r7, #0]
 8102a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8102a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102a22:	687a      	ldr	r2, [r7, #4]
 8102a24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8102a28:	4a09      	ldr	r2, [pc, #36]	; (8102a50 <HAL_HSEM_Take+0x44>)
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8102a30:	683b      	ldr	r3, [r7, #0]
 8102a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8102a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102a3a:	429a      	cmp	r2, r3
 8102a3c:	d101      	bne.n	8102a42 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8102a3e:	2300      	movs	r3, #0
 8102a40:	e000      	b.n	8102a44 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8102a42:	2301      	movs	r3, #1
}
 8102a44:	4618      	mov	r0, r3
 8102a46:	370c      	adds	r7, #12
 8102a48:	46bd      	mov	sp, r7
 8102a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a4e:	4770      	bx	lr
 8102a50:	58026400 	.word	0x58026400

08102a54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8102a54:	b480      	push	{r7}
 8102a56:	b083      	sub	sp, #12
 8102a58:	af00      	add	r7, sp, #0
 8102a5a:	6078      	str	r0, [r7, #4]
 8102a5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8102a5e:	4906      	ldr	r1, [pc, #24]	; (8102a78 <HAL_HSEM_Release+0x24>)
 8102a60:	683b      	ldr	r3, [r7, #0]
 8102a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8102a6c:	bf00      	nop
 8102a6e:	370c      	adds	r7, #12
 8102a70:	46bd      	mov	sp, r7
 8102a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a76:	4770      	bx	lr
 8102a78:	58026400 	.word	0x58026400

08102a7c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102a7c:	b480      	push	{r7}
 8102a7e:	b083      	sub	sp, #12
 8102a80:	af00      	add	r7, sp, #0
 8102a82:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102a84:	4b05      	ldr	r3, [pc, #20]	; (8102a9c <HAL_HSEM_ActivateNotification+0x20>)
 8102a86:	681a      	ldr	r2, [r3, #0]
 8102a88:	4904      	ldr	r1, [pc, #16]	; (8102a9c <HAL_HSEM_ActivateNotification+0x20>)
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	4313      	orrs	r3, r2
 8102a8e:	600b      	str	r3, [r1, #0]
#endif
}
 8102a90:	bf00      	nop
 8102a92:	370c      	adds	r7, #12
 8102a94:	46bd      	mov	sp, r7
 8102a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a9a:	4770      	bx	lr
 8102a9c:	58026510 	.word	0x58026510

08102aa0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102aa0:	b580      	push	{r7, lr}
 8102aa2:	b084      	sub	sp, #16
 8102aa4:	af00      	add	r7, sp, #0
 8102aa6:	60f8      	str	r0, [r7, #12]
 8102aa8:	460b      	mov	r3, r1
 8102aaa:	607a      	str	r2, [r7, #4]
 8102aac:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102aae:	4b37      	ldr	r3, [pc, #220]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ab0:	681b      	ldr	r3, [r3, #0]
 8102ab2:	f023 0201 	bic.w	r2, r3, #1
 8102ab6:	4935      	ldr	r1, [pc, #212]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	4313      	orrs	r3, r2
 8102abc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d123      	bne.n	8102b0c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102ac4:	f7ff f862 	bl	8101b8c <HAL_GetCurrentCPUID>
 8102ac8:	4603      	mov	r3, r0
 8102aca:	2b03      	cmp	r3, #3
 8102acc:	d158      	bne.n	8102b80 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102ace:	4b2f      	ldr	r3, [pc, #188]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ad0:	691b      	ldr	r3, [r3, #16]
 8102ad2:	4a2e      	ldr	r2, [pc, #184]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ad4:	f023 0301 	bic.w	r3, r3, #1
 8102ad8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ada:	4b2d      	ldr	r3, [pc, #180]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102adc:	691b      	ldr	r3, [r3, #16]
 8102ade:	4a2c      	ldr	r2, [pc, #176]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ae0:	f043 0304 	orr.w	r3, r3, #4
 8102ae4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102ae6:	f3bf 8f4f 	dsb	sy
}
 8102aea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102aec:	f3bf 8f6f 	isb	sy
}
 8102af0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102af2:	7afb      	ldrb	r3, [r7, #11]
 8102af4:	2b01      	cmp	r3, #1
 8102af6:	d101      	bne.n	8102afc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102af8:	bf30      	wfi
 8102afa:	e000      	b.n	8102afe <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102afc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102afe:	4b24      	ldr	r3, [pc, #144]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b00:	691b      	ldr	r3, [r3, #16]
 8102b02:	4a23      	ldr	r2, [pc, #140]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b04:	f023 0304 	bic.w	r3, r3, #4
 8102b08:	6113      	str	r3, [r2, #16]
 8102b0a:	e03c      	b.n	8102b86 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	2b01      	cmp	r3, #1
 8102b10:	d123      	bne.n	8102b5a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102b12:	f7ff f83b 	bl	8101b8c <HAL_GetCurrentCPUID>
 8102b16:	4603      	mov	r3, r0
 8102b18:	2b01      	cmp	r3, #1
 8102b1a:	d133      	bne.n	8102b84 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102b1c:	4b1b      	ldr	r3, [pc, #108]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b1e:	695b      	ldr	r3, [r3, #20]
 8102b20:	4a1a      	ldr	r2, [pc, #104]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b22:	f023 0302 	bic.w	r3, r3, #2
 8102b26:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b28:	4b19      	ldr	r3, [pc, #100]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b2a:	691b      	ldr	r3, [r3, #16]
 8102b2c:	4a18      	ldr	r2, [pc, #96]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b2e:	f043 0304 	orr.w	r3, r3, #4
 8102b32:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102b34:	f3bf 8f4f 	dsb	sy
}
 8102b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b3a:	f3bf 8f6f 	isb	sy
}
 8102b3e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b40:	7afb      	ldrb	r3, [r7, #11]
 8102b42:	2b01      	cmp	r3, #1
 8102b44:	d101      	bne.n	8102b4a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b46:	bf30      	wfi
 8102b48:	e000      	b.n	8102b4c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b4a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b4c:	4b10      	ldr	r3, [pc, #64]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b4e:	691b      	ldr	r3, [r3, #16]
 8102b50:	4a0f      	ldr	r2, [pc, #60]	; (8102b90 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b52:	f023 0304 	bic.w	r3, r3, #4
 8102b56:	6113      	str	r3, [r2, #16]
 8102b58:	e015      	b.n	8102b86 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102b5a:	f7ff f817 	bl	8101b8c <HAL_GetCurrentCPUID>
 8102b5e:	4603      	mov	r3, r0
 8102b60:	2b03      	cmp	r3, #3
 8102b62:	d106      	bne.n	8102b72 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102b64:	4b09      	ldr	r3, [pc, #36]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b66:	691b      	ldr	r3, [r3, #16]
 8102b68:	4a08      	ldr	r2, [pc, #32]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b6a:	f023 0304 	bic.w	r3, r3, #4
 8102b6e:	6113      	str	r3, [r2, #16]
 8102b70:	e009      	b.n	8102b86 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102b72:	4b06      	ldr	r3, [pc, #24]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b74:	695b      	ldr	r3, [r3, #20]
 8102b76:	4a05      	ldr	r2, [pc, #20]	; (8102b8c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b78:	f023 0304 	bic.w	r3, r3, #4
 8102b7c:	6153      	str	r3, [r2, #20]
 8102b7e:	e002      	b.n	8102b86 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102b80:	bf00      	nop
 8102b82:	e000      	b.n	8102b86 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102b84:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102b86:	3710      	adds	r7, #16
 8102b88:	46bd      	mov	sp, r7
 8102b8a:	bd80      	pop	{r7, pc}
 8102b8c:	58024800 	.word	0x58024800
 8102b90:	e000ed00 	.word	0xe000ed00

08102b94 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102b94:	b580      	push	{r7, lr}
 8102b96:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102b98:	f7fe fff8 	bl	8101b8c <HAL_GetCurrentCPUID>
 8102b9c:	4603      	mov	r3, r0
 8102b9e:	2b03      	cmp	r3, #3
 8102ba0:	d101      	bne.n	8102ba6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102ba2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102ba4:	e001      	b.n	8102baa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102ba6:	bf40      	sev
    __WFE ();
 8102ba8:	bf20      	wfe
}
 8102baa:	bf00      	nop
 8102bac:	bd80      	pop	{r7, pc}
	...

08102bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102bb0:	b480      	push	{r7}
 8102bb2:	b089      	sub	sp, #36	; 0x24
 8102bb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102bb6:	4bb3      	ldr	r3, [pc, #716]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bb8:	691b      	ldr	r3, [r3, #16]
 8102bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102bbe:	2b18      	cmp	r3, #24
 8102bc0:	f200 8155 	bhi.w	8102e6e <HAL_RCC_GetSysClockFreq+0x2be>
 8102bc4:	a201      	add	r2, pc, #4	; (adr r2, 8102bcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8102bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bca:	bf00      	nop
 8102bcc:	08102c31 	.word	0x08102c31
 8102bd0:	08102e6f 	.word	0x08102e6f
 8102bd4:	08102e6f 	.word	0x08102e6f
 8102bd8:	08102e6f 	.word	0x08102e6f
 8102bdc:	08102e6f 	.word	0x08102e6f
 8102be0:	08102e6f 	.word	0x08102e6f
 8102be4:	08102e6f 	.word	0x08102e6f
 8102be8:	08102e6f 	.word	0x08102e6f
 8102bec:	08102c57 	.word	0x08102c57
 8102bf0:	08102e6f 	.word	0x08102e6f
 8102bf4:	08102e6f 	.word	0x08102e6f
 8102bf8:	08102e6f 	.word	0x08102e6f
 8102bfc:	08102e6f 	.word	0x08102e6f
 8102c00:	08102e6f 	.word	0x08102e6f
 8102c04:	08102e6f 	.word	0x08102e6f
 8102c08:	08102e6f 	.word	0x08102e6f
 8102c0c:	08102c5d 	.word	0x08102c5d
 8102c10:	08102e6f 	.word	0x08102e6f
 8102c14:	08102e6f 	.word	0x08102e6f
 8102c18:	08102e6f 	.word	0x08102e6f
 8102c1c:	08102e6f 	.word	0x08102e6f
 8102c20:	08102e6f 	.word	0x08102e6f
 8102c24:	08102e6f 	.word	0x08102e6f
 8102c28:	08102e6f 	.word	0x08102e6f
 8102c2c:	08102c63 	.word	0x08102c63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102c30:	4b94      	ldr	r3, [pc, #592]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	f003 0320 	and.w	r3, r3, #32
 8102c38:	2b00      	cmp	r3, #0
 8102c3a:	d009      	beq.n	8102c50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102c3c:	4b91      	ldr	r3, [pc, #580]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	08db      	lsrs	r3, r3, #3
 8102c42:	f003 0303 	and.w	r3, r3, #3
 8102c46:	4a90      	ldr	r2, [pc, #576]	; (8102e88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c48:	fa22 f303 	lsr.w	r3, r2, r3
 8102c4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102c4e:	e111      	b.n	8102e74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102c50:	4b8d      	ldr	r3, [pc, #564]	; (8102e88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c52:	61bb      	str	r3, [r7, #24]
    break;
 8102c54:	e10e      	b.n	8102e74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102c56:	4b8d      	ldr	r3, [pc, #564]	; (8102e8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c58:	61bb      	str	r3, [r7, #24]
    break;
 8102c5a:	e10b      	b.n	8102e74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102c5c:	4b8c      	ldr	r3, [pc, #560]	; (8102e90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102c5e:	61bb      	str	r3, [r7, #24]
    break;
 8102c60:	e108      	b.n	8102e74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c62:	4b88      	ldr	r3, [pc, #544]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c66:	f003 0303 	and.w	r3, r3, #3
 8102c6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102c6c:	4b85      	ldr	r3, [pc, #532]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c70:	091b      	lsrs	r3, r3, #4
 8102c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102c76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102c78:	4b82      	ldr	r3, [pc, #520]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c7c:	f003 0301 	and.w	r3, r3, #1
 8102c80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102c82:	4b80      	ldr	r3, [pc, #512]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102c86:	08db      	lsrs	r3, r3, #3
 8102c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102c8c:	68fa      	ldr	r2, [r7, #12]
 8102c8e:	fb02 f303 	mul.w	r3, r2, r3
 8102c92:	ee07 3a90 	vmov	s15, r3
 8102c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102c9e:	693b      	ldr	r3, [r7, #16]
 8102ca0:	2b00      	cmp	r3, #0
 8102ca2:	f000 80e1 	beq.w	8102e68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102ca6:	697b      	ldr	r3, [r7, #20]
 8102ca8:	2b02      	cmp	r3, #2
 8102caa:	f000 8083 	beq.w	8102db4 <HAL_RCC_GetSysClockFreq+0x204>
 8102cae:	697b      	ldr	r3, [r7, #20]
 8102cb0:	2b02      	cmp	r3, #2
 8102cb2:	f200 80a1 	bhi.w	8102df8 <HAL_RCC_GetSysClockFreq+0x248>
 8102cb6:	697b      	ldr	r3, [r7, #20]
 8102cb8:	2b00      	cmp	r3, #0
 8102cba:	d003      	beq.n	8102cc4 <HAL_RCC_GetSysClockFreq+0x114>
 8102cbc:	697b      	ldr	r3, [r7, #20]
 8102cbe:	2b01      	cmp	r3, #1
 8102cc0:	d056      	beq.n	8102d70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102cc2:	e099      	b.n	8102df8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102cc4:	4b6f      	ldr	r3, [pc, #444]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	f003 0320 	and.w	r3, r3, #32
 8102ccc:	2b00      	cmp	r3, #0
 8102cce:	d02d      	beq.n	8102d2c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102cd0:	4b6c      	ldr	r3, [pc, #432]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	08db      	lsrs	r3, r3, #3
 8102cd6:	f003 0303 	and.w	r3, r3, #3
 8102cda:	4a6b      	ldr	r2, [pc, #428]	; (8102e88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8102ce0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	ee07 3a90 	vmov	s15, r3
 8102ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cec:	693b      	ldr	r3, [r7, #16]
 8102cee:	ee07 3a90 	vmov	s15, r3
 8102cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cfa:	4b62      	ldr	r3, [pc, #392]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d02:	ee07 3a90 	vmov	s15, r3
 8102d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102d2a:	e087      	b.n	8102e3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d2c:	693b      	ldr	r3, [r7, #16]
 8102d2e:	ee07 3a90 	vmov	s15, r3
 8102d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102e98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d3e:	4b51      	ldr	r3, [pc, #324]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d46:	ee07 3a90 	vmov	s15, r3
 8102d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d6e:	e065      	b.n	8102e3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d70:	693b      	ldr	r3, [r7, #16]
 8102d72:	ee07 3a90 	vmov	s15, r3
 8102d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102e9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d82:	4b40      	ldr	r3, [pc, #256]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d8a:	ee07 3a90 	vmov	s15, r3
 8102d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102db2:	e043      	b.n	8102e3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102db4:	693b      	ldr	r3, [r7, #16]
 8102db6:	ee07 3a90 	vmov	s15, r3
 8102dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102ea0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dc6:	4b2f      	ldr	r3, [pc, #188]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dce:	ee07 3a90 	vmov	s15, r3
 8102dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102df6:	e021      	b.n	8102e3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102df8:	693b      	ldr	r3, [r7, #16]
 8102dfa:	ee07 3a90 	vmov	s15, r3
 8102dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102e9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e0a:	4b1e      	ldr	r3, [pc, #120]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e12:	ee07 3a90 	vmov	s15, r3
 8102e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102e3c:	4b11      	ldr	r3, [pc, #68]	; (8102e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e40:	0a5b      	lsrs	r3, r3, #9
 8102e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102e46:	3301      	adds	r3, #1
 8102e48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102e4a:	683b      	ldr	r3, [r7, #0]
 8102e4c:	ee07 3a90 	vmov	s15, r3
 8102e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e60:	ee17 3a90 	vmov	r3, s15
 8102e64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102e66:	e005      	b.n	8102e74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102e68:	2300      	movs	r3, #0
 8102e6a:	61bb      	str	r3, [r7, #24]
    break;
 8102e6c:	e002      	b.n	8102e74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102e6e:	4b07      	ldr	r3, [pc, #28]	; (8102e8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102e70:	61bb      	str	r3, [r7, #24]
    break;
 8102e72:	bf00      	nop
  }

  return sysclockfreq;
 8102e74:	69bb      	ldr	r3, [r7, #24]
}
 8102e76:	4618      	mov	r0, r3
 8102e78:	3724      	adds	r7, #36	; 0x24
 8102e7a:	46bd      	mov	sp, r7
 8102e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e80:	4770      	bx	lr
 8102e82:	bf00      	nop
 8102e84:	58024400 	.word	0x58024400
 8102e88:	03d09000 	.word	0x03d09000
 8102e8c:	003d0900 	.word	0x003d0900
 8102e90:	017d7840 	.word	0x017d7840
 8102e94:	46000000 	.word	0x46000000
 8102e98:	4c742400 	.word	0x4c742400
 8102e9c:	4a742400 	.word	0x4a742400
 8102ea0:	4bbebc20 	.word	0x4bbebc20

08102ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102ea4:	b580      	push	{r7, lr}
 8102ea6:	b082      	sub	sp, #8
 8102ea8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102eaa:	f7ff fe81 	bl	8102bb0 <HAL_RCC_GetSysClockFreq>
 8102eae:	4602      	mov	r2, r0
 8102eb0:	4b11      	ldr	r3, [pc, #68]	; (8102ef8 <HAL_RCC_GetHCLKFreq+0x54>)
 8102eb2:	699b      	ldr	r3, [r3, #24]
 8102eb4:	0a1b      	lsrs	r3, r3, #8
 8102eb6:	f003 030f 	and.w	r3, r3, #15
 8102eba:	4910      	ldr	r1, [pc, #64]	; (8102efc <HAL_RCC_GetHCLKFreq+0x58>)
 8102ebc:	5ccb      	ldrb	r3, [r1, r3]
 8102ebe:	f003 031f 	and.w	r3, r3, #31
 8102ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8102ec6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102ec8:	4b0b      	ldr	r3, [pc, #44]	; (8102ef8 <HAL_RCC_GetHCLKFreq+0x54>)
 8102eca:	699b      	ldr	r3, [r3, #24]
 8102ecc:	f003 030f 	and.w	r3, r3, #15
 8102ed0:	4a0a      	ldr	r2, [pc, #40]	; (8102efc <HAL_RCC_GetHCLKFreq+0x58>)
 8102ed2:	5cd3      	ldrb	r3, [r2, r3]
 8102ed4:	f003 031f 	and.w	r3, r3, #31
 8102ed8:	687a      	ldr	r2, [r7, #4]
 8102eda:	fa22 f303 	lsr.w	r3, r2, r3
 8102ede:	4a08      	ldr	r2, [pc, #32]	; (8102f00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ee0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102ee2:	4b07      	ldr	r3, [pc, #28]	; (8102f00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	4a07      	ldr	r2, [pc, #28]	; (8102f04 <HAL_RCC_GetHCLKFreq+0x60>)
 8102ee8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102eea:	4b05      	ldr	r3, [pc, #20]	; (8102f00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102eec:	681b      	ldr	r3, [r3, #0]
}
 8102eee:	4618      	mov	r0, r3
 8102ef0:	3708      	adds	r7, #8
 8102ef2:	46bd      	mov	sp, r7
 8102ef4:	bd80      	pop	{r7, pc}
 8102ef6:	bf00      	nop
 8102ef8:	58024400 	.word	0x58024400
 8102efc:	081071a8 	.word	0x081071a8
 8102f00:	10000004 	.word	0x10000004
 8102f04:	10000000 	.word	0x10000000

08102f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102f08:	b580      	push	{r7, lr}
 8102f0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102f0c:	f7ff ffca 	bl	8102ea4 <HAL_RCC_GetHCLKFreq>
 8102f10:	4602      	mov	r2, r0
 8102f12:	4b06      	ldr	r3, [pc, #24]	; (8102f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8102f14:	69db      	ldr	r3, [r3, #28]
 8102f16:	091b      	lsrs	r3, r3, #4
 8102f18:	f003 0307 	and.w	r3, r3, #7
 8102f1c:	4904      	ldr	r1, [pc, #16]	; (8102f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102f1e:	5ccb      	ldrb	r3, [r1, r3]
 8102f20:	f003 031f 	and.w	r3, r3, #31
 8102f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102f28:	4618      	mov	r0, r3
 8102f2a:	bd80      	pop	{r7, pc}
 8102f2c:	58024400 	.word	0x58024400
 8102f30:	081071a8 	.word	0x081071a8

08102f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102f34:	b580      	push	{r7, lr}
 8102f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102f38:	f7ff ffb4 	bl	8102ea4 <HAL_RCC_GetHCLKFreq>
 8102f3c:	4602      	mov	r2, r0
 8102f3e:	4b06      	ldr	r3, [pc, #24]	; (8102f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102f40:	69db      	ldr	r3, [r3, #28]
 8102f42:	0a1b      	lsrs	r3, r3, #8
 8102f44:	f003 0307 	and.w	r3, r3, #7
 8102f48:	4904      	ldr	r1, [pc, #16]	; (8102f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8102f4a:	5ccb      	ldrb	r3, [r1, r3]
 8102f4c:	f003 031f 	and.w	r3, r3, #31
 8102f50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102f54:	4618      	mov	r0, r3
 8102f56:	bd80      	pop	{r7, pc}
 8102f58:	58024400 	.word	0x58024400
 8102f5c:	081071a8 	.word	0x081071a8

08102f60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102f60:	b580      	push	{r7, lr}
 8102f62:	b086      	sub	sp, #24
 8102f64:	af00      	add	r7, sp, #0
 8102f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102f68:	2300      	movs	r3, #0
 8102f6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102f6c:	2300      	movs	r3, #0
 8102f6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	681b      	ldr	r3, [r3, #0]
 8102f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102f78:	2b00      	cmp	r3, #0
 8102f7a:	d03f      	beq.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102f80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f84:	d02a      	beq.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f8a:	d824      	bhi.n	8102fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102f90:	d018      	beq.n	8102fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102f96:	d81e      	bhi.n	8102fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f98:	2b00      	cmp	r3, #0
 8102f9a:	d003      	beq.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102fa0:	d007      	beq.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102fa2:	e018      	b.n	8102fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fa4:	4bab      	ldr	r3, [pc, #684]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fa8:	4aaa      	ldr	r2, [pc, #680]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102fb0:	e015      	b.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	3304      	adds	r3, #4
 8102fb6:	2102      	movs	r1, #2
 8102fb8:	4618      	mov	r0, r3
 8102fba:	f001 f9cf 	bl	810435c <RCCEx_PLL2_Config>
 8102fbe:	4603      	mov	r3, r0
 8102fc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102fc2:	e00c      	b.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	3324      	adds	r3, #36	; 0x24
 8102fc8:	2102      	movs	r1, #2
 8102fca:	4618      	mov	r0, r3
 8102fcc:	f001 fa78 	bl	81044c0 <RCCEx_PLL3_Config>
 8102fd0:	4603      	mov	r3, r0
 8102fd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102fd4:	e003      	b.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fd6:	2301      	movs	r3, #1
 8102fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8102fda:	e000      	b.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fde:	7dfb      	ldrb	r3, [r7, #23]
 8102fe0:	2b00      	cmp	r3, #0
 8102fe2:	d109      	bne.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102fe4:	4b9b      	ldr	r3, [pc, #620]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102ff0:	4998      	ldr	r1, [pc, #608]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ff2:	4313      	orrs	r3, r2
 8102ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8102ff6:	e001      	b.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ff8:	7dfb      	ldrb	r3, [r7, #23]
 8102ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103004:	2b00      	cmp	r3, #0
 8103006:	d03d      	beq.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810300c:	2b04      	cmp	r3, #4
 810300e:	d826      	bhi.n	810305e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103010:	a201      	add	r2, pc, #4	; (adr r2, 8103018 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103016:	bf00      	nop
 8103018:	0810302d 	.word	0x0810302d
 810301c:	0810303b 	.word	0x0810303b
 8103020:	0810304d 	.word	0x0810304d
 8103024:	08103065 	.word	0x08103065
 8103028:	08103065 	.word	0x08103065
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810302c:	4b89      	ldr	r3, [pc, #548]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103030:	4a88      	ldr	r2, [pc, #544]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103038:	e015      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	3304      	adds	r3, #4
 810303e:	2100      	movs	r1, #0
 8103040:	4618      	mov	r0, r3
 8103042:	f001 f98b 	bl	810435c <RCCEx_PLL2_Config>
 8103046:	4603      	mov	r3, r0
 8103048:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810304a:	e00c      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	3324      	adds	r3, #36	; 0x24
 8103050:	2100      	movs	r1, #0
 8103052:	4618      	mov	r0, r3
 8103054:	f001 fa34 	bl	81044c0 <RCCEx_PLL3_Config>
 8103058:	4603      	mov	r3, r0
 810305a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810305c:	e003      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810305e:	2301      	movs	r3, #1
 8103060:	75fb      	strb	r3, [r7, #23]
      break;
 8103062:	e000      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103066:	7dfb      	ldrb	r3, [r7, #23]
 8103068:	2b00      	cmp	r3, #0
 810306a:	d109      	bne.n	8103080 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810306c:	4b79      	ldr	r3, [pc, #484]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103070:	f023 0207 	bic.w	r2, r3, #7
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103078:	4976      	ldr	r1, [pc, #472]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810307a:	4313      	orrs	r3, r2
 810307c:	650b      	str	r3, [r1, #80]	; 0x50
 810307e:	e001      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103080:	7dfb      	ldrb	r3, [r7, #23]
 8103082:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810308c:	2b00      	cmp	r3, #0
 810308e:	d042      	beq.n	8103116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103098:	d02b      	beq.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810309a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810309e:	d825      	bhi.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81030a0:	2bc0      	cmp	r3, #192	; 0xc0
 81030a2:	d028      	beq.n	81030f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81030a4:	2bc0      	cmp	r3, #192	; 0xc0
 81030a6:	d821      	bhi.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81030a8:	2b80      	cmp	r3, #128	; 0x80
 81030aa:	d016      	beq.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81030ac:	2b80      	cmp	r3, #128	; 0x80
 81030ae:	d81d      	bhi.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	d002      	beq.n	81030ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81030b4:	2b40      	cmp	r3, #64	; 0x40
 81030b6:	d007      	beq.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81030b8:	e018      	b.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030ba:	4b66      	ldr	r3, [pc, #408]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030be:	4a65      	ldr	r2, [pc, #404]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030c6:	e017      	b.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	3304      	adds	r3, #4
 81030cc:	2100      	movs	r1, #0
 81030ce:	4618      	mov	r0, r3
 81030d0:	f001 f944 	bl	810435c <RCCEx_PLL2_Config>
 81030d4:	4603      	mov	r3, r0
 81030d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030d8:	e00e      	b.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	3324      	adds	r3, #36	; 0x24
 81030de:	2100      	movs	r1, #0
 81030e0:	4618      	mov	r0, r3
 81030e2:	f001 f9ed 	bl	81044c0 <RCCEx_PLL3_Config>
 81030e6:	4603      	mov	r3, r0
 81030e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030ea:	e005      	b.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030ec:	2301      	movs	r3, #1
 81030ee:	75fb      	strb	r3, [r7, #23]
      break;
 81030f0:	e002      	b.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81030f2:	bf00      	nop
 81030f4:	e000      	b.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81030f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030f8:	7dfb      	ldrb	r3, [r7, #23]
 81030fa:	2b00      	cmp	r3, #0
 81030fc:	d109      	bne.n	8103112 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81030fe:	4b55      	ldr	r3, [pc, #340]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103102:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810310a:	4952      	ldr	r1, [pc, #328]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810310c:	4313      	orrs	r3, r2
 810310e:	650b      	str	r3, [r1, #80]	; 0x50
 8103110:	e001      	b.n	8103116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103112:	7dfb      	ldrb	r3, [r7, #23]
 8103114:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810311e:	2b00      	cmp	r3, #0
 8103120:	d049      	beq.n	81031b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103128:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810312c:	d030      	beq.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x230>
 810312e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103132:	d82a      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103134:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103138:	d02c      	beq.n	8103194 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810313a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810313e:	d824      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103144:	d018      	beq.n	8103178 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810314a:	d81e      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810314c:	2b00      	cmp	r3, #0
 810314e:	d003      	beq.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103154:	d007      	beq.n	8103166 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103156:	e018      	b.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103158:	4b3e      	ldr	r3, [pc, #248]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810315c:	4a3d      	ldr	r2, [pc, #244]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810315e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103164:	e017      	b.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	3304      	adds	r3, #4
 810316a:	2100      	movs	r1, #0
 810316c:	4618      	mov	r0, r3
 810316e:	f001 f8f5 	bl	810435c <RCCEx_PLL2_Config>
 8103172:	4603      	mov	r3, r0
 8103174:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103176:	e00e      	b.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	3324      	adds	r3, #36	; 0x24
 810317c:	2100      	movs	r1, #0
 810317e:	4618      	mov	r0, r3
 8103180:	f001 f99e 	bl	81044c0 <RCCEx_PLL3_Config>
 8103184:	4603      	mov	r3, r0
 8103186:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103188:	e005      	b.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810318a:	2301      	movs	r3, #1
 810318c:	75fb      	strb	r3, [r7, #23]
      break;
 810318e:	e002      	b.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103190:	bf00      	nop
 8103192:	e000      	b.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103196:	7dfb      	ldrb	r3, [r7, #23]
 8103198:	2b00      	cmp	r3, #0
 810319a:	d10a      	bne.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810319c:	4b2d      	ldr	r3, [pc, #180]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81031aa:	492a      	ldr	r1, [pc, #168]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031ac:	4313      	orrs	r3, r2
 81031ae:	658b      	str	r3, [r1, #88]	; 0x58
 81031b0:	e001      	b.n	81031b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031b2:	7dfb      	ldrb	r3, [r7, #23]
 81031b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81031be:	2b00      	cmp	r3, #0
 81031c0:	d04c      	beq.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81031c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81031cc:	d030      	beq.n	8103230 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81031ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81031d2:	d82a      	bhi.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81031d8:	d02c      	beq.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81031da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81031de:	d824      	bhi.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81031e4:	d018      	beq.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81031e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81031ea:	d81e      	bhi.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031ec:	2b00      	cmp	r3, #0
 81031ee:	d003      	beq.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81031f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81031f4:	d007      	beq.n	8103206 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81031f6:	e018      	b.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031f8:	4b16      	ldr	r3, [pc, #88]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031fc:	4a15      	ldr	r2, [pc, #84]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103204:	e017      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	3304      	adds	r3, #4
 810320a:	2100      	movs	r1, #0
 810320c:	4618      	mov	r0, r3
 810320e:	f001 f8a5 	bl	810435c <RCCEx_PLL2_Config>
 8103212:	4603      	mov	r3, r0
 8103214:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103216:	e00e      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	3324      	adds	r3, #36	; 0x24
 810321c:	2100      	movs	r1, #0
 810321e:	4618      	mov	r0, r3
 8103220:	f001 f94e 	bl	81044c0 <RCCEx_PLL3_Config>
 8103224:	4603      	mov	r3, r0
 8103226:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103228:	e005      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810322a:	2301      	movs	r3, #1
 810322c:	75fb      	strb	r3, [r7, #23]
      break;
 810322e:	e002      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103230:	bf00      	nop
 8103232:	e000      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103236:	7dfb      	ldrb	r3, [r7, #23]
 8103238:	2b00      	cmp	r3, #0
 810323a:	d10d      	bne.n	8103258 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810323c:	4b05      	ldr	r3, [pc, #20]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103240:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810324a:	4902      	ldr	r1, [pc, #8]	; (8103254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810324c:	4313      	orrs	r3, r2
 810324e:	658b      	str	r3, [r1, #88]	; 0x58
 8103250:	e004      	b.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8103252:	bf00      	nop
 8103254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103258:	7dfb      	ldrb	r3, [r7, #23]
 810325a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103264:	2b00      	cmp	r3, #0
 8103266:	d032      	beq.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810326c:	2b30      	cmp	r3, #48	; 0x30
 810326e:	d01c      	beq.n	81032aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103270:	2b30      	cmp	r3, #48	; 0x30
 8103272:	d817      	bhi.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103274:	2b20      	cmp	r3, #32
 8103276:	d00c      	beq.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103278:	2b20      	cmp	r3, #32
 810327a:	d813      	bhi.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810327c:	2b00      	cmp	r3, #0
 810327e:	d016      	beq.n	81032ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8103280:	2b10      	cmp	r3, #16
 8103282:	d10f      	bne.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103284:	4baf      	ldr	r3, [pc, #700]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103288:	4aae      	ldr	r2, [pc, #696]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810328e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103290:	e00e      	b.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	3304      	adds	r3, #4
 8103296:	2102      	movs	r1, #2
 8103298:	4618      	mov	r0, r3
 810329a:	f001 f85f 	bl	810435c <RCCEx_PLL2_Config>
 810329e:	4603      	mov	r3, r0
 81032a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81032a2:	e005      	b.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81032a4:	2301      	movs	r3, #1
 81032a6:	75fb      	strb	r3, [r7, #23]
      break;
 81032a8:	e002      	b.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81032aa:	bf00      	nop
 81032ac:	e000      	b.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81032ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032b0:	7dfb      	ldrb	r3, [r7, #23]
 81032b2:	2b00      	cmp	r3, #0
 81032b4:	d109      	bne.n	81032ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81032b6:	4ba3      	ldr	r3, [pc, #652]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81032ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81032c2:	49a0      	ldr	r1, [pc, #640]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032c4:	4313      	orrs	r3, r2
 81032c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81032c8:	e001      	b.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ca:	7dfb      	ldrb	r3, [r7, #23]
 81032cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	d047      	beq.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032e2:	d030      	beq.n	8103346 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81032e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032e8:	d82a      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81032ee:	d02c      	beq.n	810334a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81032f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81032f4:	d824      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81032fa:	d018      	beq.n	810332e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81032fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103300:	d81e      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103302:	2b00      	cmp	r3, #0
 8103304:	d003      	beq.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810330a:	d007      	beq.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 810330c:	e018      	b.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810330e:	4b8d      	ldr	r3, [pc, #564]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103312:	4a8c      	ldr	r2, [pc, #560]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810331a:	e017      	b.n	810334c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	3304      	adds	r3, #4
 8103320:	2100      	movs	r1, #0
 8103322:	4618      	mov	r0, r3
 8103324:	f001 f81a 	bl	810435c <RCCEx_PLL2_Config>
 8103328:	4603      	mov	r3, r0
 810332a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810332c:	e00e      	b.n	810334c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	3324      	adds	r3, #36	; 0x24
 8103332:	2100      	movs	r1, #0
 8103334:	4618      	mov	r0, r3
 8103336:	f001 f8c3 	bl	81044c0 <RCCEx_PLL3_Config>
 810333a:	4603      	mov	r3, r0
 810333c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810333e:	e005      	b.n	810334c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103340:	2301      	movs	r3, #1
 8103342:	75fb      	strb	r3, [r7, #23]
      break;
 8103344:	e002      	b.n	810334c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103346:	bf00      	nop
 8103348:	e000      	b.n	810334c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810334a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810334c:	7dfb      	ldrb	r3, [r7, #23]
 810334e:	2b00      	cmp	r3, #0
 8103350:	d109      	bne.n	8103366 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103352:	4b7c      	ldr	r3, [pc, #496]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103356:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810335e:	4979      	ldr	r1, [pc, #484]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103360:	4313      	orrs	r3, r2
 8103362:	650b      	str	r3, [r1, #80]	; 0x50
 8103364:	e001      	b.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103366:	7dfb      	ldrb	r3, [r7, #23]
 8103368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103372:	2b00      	cmp	r3, #0
 8103374:	d049      	beq.n	810340a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810337a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810337e:	d02e      	beq.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8103380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103384:	d828      	bhi.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810338a:	d02a      	beq.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 810338c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103390:	d822      	bhi.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103396:	d026      	beq.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810339c:	d81c      	bhi.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810339e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81033a2:	d010      	beq.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 81033a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81033a8:	d816      	bhi.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	d01d      	beq.n	81033ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81033b2:	d111      	bne.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	3304      	adds	r3, #4
 81033b8:	2101      	movs	r1, #1
 81033ba:	4618      	mov	r0, r3
 81033bc:	f000 ffce 	bl	810435c <RCCEx_PLL2_Config>
 81033c0:	4603      	mov	r3, r0
 81033c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81033c4:	e012      	b.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	3324      	adds	r3, #36	; 0x24
 81033ca:	2101      	movs	r1, #1
 81033cc:	4618      	mov	r0, r3
 81033ce:	f001 f877 	bl	81044c0 <RCCEx_PLL3_Config>
 81033d2:	4603      	mov	r3, r0
 81033d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81033d6:	e009      	b.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033d8:	2301      	movs	r3, #1
 81033da:	75fb      	strb	r3, [r7, #23]
      break;
 81033dc:	e006      	b.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033de:	bf00      	nop
 81033e0:	e004      	b.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033e2:	bf00      	nop
 81033e4:	e002      	b.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033e6:	bf00      	nop
 81033e8:	e000      	b.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033ec:	7dfb      	ldrb	r3, [r7, #23]
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d109      	bne.n	8103406 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81033f2:	4b54      	ldr	r3, [pc, #336]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81033fe:	4951      	ldr	r1, [pc, #324]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103400:	4313      	orrs	r3, r2
 8103402:	650b      	str	r3, [r1, #80]	; 0x50
 8103404:	e001      	b.n	810340a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103406:	7dfb      	ldrb	r3, [r7, #23]
 8103408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103412:	2b00      	cmp	r3, #0
 8103414:	d04b      	beq.n	81034ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103420:	d02e      	beq.n	8103480 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8103422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103426:	d828      	bhi.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810342c:	d02a      	beq.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103432:	d822      	bhi.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103438:	d026      	beq.n	8103488 <HAL_RCCEx_PeriphCLKConfig+0x528>
 810343a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810343e:	d81c      	bhi.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103444:	d010      	beq.n	8103468 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810344a:	d816      	bhi.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810344c:	2b00      	cmp	r3, #0
 810344e:	d01d      	beq.n	810348c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103454:	d111      	bne.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	3304      	adds	r3, #4
 810345a:	2101      	movs	r1, #1
 810345c:	4618      	mov	r0, r3
 810345e:	f000 ff7d 	bl	810435c <RCCEx_PLL2_Config>
 8103462:	4603      	mov	r3, r0
 8103464:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103466:	e012      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	3324      	adds	r3, #36	; 0x24
 810346c:	2101      	movs	r1, #1
 810346e:	4618      	mov	r0, r3
 8103470:	f001 f826 	bl	81044c0 <RCCEx_PLL3_Config>
 8103474:	4603      	mov	r3, r0
 8103476:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103478:	e009      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810347a:	2301      	movs	r3, #1
 810347c:	75fb      	strb	r3, [r7, #23]
      break;
 810347e:	e006      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103480:	bf00      	nop
 8103482:	e004      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103484:	bf00      	nop
 8103486:	e002      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103488:	bf00      	nop
 810348a:	e000      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810348e:	7dfb      	ldrb	r3, [r7, #23]
 8103490:	2b00      	cmp	r3, #0
 8103492:	d10a      	bne.n	81034aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103494:	4b2b      	ldr	r3, [pc, #172]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103498:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81034a2:	4928      	ldr	r1, [pc, #160]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034a4:	4313      	orrs	r3, r2
 81034a6:	658b      	str	r3, [r1, #88]	; 0x58
 81034a8:	e001      	b.n	81034ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034aa:	7dfb      	ldrb	r3, [r7, #23]
 81034ac:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	d02f      	beq.n	810351a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034c2:	d00e      	beq.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 81034c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034c8:	d814      	bhi.n	81034f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	d015      	beq.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81034ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81034d2:	d10f      	bne.n	81034f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034d4:	4b1b      	ldr	r3, [pc, #108]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034d8:	4a1a      	ldr	r2, [pc, #104]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81034e0:	e00c      	b.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	3304      	adds	r3, #4
 81034e6:	2101      	movs	r1, #1
 81034e8:	4618      	mov	r0, r3
 81034ea:	f000 ff37 	bl	810435c <RCCEx_PLL2_Config>
 81034ee:	4603      	mov	r3, r0
 81034f0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81034f2:	e003      	b.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034f4:	2301      	movs	r3, #1
 81034f6:	75fb      	strb	r3, [r7, #23]
      break;
 81034f8:	e000      	b.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81034fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034fc:	7dfb      	ldrb	r3, [r7, #23]
 81034fe:	2b00      	cmp	r3, #0
 8103500:	d109      	bne.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103502:	4b10      	ldr	r3, [pc, #64]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103506:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810350e:	490d      	ldr	r1, [pc, #52]	; (8103544 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103510:	4313      	orrs	r3, r2
 8103512:	650b      	str	r3, [r1, #80]	; 0x50
 8103514:	e001      	b.n	810351a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103516:	7dfb      	ldrb	r3, [r7, #23]
 8103518:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103522:	2b00      	cmp	r3, #0
 8103524:	d033      	beq.n	810358e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810352a:	2b03      	cmp	r3, #3
 810352c:	d81c      	bhi.n	8103568 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810352e:	a201      	add	r2, pc, #4	; (adr r2, 8103534 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103534:	0810356f 	.word	0x0810356f
 8103538:	08103549 	.word	0x08103549
 810353c:	08103557 	.word	0x08103557
 8103540:	0810356f 	.word	0x0810356f
 8103544:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103548:	4bb9      	ldr	r3, [pc, #740]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810354c:	4ab8      	ldr	r2, [pc, #736]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103554:	e00c      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	3304      	adds	r3, #4
 810355a:	2102      	movs	r1, #2
 810355c:	4618      	mov	r0, r3
 810355e:	f000 fefd 	bl	810435c <RCCEx_PLL2_Config>
 8103562:	4603      	mov	r3, r0
 8103564:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103566:	e003      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103568:	2301      	movs	r3, #1
 810356a:	75fb      	strb	r3, [r7, #23]
      break;
 810356c:	e000      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810356e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103570:	7dfb      	ldrb	r3, [r7, #23]
 8103572:	2b00      	cmp	r3, #0
 8103574:	d109      	bne.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103576:	4bae      	ldr	r3, [pc, #696]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810357a:	f023 0203 	bic.w	r2, r3, #3
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103582:	49ab      	ldr	r1, [pc, #684]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103584:	4313      	orrs	r3, r2
 8103586:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103588:	e001      	b.n	810358e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810358a:	7dfb      	ldrb	r3, [r7, #23]
 810358c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103596:	2b00      	cmp	r3, #0
 8103598:	f000 8088 	beq.w	81036ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810359c:	4ba5      	ldr	r3, [pc, #660]	; (8103834 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	4aa4      	ldr	r2, [pc, #656]	; (8103834 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81035a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81035a8:	f7fe f9d4 	bl	8101954 <HAL_GetTick>
 81035ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81035ae:	e009      	b.n	81035c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81035b0:	f7fe f9d0 	bl	8101954 <HAL_GetTick>
 81035b4:	4602      	mov	r2, r0
 81035b6:	693b      	ldr	r3, [r7, #16]
 81035b8:	1ad3      	subs	r3, r2, r3
 81035ba:	2b64      	cmp	r3, #100	; 0x64
 81035bc:	d902      	bls.n	81035c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81035be:	2303      	movs	r3, #3
 81035c0:	75fb      	strb	r3, [r7, #23]
        break;
 81035c2:	e005      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81035c4:	4b9b      	ldr	r3, [pc, #620]	; (8103834 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035cc:	2b00      	cmp	r3, #0
 81035ce:	d0ef      	beq.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81035d0:	7dfb      	ldrb	r3, [r7, #23]
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d168      	bne.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81035d6:	4b96      	ldr	r3, [pc, #600]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035e0:	4053      	eors	r3, r2
 81035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81035e6:	2b00      	cmp	r3, #0
 81035e8:	d013      	beq.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81035ea:	4b91      	ldr	r3, [pc, #580]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81035f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81035f4:	4b8e      	ldr	r3, [pc, #568]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035f8:	4a8d      	ldr	r2, [pc, #564]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81035fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103600:	4b8b      	ldr	r3, [pc, #556]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103604:	4a8a      	ldr	r2, [pc, #552]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810360a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810360c:	4a88      	ldr	r2, [pc, #544]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810360e:	68fb      	ldr	r3, [r7, #12]
 8103610:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810361c:	d115      	bne.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810361e:	f7fe f999 	bl	8101954 <HAL_GetTick>
 8103622:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103624:	e00b      	b.n	810363e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103626:	f7fe f995 	bl	8101954 <HAL_GetTick>
 810362a:	4602      	mov	r2, r0
 810362c:	693b      	ldr	r3, [r7, #16]
 810362e:	1ad3      	subs	r3, r2, r3
 8103630:	f241 3288 	movw	r2, #5000	; 0x1388
 8103634:	4293      	cmp	r3, r2
 8103636:	d902      	bls.n	810363e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103638:	2303      	movs	r3, #3
 810363a:	75fb      	strb	r3, [r7, #23]
            break;
 810363c:	e005      	b.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810363e:	4b7c      	ldr	r3, [pc, #496]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103642:	f003 0302 	and.w	r3, r3, #2
 8103646:	2b00      	cmp	r3, #0
 8103648:	d0ed      	beq.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810364a:	7dfb      	ldrb	r3, [r7, #23]
 810364c:	2b00      	cmp	r3, #0
 810364e:	d128      	bne.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810365a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810365e:	d10f      	bne.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103660:	4b73      	ldr	r3, [pc, #460]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103662:	691b      	ldr	r3, [r3, #16]
 8103664:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810366e:	091b      	lsrs	r3, r3, #4
 8103670:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103674:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103678:	496d      	ldr	r1, [pc, #436]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810367a:	4313      	orrs	r3, r2
 810367c:	610b      	str	r3, [r1, #16]
 810367e:	e005      	b.n	810368c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103680:	4b6b      	ldr	r3, [pc, #428]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103682:	691b      	ldr	r3, [r3, #16]
 8103684:	4a6a      	ldr	r2, [pc, #424]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103686:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810368a:	6113      	str	r3, [r2, #16]
 810368c:	4b68      	ldr	r3, [pc, #416]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810368e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810369a:	4965      	ldr	r1, [pc, #404]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810369c:	4313      	orrs	r3, r2
 810369e:	670b      	str	r3, [r1, #112]	; 0x70
 81036a0:	e004      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81036a2:	7dfb      	ldrb	r3, [r7, #23]
 81036a4:	75bb      	strb	r3, [r7, #22]
 81036a6:	e001      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036a8:	7dfb      	ldrb	r3, [r7, #23]
 81036aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	f003 0301 	and.w	r3, r3, #1
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d07e      	beq.n	81037b6 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81036bc:	2b28      	cmp	r3, #40	; 0x28
 81036be:	d867      	bhi.n	8103790 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81036c0:	a201      	add	r2, pc, #4	; (adr r2, 81036c8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036c6:	bf00      	nop
 81036c8:	08103797 	.word	0x08103797
 81036cc:	08103791 	.word	0x08103791
 81036d0:	08103791 	.word	0x08103791
 81036d4:	08103791 	.word	0x08103791
 81036d8:	08103791 	.word	0x08103791
 81036dc:	08103791 	.word	0x08103791
 81036e0:	08103791 	.word	0x08103791
 81036e4:	08103791 	.word	0x08103791
 81036e8:	0810376d 	.word	0x0810376d
 81036ec:	08103791 	.word	0x08103791
 81036f0:	08103791 	.word	0x08103791
 81036f4:	08103791 	.word	0x08103791
 81036f8:	08103791 	.word	0x08103791
 81036fc:	08103791 	.word	0x08103791
 8103700:	08103791 	.word	0x08103791
 8103704:	08103791 	.word	0x08103791
 8103708:	0810377f 	.word	0x0810377f
 810370c:	08103791 	.word	0x08103791
 8103710:	08103791 	.word	0x08103791
 8103714:	08103791 	.word	0x08103791
 8103718:	08103791 	.word	0x08103791
 810371c:	08103791 	.word	0x08103791
 8103720:	08103791 	.word	0x08103791
 8103724:	08103791 	.word	0x08103791
 8103728:	08103797 	.word	0x08103797
 810372c:	08103791 	.word	0x08103791
 8103730:	08103791 	.word	0x08103791
 8103734:	08103791 	.word	0x08103791
 8103738:	08103791 	.word	0x08103791
 810373c:	08103791 	.word	0x08103791
 8103740:	08103791 	.word	0x08103791
 8103744:	08103791 	.word	0x08103791
 8103748:	08103797 	.word	0x08103797
 810374c:	08103791 	.word	0x08103791
 8103750:	08103791 	.word	0x08103791
 8103754:	08103791 	.word	0x08103791
 8103758:	08103791 	.word	0x08103791
 810375c:	08103791 	.word	0x08103791
 8103760:	08103791 	.word	0x08103791
 8103764:	08103791 	.word	0x08103791
 8103768:	08103797 	.word	0x08103797
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	3304      	adds	r3, #4
 8103770:	2101      	movs	r1, #1
 8103772:	4618      	mov	r0, r3
 8103774:	f000 fdf2 	bl	810435c <RCCEx_PLL2_Config>
 8103778:	4603      	mov	r3, r0
 810377a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810377c:	e00c      	b.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	3324      	adds	r3, #36	; 0x24
 8103782:	2101      	movs	r1, #1
 8103784:	4618      	mov	r0, r3
 8103786:	f000 fe9b 	bl	81044c0 <RCCEx_PLL3_Config>
 810378a:	4603      	mov	r3, r0
 810378c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810378e:	e003      	b.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103790:	2301      	movs	r3, #1
 8103792:	75fb      	strb	r3, [r7, #23]
      break;
 8103794:	e000      	b.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103798:	7dfb      	ldrb	r3, [r7, #23]
 810379a:	2b00      	cmp	r3, #0
 810379c:	d109      	bne.n	81037b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810379e:	4b24      	ldr	r3, [pc, #144]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81037aa:	4921      	ldr	r1, [pc, #132]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81037ac:	4313      	orrs	r3, r2
 81037ae:	654b      	str	r3, [r1, #84]	; 0x54
 81037b0:	e001      	b.n	81037b6 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037b2:	7dfb      	ldrb	r3, [r7, #23]
 81037b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	f003 0302 	and.w	r3, r3, #2
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d03c      	beq.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037c6:	2b05      	cmp	r3, #5
 81037c8:	d820      	bhi.n	810380c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81037ca:	a201      	add	r2, pc, #4	; (adr r2, 81037d0 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037d0:	08103813 	.word	0x08103813
 81037d4:	081037e9 	.word	0x081037e9
 81037d8:	081037fb 	.word	0x081037fb
 81037dc:	08103813 	.word	0x08103813
 81037e0:	08103813 	.word	0x08103813
 81037e4:	08103813 	.word	0x08103813
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	3304      	adds	r3, #4
 81037ec:	2101      	movs	r1, #1
 81037ee:	4618      	mov	r0, r3
 81037f0:	f000 fdb4 	bl	810435c <RCCEx_PLL2_Config>
 81037f4:	4603      	mov	r3, r0
 81037f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81037f8:	e00c      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	3324      	adds	r3, #36	; 0x24
 81037fe:	2101      	movs	r1, #1
 8103800:	4618      	mov	r0, r3
 8103802:	f000 fe5d 	bl	81044c0 <RCCEx_PLL3_Config>
 8103806:	4603      	mov	r3, r0
 8103808:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810380a:	e003      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810380c:	2301      	movs	r3, #1
 810380e:	75fb      	strb	r3, [r7, #23]
      break;
 8103810:	e000      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103814:	7dfb      	ldrb	r3, [r7, #23]
 8103816:	2b00      	cmp	r3, #0
 8103818:	d10e      	bne.n	8103838 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810381a:	4b05      	ldr	r3, [pc, #20]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810381e:	f023 0207 	bic.w	r2, r3, #7
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103826:	4902      	ldr	r1, [pc, #8]	; (8103830 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103828:	4313      	orrs	r3, r2
 810382a:	654b      	str	r3, [r1, #84]	; 0x54
 810382c:	e006      	b.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810382e:	bf00      	nop
 8103830:	58024400 	.word	0x58024400
 8103834:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103838:	7dfb      	ldrb	r3, [r7, #23]
 810383a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	f003 0304 	and.w	r3, r3, #4
 8103844:	2b00      	cmp	r3, #0
 8103846:	d039      	beq.n	81038bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810384e:	2b05      	cmp	r3, #5
 8103850:	d820      	bhi.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103852:	a201      	add	r2, pc, #4	; (adr r2, 8103858 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103858:	0810389b 	.word	0x0810389b
 810385c:	08103871 	.word	0x08103871
 8103860:	08103883 	.word	0x08103883
 8103864:	0810389b 	.word	0x0810389b
 8103868:	0810389b 	.word	0x0810389b
 810386c:	0810389b 	.word	0x0810389b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	3304      	adds	r3, #4
 8103874:	2101      	movs	r1, #1
 8103876:	4618      	mov	r0, r3
 8103878:	f000 fd70 	bl	810435c <RCCEx_PLL2_Config>
 810387c:	4603      	mov	r3, r0
 810387e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103880:	e00c      	b.n	810389c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	3324      	adds	r3, #36	; 0x24
 8103886:	2101      	movs	r1, #1
 8103888:	4618      	mov	r0, r3
 810388a:	f000 fe19 	bl	81044c0 <RCCEx_PLL3_Config>
 810388e:	4603      	mov	r3, r0
 8103890:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103892:	e003      	b.n	810389c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103894:	2301      	movs	r3, #1
 8103896:	75fb      	strb	r3, [r7, #23]
      break;
 8103898:	e000      	b.n	810389c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810389a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810389c:	7dfb      	ldrb	r3, [r7, #23]
 810389e:	2b00      	cmp	r3, #0
 81038a0:	d10a      	bne.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81038a2:	4bb7      	ldr	r3, [pc, #732]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038a6:	f023 0207 	bic.w	r2, r3, #7
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81038b0:	49b3      	ldr	r1, [pc, #716]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81038b2:	4313      	orrs	r3, r2
 81038b4:	658b      	str	r3, [r1, #88]	; 0x58
 81038b6:	e001      	b.n	81038bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038b8:	7dfb      	ldrb	r3, [r7, #23]
 81038ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	f003 0320 	and.w	r3, r3, #32
 81038c4:	2b00      	cmp	r3, #0
 81038c6:	d04b      	beq.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81038ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81038d2:	d02e      	beq.n	8103932 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 81038d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81038d8:	d828      	bhi.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81038de:	d02a      	beq.n	8103936 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81038e4:	d822      	bhi.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038ea:	d026      	beq.n	810393a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81038ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038f0:	d81c      	bhi.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038f6:	d010      	beq.n	810391a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 81038f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038fc:	d816      	bhi.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038fe:	2b00      	cmp	r3, #0
 8103900:	d01d      	beq.n	810393e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103906:	d111      	bne.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	3304      	adds	r3, #4
 810390c:	2100      	movs	r1, #0
 810390e:	4618      	mov	r0, r3
 8103910:	f000 fd24 	bl	810435c <RCCEx_PLL2_Config>
 8103914:	4603      	mov	r3, r0
 8103916:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103918:	e012      	b.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	3324      	adds	r3, #36	; 0x24
 810391e:	2102      	movs	r1, #2
 8103920:	4618      	mov	r0, r3
 8103922:	f000 fdcd 	bl	81044c0 <RCCEx_PLL3_Config>
 8103926:	4603      	mov	r3, r0
 8103928:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810392a:	e009      	b.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810392c:	2301      	movs	r3, #1
 810392e:	75fb      	strb	r3, [r7, #23]
      break;
 8103930:	e006      	b.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103932:	bf00      	nop
 8103934:	e004      	b.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103936:	bf00      	nop
 8103938:	e002      	b.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810393a:	bf00      	nop
 810393c:	e000      	b.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810393e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103940:	7dfb      	ldrb	r3, [r7, #23]
 8103942:	2b00      	cmp	r3, #0
 8103944:	d10a      	bne.n	810395c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103946:	4b8e      	ldr	r3, [pc, #568]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810394a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103954:	498a      	ldr	r1, [pc, #552]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103956:	4313      	orrs	r3, r2
 8103958:	654b      	str	r3, [r1, #84]	; 0x54
 810395a:	e001      	b.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810395c:	7dfb      	ldrb	r3, [r7, #23]
 810395e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103968:	2b00      	cmp	r3, #0
 810396a:	d04b      	beq.n	8103a04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103972:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103976:	d02e      	beq.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103978:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810397c:	d828      	bhi.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103982:	d02a      	beq.n	81039da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103988:	d822      	bhi.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810398a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810398e:	d026      	beq.n	81039de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103994:	d81c      	bhi.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810399a:	d010      	beq.n	81039be <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 810399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81039a0:	d816      	bhi.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81039a2:	2b00      	cmp	r3, #0
 81039a4:	d01d      	beq.n	81039e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81039aa:	d111      	bne.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	3304      	adds	r3, #4
 81039b0:	2100      	movs	r1, #0
 81039b2:	4618      	mov	r0, r3
 81039b4:	f000 fcd2 	bl	810435c <RCCEx_PLL2_Config>
 81039b8:	4603      	mov	r3, r0
 81039ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81039bc:	e012      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	3324      	adds	r3, #36	; 0x24
 81039c2:	2102      	movs	r1, #2
 81039c4:	4618      	mov	r0, r3
 81039c6:	f000 fd7b 	bl	81044c0 <RCCEx_PLL3_Config>
 81039ca:	4603      	mov	r3, r0
 81039cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81039ce:	e009      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039d0:	2301      	movs	r3, #1
 81039d2:	75fb      	strb	r3, [r7, #23]
      break;
 81039d4:	e006      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039d6:	bf00      	nop
 81039d8:	e004      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039da:	bf00      	nop
 81039dc:	e002      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039de:	bf00      	nop
 81039e0:	e000      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039e4:	7dfb      	ldrb	r3, [r7, #23]
 81039e6:	2b00      	cmp	r3, #0
 81039e8:	d10a      	bne.n	8103a00 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81039ea:	4b65      	ldr	r3, [pc, #404]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81039f8:	4961      	ldr	r1, [pc, #388]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039fa:	4313      	orrs	r3, r2
 81039fc:	658b      	str	r3, [r1, #88]	; 0x58
 81039fe:	e001      	b.n	8103a04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a00:	7dfb      	ldrb	r3, [r7, #23]
 8103a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103a0c:	2b00      	cmp	r3, #0
 8103a0e:	d04b      	beq.n	8103aa8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103a1a:	d02e      	beq.n	8103a7a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103a1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103a20:	d828      	bhi.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103a26:	d02a      	beq.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103a2c:	d822      	bhi.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103a32:	d026      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103a34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103a38:	d81c      	bhi.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a3e:	d010      	beq.n	8103a62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a44:	d816      	bhi.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a46:	2b00      	cmp	r3, #0
 8103a48:	d01d      	beq.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103a4e:	d111      	bne.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	3304      	adds	r3, #4
 8103a54:	2100      	movs	r1, #0
 8103a56:	4618      	mov	r0, r3
 8103a58:	f000 fc80 	bl	810435c <RCCEx_PLL2_Config>
 8103a5c:	4603      	mov	r3, r0
 8103a5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103a60:	e012      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	3324      	adds	r3, #36	; 0x24
 8103a66:	2102      	movs	r1, #2
 8103a68:	4618      	mov	r0, r3
 8103a6a:	f000 fd29 	bl	81044c0 <RCCEx_PLL3_Config>
 8103a6e:	4603      	mov	r3, r0
 8103a70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103a72:	e009      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a74:	2301      	movs	r3, #1
 8103a76:	75fb      	strb	r3, [r7, #23]
      break;
 8103a78:	e006      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a7a:	bf00      	nop
 8103a7c:	e004      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a7e:	bf00      	nop
 8103a80:	e002      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a82:	bf00      	nop
 8103a84:	e000      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a88:	7dfb      	ldrb	r3, [r7, #23]
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d10a      	bne.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103a8e:	4b3c      	ldr	r3, [pc, #240]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a9c:	4938      	ldr	r1, [pc, #224]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a9e:	4313      	orrs	r3, r2
 8103aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8103aa2:	e001      	b.n	8103aa8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aa4:	7dfb      	ldrb	r3, [r7, #23]
 8103aa6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	f003 0308 	and.w	r3, r3, #8
 8103ab0:	2b00      	cmp	r3, #0
 8103ab2:	d01a      	beq.n	8103aea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103abe:	d10a      	bne.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	3324      	adds	r3, #36	; 0x24
 8103ac4:	2102      	movs	r1, #2
 8103ac6:	4618      	mov	r0, r3
 8103ac8:	f000 fcfa 	bl	81044c0 <RCCEx_PLL3_Config>
 8103acc:	4603      	mov	r3, r0
 8103ace:	2b00      	cmp	r3, #0
 8103ad0:	d001      	beq.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103ad2:	2301      	movs	r3, #1
 8103ad4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103ad6:	4b2a      	ldr	r3, [pc, #168]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ada:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ae4:	4926      	ldr	r1, [pc, #152]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ae6:	4313      	orrs	r3, r2
 8103ae8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	f003 0310 	and.w	r3, r3, #16
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d01a      	beq.n	8103b2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b00:	d10a      	bne.n	8103b18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	3324      	adds	r3, #36	; 0x24
 8103b06:	2102      	movs	r1, #2
 8103b08:	4618      	mov	r0, r3
 8103b0a:	f000 fcd9 	bl	81044c0 <RCCEx_PLL3_Config>
 8103b0e:	4603      	mov	r3, r0
 8103b10:	2b00      	cmp	r3, #0
 8103b12:	d001      	beq.n	8103b18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103b14:	2301      	movs	r3, #1
 8103b16:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103b18:	4b19      	ldr	r3, [pc, #100]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103b26:	4916      	ldr	r1, [pc, #88]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b28:	4313      	orrs	r3, r2
 8103b2a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	d036      	beq.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b42:	d01f      	beq.n	8103b84 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b48:	d817      	bhi.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d003      	beq.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b52:	d009      	beq.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103b54:	e011      	b.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	3304      	adds	r3, #4
 8103b5a:	2100      	movs	r1, #0
 8103b5c:	4618      	mov	r0, r3
 8103b5e:	f000 fbfd 	bl	810435c <RCCEx_PLL2_Config>
 8103b62:	4603      	mov	r3, r0
 8103b64:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103b66:	e00e      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	3324      	adds	r3, #36	; 0x24
 8103b6c:	2102      	movs	r1, #2
 8103b6e:	4618      	mov	r0, r3
 8103b70:	f000 fca6 	bl	81044c0 <RCCEx_PLL3_Config>
 8103b74:	4603      	mov	r3, r0
 8103b76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103b78:	e005      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b7a:	2301      	movs	r3, #1
 8103b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8103b7e:	e002      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103b80:	58024400 	.word	0x58024400
      break;
 8103b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b86:	7dfb      	ldrb	r3, [r7, #23]
 8103b88:	2b00      	cmp	r3, #0
 8103b8a:	d10a      	bne.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103b8c:	4b93      	ldr	r3, [pc, #588]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b9a:	4990      	ldr	r1, [pc, #576]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b9c:	4313      	orrs	r3, r2
 8103b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8103ba0:	e001      	b.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ba2:	7dfb      	ldrb	r3, [r7, #23]
 8103ba4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103bae:	2b00      	cmp	r3, #0
 8103bb0:	d033      	beq.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103bbc:	d01c      	beq.n	8103bf8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103bc2:	d816      	bhi.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103bc8:	d003      	beq.n	8103bd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103bce:	d007      	beq.n	8103be0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103bd0:	e00f      	b.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bd2:	4b82      	ldr	r3, [pc, #520]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bd6:	4a81      	ldr	r2, [pc, #516]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103bde:	e00c      	b.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	3324      	adds	r3, #36	; 0x24
 8103be4:	2101      	movs	r1, #1
 8103be6:	4618      	mov	r0, r3
 8103be8:	f000 fc6a 	bl	81044c0 <RCCEx_PLL3_Config>
 8103bec:	4603      	mov	r3, r0
 8103bee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103bf0:	e003      	b.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bf2:	2301      	movs	r3, #1
 8103bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8103bf6:	e000      	b.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bfa:	7dfb      	ldrb	r3, [r7, #23]
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d10a      	bne.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103c00:	4b76      	ldr	r3, [pc, #472]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103c0e:	4973      	ldr	r1, [pc, #460]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c10:	4313      	orrs	r3, r2
 8103c12:	654b      	str	r3, [r1, #84]	; 0x54
 8103c14:	e001      	b.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c16:	7dfb      	ldrb	r3, [r7, #23]
 8103c18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d029      	beq.n	8103c7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c2a:	2b00      	cmp	r3, #0
 8103c2c:	d003      	beq.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103c32:	d007      	beq.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103c34:	e00f      	b.n	8103c56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c36:	4b69      	ldr	r3, [pc, #420]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c3a:	4a68      	ldr	r2, [pc, #416]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103c42:	e00b      	b.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	3304      	adds	r3, #4
 8103c48:	2102      	movs	r1, #2
 8103c4a:	4618      	mov	r0, r3
 8103c4c:	f000 fb86 	bl	810435c <RCCEx_PLL2_Config>
 8103c50:	4603      	mov	r3, r0
 8103c52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103c54:	e002      	b.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103c56:	2301      	movs	r3, #1
 8103c58:	75fb      	strb	r3, [r7, #23]
      break;
 8103c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c5c:	7dfb      	ldrb	r3, [r7, #23]
 8103c5e:	2b00      	cmp	r3, #0
 8103c60:	d109      	bne.n	8103c76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103c62:	4b5e      	ldr	r3, [pc, #376]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c6e:	495b      	ldr	r1, [pc, #364]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c70:	4313      	orrs	r3, r2
 8103c72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103c74:	e001      	b.n	8103c7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c76:	7dfb      	ldrb	r3, [r7, #23]
 8103c78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103c82:	2b00      	cmp	r3, #0
 8103c84:	d00a      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	3324      	adds	r3, #36	; 0x24
 8103c8a:	2102      	movs	r1, #2
 8103c8c:	4618      	mov	r0, r3
 8103c8e:	f000 fc17 	bl	81044c0 <RCCEx_PLL3_Config>
 8103c92:	4603      	mov	r3, r0
 8103c94:	2b00      	cmp	r3, #0
 8103c96:	d001      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103c98:	2301      	movs	r3, #1
 8103c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103ca4:	2b00      	cmp	r3, #0
 8103ca6:	d030      	beq.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103cb0:	d017      	beq.n	8103ce2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103cb6:	d811      	bhi.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103cbc:	d013      	beq.n	8103ce6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103cc2:	d80b      	bhi.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	d010      	beq.n	8103cea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103ccc:	d106      	bne.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cce:	4b43      	ldr	r3, [pc, #268]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cd2:	4a42      	ldr	r2, [pc, #264]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103cda:	e007      	b.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cdc:	2301      	movs	r3, #1
 8103cde:	75fb      	strb	r3, [r7, #23]
      break;
 8103ce0:	e004      	b.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103ce2:	bf00      	nop
 8103ce4:	e002      	b.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103ce6:	bf00      	nop
 8103ce8:	e000      	b.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cec:	7dfb      	ldrb	r3, [r7, #23]
 8103cee:	2b00      	cmp	r3, #0
 8103cf0:	d109      	bne.n	8103d06 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103cf2:	4b3a      	ldr	r3, [pc, #232]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103cfe:	4937      	ldr	r1, [pc, #220]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d00:	4313      	orrs	r3, r2
 8103d02:	654b      	str	r3, [r1, #84]	; 0x54
 8103d04:	e001      	b.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d06:	7dfb      	ldrb	r3, [r7, #23]
 8103d08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103d12:	2b00      	cmp	r3, #0
 8103d14:	d008      	beq.n	8103d28 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103d16:	4b31      	ldr	r3, [pc, #196]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103d22:	492e      	ldr	r1, [pc, #184]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d24:	4313      	orrs	r3, r2
 8103d26:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d009      	beq.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103d34:	4b29      	ldr	r3, [pc, #164]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d36:	691b      	ldr	r3, [r3, #16]
 8103d38:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103d42:	4926      	ldr	r1, [pc, #152]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d44:	4313      	orrs	r3, r2
 8103d46:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d008      	beq.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103d54:	4b21      	ldr	r3, [pc, #132]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103d60:	491e      	ldr	r1, [pc, #120]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d62:	4313      	orrs	r3, r2
 8103d64:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103d6e:	2b00      	cmp	r3, #0
 8103d70:	d00d      	beq.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103d72:	4b1a      	ldr	r3, [pc, #104]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d74:	691b      	ldr	r3, [r3, #16]
 8103d76:	4a19      	ldr	r2, [pc, #100]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103d7c:	6113      	str	r3, [r2, #16]
 8103d7e:	4b17      	ldr	r3, [pc, #92]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d80:	691a      	ldr	r2, [r3, #16]
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103d88:	4914      	ldr	r1, [pc, #80]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d8a:	4313      	orrs	r3, r2
 8103d8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	2b00      	cmp	r3, #0
 8103d94:	da08      	bge.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103d96:	4b11      	ldr	r3, [pc, #68]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103da2:	490e      	ldr	r1, [pc, #56]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103da4:	4313      	orrs	r3, r2
 8103da6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d009      	beq.n	8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103db4:	4b09      	ldr	r3, [pc, #36]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103dc2:	4906      	ldr	r1, [pc, #24]	; (8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103dc4:	4313      	orrs	r3, r2
 8103dc6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103dc8:	7dbb      	ldrb	r3, [r7, #22]
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d101      	bne.n	8103dd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103dce:	2300      	movs	r3, #0
 8103dd0:	e000      	b.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103dd2:	2301      	movs	r3, #1
}
 8103dd4:	4618      	mov	r0, r3
 8103dd6:	3718      	adds	r7, #24
 8103dd8:	46bd      	mov	sp, r7
 8103dda:	bd80      	pop	{r7, pc}
 8103ddc:	58024400 	.word	0x58024400

08103de0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103de0:	b580      	push	{r7, lr}
 8103de2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103de4:	f7ff f85e 	bl	8102ea4 <HAL_RCC_GetHCLKFreq>
 8103de8:	4602      	mov	r2, r0
 8103dea:	4b06      	ldr	r3, [pc, #24]	; (8103e04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103dec:	6a1b      	ldr	r3, [r3, #32]
 8103dee:	091b      	lsrs	r3, r3, #4
 8103df0:	f003 0307 	and.w	r3, r3, #7
 8103df4:	4904      	ldr	r1, [pc, #16]	; (8103e08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103df6:	5ccb      	ldrb	r3, [r1, r3]
 8103df8:	f003 031f 	and.w	r3, r3, #31
 8103dfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103e00:	4618      	mov	r0, r3
 8103e02:	bd80      	pop	{r7, pc}
 8103e04:	58024400 	.word	0x58024400
 8103e08:	081071a8 	.word	0x081071a8

08103e0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103e0c:	b480      	push	{r7}
 8103e0e:	b089      	sub	sp, #36	; 0x24
 8103e10:	af00      	add	r7, sp, #0
 8103e12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103e14:	4ba1      	ldr	r3, [pc, #644]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e18:	f003 0303 	and.w	r3, r3, #3
 8103e1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103e1e:	4b9f      	ldr	r3, [pc, #636]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e22:	0b1b      	lsrs	r3, r3, #12
 8103e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103e28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103e2a:	4b9c      	ldr	r3, [pc, #624]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e2e:	091b      	lsrs	r3, r3, #4
 8103e30:	f003 0301 	and.w	r3, r3, #1
 8103e34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103e36:	4b99      	ldr	r3, [pc, #612]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e3a:	08db      	lsrs	r3, r3, #3
 8103e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103e40:	693a      	ldr	r2, [r7, #16]
 8103e42:	fb02 f303 	mul.w	r3, r2, r3
 8103e46:	ee07 3a90 	vmov	s15, r3
 8103e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103e52:	697b      	ldr	r3, [r7, #20]
 8103e54:	2b00      	cmp	r3, #0
 8103e56:	f000 8111 	beq.w	810407c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103e5a:	69bb      	ldr	r3, [r7, #24]
 8103e5c:	2b02      	cmp	r3, #2
 8103e5e:	f000 8083 	beq.w	8103f68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103e62:	69bb      	ldr	r3, [r7, #24]
 8103e64:	2b02      	cmp	r3, #2
 8103e66:	f200 80a1 	bhi.w	8103fac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103e6a:	69bb      	ldr	r3, [r7, #24]
 8103e6c:	2b00      	cmp	r3, #0
 8103e6e:	d003      	beq.n	8103e78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103e70:	69bb      	ldr	r3, [r7, #24]
 8103e72:	2b01      	cmp	r3, #1
 8103e74:	d056      	beq.n	8103f24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103e76:	e099      	b.n	8103fac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e78:	4b88      	ldr	r3, [pc, #544]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	f003 0320 	and.w	r3, r3, #32
 8103e80:	2b00      	cmp	r3, #0
 8103e82:	d02d      	beq.n	8103ee0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103e84:	4b85      	ldr	r3, [pc, #532]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	08db      	lsrs	r3, r3, #3
 8103e8a:	f003 0303 	and.w	r3, r3, #3
 8103e8e:	4a84      	ldr	r2, [pc, #528]	; (81040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103e90:	fa22 f303 	lsr.w	r3, r2, r3
 8103e94:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103e96:	68bb      	ldr	r3, [r7, #8]
 8103e98:	ee07 3a90 	vmov	s15, r3
 8103e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ea0:	697b      	ldr	r3, [r7, #20]
 8103ea2:	ee07 3a90 	vmov	s15, r3
 8103ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103eae:	4b7b      	ldr	r3, [pc, #492]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103eb6:	ee07 3a90 	vmov	s15, r3
 8103eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 81040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103ede:	e087      	b.n	8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103ee0:	697b      	ldr	r3, [r7, #20]
 8103ee2:	ee07 3a90 	vmov	s15, r3
 8103ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ef2:	4b6a      	ldr	r3, [pc, #424]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103efa:	ee07 3a90 	vmov	s15, r3
 8103efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f06:	eddf 5a67 	vldr	s11, [pc, #412]	; 81040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f22:	e065      	b.n	8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103f24:	697b      	ldr	r3, [r7, #20]
 8103f26:	ee07 3a90 	vmov	s15, r3
 8103f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81040ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f36:	4b59      	ldr	r3, [pc, #356]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f3e:	ee07 3a90 	vmov	s15, r3
 8103f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 81040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f66:	e043      	b.n	8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103f68:	697b      	ldr	r3, [r7, #20]
 8103f6a:	ee07 3a90 	vmov	s15, r3
 8103f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f7a:	4b48      	ldr	r3, [pc, #288]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f82:	ee07 3a90 	vmov	s15, r3
 8103f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 81040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103faa:	e021      	b.n	8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103fac:	697b      	ldr	r3, [r7, #20]
 8103fae:	ee07 3a90 	vmov	s15, r3
 8103fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81040ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103fbe:	4b37      	ldr	r3, [pc, #220]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fc6:	ee07 3a90 	vmov	s15, r3
 8103fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8103fd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 81040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103fee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103ff0:	4b2a      	ldr	r3, [pc, #168]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103ff4:	0a5b      	lsrs	r3, r3, #9
 8103ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103ffa:	ee07 3a90 	vmov	s15, r3
 8103ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104006:	ee37 7a87 	vadd.f32	s14, s15, s14
 810400a:	edd7 6a07 	vldr	s13, [r7, #28]
 810400e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104016:	ee17 2a90 	vmov	r2, s15
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810401e:	4b1f      	ldr	r3, [pc, #124]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104022:	0c1b      	lsrs	r3, r3, #16
 8104024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104028:	ee07 3a90 	vmov	s15, r3
 810402c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104038:	edd7 6a07 	vldr	s13, [r7, #28]
 810403c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104044:	ee17 2a90 	vmov	r2, s15
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810404c:	4b13      	ldr	r3, [pc, #76]	; (810409c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104050:	0e1b      	lsrs	r3, r3, #24
 8104052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104056:	ee07 3a90 	vmov	s15, r3
 810405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810405e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104066:	edd7 6a07 	vldr	s13, [r7, #28]
 810406a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810406e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104072:	ee17 2a90 	vmov	r2, s15
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810407a:	e008      	b.n	810408e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	2200      	movs	r2, #0
 8104080:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	2200      	movs	r2, #0
 8104086:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	2200      	movs	r2, #0
 810408c:	609a      	str	r2, [r3, #8]
}
 810408e:	bf00      	nop
 8104090:	3724      	adds	r7, #36	; 0x24
 8104092:	46bd      	mov	sp, r7
 8104094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104098:	4770      	bx	lr
 810409a:	bf00      	nop
 810409c:	58024400 	.word	0x58024400
 81040a0:	03d09000 	.word	0x03d09000
 81040a4:	46000000 	.word	0x46000000
 81040a8:	4c742400 	.word	0x4c742400
 81040ac:	4a742400 	.word	0x4a742400
 81040b0:	4bbebc20 	.word	0x4bbebc20

081040b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81040b4:	b480      	push	{r7}
 81040b6:	b089      	sub	sp, #36	; 0x24
 81040b8:	af00      	add	r7, sp, #0
 81040ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81040bc:	4ba1      	ldr	r3, [pc, #644]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040c0:	f003 0303 	and.w	r3, r3, #3
 81040c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81040c6:	4b9f      	ldr	r3, [pc, #636]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040ca:	0d1b      	lsrs	r3, r3, #20
 81040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81040d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81040d2:	4b9c      	ldr	r3, [pc, #624]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040d6:	0a1b      	lsrs	r3, r3, #8
 81040d8:	f003 0301 	and.w	r3, r3, #1
 81040dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81040de:	4b99      	ldr	r3, [pc, #612]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040e2:	08db      	lsrs	r3, r3, #3
 81040e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81040e8:	693a      	ldr	r2, [r7, #16]
 81040ea:	fb02 f303 	mul.w	r3, r2, r3
 81040ee:	ee07 3a90 	vmov	s15, r3
 81040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81040fa:	697b      	ldr	r3, [r7, #20]
 81040fc:	2b00      	cmp	r3, #0
 81040fe:	f000 8111 	beq.w	8104324 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104102:	69bb      	ldr	r3, [r7, #24]
 8104104:	2b02      	cmp	r3, #2
 8104106:	f000 8083 	beq.w	8104210 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810410a:	69bb      	ldr	r3, [r7, #24]
 810410c:	2b02      	cmp	r3, #2
 810410e:	f200 80a1 	bhi.w	8104254 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104112:	69bb      	ldr	r3, [r7, #24]
 8104114:	2b00      	cmp	r3, #0
 8104116:	d003      	beq.n	8104120 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104118:	69bb      	ldr	r3, [r7, #24]
 810411a:	2b01      	cmp	r3, #1
 810411c:	d056      	beq.n	81041cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810411e:	e099      	b.n	8104254 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104120:	4b88      	ldr	r3, [pc, #544]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	f003 0320 	and.w	r3, r3, #32
 8104128:	2b00      	cmp	r3, #0
 810412a:	d02d      	beq.n	8104188 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810412c:	4b85      	ldr	r3, [pc, #532]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	08db      	lsrs	r3, r3, #3
 8104132:	f003 0303 	and.w	r3, r3, #3
 8104136:	4a84      	ldr	r2, [pc, #528]	; (8104348 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104138:	fa22 f303 	lsr.w	r3, r2, r3
 810413c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810413e:	68bb      	ldr	r3, [r7, #8]
 8104140:	ee07 3a90 	vmov	s15, r3
 8104144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104148:	697b      	ldr	r3, [r7, #20]
 810414a:	ee07 3a90 	vmov	s15, r3
 810414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104156:	4b7b      	ldr	r3, [pc, #492]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810415e:	ee07 3a90 	vmov	s15, r3
 8104162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104166:	ed97 6a03 	vldr	s12, [r7, #12]
 810416a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810434c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104182:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104186:	e087      	b.n	8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104188:	697b      	ldr	r3, [r7, #20]
 810418a:	ee07 3a90 	vmov	s15, r3
 810418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104192:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104350 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810419a:	4b6a      	ldr	r3, [pc, #424]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041a2:	ee07 3a90 	vmov	s15, r3
 81041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81041ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 810434c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81041ca:	e065      	b.n	8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81041cc:	697b      	ldr	r3, [r7, #20]
 81041ce:	ee07 3a90 	vmov	s15, r3
 81041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81041da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041de:	4b59      	ldr	r3, [pc, #356]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041e6:	ee07 3a90 	vmov	s15, r3
 81041ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81041f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810434c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81041f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104206:	ee67 7a27 	vmul.f32	s15, s14, s15
 810420a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810420e:	e043      	b.n	8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104210:	697b      	ldr	r3, [r7, #20]
 8104212:	ee07 3a90 	vmov	s15, r3
 8104216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810421a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104358 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104222:	4b48      	ldr	r3, [pc, #288]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810422a:	ee07 3a90 	vmov	s15, r3
 810422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104232:	ed97 6a03 	vldr	s12, [r7, #12]
 8104236:	eddf 5a45 	vldr	s11, [pc, #276]	; 810434c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810424e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104252:	e021      	b.n	8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104254:	697b      	ldr	r3, [r7, #20]
 8104256:	ee07 3a90 	vmov	s15, r3
 810425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810425e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104266:	4b37      	ldr	r3, [pc, #220]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810426e:	ee07 3a90 	vmov	s15, r3
 8104272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104276:	ed97 6a03 	vldr	s12, [r7, #12]
 810427a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810434c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104296:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104298:	4b2a      	ldr	r3, [pc, #168]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810429c:	0a5b      	lsrs	r3, r3, #9
 810429e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81042a2:	ee07 3a90 	vmov	s15, r3
 81042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81042ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81042b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81042b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81042ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81042be:	ee17 2a90 	vmov	r2, s15
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81042c6:	4b1f      	ldr	r3, [pc, #124]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81042ca:	0c1b      	lsrs	r3, r3, #16
 81042cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81042d0:	ee07 3a90 	vmov	s15, r3
 81042d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81042dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81042e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81042e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81042e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81042ec:	ee17 2a90 	vmov	r2, s15
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81042f4:	4b13      	ldr	r3, [pc, #76]	; (8104344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81042f8:	0e1b      	lsrs	r3, r3, #24
 81042fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81042fe:	ee07 3a90 	vmov	s15, r3
 8104302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810430a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810430e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810431a:	ee17 2a90 	vmov	r2, s15
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104322:	e008      	b.n	8104336 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	2200      	movs	r2, #0
 8104328:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	2200      	movs	r2, #0
 810432e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	2200      	movs	r2, #0
 8104334:	609a      	str	r2, [r3, #8]
}
 8104336:	bf00      	nop
 8104338:	3724      	adds	r7, #36	; 0x24
 810433a:	46bd      	mov	sp, r7
 810433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104340:	4770      	bx	lr
 8104342:	bf00      	nop
 8104344:	58024400 	.word	0x58024400
 8104348:	03d09000 	.word	0x03d09000
 810434c:	46000000 	.word	0x46000000
 8104350:	4c742400 	.word	0x4c742400
 8104354:	4a742400 	.word	0x4a742400
 8104358:	4bbebc20 	.word	0x4bbebc20

0810435c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810435c:	b580      	push	{r7, lr}
 810435e:	b084      	sub	sp, #16
 8104360:	af00      	add	r7, sp, #0
 8104362:	6078      	str	r0, [r7, #4]
 8104364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104366:	2300      	movs	r3, #0
 8104368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810436a:	4b54      	ldr	r3, [pc, #336]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 810436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810436e:	f003 0303 	and.w	r3, r3, #3
 8104372:	2b03      	cmp	r3, #3
 8104374:	d101      	bne.n	810437a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104376:	2301      	movs	r3, #1
 8104378:	e09b      	b.n	81044b2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810437a:	4b50      	ldr	r3, [pc, #320]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	4a4f      	ldr	r2, [pc, #316]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104380:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104386:	f7fd fae5 	bl	8101954 <HAL_GetTick>
 810438a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810438c:	e008      	b.n	81043a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810438e:	f7fd fae1 	bl	8101954 <HAL_GetTick>
 8104392:	4602      	mov	r2, r0
 8104394:	68bb      	ldr	r3, [r7, #8]
 8104396:	1ad3      	subs	r3, r2, r3
 8104398:	2b02      	cmp	r3, #2
 810439a:	d901      	bls.n	81043a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810439c:	2303      	movs	r3, #3
 810439e:	e088      	b.n	81044b2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81043a0:	4b46      	ldr	r3, [pc, #280]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81043a8:	2b00      	cmp	r3, #0
 81043aa:	d1f0      	bne.n	810438e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81043ac:	4b43      	ldr	r3, [pc, #268]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 81043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	031b      	lsls	r3, r3, #12
 81043ba:	4940      	ldr	r1, [pc, #256]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 81043bc:	4313      	orrs	r3, r2
 81043be:	628b      	str	r3, [r1, #40]	; 0x28
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	685b      	ldr	r3, [r3, #4]
 81043c4:	3b01      	subs	r3, #1
 81043c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	689b      	ldr	r3, [r3, #8]
 81043ce:	3b01      	subs	r3, #1
 81043d0:	025b      	lsls	r3, r3, #9
 81043d2:	b29b      	uxth	r3, r3
 81043d4:	431a      	orrs	r2, r3
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	68db      	ldr	r3, [r3, #12]
 81043da:	3b01      	subs	r3, #1
 81043dc:	041b      	lsls	r3, r3, #16
 81043de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81043e2:	431a      	orrs	r2, r3
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	691b      	ldr	r3, [r3, #16]
 81043e8:	3b01      	subs	r3, #1
 81043ea:	061b      	lsls	r3, r3, #24
 81043ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81043f0:	4932      	ldr	r1, [pc, #200]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 81043f2:	4313      	orrs	r3, r2
 81043f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81043f6:	4b31      	ldr	r3, [pc, #196]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 81043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	695b      	ldr	r3, [r3, #20]
 8104402:	492e      	ldr	r1, [pc, #184]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104404:	4313      	orrs	r3, r2
 8104406:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104408:	4b2c      	ldr	r3, [pc, #176]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 810440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810440c:	f023 0220 	bic.w	r2, r3, #32
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	699b      	ldr	r3, [r3, #24]
 8104414:	4929      	ldr	r1, [pc, #164]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104416:	4313      	orrs	r3, r2
 8104418:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810441a:	4b28      	ldr	r3, [pc, #160]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 810441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810441e:	4a27      	ldr	r2, [pc, #156]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104420:	f023 0310 	bic.w	r3, r3, #16
 8104424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104426:	4b25      	ldr	r3, [pc, #148]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810442a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810442e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104432:	687a      	ldr	r2, [r7, #4]
 8104434:	69d2      	ldr	r2, [r2, #28]
 8104436:	00d2      	lsls	r2, r2, #3
 8104438:	4920      	ldr	r1, [pc, #128]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 810443a:	4313      	orrs	r3, r2
 810443c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810443e:	4b1f      	ldr	r3, [pc, #124]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104442:	4a1e      	ldr	r2, [pc, #120]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104444:	f043 0310 	orr.w	r3, r3, #16
 8104448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810444a:	683b      	ldr	r3, [r7, #0]
 810444c:	2b00      	cmp	r3, #0
 810444e:	d106      	bne.n	810445e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104450:	4b1a      	ldr	r3, [pc, #104]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104454:	4a19      	ldr	r2, [pc, #100]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810445a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810445c:	e00f      	b.n	810447e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810445e:	683b      	ldr	r3, [r7, #0]
 8104460:	2b01      	cmp	r3, #1
 8104462:	d106      	bne.n	8104472 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104464:	4b15      	ldr	r3, [pc, #84]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104468:	4a14      	ldr	r2, [pc, #80]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 810446a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810446e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104470:	e005      	b.n	810447e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104472:	4b12      	ldr	r3, [pc, #72]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104476:	4a11      	ldr	r2, [pc, #68]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810447c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810447e:	4b0f      	ldr	r3, [pc, #60]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a0e      	ldr	r2, [pc, #56]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 8104484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810448a:	f7fd fa63 	bl	8101954 <HAL_GetTick>
 810448e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104490:	e008      	b.n	81044a4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104492:	f7fd fa5f 	bl	8101954 <HAL_GetTick>
 8104496:	4602      	mov	r2, r0
 8104498:	68bb      	ldr	r3, [r7, #8]
 810449a:	1ad3      	subs	r3, r2, r3
 810449c:	2b02      	cmp	r3, #2
 810449e:	d901      	bls.n	81044a4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81044a0:	2303      	movs	r3, #3
 81044a2:	e006      	b.n	81044b2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81044a4:	4b05      	ldr	r3, [pc, #20]	; (81044bc <RCCEx_PLL2_Config+0x160>)
 81044a6:	681b      	ldr	r3, [r3, #0]
 81044a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	d0f0      	beq.n	8104492 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 81044b2:	4618      	mov	r0, r3
 81044b4:	3710      	adds	r7, #16
 81044b6:	46bd      	mov	sp, r7
 81044b8:	bd80      	pop	{r7, pc}
 81044ba:	bf00      	nop
 81044bc:	58024400 	.word	0x58024400

081044c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81044c0:	b580      	push	{r7, lr}
 81044c2:	b084      	sub	sp, #16
 81044c4:	af00      	add	r7, sp, #0
 81044c6:	6078      	str	r0, [r7, #4]
 81044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81044ca:	2300      	movs	r3, #0
 81044cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81044ce:	4b54      	ldr	r3, [pc, #336]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81044d2:	f003 0303 	and.w	r3, r3, #3
 81044d6:	2b03      	cmp	r3, #3
 81044d8:	d101      	bne.n	81044de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81044da:	2301      	movs	r3, #1
 81044dc:	e09b      	b.n	8104616 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81044de:	4b50      	ldr	r3, [pc, #320]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	4a4f      	ldr	r2, [pc, #316]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81044e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81044ea:	f7fd fa33 	bl	8101954 <HAL_GetTick>
 81044ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81044f0:	e008      	b.n	8104504 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81044f2:	f7fd fa2f 	bl	8101954 <HAL_GetTick>
 81044f6:	4602      	mov	r2, r0
 81044f8:	68bb      	ldr	r3, [r7, #8]
 81044fa:	1ad3      	subs	r3, r2, r3
 81044fc:	2b02      	cmp	r3, #2
 81044fe:	d901      	bls.n	8104504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104500:	2303      	movs	r3, #3
 8104502:	e088      	b.n	8104616 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104504:	4b46      	ldr	r3, [pc, #280]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810450c:	2b00      	cmp	r3, #0
 810450e:	d1f0      	bne.n	81044f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104510:	4b43      	ldr	r3, [pc, #268]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104514:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	051b      	lsls	r3, r3, #20
 810451e:	4940      	ldr	r1, [pc, #256]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104520:	4313      	orrs	r3, r2
 8104522:	628b      	str	r3, [r1, #40]	; 0x28
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	685b      	ldr	r3, [r3, #4]
 8104528:	3b01      	subs	r3, #1
 810452a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	689b      	ldr	r3, [r3, #8]
 8104532:	3b01      	subs	r3, #1
 8104534:	025b      	lsls	r3, r3, #9
 8104536:	b29b      	uxth	r3, r3
 8104538:	431a      	orrs	r2, r3
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	68db      	ldr	r3, [r3, #12]
 810453e:	3b01      	subs	r3, #1
 8104540:	041b      	lsls	r3, r3, #16
 8104542:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104546:	431a      	orrs	r2, r3
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	691b      	ldr	r3, [r3, #16]
 810454c:	3b01      	subs	r3, #1
 810454e:	061b      	lsls	r3, r3, #24
 8104550:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104554:	4932      	ldr	r1, [pc, #200]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104556:	4313      	orrs	r3, r2
 8104558:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810455a:	4b31      	ldr	r3, [pc, #196]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 810455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810455e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	695b      	ldr	r3, [r3, #20]
 8104566:	492e      	ldr	r1, [pc, #184]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104568:	4313      	orrs	r3, r2
 810456a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810456c:	4b2c      	ldr	r3, [pc, #176]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 810456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104570:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	699b      	ldr	r3, [r3, #24]
 8104578:	4929      	ldr	r1, [pc, #164]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 810457a:	4313      	orrs	r3, r2
 810457c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810457e:	4b28      	ldr	r3, [pc, #160]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104582:	4a27      	ldr	r2, [pc, #156]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 8104584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810458a:	4b25      	ldr	r3, [pc, #148]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 810458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810458e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104592:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104596:	687a      	ldr	r2, [r7, #4]
 8104598:	69d2      	ldr	r2, [r2, #28]
 810459a:	00d2      	lsls	r2, r2, #3
 810459c:	4920      	ldr	r1, [pc, #128]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 810459e:	4313      	orrs	r3, r2
 81045a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81045a2:	4b1f      	ldr	r3, [pc, #124]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045a6:	4a1e      	ldr	r2, [pc, #120]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81045ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81045ae:	683b      	ldr	r3, [r7, #0]
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d106      	bne.n	81045c2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81045b4:	4b1a      	ldr	r3, [pc, #104]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045b8:	4a19      	ldr	r2, [pc, #100]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81045be:	62d3      	str	r3, [r2, #44]	; 0x2c
 81045c0:	e00f      	b.n	81045e2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81045c2:	683b      	ldr	r3, [r7, #0]
 81045c4:	2b01      	cmp	r3, #1
 81045c6:	d106      	bne.n	81045d6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81045c8:	4b15      	ldr	r3, [pc, #84]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045cc:	4a14      	ldr	r2, [pc, #80]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81045d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81045d4:	e005      	b.n	81045e2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81045d6:	4b12      	ldr	r3, [pc, #72]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045da:	4a11      	ldr	r2, [pc, #68]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81045e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81045e2:	4b0f      	ldr	r3, [pc, #60]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	4a0e      	ldr	r2, [pc, #56]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 81045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81045ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81045ee:	f7fd f9b1 	bl	8101954 <HAL_GetTick>
 81045f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81045f4:	e008      	b.n	8104608 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81045f6:	f7fd f9ad 	bl	8101954 <HAL_GetTick>
 81045fa:	4602      	mov	r2, r0
 81045fc:	68bb      	ldr	r3, [r7, #8]
 81045fe:	1ad3      	subs	r3, r2, r3
 8104600:	2b02      	cmp	r3, #2
 8104602:	d901      	bls.n	8104608 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104604:	2303      	movs	r3, #3
 8104606:	e006      	b.n	8104616 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104608:	4b05      	ldr	r3, [pc, #20]	; (8104620 <RCCEx_PLL3_Config+0x160>)
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104610:	2b00      	cmp	r3, #0
 8104612:	d0f0      	beq.n	81045f6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104614:	7bfb      	ldrb	r3, [r7, #15]
}
 8104616:	4618      	mov	r0, r3
 8104618:	3710      	adds	r7, #16
 810461a:	46bd      	mov	sp, r7
 810461c:	bd80      	pop	{r7, pc}
 810461e:	bf00      	nop
 8104620:	58024400 	.word	0x58024400

08104624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104624:	b580      	push	{r7, lr}
 8104626:	b082      	sub	sp, #8
 8104628:	af00      	add	r7, sp, #0
 810462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	2b00      	cmp	r3, #0
 8104630:	d101      	bne.n	8104636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104632:	2301      	movs	r3, #1
 8104634:	e042      	b.n	81046bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810463c:	2b00      	cmp	r3, #0
 810463e:	d106      	bne.n	810464e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	2200      	movs	r2, #0
 8104644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104648:	6878      	ldr	r0, [r7, #4]
 810464a:	f7fc ffb3 	bl	81015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	2224      	movs	r2, #36	; 0x24
 8104652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	681a      	ldr	r2, [r3, #0]
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	681b      	ldr	r3, [r3, #0]
 8104660:	f022 0201 	bic.w	r2, r2, #1
 8104664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104666:	6878      	ldr	r0, [r7, #4]
 8104668:	f000 fc80 	bl	8104f6c <UART_SetConfig>
 810466c:	4603      	mov	r3, r0
 810466e:	2b01      	cmp	r3, #1
 8104670:	d101      	bne.n	8104676 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104672:	2301      	movs	r3, #1
 8104674:	e022      	b.n	81046bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810467a:	2b00      	cmp	r3, #0
 810467c:	d002      	beq.n	8104684 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810467e:	6878      	ldr	r0, [r7, #4]
 8104680:	f001 f9d4 	bl	8105a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	685a      	ldr	r2, [r3, #4]
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	689a      	ldr	r2, [r3, #8]
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81046a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	681a      	ldr	r2, [r3, #0]
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	f042 0201 	orr.w	r2, r2, #1
 81046b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81046b4:	6878      	ldr	r0, [r7, #4]
 81046b6:	f001 fa5b 	bl	8105b70 <UART_CheckIdleState>
 81046ba:	4603      	mov	r3, r0
}
 81046bc:	4618      	mov	r0, r3
 81046be:	3708      	adds	r7, #8
 81046c0:	46bd      	mov	sp, r7
 81046c2:	bd80      	pop	{r7, pc}

081046c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81046c4:	b580      	push	{r7, lr}
 81046c6:	b08a      	sub	sp, #40	; 0x28
 81046c8:	af02      	add	r7, sp, #8
 81046ca:	60f8      	str	r0, [r7, #12]
 81046cc:	60b9      	str	r1, [r7, #8]
 81046ce:	603b      	str	r3, [r7, #0]
 81046d0:	4613      	mov	r3, r2
 81046d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81046d4:	68fb      	ldr	r3, [r7, #12]
 81046d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046da:	2b20      	cmp	r3, #32
 81046dc:	f040 8083 	bne.w	81047e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81046e0:	68bb      	ldr	r3, [r7, #8]
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d002      	beq.n	81046ec <HAL_UART_Transmit+0x28>
 81046e6:	88fb      	ldrh	r3, [r7, #6]
 81046e8:	2b00      	cmp	r3, #0
 81046ea:	d101      	bne.n	81046f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81046ec:	2301      	movs	r3, #1
 81046ee:	e07b      	b.n	81047e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81046f0:	68fb      	ldr	r3, [r7, #12]
 81046f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81046f6:	2b01      	cmp	r3, #1
 81046f8:	d101      	bne.n	81046fe <HAL_UART_Transmit+0x3a>
 81046fa:	2302      	movs	r3, #2
 81046fc:	e074      	b.n	81047e8 <HAL_UART_Transmit+0x124>
 81046fe:	68fb      	ldr	r3, [r7, #12]
 8104700:	2201      	movs	r2, #1
 8104702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104706:	68fb      	ldr	r3, [r7, #12]
 8104708:	2200      	movs	r2, #0
 810470a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810470e:	68fb      	ldr	r3, [r7, #12]
 8104710:	2221      	movs	r2, #33	; 0x21
 8104712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104716:	f7fd f91d 	bl	8101954 <HAL_GetTick>
 810471a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810471c:	68fb      	ldr	r3, [r7, #12]
 810471e:	88fa      	ldrh	r2, [r7, #6]
 8104720:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104724:	68fb      	ldr	r3, [r7, #12]
 8104726:	88fa      	ldrh	r2, [r7, #6]
 8104728:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	689b      	ldr	r3, [r3, #8]
 8104730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104734:	d108      	bne.n	8104748 <HAL_UART_Transmit+0x84>
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	691b      	ldr	r3, [r3, #16]
 810473a:	2b00      	cmp	r3, #0
 810473c:	d104      	bne.n	8104748 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810473e:	2300      	movs	r3, #0
 8104740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104742:	68bb      	ldr	r3, [r7, #8]
 8104744:	61bb      	str	r3, [r7, #24]
 8104746:	e003      	b.n	8104750 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104748:	68bb      	ldr	r3, [r7, #8]
 810474a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810474c:	2300      	movs	r3, #0
 810474e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	2200      	movs	r2, #0
 8104754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8104758:	e02c      	b.n	81047b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810475a:	683b      	ldr	r3, [r7, #0]
 810475c:	9300      	str	r3, [sp, #0]
 810475e:	697b      	ldr	r3, [r7, #20]
 8104760:	2200      	movs	r2, #0
 8104762:	2180      	movs	r1, #128	; 0x80
 8104764:	68f8      	ldr	r0, [r7, #12]
 8104766:	f001 fa4e 	bl	8105c06 <UART_WaitOnFlagUntilTimeout>
 810476a:	4603      	mov	r3, r0
 810476c:	2b00      	cmp	r3, #0
 810476e:	d001      	beq.n	8104774 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104770:	2303      	movs	r3, #3
 8104772:	e039      	b.n	81047e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104774:	69fb      	ldr	r3, [r7, #28]
 8104776:	2b00      	cmp	r3, #0
 8104778:	d10b      	bne.n	8104792 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810477a:	69bb      	ldr	r3, [r7, #24]
 810477c:	881b      	ldrh	r3, [r3, #0]
 810477e:	461a      	mov	r2, r3
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	681b      	ldr	r3, [r3, #0]
 8104784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104788:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810478a:	69bb      	ldr	r3, [r7, #24]
 810478c:	3302      	adds	r3, #2
 810478e:	61bb      	str	r3, [r7, #24]
 8104790:	e007      	b.n	81047a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104792:	69fb      	ldr	r3, [r7, #28]
 8104794:	781a      	ldrb	r2, [r3, #0]
 8104796:	68fb      	ldr	r3, [r7, #12]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810479c:	69fb      	ldr	r3, [r7, #28]
 810479e:	3301      	adds	r3, #1
 81047a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81047a2:	68fb      	ldr	r3, [r7, #12]
 81047a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81047a8:	b29b      	uxth	r3, r3
 81047aa:	3b01      	subs	r3, #1
 81047ac:	b29a      	uxth	r2, r3
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81047b4:	68fb      	ldr	r3, [r7, #12]
 81047b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81047ba:	b29b      	uxth	r3, r3
 81047bc:	2b00      	cmp	r3, #0
 81047be:	d1cc      	bne.n	810475a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81047c0:	683b      	ldr	r3, [r7, #0]
 81047c2:	9300      	str	r3, [sp, #0]
 81047c4:	697b      	ldr	r3, [r7, #20]
 81047c6:	2200      	movs	r2, #0
 81047c8:	2140      	movs	r1, #64	; 0x40
 81047ca:	68f8      	ldr	r0, [r7, #12]
 81047cc:	f001 fa1b 	bl	8105c06 <UART_WaitOnFlagUntilTimeout>
 81047d0:	4603      	mov	r3, r0
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d001      	beq.n	81047da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81047d6:	2303      	movs	r3, #3
 81047d8:	e006      	b.n	81047e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81047da:	68fb      	ldr	r3, [r7, #12]
 81047dc:	2220      	movs	r2, #32
 81047de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 81047e2:	2300      	movs	r3, #0
 81047e4:	e000      	b.n	81047e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81047e6:	2302      	movs	r3, #2
  }
}
 81047e8:	4618      	mov	r0, r3
 81047ea:	3720      	adds	r7, #32
 81047ec:	46bd      	mov	sp, r7
 81047ee:	bd80      	pop	{r7, pc}

081047f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 81047f0:	b580      	push	{r7, lr}
 81047f2:	b0ba      	sub	sp, #232	; 0xe8
 81047f4:	af00      	add	r7, sp, #0
 81047f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	69db      	ldr	r3, [r3, #28]
 81047fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	689b      	ldr	r3, [r3, #8]
 8104812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8104816:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 810481a:	f640 030f 	movw	r3, #2063	; 0x80f
 810481e:	4013      	ands	r3, r2
 8104820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8104824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104828:	2b00      	cmp	r3, #0
 810482a:	d11b      	bne.n	8104864 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104830:	f003 0320 	and.w	r3, r3, #32
 8104834:	2b00      	cmp	r3, #0
 8104836:	d015      	beq.n	8104864 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8104838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810483c:	f003 0320 	and.w	r3, r3, #32
 8104840:	2b00      	cmp	r3, #0
 8104842:	d105      	bne.n	8104850 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8104844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810484c:	2b00      	cmp	r3, #0
 810484e:	d009      	beq.n	8104864 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104854:	2b00      	cmp	r3, #0
 8104856:	f000 835c 	beq.w	8104f12 <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810485e:	6878      	ldr	r0, [r7, #4]
 8104860:	4798      	blx	r3
      }
      return;
 8104862:	e356      	b.n	8104f12 <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8104864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104868:	2b00      	cmp	r3, #0
 810486a:	f000 811f 	beq.w	8104aac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810486e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104872:	4b8b      	ldr	r3, [pc, #556]	; (8104aa0 <HAL_UART_IRQHandler+0x2b0>)
 8104874:	4013      	ands	r3, r2
 8104876:	2b00      	cmp	r3, #0
 8104878:	d106      	bne.n	8104888 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810487a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 810487e:	4b89      	ldr	r3, [pc, #548]	; (8104aa4 <HAL_UART_IRQHandler+0x2b4>)
 8104880:	4013      	ands	r3, r2
 8104882:	2b00      	cmp	r3, #0
 8104884:	f000 8112 	beq.w	8104aac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8104888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810488c:	f003 0301 	and.w	r3, r3, #1
 8104890:	2b00      	cmp	r3, #0
 8104892:	d011      	beq.n	81048b8 <HAL_UART_IRQHandler+0xc8>
 8104894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810489c:	2b00      	cmp	r3, #0
 810489e:	d00b      	beq.n	81048b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	2201      	movs	r2, #1
 81048a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81048ae:	f043 0201 	orr.w	r2, r3, #1
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81048bc:	f003 0302 	and.w	r3, r3, #2
 81048c0:	2b00      	cmp	r3, #0
 81048c2:	d011      	beq.n	81048e8 <HAL_UART_IRQHandler+0xf8>
 81048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81048c8:	f003 0301 	and.w	r3, r3, #1
 81048cc:	2b00      	cmp	r3, #0
 81048ce:	d00b      	beq.n	81048e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	681b      	ldr	r3, [r3, #0]
 81048d4:	2202      	movs	r2, #2
 81048d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81048de:	f043 0204 	orr.w	r2, r3, #4
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81048ec:	f003 0304 	and.w	r3, r3, #4
 81048f0:	2b00      	cmp	r3, #0
 81048f2:	d011      	beq.n	8104918 <HAL_UART_IRQHandler+0x128>
 81048f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81048f8:	f003 0301 	and.w	r3, r3, #1
 81048fc:	2b00      	cmp	r3, #0
 81048fe:	d00b      	beq.n	8104918 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	2204      	movs	r2, #4
 8104906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810490e:	f043 0202 	orr.w	r2, r3, #2
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8104918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810491c:	f003 0308 	and.w	r3, r3, #8
 8104920:	2b00      	cmp	r3, #0
 8104922:	d017      	beq.n	8104954 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104928:	f003 0320 	and.w	r3, r3, #32
 810492c:	2b00      	cmp	r3, #0
 810492e:	d105      	bne.n	810493c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8104930:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104934:	4b5a      	ldr	r3, [pc, #360]	; (8104aa0 <HAL_UART_IRQHandler+0x2b0>)
 8104936:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104938:	2b00      	cmp	r3, #0
 810493a:	d00b      	beq.n	8104954 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	681b      	ldr	r3, [r3, #0]
 8104940:	2208      	movs	r2, #8
 8104942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810494a:	f043 0208 	orr.w	r2, r3, #8
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8104954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810495c:	2b00      	cmp	r3, #0
 810495e:	d012      	beq.n	8104986 <HAL_UART_IRQHandler+0x196>
 8104960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8104968:	2b00      	cmp	r3, #0
 810496a:	d00c      	beq.n	8104986 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810497c:	f043 0220 	orr.w	r2, r3, #32
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810498c:	2b00      	cmp	r3, #0
 810498e:	f000 82c2 	beq.w	8104f16 <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8104992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104996:	f003 0320 	and.w	r3, r3, #32
 810499a:	2b00      	cmp	r3, #0
 810499c:	d013      	beq.n	81049c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810499e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81049a2:	f003 0320 	and.w	r3, r3, #32
 81049a6:	2b00      	cmp	r3, #0
 81049a8:	d105      	bne.n	81049b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81049aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81049ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d007      	beq.n	81049c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81049ba:	2b00      	cmp	r3, #0
 81049bc:	d003      	beq.n	81049c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81049c2:	6878      	ldr	r0, [r7, #4]
 81049c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81049cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	689b      	ldr	r3, [r3, #8]
 81049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81049da:	2b40      	cmp	r3, #64	; 0x40
 81049dc:	d005      	beq.n	81049ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81049de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 81049e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81049e6:	2b00      	cmp	r3, #0
 81049e8:	d04f      	beq.n	8104a8a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 81049ea:	6878      	ldr	r0, [r7, #4]
 81049ec:	f001 f9d3 	bl	8105d96 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	689b      	ldr	r3, [r3, #8]
 81049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81049fa:	2b40      	cmp	r3, #64	; 0x40
 81049fc:	d141      	bne.n	8104a82 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	681b      	ldr	r3, [r3, #0]
 8104a02:	3308      	adds	r3, #8
 8104a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8104a0c:	e853 3f00 	ldrex	r3, [r3]
 8104a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8104a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8104a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	3308      	adds	r3, #8
 8104a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8104a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8104a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8104a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8104a3a:	e841 2300 	strex	r3, r2, [r1]
 8104a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8104a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8104a46:	2b00      	cmp	r3, #0
 8104a48:	d1d9      	bne.n	81049fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8104a4a:	687b      	ldr	r3, [r7, #4]
 8104a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a4e:	2b00      	cmp	r3, #0
 8104a50:	d013      	beq.n	8104a7a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a56:	4a14      	ldr	r2, [pc, #80]	; (8104aa8 <HAL_UART_IRQHandler+0x2b8>)
 8104a58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a5e:	4618      	mov	r0, r3
 8104a60:	f7fd fbc6 	bl	81021f0 <HAL_DMA_Abort_IT>
 8104a64:	4603      	mov	r3, r0
 8104a66:	2b00      	cmp	r3, #0
 8104a68:	d017      	beq.n	8104a9a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a70:	687a      	ldr	r2, [r7, #4]
 8104a72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8104a74:	4610      	mov	r0, r2
 8104a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104a78:	e00f      	b.n	8104a9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8104a7a:	6878      	ldr	r0, [r7, #4]
 8104a7c:	f000 fa60 	bl	8104f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104a80:	e00b      	b.n	8104a9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8104a82:	6878      	ldr	r0, [r7, #4]
 8104a84:	f000 fa5c 	bl	8104f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104a88:	e007      	b.n	8104a9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8104a8a:	6878      	ldr	r0, [r7, #4]
 8104a8c:	f000 fa58 	bl	8104f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	2200      	movs	r2, #0
 8104a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8104a98:	e23d      	b.n	8104f16 <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104a9a:	bf00      	nop
    return;
 8104a9c:	e23b      	b.n	8104f16 <HAL_UART_IRQHandler+0x726>
 8104a9e:	bf00      	nop
 8104aa0:	10000001 	.word	0x10000001
 8104aa4:	04000120 	.word	0x04000120
 8104aa8:	08105e63 	.word	0x08105e63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104ab0:	2b01      	cmp	r3, #1
 8104ab2:	f040 81d0 	bne.w	8104e56 <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8104ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104aba:	f003 0310 	and.w	r3, r3, #16
 8104abe:	2b00      	cmp	r3, #0
 8104ac0:	f000 81c9 	beq.w	8104e56 <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8104ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104ac8:	f003 0310 	and.w	r3, r3, #16
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	f000 81c2 	beq.w	8104e56 <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	2210      	movs	r2, #16
 8104ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	689b      	ldr	r3, [r3, #8]
 8104ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104ae4:	2b40      	cmp	r3, #64	; 0x40
 8104ae6:	f040 813b 	bne.w	8104d60 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	4a8b      	ldr	r2, [pc, #556]	; (8104d20 <HAL_UART_IRQHandler+0x530>)
 8104af2:	4293      	cmp	r3, r2
 8104af4:	d059      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	4a89      	ldr	r2, [pc, #548]	; (8104d24 <HAL_UART_IRQHandler+0x534>)
 8104afe:	4293      	cmp	r3, r2
 8104b00:	d053      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	4a87      	ldr	r2, [pc, #540]	; (8104d28 <HAL_UART_IRQHandler+0x538>)
 8104b0a:	4293      	cmp	r3, r2
 8104b0c:	d04d      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	4a85      	ldr	r2, [pc, #532]	; (8104d2c <HAL_UART_IRQHandler+0x53c>)
 8104b16:	4293      	cmp	r3, r2
 8104b18:	d047      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	4a83      	ldr	r2, [pc, #524]	; (8104d30 <HAL_UART_IRQHandler+0x540>)
 8104b22:	4293      	cmp	r3, r2
 8104b24:	d041      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	4a81      	ldr	r2, [pc, #516]	; (8104d34 <HAL_UART_IRQHandler+0x544>)
 8104b2e:	4293      	cmp	r3, r2
 8104b30:	d03b      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b36:	681b      	ldr	r3, [r3, #0]
 8104b38:	4a7f      	ldr	r2, [pc, #508]	; (8104d38 <HAL_UART_IRQHandler+0x548>)
 8104b3a:	4293      	cmp	r3, r2
 8104b3c:	d035      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	4a7d      	ldr	r2, [pc, #500]	; (8104d3c <HAL_UART_IRQHandler+0x54c>)
 8104b46:	4293      	cmp	r3, r2
 8104b48:	d02f      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	4a7b      	ldr	r2, [pc, #492]	; (8104d40 <HAL_UART_IRQHandler+0x550>)
 8104b52:	4293      	cmp	r3, r2
 8104b54:	d029      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	4a79      	ldr	r2, [pc, #484]	; (8104d44 <HAL_UART_IRQHandler+0x554>)
 8104b5e:	4293      	cmp	r3, r2
 8104b60:	d023      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	4a77      	ldr	r2, [pc, #476]	; (8104d48 <HAL_UART_IRQHandler+0x558>)
 8104b6a:	4293      	cmp	r3, r2
 8104b6c:	d01d      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	4a75      	ldr	r2, [pc, #468]	; (8104d4c <HAL_UART_IRQHandler+0x55c>)
 8104b76:	4293      	cmp	r3, r2
 8104b78:	d017      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	4a73      	ldr	r2, [pc, #460]	; (8104d50 <HAL_UART_IRQHandler+0x560>)
 8104b82:	4293      	cmp	r3, r2
 8104b84:	d011      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	4a71      	ldr	r2, [pc, #452]	; (8104d54 <HAL_UART_IRQHandler+0x564>)
 8104b8e:	4293      	cmp	r3, r2
 8104b90:	d00b      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	4a6f      	ldr	r2, [pc, #444]	; (8104d58 <HAL_UART_IRQHandler+0x568>)
 8104b9a:	4293      	cmp	r3, r2
 8104b9c:	d005      	beq.n	8104baa <HAL_UART_IRQHandler+0x3ba>
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	4a6d      	ldr	r2, [pc, #436]	; (8104d5c <HAL_UART_IRQHandler+0x56c>)
 8104ba6:	4293      	cmp	r3, r2
 8104ba8:	d105      	bne.n	8104bb6 <HAL_UART_IRQHandler+0x3c6>
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	685b      	ldr	r3, [r3, #4]
 8104bb2:	b29b      	uxth	r3, r3
 8104bb4:	e004      	b.n	8104bc0 <HAL_UART_IRQHandler+0x3d0>
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	685b      	ldr	r3, [r3, #4]
 8104bbe:	b29b      	uxth	r3, r3
 8104bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8104bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8104bc8:	2b00      	cmp	r3, #0
 8104bca:	f000 81a6 	beq.w	8104f1a <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8104bce:	687b      	ldr	r3, [r7, #4]
 8104bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8104bd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8104bd8:	429a      	cmp	r2, r3
 8104bda:	f080 819e 	bcs.w	8104f1a <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8104be4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104bec:	69db      	ldr	r3, [r3, #28]
 8104bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104bf2:	f000 8086 	beq.w	8104d02 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	681b      	ldr	r3, [r3, #0]
 8104bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8104c02:	e853 3f00 	ldrex	r3, [r3]
 8104c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8104c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8104c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	461a      	mov	r2, r3
 8104c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8104c20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104c24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104c28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8104c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8104c30:	e841 2300 	strex	r3, r2, [r1]
 8104c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8104c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8104c3c:	2b00      	cmp	r3, #0
 8104c3e:	d1da      	bne.n	8104bf6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	3308      	adds	r3, #8
 8104c46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8104c4a:	e853 3f00 	ldrex	r3, [r3]
 8104c4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8104c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104c52:	f023 0301 	bic.w	r3, r3, #1
 8104c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	681b      	ldr	r3, [r3, #0]
 8104c5e:	3308      	adds	r3, #8
 8104c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8104c64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8104c68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104c6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8104c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8104c70:	e841 2300 	strex	r3, r2, [r1]
 8104c74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8104c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8104c78:	2b00      	cmp	r3, #0
 8104c7a:	d1e1      	bne.n	8104c40 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	3308      	adds	r3, #8
 8104c82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8104c86:	e853 3f00 	ldrex	r3, [r3]
 8104c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8104c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	681b      	ldr	r3, [r3, #0]
 8104c9a:	3308      	adds	r3, #8
 8104c9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8104ca0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8104ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104ca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8104ca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8104ca8:	e841 2300 	strex	r3, r2, [r1]
 8104cac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8104cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8104cb0:	2b00      	cmp	r3, #0
 8104cb2:	d1e3      	bne.n	8104c7c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	2220      	movs	r2, #32
 8104cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	2200      	movs	r2, #0
 8104cc0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	681b      	ldr	r3, [r3, #0]
 8104cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104cca:	e853 3f00 	ldrex	r3, [r3]
 8104cce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8104cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8104cd2:	f023 0310 	bic.w	r3, r3, #16
 8104cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	461a      	mov	r2, r3
 8104ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8104ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8104ce6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8104cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8104cec:	e841 2300 	strex	r3, r2, [r1]
 8104cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8104cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8104cf4:	2b00      	cmp	r3, #0
 8104cf6:	d1e4      	bne.n	8104cc2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104cfc:	4618      	mov	r0, r3
 8104cfe:	f7fc ff59 	bl	8101bb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104d0e:	b29b      	uxth	r3, r3
 8104d10:	1ad3      	subs	r3, r2, r3
 8104d12:	b29b      	uxth	r3, r3
 8104d14:	4619      	mov	r1, r3
 8104d16:	6878      	ldr	r0, [r7, #4]
 8104d18:	f000 f91c 	bl	8104f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8104d1c:	e0fd      	b.n	8104f1a <HAL_UART_IRQHandler+0x72a>
 8104d1e:	bf00      	nop
 8104d20:	40020010 	.word	0x40020010
 8104d24:	40020028 	.word	0x40020028
 8104d28:	40020040 	.word	0x40020040
 8104d2c:	40020058 	.word	0x40020058
 8104d30:	40020070 	.word	0x40020070
 8104d34:	40020088 	.word	0x40020088
 8104d38:	400200a0 	.word	0x400200a0
 8104d3c:	400200b8 	.word	0x400200b8
 8104d40:	40020410 	.word	0x40020410
 8104d44:	40020428 	.word	0x40020428
 8104d48:	40020440 	.word	0x40020440
 8104d4c:	40020458 	.word	0x40020458
 8104d50:	40020470 	.word	0x40020470
 8104d54:	40020488 	.word	0x40020488
 8104d58:	400204a0 	.word	0x400204a0
 8104d5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104d6c:	b29b      	uxth	r3, r3
 8104d6e:	1ad3      	subs	r3, r2, r3
 8104d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104d7a:	b29b      	uxth	r3, r3
 8104d7c:	2b00      	cmp	r3, #0
 8104d7e:	f000 80ce 	beq.w	8104f1e <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 8104d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8104d86:	2b00      	cmp	r3, #0
 8104d88:	f000 80c9 	beq.w	8104f1e <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d94:	e853 3f00 	ldrex	r3, [r3]
 8104d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8104d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8104da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	461a      	mov	r2, r3
 8104daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8104dae:	647b      	str	r3, [r7, #68]	; 0x44
 8104db0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8104db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8104db6:	e841 2300 	strex	r3, r2, [r1]
 8104dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8104dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d1e4      	bne.n	8104d8c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	3308      	adds	r3, #8
 8104dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104dcc:	e853 3f00 	ldrex	r3, [r3]
 8104dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8104dd2:	6a3b      	ldr	r3, [r7, #32]
 8104dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104dd8:	f023 0301 	bic.w	r3, r3, #1
 8104ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	3308      	adds	r3, #8
 8104de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8104dea:	633a      	str	r2, [r7, #48]	; 0x30
 8104dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8104df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104df2:	e841 2300 	strex	r3, r2, [r1]
 8104df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8104df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104dfa:	2b00      	cmp	r3, #0
 8104dfc:	d1e1      	bne.n	8104dc2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	2220      	movs	r2, #32
 8104e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	2200      	movs	r2, #0
 8104e0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	2200      	movs	r2, #0
 8104e10:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	681b      	ldr	r3, [r3, #0]
 8104e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104e18:	693b      	ldr	r3, [r7, #16]
 8104e1a:	e853 3f00 	ldrex	r3, [r3]
 8104e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8104e20:	68fb      	ldr	r3, [r7, #12]
 8104e22:	f023 0310 	bic.w	r3, r3, #16
 8104e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	461a      	mov	r2, r3
 8104e30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8104e34:	61fb      	str	r3, [r7, #28]
 8104e36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104e38:	69b9      	ldr	r1, [r7, #24]
 8104e3a:	69fa      	ldr	r2, [r7, #28]
 8104e3c:	e841 2300 	strex	r3, r2, [r1]
 8104e40:	617b      	str	r3, [r7, #20]
   return(result);
 8104e42:	697b      	ldr	r3, [r7, #20]
 8104e44:	2b00      	cmp	r3, #0
 8104e46:	d1e4      	bne.n	8104e12 <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8104e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8104e4c:	4619      	mov	r1, r3
 8104e4e:	6878      	ldr	r0, [r7, #4]
 8104e50:	f000 f880 	bl	8104f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8104e54:	e063      	b.n	8104f1e <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8104e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104e5e:	2b00      	cmp	r3, #0
 8104e60:	d00e      	beq.n	8104e80 <HAL_UART_IRQHandler+0x690>
 8104e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	d008      	beq.n	8104e80 <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8104e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8104e78:	6878      	ldr	r0, [r7, #4]
 8104e7a:	f001 f833 	bl	8105ee4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104e7e:	e051      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8104e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104e88:	2b00      	cmp	r3, #0
 8104e8a:	d014      	beq.n	8104eb6 <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8104e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104e94:	2b00      	cmp	r3, #0
 8104e96:	d105      	bne.n	8104ea4 <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8104e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104ea0:	2b00      	cmp	r3, #0
 8104ea2:	d008      	beq.n	8104eb6 <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d03a      	beq.n	8104f22 <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104eb0:	6878      	ldr	r0, [r7, #4]
 8104eb2:	4798      	blx	r3
    }
    return;
 8104eb4:	e035      	b.n	8104f22 <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8104eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104ebe:	2b00      	cmp	r3, #0
 8104ec0:	d009      	beq.n	8104ed6 <HAL_UART_IRQHandler+0x6e6>
 8104ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104eca:	2b00      	cmp	r3, #0
 8104ecc:	d003      	beq.n	8104ed6 <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8104ece:	6878      	ldr	r0, [r7, #4]
 8104ed0:	f000 ffdd 	bl	8105e8e <UART_EndTransmit_IT>
    return;
 8104ed4:	e026      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8104ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104ede:	2b00      	cmp	r3, #0
 8104ee0:	d009      	beq.n	8104ef6 <HAL_UART_IRQHandler+0x706>
 8104ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104ee6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104eea:	2b00      	cmp	r3, #0
 8104eec:	d003      	beq.n	8104ef6 <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8104eee:	6878      	ldr	r0, [r7, #4]
 8104ef0:	f001 f80c 	bl	8105f0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104ef4:	e016      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8104ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104efe:	2b00      	cmp	r3, #0
 8104f00:	d010      	beq.n	8104f24 <HAL_UART_IRQHandler+0x734>
 8104f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104f06:	2b00      	cmp	r3, #0
 8104f08:	da0c      	bge.n	8104f24 <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8104f0a:	6878      	ldr	r0, [r7, #4]
 8104f0c:	f000 fff4 	bl	8105ef8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8104f10:	e008      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
      return;
 8104f12:	bf00      	nop
 8104f14:	e006      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
    return;
 8104f16:	bf00      	nop
 8104f18:	e004      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
      return;
 8104f1a:	bf00      	nop
 8104f1c:	e002      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
      return;
 8104f1e:	bf00      	nop
 8104f20:	e000      	b.n	8104f24 <HAL_UART_IRQHandler+0x734>
    return;
 8104f22:	bf00      	nop
  }
}
 8104f24:	37e8      	adds	r7, #232	; 0xe8
 8104f26:	46bd      	mov	sp, r7
 8104f28:	bd80      	pop	{r7, pc}
 8104f2a:	bf00      	nop

08104f2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8104f2c:	b480      	push	{r7}
 8104f2e:	b083      	sub	sp, #12
 8104f30:	af00      	add	r7, sp, #0
 8104f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8104f34:	bf00      	nop
 8104f36:	370c      	adds	r7, #12
 8104f38:	46bd      	mov	sp, r7
 8104f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f3e:	4770      	bx	lr

08104f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8104f40:	b480      	push	{r7}
 8104f42:	b083      	sub	sp, #12
 8104f44:	af00      	add	r7, sp, #0
 8104f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8104f48:	bf00      	nop
 8104f4a:	370c      	adds	r7, #12
 8104f4c:	46bd      	mov	sp, r7
 8104f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f52:	4770      	bx	lr

08104f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8104f54:	b480      	push	{r7}
 8104f56:	b083      	sub	sp, #12
 8104f58:	af00      	add	r7, sp, #0
 8104f5a:	6078      	str	r0, [r7, #4]
 8104f5c:	460b      	mov	r3, r1
 8104f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8104f60:	bf00      	nop
 8104f62:	370c      	adds	r7, #12
 8104f64:	46bd      	mov	sp, r7
 8104f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f6a:	4770      	bx	lr

08104f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104f6c:	b5b0      	push	{r4, r5, r7, lr}
 8104f6e:	b08e      	sub	sp, #56	; 0x38
 8104f70:	af00      	add	r7, sp, #0
 8104f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104f74:	2300      	movs	r3, #0
 8104f76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	689a      	ldr	r2, [r3, #8]
 8104f7e:	687b      	ldr	r3, [r7, #4]
 8104f80:	691b      	ldr	r3, [r3, #16]
 8104f82:	431a      	orrs	r2, r3
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	695b      	ldr	r3, [r3, #20]
 8104f88:	431a      	orrs	r2, r3
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	69db      	ldr	r3, [r3, #28]
 8104f8e:	4313      	orrs	r3, r2
 8104f90:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104f92:	687b      	ldr	r3, [r7, #4]
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	681a      	ldr	r2, [r3, #0]
 8104f98:	4bc0      	ldr	r3, [pc, #768]	; (810529c <UART_SetConfig+0x330>)
 8104f9a:	4013      	ands	r3, r2
 8104f9c:	687a      	ldr	r2, [r7, #4]
 8104f9e:	6812      	ldr	r2, [r2, #0]
 8104fa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104fa2:	430b      	orrs	r3, r1
 8104fa4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	685b      	ldr	r3, [r3, #4]
 8104fac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	68da      	ldr	r2, [r3, #12]
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	430a      	orrs	r2, r1
 8104fba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	699b      	ldr	r3, [r3, #24]
 8104fc0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	4ab6      	ldr	r2, [pc, #728]	; (81052a0 <UART_SetConfig+0x334>)
 8104fc8:	4293      	cmp	r3, r2
 8104fca:	d004      	beq.n	8104fd6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	6a1b      	ldr	r3, [r3, #32]
 8104fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104fd2:	4313      	orrs	r3, r2
 8104fd4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	689b      	ldr	r3, [r3, #8]
 8104fdc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104fe0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104fe4:	687a      	ldr	r2, [r7, #4]
 8104fe6:	6812      	ldr	r2, [r2, #0]
 8104fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104fea:	430b      	orrs	r3, r1
 8104fec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ff4:	f023 010f 	bic.w	r1, r3, #15
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	430a      	orrs	r2, r1
 8105002:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	4aa6      	ldr	r2, [pc, #664]	; (81052a4 <UART_SetConfig+0x338>)
 810500a:	4293      	cmp	r3, r2
 810500c:	d176      	bne.n	81050fc <UART_SetConfig+0x190>
 810500e:	4ba6      	ldr	r3, [pc, #664]	; (81052a8 <UART_SetConfig+0x33c>)
 8105010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105016:	2b28      	cmp	r3, #40	; 0x28
 8105018:	d86c      	bhi.n	81050f4 <UART_SetConfig+0x188>
 810501a:	a201      	add	r2, pc, #4	; (adr r2, 8105020 <UART_SetConfig+0xb4>)
 810501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105020:	081050c5 	.word	0x081050c5
 8105024:	081050f5 	.word	0x081050f5
 8105028:	081050f5 	.word	0x081050f5
 810502c:	081050f5 	.word	0x081050f5
 8105030:	081050f5 	.word	0x081050f5
 8105034:	081050f5 	.word	0x081050f5
 8105038:	081050f5 	.word	0x081050f5
 810503c:	081050f5 	.word	0x081050f5
 8105040:	081050cd 	.word	0x081050cd
 8105044:	081050f5 	.word	0x081050f5
 8105048:	081050f5 	.word	0x081050f5
 810504c:	081050f5 	.word	0x081050f5
 8105050:	081050f5 	.word	0x081050f5
 8105054:	081050f5 	.word	0x081050f5
 8105058:	081050f5 	.word	0x081050f5
 810505c:	081050f5 	.word	0x081050f5
 8105060:	081050d5 	.word	0x081050d5
 8105064:	081050f5 	.word	0x081050f5
 8105068:	081050f5 	.word	0x081050f5
 810506c:	081050f5 	.word	0x081050f5
 8105070:	081050f5 	.word	0x081050f5
 8105074:	081050f5 	.word	0x081050f5
 8105078:	081050f5 	.word	0x081050f5
 810507c:	081050f5 	.word	0x081050f5
 8105080:	081050dd 	.word	0x081050dd
 8105084:	081050f5 	.word	0x081050f5
 8105088:	081050f5 	.word	0x081050f5
 810508c:	081050f5 	.word	0x081050f5
 8105090:	081050f5 	.word	0x081050f5
 8105094:	081050f5 	.word	0x081050f5
 8105098:	081050f5 	.word	0x081050f5
 810509c:	081050f5 	.word	0x081050f5
 81050a0:	081050e5 	.word	0x081050e5
 81050a4:	081050f5 	.word	0x081050f5
 81050a8:	081050f5 	.word	0x081050f5
 81050ac:	081050f5 	.word	0x081050f5
 81050b0:	081050f5 	.word	0x081050f5
 81050b4:	081050f5 	.word	0x081050f5
 81050b8:	081050f5 	.word	0x081050f5
 81050bc:	081050f5 	.word	0x081050f5
 81050c0:	081050ed 	.word	0x081050ed
 81050c4:	2301      	movs	r3, #1
 81050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ca:	e220      	b.n	810550e <UART_SetConfig+0x5a2>
 81050cc:	2304      	movs	r3, #4
 81050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050d2:	e21c      	b.n	810550e <UART_SetConfig+0x5a2>
 81050d4:	2308      	movs	r3, #8
 81050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050da:	e218      	b.n	810550e <UART_SetConfig+0x5a2>
 81050dc:	2310      	movs	r3, #16
 81050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050e2:	e214      	b.n	810550e <UART_SetConfig+0x5a2>
 81050e4:	2320      	movs	r3, #32
 81050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ea:	e210      	b.n	810550e <UART_SetConfig+0x5a2>
 81050ec:	2340      	movs	r3, #64	; 0x40
 81050ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050f2:	e20c      	b.n	810550e <UART_SetConfig+0x5a2>
 81050f4:	2380      	movs	r3, #128	; 0x80
 81050f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050fa:	e208      	b.n	810550e <UART_SetConfig+0x5a2>
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	4a6a      	ldr	r2, [pc, #424]	; (81052ac <UART_SetConfig+0x340>)
 8105102:	4293      	cmp	r3, r2
 8105104:	d130      	bne.n	8105168 <UART_SetConfig+0x1fc>
 8105106:	4b68      	ldr	r3, [pc, #416]	; (81052a8 <UART_SetConfig+0x33c>)
 8105108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810510a:	f003 0307 	and.w	r3, r3, #7
 810510e:	2b05      	cmp	r3, #5
 8105110:	d826      	bhi.n	8105160 <UART_SetConfig+0x1f4>
 8105112:	a201      	add	r2, pc, #4	; (adr r2, 8105118 <UART_SetConfig+0x1ac>)
 8105114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105118:	08105131 	.word	0x08105131
 810511c:	08105139 	.word	0x08105139
 8105120:	08105141 	.word	0x08105141
 8105124:	08105149 	.word	0x08105149
 8105128:	08105151 	.word	0x08105151
 810512c:	08105159 	.word	0x08105159
 8105130:	2300      	movs	r3, #0
 8105132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105136:	e1ea      	b.n	810550e <UART_SetConfig+0x5a2>
 8105138:	2304      	movs	r3, #4
 810513a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810513e:	e1e6      	b.n	810550e <UART_SetConfig+0x5a2>
 8105140:	2308      	movs	r3, #8
 8105142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105146:	e1e2      	b.n	810550e <UART_SetConfig+0x5a2>
 8105148:	2310      	movs	r3, #16
 810514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810514e:	e1de      	b.n	810550e <UART_SetConfig+0x5a2>
 8105150:	2320      	movs	r3, #32
 8105152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105156:	e1da      	b.n	810550e <UART_SetConfig+0x5a2>
 8105158:	2340      	movs	r3, #64	; 0x40
 810515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810515e:	e1d6      	b.n	810550e <UART_SetConfig+0x5a2>
 8105160:	2380      	movs	r3, #128	; 0x80
 8105162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105166:	e1d2      	b.n	810550e <UART_SetConfig+0x5a2>
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	4a50      	ldr	r2, [pc, #320]	; (81052b0 <UART_SetConfig+0x344>)
 810516e:	4293      	cmp	r3, r2
 8105170:	d130      	bne.n	81051d4 <UART_SetConfig+0x268>
 8105172:	4b4d      	ldr	r3, [pc, #308]	; (81052a8 <UART_SetConfig+0x33c>)
 8105174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105176:	f003 0307 	and.w	r3, r3, #7
 810517a:	2b05      	cmp	r3, #5
 810517c:	d826      	bhi.n	81051cc <UART_SetConfig+0x260>
 810517e:	a201      	add	r2, pc, #4	; (adr r2, 8105184 <UART_SetConfig+0x218>)
 8105180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105184:	0810519d 	.word	0x0810519d
 8105188:	081051a5 	.word	0x081051a5
 810518c:	081051ad 	.word	0x081051ad
 8105190:	081051b5 	.word	0x081051b5
 8105194:	081051bd 	.word	0x081051bd
 8105198:	081051c5 	.word	0x081051c5
 810519c:	2300      	movs	r3, #0
 810519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051a2:	e1b4      	b.n	810550e <UART_SetConfig+0x5a2>
 81051a4:	2304      	movs	r3, #4
 81051a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051aa:	e1b0      	b.n	810550e <UART_SetConfig+0x5a2>
 81051ac:	2308      	movs	r3, #8
 81051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051b2:	e1ac      	b.n	810550e <UART_SetConfig+0x5a2>
 81051b4:	2310      	movs	r3, #16
 81051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ba:	e1a8      	b.n	810550e <UART_SetConfig+0x5a2>
 81051bc:	2320      	movs	r3, #32
 81051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051c2:	e1a4      	b.n	810550e <UART_SetConfig+0x5a2>
 81051c4:	2340      	movs	r3, #64	; 0x40
 81051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ca:	e1a0      	b.n	810550e <UART_SetConfig+0x5a2>
 81051cc:	2380      	movs	r3, #128	; 0x80
 81051ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051d2:	e19c      	b.n	810550e <UART_SetConfig+0x5a2>
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	4a36      	ldr	r2, [pc, #216]	; (81052b4 <UART_SetConfig+0x348>)
 81051da:	4293      	cmp	r3, r2
 81051dc:	d130      	bne.n	8105240 <UART_SetConfig+0x2d4>
 81051de:	4b32      	ldr	r3, [pc, #200]	; (81052a8 <UART_SetConfig+0x33c>)
 81051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051e2:	f003 0307 	and.w	r3, r3, #7
 81051e6:	2b05      	cmp	r3, #5
 81051e8:	d826      	bhi.n	8105238 <UART_SetConfig+0x2cc>
 81051ea:	a201      	add	r2, pc, #4	; (adr r2, 81051f0 <UART_SetConfig+0x284>)
 81051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051f0:	08105209 	.word	0x08105209
 81051f4:	08105211 	.word	0x08105211
 81051f8:	08105219 	.word	0x08105219
 81051fc:	08105221 	.word	0x08105221
 8105200:	08105229 	.word	0x08105229
 8105204:	08105231 	.word	0x08105231
 8105208:	2300      	movs	r3, #0
 810520a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810520e:	e17e      	b.n	810550e <UART_SetConfig+0x5a2>
 8105210:	2304      	movs	r3, #4
 8105212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105216:	e17a      	b.n	810550e <UART_SetConfig+0x5a2>
 8105218:	2308      	movs	r3, #8
 810521a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810521e:	e176      	b.n	810550e <UART_SetConfig+0x5a2>
 8105220:	2310      	movs	r3, #16
 8105222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105226:	e172      	b.n	810550e <UART_SetConfig+0x5a2>
 8105228:	2320      	movs	r3, #32
 810522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810522e:	e16e      	b.n	810550e <UART_SetConfig+0x5a2>
 8105230:	2340      	movs	r3, #64	; 0x40
 8105232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105236:	e16a      	b.n	810550e <UART_SetConfig+0x5a2>
 8105238:	2380      	movs	r3, #128	; 0x80
 810523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810523e:	e166      	b.n	810550e <UART_SetConfig+0x5a2>
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	4a1c      	ldr	r2, [pc, #112]	; (81052b8 <UART_SetConfig+0x34c>)
 8105246:	4293      	cmp	r3, r2
 8105248:	d140      	bne.n	81052cc <UART_SetConfig+0x360>
 810524a:	4b17      	ldr	r3, [pc, #92]	; (81052a8 <UART_SetConfig+0x33c>)
 810524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810524e:	f003 0307 	and.w	r3, r3, #7
 8105252:	2b05      	cmp	r3, #5
 8105254:	d836      	bhi.n	81052c4 <UART_SetConfig+0x358>
 8105256:	a201      	add	r2, pc, #4	; (adr r2, 810525c <UART_SetConfig+0x2f0>)
 8105258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810525c:	08105275 	.word	0x08105275
 8105260:	0810527d 	.word	0x0810527d
 8105264:	08105285 	.word	0x08105285
 8105268:	0810528d 	.word	0x0810528d
 810526c:	08105295 	.word	0x08105295
 8105270:	081052bd 	.word	0x081052bd
 8105274:	2300      	movs	r3, #0
 8105276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810527a:	e148      	b.n	810550e <UART_SetConfig+0x5a2>
 810527c:	2304      	movs	r3, #4
 810527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105282:	e144      	b.n	810550e <UART_SetConfig+0x5a2>
 8105284:	2308      	movs	r3, #8
 8105286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810528a:	e140      	b.n	810550e <UART_SetConfig+0x5a2>
 810528c:	2310      	movs	r3, #16
 810528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105292:	e13c      	b.n	810550e <UART_SetConfig+0x5a2>
 8105294:	2320      	movs	r3, #32
 8105296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810529a:	e138      	b.n	810550e <UART_SetConfig+0x5a2>
 810529c:	cfff69f3 	.word	0xcfff69f3
 81052a0:	58000c00 	.word	0x58000c00
 81052a4:	40011000 	.word	0x40011000
 81052a8:	58024400 	.word	0x58024400
 81052ac:	40004400 	.word	0x40004400
 81052b0:	40004800 	.word	0x40004800
 81052b4:	40004c00 	.word	0x40004c00
 81052b8:	40005000 	.word	0x40005000
 81052bc:	2340      	movs	r3, #64	; 0x40
 81052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052c2:	e124      	b.n	810550e <UART_SetConfig+0x5a2>
 81052c4:	2380      	movs	r3, #128	; 0x80
 81052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052ca:	e120      	b.n	810550e <UART_SetConfig+0x5a2>
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	4acc      	ldr	r2, [pc, #816]	; (8105604 <UART_SetConfig+0x698>)
 81052d2:	4293      	cmp	r3, r2
 81052d4:	d176      	bne.n	81053c4 <UART_SetConfig+0x458>
 81052d6:	4bcc      	ldr	r3, [pc, #816]	; (8105608 <UART_SetConfig+0x69c>)
 81052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81052de:	2b28      	cmp	r3, #40	; 0x28
 81052e0:	d86c      	bhi.n	81053bc <UART_SetConfig+0x450>
 81052e2:	a201      	add	r2, pc, #4	; (adr r2, 81052e8 <UART_SetConfig+0x37c>)
 81052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052e8:	0810538d 	.word	0x0810538d
 81052ec:	081053bd 	.word	0x081053bd
 81052f0:	081053bd 	.word	0x081053bd
 81052f4:	081053bd 	.word	0x081053bd
 81052f8:	081053bd 	.word	0x081053bd
 81052fc:	081053bd 	.word	0x081053bd
 8105300:	081053bd 	.word	0x081053bd
 8105304:	081053bd 	.word	0x081053bd
 8105308:	08105395 	.word	0x08105395
 810530c:	081053bd 	.word	0x081053bd
 8105310:	081053bd 	.word	0x081053bd
 8105314:	081053bd 	.word	0x081053bd
 8105318:	081053bd 	.word	0x081053bd
 810531c:	081053bd 	.word	0x081053bd
 8105320:	081053bd 	.word	0x081053bd
 8105324:	081053bd 	.word	0x081053bd
 8105328:	0810539d 	.word	0x0810539d
 810532c:	081053bd 	.word	0x081053bd
 8105330:	081053bd 	.word	0x081053bd
 8105334:	081053bd 	.word	0x081053bd
 8105338:	081053bd 	.word	0x081053bd
 810533c:	081053bd 	.word	0x081053bd
 8105340:	081053bd 	.word	0x081053bd
 8105344:	081053bd 	.word	0x081053bd
 8105348:	081053a5 	.word	0x081053a5
 810534c:	081053bd 	.word	0x081053bd
 8105350:	081053bd 	.word	0x081053bd
 8105354:	081053bd 	.word	0x081053bd
 8105358:	081053bd 	.word	0x081053bd
 810535c:	081053bd 	.word	0x081053bd
 8105360:	081053bd 	.word	0x081053bd
 8105364:	081053bd 	.word	0x081053bd
 8105368:	081053ad 	.word	0x081053ad
 810536c:	081053bd 	.word	0x081053bd
 8105370:	081053bd 	.word	0x081053bd
 8105374:	081053bd 	.word	0x081053bd
 8105378:	081053bd 	.word	0x081053bd
 810537c:	081053bd 	.word	0x081053bd
 8105380:	081053bd 	.word	0x081053bd
 8105384:	081053bd 	.word	0x081053bd
 8105388:	081053b5 	.word	0x081053b5
 810538c:	2301      	movs	r3, #1
 810538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105392:	e0bc      	b.n	810550e <UART_SetConfig+0x5a2>
 8105394:	2304      	movs	r3, #4
 8105396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810539a:	e0b8      	b.n	810550e <UART_SetConfig+0x5a2>
 810539c:	2308      	movs	r3, #8
 810539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053a2:	e0b4      	b.n	810550e <UART_SetConfig+0x5a2>
 81053a4:	2310      	movs	r3, #16
 81053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053aa:	e0b0      	b.n	810550e <UART_SetConfig+0x5a2>
 81053ac:	2320      	movs	r3, #32
 81053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053b2:	e0ac      	b.n	810550e <UART_SetConfig+0x5a2>
 81053b4:	2340      	movs	r3, #64	; 0x40
 81053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053ba:	e0a8      	b.n	810550e <UART_SetConfig+0x5a2>
 81053bc:	2380      	movs	r3, #128	; 0x80
 81053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053c2:	e0a4      	b.n	810550e <UART_SetConfig+0x5a2>
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	4a90      	ldr	r2, [pc, #576]	; (810560c <UART_SetConfig+0x6a0>)
 81053ca:	4293      	cmp	r3, r2
 81053cc:	d130      	bne.n	8105430 <UART_SetConfig+0x4c4>
 81053ce:	4b8e      	ldr	r3, [pc, #568]	; (8105608 <UART_SetConfig+0x69c>)
 81053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81053d2:	f003 0307 	and.w	r3, r3, #7
 81053d6:	2b05      	cmp	r3, #5
 81053d8:	d826      	bhi.n	8105428 <UART_SetConfig+0x4bc>
 81053da:	a201      	add	r2, pc, #4	; (adr r2, 81053e0 <UART_SetConfig+0x474>)
 81053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053e0:	081053f9 	.word	0x081053f9
 81053e4:	08105401 	.word	0x08105401
 81053e8:	08105409 	.word	0x08105409
 81053ec:	08105411 	.word	0x08105411
 81053f0:	08105419 	.word	0x08105419
 81053f4:	08105421 	.word	0x08105421
 81053f8:	2300      	movs	r3, #0
 81053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81053fe:	e086      	b.n	810550e <UART_SetConfig+0x5a2>
 8105400:	2304      	movs	r3, #4
 8105402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105406:	e082      	b.n	810550e <UART_SetConfig+0x5a2>
 8105408:	2308      	movs	r3, #8
 810540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810540e:	e07e      	b.n	810550e <UART_SetConfig+0x5a2>
 8105410:	2310      	movs	r3, #16
 8105412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105416:	e07a      	b.n	810550e <UART_SetConfig+0x5a2>
 8105418:	2320      	movs	r3, #32
 810541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810541e:	e076      	b.n	810550e <UART_SetConfig+0x5a2>
 8105420:	2340      	movs	r3, #64	; 0x40
 8105422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105426:	e072      	b.n	810550e <UART_SetConfig+0x5a2>
 8105428:	2380      	movs	r3, #128	; 0x80
 810542a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810542e:	e06e      	b.n	810550e <UART_SetConfig+0x5a2>
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	4a76      	ldr	r2, [pc, #472]	; (8105610 <UART_SetConfig+0x6a4>)
 8105436:	4293      	cmp	r3, r2
 8105438:	d130      	bne.n	810549c <UART_SetConfig+0x530>
 810543a:	4b73      	ldr	r3, [pc, #460]	; (8105608 <UART_SetConfig+0x69c>)
 810543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810543e:	f003 0307 	and.w	r3, r3, #7
 8105442:	2b05      	cmp	r3, #5
 8105444:	d826      	bhi.n	8105494 <UART_SetConfig+0x528>
 8105446:	a201      	add	r2, pc, #4	; (adr r2, 810544c <UART_SetConfig+0x4e0>)
 8105448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810544c:	08105465 	.word	0x08105465
 8105450:	0810546d 	.word	0x0810546d
 8105454:	08105475 	.word	0x08105475
 8105458:	0810547d 	.word	0x0810547d
 810545c:	08105485 	.word	0x08105485
 8105460:	0810548d 	.word	0x0810548d
 8105464:	2300      	movs	r3, #0
 8105466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810546a:	e050      	b.n	810550e <UART_SetConfig+0x5a2>
 810546c:	2304      	movs	r3, #4
 810546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105472:	e04c      	b.n	810550e <UART_SetConfig+0x5a2>
 8105474:	2308      	movs	r3, #8
 8105476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810547a:	e048      	b.n	810550e <UART_SetConfig+0x5a2>
 810547c:	2310      	movs	r3, #16
 810547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105482:	e044      	b.n	810550e <UART_SetConfig+0x5a2>
 8105484:	2320      	movs	r3, #32
 8105486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810548a:	e040      	b.n	810550e <UART_SetConfig+0x5a2>
 810548c:	2340      	movs	r3, #64	; 0x40
 810548e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105492:	e03c      	b.n	810550e <UART_SetConfig+0x5a2>
 8105494:	2380      	movs	r3, #128	; 0x80
 8105496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810549a:	e038      	b.n	810550e <UART_SetConfig+0x5a2>
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	4a5c      	ldr	r2, [pc, #368]	; (8105614 <UART_SetConfig+0x6a8>)
 81054a2:	4293      	cmp	r3, r2
 81054a4:	d130      	bne.n	8105508 <UART_SetConfig+0x59c>
 81054a6:	4b58      	ldr	r3, [pc, #352]	; (8105608 <UART_SetConfig+0x69c>)
 81054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81054aa:	f003 0307 	and.w	r3, r3, #7
 81054ae:	2b05      	cmp	r3, #5
 81054b0:	d826      	bhi.n	8105500 <UART_SetConfig+0x594>
 81054b2:	a201      	add	r2, pc, #4	; (adr r2, 81054b8 <UART_SetConfig+0x54c>)
 81054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054b8:	081054d1 	.word	0x081054d1
 81054bc:	081054d9 	.word	0x081054d9
 81054c0:	081054e1 	.word	0x081054e1
 81054c4:	081054e9 	.word	0x081054e9
 81054c8:	081054f1 	.word	0x081054f1
 81054cc:	081054f9 	.word	0x081054f9
 81054d0:	2302      	movs	r3, #2
 81054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054d6:	e01a      	b.n	810550e <UART_SetConfig+0x5a2>
 81054d8:	2304      	movs	r3, #4
 81054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054de:	e016      	b.n	810550e <UART_SetConfig+0x5a2>
 81054e0:	2308      	movs	r3, #8
 81054e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054e6:	e012      	b.n	810550e <UART_SetConfig+0x5a2>
 81054e8:	2310      	movs	r3, #16
 81054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054ee:	e00e      	b.n	810550e <UART_SetConfig+0x5a2>
 81054f0:	2320      	movs	r3, #32
 81054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054f6:	e00a      	b.n	810550e <UART_SetConfig+0x5a2>
 81054f8:	2340      	movs	r3, #64	; 0x40
 81054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054fe:	e006      	b.n	810550e <UART_SetConfig+0x5a2>
 8105500:	2380      	movs	r3, #128	; 0x80
 8105502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105506:	e002      	b.n	810550e <UART_SetConfig+0x5a2>
 8105508:	2380      	movs	r3, #128	; 0x80
 810550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	4a40      	ldr	r2, [pc, #256]	; (8105614 <UART_SetConfig+0x6a8>)
 8105514:	4293      	cmp	r3, r2
 8105516:	f040 80ef 	bne.w	81056f8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810551a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810551e:	2b20      	cmp	r3, #32
 8105520:	dc46      	bgt.n	81055b0 <UART_SetConfig+0x644>
 8105522:	2b02      	cmp	r3, #2
 8105524:	f2c0 8081 	blt.w	810562a <UART_SetConfig+0x6be>
 8105528:	3b02      	subs	r3, #2
 810552a:	2b1e      	cmp	r3, #30
 810552c:	d87d      	bhi.n	810562a <UART_SetConfig+0x6be>
 810552e:	a201      	add	r2, pc, #4	; (adr r2, 8105534 <UART_SetConfig+0x5c8>)
 8105530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105534:	081055b7 	.word	0x081055b7
 8105538:	0810562b 	.word	0x0810562b
 810553c:	081055bf 	.word	0x081055bf
 8105540:	0810562b 	.word	0x0810562b
 8105544:	0810562b 	.word	0x0810562b
 8105548:	0810562b 	.word	0x0810562b
 810554c:	081055cf 	.word	0x081055cf
 8105550:	0810562b 	.word	0x0810562b
 8105554:	0810562b 	.word	0x0810562b
 8105558:	0810562b 	.word	0x0810562b
 810555c:	0810562b 	.word	0x0810562b
 8105560:	0810562b 	.word	0x0810562b
 8105564:	0810562b 	.word	0x0810562b
 8105568:	0810562b 	.word	0x0810562b
 810556c:	081055df 	.word	0x081055df
 8105570:	0810562b 	.word	0x0810562b
 8105574:	0810562b 	.word	0x0810562b
 8105578:	0810562b 	.word	0x0810562b
 810557c:	0810562b 	.word	0x0810562b
 8105580:	0810562b 	.word	0x0810562b
 8105584:	0810562b 	.word	0x0810562b
 8105588:	0810562b 	.word	0x0810562b
 810558c:	0810562b 	.word	0x0810562b
 8105590:	0810562b 	.word	0x0810562b
 8105594:	0810562b 	.word	0x0810562b
 8105598:	0810562b 	.word	0x0810562b
 810559c:	0810562b 	.word	0x0810562b
 81055a0:	0810562b 	.word	0x0810562b
 81055a4:	0810562b 	.word	0x0810562b
 81055a8:	0810562b 	.word	0x0810562b
 81055ac:	0810561d 	.word	0x0810561d
 81055b0:	2b40      	cmp	r3, #64	; 0x40
 81055b2:	d036      	beq.n	8105622 <UART_SetConfig+0x6b6>
 81055b4:	e039      	b.n	810562a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81055b6:	f7fe fc13 	bl	8103de0 <HAL_RCCEx_GetD3PCLK1Freq>
 81055ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81055bc:	e03b      	b.n	8105636 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81055be:	f107 0314 	add.w	r3, r7, #20
 81055c2:	4618      	mov	r0, r3
 81055c4:	f7fe fc22 	bl	8103e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81055c8:	69bb      	ldr	r3, [r7, #24]
 81055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055cc:	e033      	b.n	8105636 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81055ce:	f107 0308 	add.w	r3, r7, #8
 81055d2:	4618      	mov	r0, r3
 81055d4:	f7fe fd6e 	bl	81040b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81055d8:	68fb      	ldr	r3, [r7, #12]
 81055da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055dc:	e02b      	b.n	8105636 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055de:	4b0a      	ldr	r3, [pc, #40]	; (8105608 <UART_SetConfig+0x69c>)
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	f003 0320 	and.w	r3, r3, #32
 81055e6:	2b00      	cmp	r3, #0
 81055e8:	d009      	beq.n	81055fe <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81055ea:	4b07      	ldr	r3, [pc, #28]	; (8105608 <UART_SetConfig+0x69c>)
 81055ec:	681b      	ldr	r3, [r3, #0]
 81055ee:	08db      	lsrs	r3, r3, #3
 81055f0:	f003 0303 	and.w	r3, r3, #3
 81055f4:	4a08      	ldr	r2, [pc, #32]	; (8105618 <UART_SetConfig+0x6ac>)
 81055f6:	fa22 f303 	lsr.w	r3, r2, r3
 81055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81055fc:	e01b      	b.n	8105636 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 81055fe:	4b06      	ldr	r3, [pc, #24]	; (8105618 <UART_SetConfig+0x6ac>)
 8105600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105602:	e018      	b.n	8105636 <UART_SetConfig+0x6ca>
 8105604:	40011400 	.word	0x40011400
 8105608:	58024400 	.word	0x58024400
 810560c:	40007800 	.word	0x40007800
 8105610:	40007c00 	.word	0x40007c00
 8105614:	58000c00 	.word	0x58000c00
 8105618:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810561c:	4bc4      	ldr	r3, [pc, #784]	; (8105930 <UART_SetConfig+0x9c4>)
 810561e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105620:	e009      	b.n	8105636 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105626:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105628:	e005      	b.n	8105636 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810562a:	2300      	movs	r3, #0
 810562c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810562e:	2301      	movs	r3, #1
 8105630:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105638:	2b00      	cmp	r3, #0
 810563a:	f000 81da 	beq.w	81059f2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105642:	4abc      	ldr	r2, [pc, #752]	; (8105934 <UART_SetConfig+0x9c8>)
 8105644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105648:	461a      	mov	r2, r3
 810564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810564c:	fbb3 f3f2 	udiv	r3, r3, r2
 8105650:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	685a      	ldr	r2, [r3, #4]
 8105656:	4613      	mov	r3, r2
 8105658:	005b      	lsls	r3, r3, #1
 810565a:	4413      	add	r3, r2
 810565c:	6a3a      	ldr	r2, [r7, #32]
 810565e:	429a      	cmp	r2, r3
 8105660:	d305      	bcc.n	810566e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	685b      	ldr	r3, [r3, #4]
 8105666:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105668:	6a3a      	ldr	r2, [r7, #32]
 810566a:	429a      	cmp	r2, r3
 810566c:	d903      	bls.n	8105676 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810566e:	2301      	movs	r3, #1
 8105670:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105674:	e1bd      	b.n	81059f2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105678:	4618      	mov	r0, r3
 810567a:	f04f 0100 	mov.w	r1, #0
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105682:	4aac      	ldr	r2, [pc, #688]	; (8105934 <UART_SetConfig+0x9c8>)
 8105684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105688:	b29a      	uxth	r2, r3
 810568a:	f04f 0300 	mov.w	r3, #0
 810568e:	f7fa fe8f 	bl	81003b0 <__aeabi_uldivmod>
 8105692:	4602      	mov	r2, r0
 8105694:	460b      	mov	r3, r1
 8105696:	4610      	mov	r0, r2
 8105698:	4619      	mov	r1, r3
 810569a:	f04f 0200 	mov.w	r2, #0
 810569e:	f04f 0300 	mov.w	r3, #0
 81056a2:	020b      	lsls	r3, r1, #8
 81056a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81056a8:	0202      	lsls	r2, r0, #8
 81056aa:	6879      	ldr	r1, [r7, #4]
 81056ac:	6849      	ldr	r1, [r1, #4]
 81056ae:	0849      	lsrs	r1, r1, #1
 81056b0:	4608      	mov	r0, r1
 81056b2:	f04f 0100 	mov.w	r1, #0
 81056b6:	1814      	adds	r4, r2, r0
 81056b8:	eb43 0501 	adc.w	r5, r3, r1
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	685b      	ldr	r3, [r3, #4]
 81056c0:	461a      	mov	r2, r3
 81056c2:	f04f 0300 	mov.w	r3, #0
 81056c6:	4620      	mov	r0, r4
 81056c8:	4629      	mov	r1, r5
 81056ca:	f7fa fe71 	bl	81003b0 <__aeabi_uldivmod>
 81056ce:	4602      	mov	r2, r0
 81056d0:	460b      	mov	r3, r1
 81056d2:	4613      	mov	r3, r2
 81056d4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81056dc:	d308      	bcc.n	81056f0 <UART_SetConfig+0x784>
 81056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81056e4:	d204      	bcs.n	81056f0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81056ec:	60da      	str	r2, [r3, #12]
 81056ee:	e180      	b.n	81059f2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 81056f0:	2301      	movs	r3, #1
 81056f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81056f6:	e17c      	b.n	81059f2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	69db      	ldr	r3, [r3, #28]
 81056fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105700:	f040 80be 	bne.w	8105880 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8105704:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105708:	2b20      	cmp	r3, #32
 810570a:	dc49      	bgt.n	81057a0 <UART_SetConfig+0x834>
 810570c:	2b00      	cmp	r3, #0
 810570e:	db7c      	blt.n	810580a <UART_SetConfig+0x89e>
 8105710:	2b20      	cmp	r3, #32
 8105712:	d87a      	bhi.n	810580a <UART_SetConfig+0x89e>
 8105714:	a201      	add	r2, pc, #4	; (adr r2, 810571c <UART_SetConfig+0x7b0>)
 8105716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810571a:	bf00      	nop
 810571c:	081057a7 	.word	0x081057a7
 8105720:	081057af 	.word	0x081057af
 8105724:	0810580b 	.word	0x0810580b
 8105728:	0810580b 	.word	0x0810580b
 810572c:	081057b7 	.word	0x081057b7
 8105730:	0810580b 	.word	0x0810580b
 8105734:	0810580b 	.word	0x0810580b
 8105738:	0810580b 	.word	0x0810580b
 810573c:	081057c7 	.word	0x081057c7
 8105740:	0810580b 	.word	0x0810580b
 8105744:	0810580b 	.word	0x0810580b
 8105748:	0810580b 	.word	0x0810580b
 810574c:	0810580b 	.word	0x0810580b
 8105750:	0810580b 	.word	0x0810580b
 8105754:	0810580b 	.word	0x0810580b
 8105758:	0810580b 	.word	0x0810580b
 810575c:	081057d7 	.word	0x081057d7
 8105760:	0810580b 	.word	0x0810580b
 8105764:	0810580b 	.word	0x0810580b
 8105768:	0810580b 	.word	0x0810580b
 810576c:	0810580b 	.word	0x0810580b
 8105770:	0810580b 	.word	0x0810580b
 8105774:	0810580b 	.word	0x0810580b
 8105778:	0810580b 	.word	0x0810580b
 810577c:	0810580b 	.word	0x0810580b
 8105780:	0810580b 	.word	0x0810580b
 8105784:	0810580b 	.word	0x0810580b
 8105788:	0810580b 	.word	0x0810580b
 810578c:	0810580b 	.word	0x0810580b
 8105790:	0810580b 	.word	0x0810580b
 8105794:	0810580b 	.word	0x0810580b
 8105798:	0810580b 	.word	0x0810580b
 810579c:	081057fd 	.word	0x081057fd
 81057a0:	2b40      	cmp	r3, #64	; 0x40
 81057a2:	d02e      	beq.n	8105802 <UART_SetConfig+0x896>
 81057a4:	e031      	b.n	810580a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81057a6:	f7fd fbaf 	bl	8102f08 <HAL_RCC_GetPCLK1Freq>
 81057aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81057ac:	e033      	b.n	8105816 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81057ae:	f7fd fbc1 	bl	8102f34 <HAL_RCC_GetPCLK2Freq>
 81057b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81057b4:	e02f      	b.n	8105816 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81057b6:	f107 0314 	add.w	r3, r7, #20
 81057ba:	4618      	mov	r0, r3
 81057bc:	f7fe fb26 	bl	8103e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81057c0:	69bb      	ldr	r3, [r7, #24]
 81057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81057c4:	e027      	b.n	8105816 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81057c6:	f107 0308 	add.w	r3, r7, #8
 81057ca:	4618      	mov	r0, r3
 81057cc:	f7fe fc72 	bl	81040b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81057d0:	68fb      	ldr	r3, [r7, #12]
 81057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81057d4:	e01f      	b.n	8105816 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81057d6:	4b58      	ldr	r3, [pc, #352]	; (8105938 <UART_SetConfig+0x9cc>)
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	f003 0320 	and.w	r3, r3, #32
 81057de:	2b00      	cmp	r3, #0
 81057e0:	d009      	beq.n	81057f6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81057e2:	4b55      	ldr	r3, [pc, #340]	; (8105938 <UART_SetConfig+0x9cc>)
 81057e4:	681b      	ldr	r3, [r3, #0]
 81057e6:	08db      	lsrs	r3, r3, #3
 81057e8:	f003 0303 	and.w	r3, r3, #3
 81057ec:	4a53      	ldr	r2, [pc, #332]	; (810593c <UART_SetConfig+0x9d0>)
 81057ee:	fa22 f303 	lsr.w	r3, r2, r3
 81057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81057f4:	e00f      	b.n	8105816 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 81057f6:	4b51      	ldr	r3, [pc, #324]	; (810593c <UART_SetConfig+0x9d0>)
 81057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81057fa:	e00c      	b.n	8105816 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81057fc:	4b4c      	ldr	r3, [pc, #304]	; (8105930 <UART_SetConfig+0x9c4>)
 81057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105800:	e009      	b.n	8105816 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105808:	e005      	b.n	8105816 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810580a:	2300      	movs	r3, #0
 810580c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810580e:	2301      	movs	r3, #1
 8105810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8105816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105818:	2b00      	cmp	r3, #0
 810581a:	f000 80ea 	beq.w	81059f2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105822:	4a44      	ldr	r2, [pc, #272]	; (8105934 <UART_SetConfig+0x9c8>)
 8105824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105828:	461a      	mov	r2, r3
 810582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810582c:	fbb3 f3f2 	udiv	r3, r3, r2
 8105830:	005a      	lsls	r2, r3, #1
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	685b      	ldr	r3, [r3, #4]
 8105836:	085b      	lsrs	r3, r3, #1
 8105838:	441a      	add	r2, r3
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	685b      	ldr	r3, [r3, #4]
 810583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105842:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105846:	2b0f      	cmp	r3, #15
 8105848:	d916      	bls.n	8105878 <UART_SetConfig+0x90c>
 810584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105850:	d212      	bcs.n	8105878 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105854:	b29b      	uxth	r3, r3
 8105856:	f023 030f 	bic.w	r3, r3, #15
 810585a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810585e:	085b      	lsrs	r3, r3, #1
 8105860:	b29b      	uxth	r3, r3
 8105862:	f003 0307 	and.w	r3, r3, #7
 8105866:	b29a      	uxth	r2, r3
 8105868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810586a:	4313      	orrs	r3, r2
 810586c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8105874:	60da      	str	r2, [r3, #12]
 8105876:	e0bc      	b.n	81059f2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8105878:	2301      	movs	r3, #1
 810587a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810587e:	e0b8      	b.n	81059f2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8105880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105884:	2b20      	cmp	r3, #32
 8105886:	dc4b      	bgt.n	8105920 <UART_SetConfig+0x9b4>
 8105888:	2b00      	cmp	r3, #0
 810588a:	f2c0 8087 	blt.w	810599c <UART_SetConfig+0xa30>
 810588e:	2b20      	cmp	r3, #32
 8105890:	f200 8084 	bhi.w	810599c <UART_SetConfig+0xa30>
 8105894:	a201      	add	r2, pc, #4	; (adr r2, 810589c <UART_SetConfig+0x930>)
 8105896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810589a:	bf00      	nop
 810589c:	08105927 	.word	0x08105927
 81058a0:	08105941 	.word	0x08105941
 81058a4:	0810599d 	.word	0x0810599d
 81058a8:	0810599d 	.word	0x0810599d
 81058ac:	08105949 	.word	0x08105949
 81058b0:	0810599d 	.word	0x0810599d
 81058b4:	0810599d 	.word	0x0810599d
 81058b8:	0810599d 	.word	0x0810599d
 81058bc:	08105959 	.word	0x08105959
 81058c0:	0810599d 	.word	0x0810599d
 81058c4:	0810599d 	.word	0x0810599d
 81058c8:	0810599d 	.word	0x0810599d
 81058cc:	0810599d 	.word	0x0810599d
 81058d0:	0810599d 	.word	0x0810599d
 81058d4:	0810599d 	.word	0x0810599d
 81058d8:	0810599d 	.word	0x0810599d
 81058dc:	08105969 	.word	0x08105969
 81058e0:	0810599d 	.word	0x0810599d
 81058e4:	0810599d 	.word	0x0810599d
 81058e8:	0810599d 	.word	0x0810599d
 81058ec:	0810599d 	.word	0x0810599d
 81058f0:	0810599d 	.word	0x0810599d
 81058f4:	0810599d 	.word	0x0810599d
 81058f8:	0810599d 	.word	0x0810599d
 81058fc:	0810599d 	.word	0x0810599d
 8105900:	0810599d 	.word	0x0810599d
 8105904:	0810599d 	.word	0x0810599d
 8105908:	0810599d 	.word	0x0810599d
 810590c:	0810599d 	.word	0x0810599d
 8105910:	0810599d 	.word	0x0810599d
 8105914:	0810599d 	.word	0x0810599d
 8105918:	0810599d 	.word	0x0810599d
 810591c:	0810598f 	.word	0x0810598f
 8105920:	2b40      	cmp	r3, #64	; 0x40
 8105922:	d037      	beq.n	8105994 <UART_SetConfig+0xa28>
 8105924:	e03a      	b.n	810599c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105926:	f7fd faef 	bl	8102f08 <HAL_RCC_GetPCLK1Freq>
 810592a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810592c:	e03c      	b.n	81059a8 <UART_SetConfig+0xa3c>
 810592e:	bf00      	nop
 8105930:	003d0900 	.word	0x003d0900
 8105934:	081071bc 	.word	0x081071bc
 8105938:	58024400 	.word	0x58024400
 810593c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105940:	f7fd faf8 	bl	8102f34 <HAL_RCC_GetPCLK2Freq>
 8105944:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105946:	e02f      	b.n	81059a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105948:	f107 0314 	add.w	r3, r7, #20
 810594c:	4618      	mov	r0, r3
 810594e:	f7fe fa5d 	bl	8103e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105952:	69bb      	ldr	r3, [r7, #24]
 8105954:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105956:	e027      	b.n	81059a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105958:	f107 0308 	add.w	r3, r7, #8
 810595c:	4618      	mov	r0, r3
 810595e:	f7fe fba9 	bl	81040b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105962:	68fb      	ldr	r3, [r7, #12]
 8105964:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105966:	e01f      	b.n	81059a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105968:	4b2c      	ldr	r3, [pc, #176]	; (8105a1c <UART_SetConfig+0xab0>)
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	f003 0320 	and.w	r3, r3, #32
 8105970:	2b00      	cmp	r3, #0
 8105972:	d009      	beq.n	8105988 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105974:	4b29      	ldr	r3, [pc, #164]	; (8105a1c <UART_SetConfig+0xab0>)
 8105976:	681b      	ldr	r3, [r3, #0]
 8105978:	08db      	lsrs	r3, r3, #3
 810597a:	f003 0303 	and.w	r3, r3, #3
 810597e:	4a28      	ldr	r2, [pc, #160]	; (8105a20 <UART_SetConfig+0xab4>)
 8105980:	fa22 f303 	lsr.w	r3, r2, r3
 8105984:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105986:	e00f      	b.n	81059a8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8105988:	4b25      	ldr	r3, [pc, #148]	; (8105a20 <UART_SetConfig+0xab4>)
 810598a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810598c:	e00c      	b.n	81059a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810598e:	4b25      	ldr	r3, [pc, #148]	; (8105a24 <UART_SetConfig+0xab8>)
 8105990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105992:	e009      	b.n	81059a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810599a:	e005      	b.n	81059a8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810599c:	2300      	movs	r3, #0
 810599e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81059a0:	2301      	movs	r3, #1
 81059a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81059a6:	bf00      	nop
    }

    if (pclk != 0U)
 81059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81059aa:	2b00      	cmp	r3, #0
 81059ac:	d021      	beq.n	81059f2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81059b2:	4a1d      	ldr	r2, [pc, #116]	; (8105a28 <UART_SetConfig+0xabc>)
 81059b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81059b8:	461a      	mov	r2, r3
 81059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81059bc:	fbb3 f2f2 	udiv	r2, r3, r2
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	685b      	ldr	r3, [r3, #4]
 81059c4:	085b      	lsrs	r3, r3, #1
 81059c6:	441a      	add	r2, r3
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	685b      	ldr	r3, [r3, #4]
 81059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 81059d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059d4:	2b0f      	cmp	r3, #15
 81059d6:	d909      	bls.n	81059ec <UART_SetConfig+0xa80>
 81059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81059de:	d205      	bcs.n	81059ec <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059e2:	b29a      	uxth	r2, r3
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	60da      	str	r2, [r3, #12]
 81059ea:	e002      	b.n	81059f2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81059ec:	2301      	movs	r3, #1
 81059ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	2201      	movs	r2, #1
 81059f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	2201      	movs	r2, #1
 81059fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	2200      	movs	r2, #0
 8105a06:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	2200      	movs	r2, #0
 8105a0c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8105a0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8105a12:	4618      	mov	r0, r3
 8105a14:	3738      	adds	r7, #56	; 0x38
 8105a16:	46bd      	mov	sp, r7
 8105a18:	bdb0      	pop	{r4, r5, r7, pc}
 8105a1a:	bf00      	nop
 8105a1c:	58024400 	.word	0x58024400
 8105a20:	03d09000 	.word	0x03d09000
 8105a24:	003d0900 	.word	0x003d0900
 8105a28:	081071bc 	.word	0x081071bc

08105a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105a2c:	b480      	push	{r7}
 8105a2e:	b083      	sub	sp, #12
 8105a30:	af00      	add	r7, sp, #0
 8105a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a38:	f003 0301 	and.w	r3, r3, #1
 8105a3c:	2b00      	cmp	r3, #0
 8105a3e:	d00a      	beq.n	8105a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	685b      	ldr	r3, [r3, #4]
 8105a46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	681b      	ldr	r3, [r3, #0]
 8105a52:	430a      	orrs	r2, r1
 8105a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a5a:	f003 0302 	and.w	r3, r3, #2
 8105a5e:	2b00      	cmp	r3, #0
 8105a60:	d00a      	beq.n	8105a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	685b      	ldr	r3, [r3, #4]
 8105a68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	430a      	orrs	r2, r1
 8105a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a7c:	f003 0304 	and.w	r3, r3, #4
 8105a80:	2b00      	cmp	r3, #0
 8105a82:	d00a      	beq.n	8105a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	685b      	ldr	r3, [r3, #4]
 8105a8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	430a      	orrs	r2, r1
 8105a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a9e:	f003 0308 	and.w	r3, r3, #8
 8105aa2:	2b00      	cmp	r3, #0
 8105aa4:	d00a      	beq.n	8105abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	685b      	ldr	r3, [r3, #4]
 8105aac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	681b      	ldr	r3, [r3, #0]
 8105ab8:	430a      	orrs	r2, r1
 8105aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ac0:	f003 0310 	and.w	r3, r3, #16
 8105ac4:	2b00      	cmp	r3, #0
 8105ac6:	d00a      	beq.n	8105ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	689b      	ldr	r3, [r3, #8]
 8105ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	430a      	orrs	r2, r1
 8105adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ae2:	f003 0320 	and.w	r3, r3, #32
 8105ae6:	2b00      	cmp	r3, #0
 8105ae8:	d00a      	beq.n	8105b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	681b      	ldr	r3, [r3, #0]
 8105aee:	689b      	ldr	r3, [r3, #8]
 8105af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	430a      	orrs	r2, r1
 8105afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105b08:	2b00      	cmp	r3, #0
 8105b0a:	d01a      	beq.n	8105b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	685b      	ldr	r3, [r3, #4]
 8105b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	430a      	orrs	r2, r1
 8105b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105b2a:	d10a      	bne.n	8105b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	685b      	ldr	r3, [r3, #4]
 8105b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	430a      	orrs	r2, r1
 8105b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105b4a:	2b00      	cmp	r3, #0
 8105b4c:	d00a      	beq.n	8105b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	685b      	ldr	r3, [r3, #4]
 8105b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	681b      	ldr	r3, [r3, #0]
 8105b60:	430a      	orrs	r2, r1
 8105b62:	605a      	str	r2, [r3, #4]
  }
}
 8105b64:	bf00      	nop
 8105b66:	370c      	adds	r7, #12
 8105b68:	46bd      	mov	sp, r7
 8105b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b6e:	4770      	bx	lr

08105b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105b70:	b580      	push	{r7, lr}
 8105b72:	b086      	sub	sp, #24
 8105b74:	af02      	add	r7, sp, #8
 8105b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	2200      	movs	r2, #0
 8105b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105b80:	f7fb fee8 	bl	8101954 <HAL_GetTick>
 8105b84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	681b      	ldr	r3, [r3, #0]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	f003 0308 	and.w	r3, r3, #8
 8105b90:	2b08      	cmp	r3, #8
 8105b92:	d10e      	bne.n	8105bb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105b98:	9300      	str	r3, [sp, #0]
 8105b9a:	68fb      	ldr	r3, [r7, #12]
 8105b9c:	2200      	movs	r2, #0
 8105b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105ba2:	6878      	ldr	r0, [r7, #4]
 8105ba4:	f000 f82f 	bl	8105c06 <UART_WaitOnFlagUntilTimeout>
 8105ba8:	4603      	mov	r3, r0
 8105baa:	2b00      	cmp	r3, #0
 8105bac:	d001      	beq.n	8105bb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105bae:	2303      	movs	r3, #3
 8105bb0:	e025      	b.n	8105bfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	f003 0304 	and.w	r3, r3, #4
 8105bbc:	2b04      	cmp	r3, #4
 8105bbe:	d10e      	bne.n	8105bde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105bc4:	9300      	str	r3, [sp, #0]
 8105bc6:	68fb      	ldr	r3, [r7, #12]
 8105bc8:	2200      	movs	r2, #0
 8105bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105bce:	6878      	ldr	r0, [r7, #4]
 8105bd0:	f000 f819 	bl	8105c06 <UART_WaitOnFlagUntilTimeout>
 8105bd4:	4603      	mov	r3, r0
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	d001      	beq.n	8105bde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105bda:	2303      	movs	r3, #3
 8105bdc:	e00f      	b.n	8105bfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	2220      	movs	r2, #32
 8105be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	2220      	movs	r2, #32
 8105bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105bee:	687b      	ldr	r3, [r7, #4]
 8105bf0:	2200      	movs	r2, #0
 8105bf2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	2200      	movs	r2, #0
 8105bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105bfc:	2300      	movs	r3, #0
}
 8105bfe:	4618      	mov	r0, r3
 8105c00:	3710      	adds	r7, #16
 8105c02:	46bd      	mov	sp, r7
 8105c04:	bd80      	pop	{r7, pc}

08105c06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105c06:	b580      	push	{r7, lr}
 8105c08:	b09c      	sub	sp, #112	; 0x70
 8105c0a:	af00      	add	r7, sp, #0
 8105c0c:	60f8      	str	r0, [r7, #12]
 8105c0e:	60b9      	str	r1, [r7, #8]
 8105c10:	603b      	str	r3, [r7, #0]
 8105c12:	4613      	mov	r3, r2
 8105c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105c16:	e0a9      	b.n	8105d6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105c1e:	f000 80a5 	beq.w	8105d6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105c22:	f7fb fe97 	bl	8101954 <HAL_GetTick>
 8105c26:	4602      	mov	r2, r0
 8105c28:	683b      	ldr	r3, [r7, #0]
 8105c2a:	1ad3      	subs	r3, r2, r3
 8105c2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8105c2e:	429a      	cmp	r2, r3
 8105c30:	d302      	bcc.n	8105c38 <UART_WaitOnFlagUntilTimeout+0x32>
 8105c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105c34:	2b00      	cmp	r3, #0
 8105c36:	d140      	bne.n	8105cba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105c38:	68fb      	ldr	r3, [r7, #12]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105c40:	e853 3f00 	ldrex	r3, [r3]
 8105c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105c48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	461a      	mov	r2, r3
 8105c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105c58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105c5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105c5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8105c5e:	e841 2300 	strex	r3, r2, [r1]
 8105c62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d1e6      	bne.n	8105c38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	3308      	adds	r3, #8
 8105c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105c74:	e853 3f00 	ldrex	r3, [r3]
 8105c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c7c:	f023 0301 	bic.w	r3, r3, #1
 8105c80:	663b      	str	r3, [r7, #96]	; 0x60
 8105c82:	68fb      	ldr	r3, [r7, #12]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	3308      	adds	r3, #8
 8105c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8105c8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8105c8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105c8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105c92:	e841 2300 	strex	r3, r2, [r1]
 8105c96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8105c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	d1e5      	bne.n	8105c6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8105c9e:	68fb      	ldr	r3, [r7, #12]
 8105ca0:	2220      	movs	r2, #32
 8105ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8105ca6:	68fb      	ldr	r3, [r7, #12]
 8105ca8:	2220      	movs	r2, #32
 8105caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	2200      	movs	r2, #0
 8105cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8105cb6:	2303      	movs	r3, #3
 8105cb8:	e069      	b.n	8105d8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105cba:	68fb      	ldr	r3, [r7, #12]
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	f003 0304 	and.w	r3, r3, #4
 8105cc4:	2b00      	cmp	r3, #0
 8105cc6:	d051      	beq.n	8105d6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105cc8:	68fb      	ldr	r3, [r7, #12]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	69db      	ldr	r3, [r3, #28]
 8105cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105cd6:	d149      	bne.n	8105d6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105cd8:	68fb      	ldr	r3, [r7, #12]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105ce0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105ce2:	68fb      	ldr	r3, [r7, #12]
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105cea:	e853 3f00 	ldrex	r3, [r3]
 8105cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105cf8:	68fb      	ldr	r3, [r7, #12]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	461a      	mov	r2, r3
 8105cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105d00:	637b      	str	r3, [r7, #52]	; 0x34
 8105d02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8105d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105d08:	e841 2300 	strex	r3, r2, [r1]
 8105d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8105d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105d10:	2b00      	cmp	r3, #0
 8105d12:	d1e6      	bne.n	8105ce2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105d14:	68fb      	ldr	r3, [r7, #12]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	3308      	adds	r3, #8
 8105d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105d1c:	697b      	ldr	r3, [r7, #20]
 8105d1e:	e853 3f00 	ldrex	r3, [r3]
 8105d22:	613b      	str	r3, [r7, #16]
   return(result);
 8105d24:	693b      	ldr	r3, [r7, #16]
 8105d26:	f023 0301 	bic.w	r3, r3, #1
 8105d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8105d2c:	68fb      	ldr	r3, [r7, #12]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	3308      	adds	r3, #8
 8105d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105d34:	623a      	str	r2, [r7, #32]
 8105d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d38:	69f9      	ldr	r1, [r7, #28]
 8105d3a:	6a3a      	ldr	r2, [r7, #32]
 8105d3c:	e841 2300 	strex	r3, r2, [r1]
 8105d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8105d42:	69bb      	ldr	r3, [r7, #24]
 8105d44:	2b00      	cmp	r3, #0
 8105d46:	d1e5      	bne.n	8105d14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8105d48:	68fb      	ldr	r3, [r7, #12]
 8105d4a:	2220      	movs	r2, #32
 8105d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8105d50:	68fb      	ldr	r3, [r7, #12]
 8105d52:	2220      	movs	r2, #32
 8105d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105d58:	68fb      	ldr	r3, [r7, #12]
 8105d5a:	2220      	movs	r2, #32
 8105d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105d60:	68fb      	ldr	r3, [r7, #12]
 8105d62:	2200      	movs	r2, #0
 8105d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105d68:	2303      	movs	r3, #3
 8105d6a:	e010      	b.n	8105d8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105d6c:	68fb      	ldr	r3, [r7, #12]
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	69da      	ldr	r2, [r3, #28]
 8105d72:	68bb      	ldr	r3, [r7, #8]
 8105d74:	4013      	ands	r3, r2
 8105d76:	68ba      	ldr	r2, [r7, #8]
 8105d78:	429a      	cmp	r2, r3
 8105d7a:	bf0c      	ite	eq
 8105d7c:	2301      	moveq	r3, #1
 8105d7e:	2300      	movne	r3, #0
 8105d80:	b2db      	uxtb	r3, r3
 8105d82:	461a      	mov	r2, r3
 8105d84:	79fb      	ldrb	r3, [r7, #7]
 8105d86:	429a      	cmp	r2, r3
 8105d88:	f43f af46 	beq.w	8105c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105d8c:	2300      	movs	r3, #0
}
 8105d8e:	4618      	mov	r0, r3
 8105d90:	3770      	adds	r7, #112	; 0x70
 8105d92:	46bd      	mov	sp, r7
 8105d94:	bd80      	pop	{r7, pc}

08105d96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8105d96:	b480      	push	{r7}
 8105d98:	b095      	sub	sp, #84	; 0x54
 8105d9a:	af00      	add	r7, sp, #0
 8105d9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105da6:	e853 3f00 	ldrex	r3, [r3]
 8105daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8105dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8105db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	461a      	mov	r2, r3
 8105dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8105dbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8105dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105dc4:	e841 2300 	strex	r3, r2, [r1]
 8105dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dcc:	2b00      	cmp	r3, #0
 8105dce:	d1e6      	bne.n	8105d9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	3308      	adds	r3, #8
 8105dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105dd8:	6a3b      	ldr	r3, [r7, #32]
 8105dda:	e853 3f00 	ldrex	r3, [r3]
 8105dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8105de0:	69fb      	ldr	r3, [r7, #28]
 8105de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105de6:	f023 0301 	bic.w	r3, r3, #1
 8105dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	3308      	adds	r3, #8
 8105df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8105df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105dfc:	e841 2300 	strex	r3, r2, [r1]
 8105e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105e04:	2b00      	cmp	r3, #0
 8105e06:	d1e3      	bne.n	8105dd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e0c:	2b01      	cmp	r3, #1
 8105e0e:	d118      	bne.n	8105e42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e16:	68fb      	ldr	r3, [r7, #12]
 8105e18:	e853 3f00 	ldrex	r3, [r3]
 8105e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8105e1e:	68bb      	ldr	r3, [r7, #8]
 8105e20:	f023 0310 	bic.w	r3, r3, #16
 8105e24:	647b      	str	r3, [r7, #68]	; 0x44
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	461a      	mov	r2, r3
 8105e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8105e2e:	61bb      	str	r3, [r7, #24]
 8105e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105e32:	6979      	ldr	r1, [r7, #20]
 8105e34:	69ba      	ldr	r2, [r7, #24]
 8105e36:	e841 2300 	strex	r3, r2, [r1]
 8105e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8105e3c:	693b      	ldr	r3, [r7, #16]
 8105e3e:	2b00      	cmp	r3, #0
 8105e40:	d1e6      	bne.n	8105e10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	2220      	movs	r2, #32
 8105e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	2200      	movs	r2, #0
 8105e4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	2200      	movs	r2, #0
 8105e54:	671a      	str	r2, [r3, #112]	; 0x70
}
 8105e56:	bf00      	nop
 8105e58:	3754      	adds	r7, #84	; 0x54
 8105e5a:	46bd      	mov	sp, r7
 8105e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e60:	4770      	bx	lr

08105e62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8105e62:	b580      	push	{r7, lr}
 8105e64:	b084      	sub	sp, #16
 8105e66:	af00      	add	r7, sp, #0
 8105e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8105e6a:	687b      	ldr	r3, [r7, #4]
 8105e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8105e70:	68fb      	ldr	r3, [r7, #12]
 8105e72:	2200      	movs	r2, #0
 8105e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8105e78:	68fb      	ldr	r3, [r7, #12]
 8105e7a:	2200      	movs	r2, #0
 8105e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8105e80:	68f8      	ldr	r0, [r7, #12]
 8105e82:	f7ff f85d 	bl	8104f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105e86:	bf00      	nop
 8105e88:	3710      	adds	r7, #16
 8105e8a:	46bd      	mov	sp, r7
 8105e8c:	bd80      	pop	{r7, pc}

08105e8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8105e8e:	b580      	push	{r7, lr}
 8105e90:	b088      	sub	sp, #32
 8105e92:	af00      	add	r7, sp, #0
 8105e94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8105e96:	687b      	ldr	r3, [r7, #4]
 8105e98:	681b      	ldr	r3, [r3, #0]
 8105e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	e853 3f00 	ldrex	r3, [r3]
 8105ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8105ea4:	68bb      	ldr	r3, [r7, #8]
 8105ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105eaa:	61fb      	str	r3, [r7, #28]
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	461a      	mov	r2, r3
 8105eb2:	69fb      	ldr	r3, [r7, #28]
 8105eb4:	61bb      	str	r3, [r7, #24]
 8105eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105eb8:	6979      	ldr	r1, [r7, #20]
 8105eba:	69ba      	ldr	r2, [r7, #24]
 8105ebc:	e841 2300 	strex	r3, r2, [r1]
 8105ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8105ec2:	693b      	ldr	r3, [r7, #16]
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	d1e6      	bne.n	8105e96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	2220      	movs	r2, #32
 8105ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	2200      	movs	r2, #0
 8105ed4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8105ed6:	6878      	ldr	r0, [r7, #4]
 8105ed8:	f7ff f828 	bl	8104f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105edc:	bf00      	nop
 8105ede:	3720      	adds	r7, #32
 8105ee0:	46bd      	mov	sp, r7
 8105ee2:	bd80      	pop	{r7, pc}

08105ee4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8105ee4:	b480      	push	{r7}
 8105ee6:	b083      	sub	sp, #12
 8105ee8:	af00      	add	r7, sp, #0
 8105eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8105eec:	bf00      	nop
 8105eee:	370c      	adds	r7, #12
 8105ef0:	46bd      	mov	sp, r7
 8105ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ef6:	4770      	bx	lr

08105ef8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8105ef8:	b480      	push	{r7}
 8105efa:	b083      	sub	sp, #12
 8105efc:	af00      	add	r7, sp, #0
 8105efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8105f00:	bf00      	nop
 8105f02:	370c      	adds	r7, #12
 8105f04:	46bd      	mov	sp, r7
 8105f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f0a:	4770      	bx	lr

08105f0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8105f0c:	b480      	push	{r7}
 8105f0e:	b083      	sub	sp, #12
 8105f10:	af00      	add	r7, sp, #0
 8105f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8105f14:	bf00      	nop
 8105f16:	370c      	adds	r7, #12
 8105f18:	46bd      	mov	sp, r7
 8105f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f1e:	4770      	bx	lr

08105f20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105f20:	b480      	push	{r7}
 8105f22:	b085      	sub	sp, #20
 8105f24:	af00      	add	r7, sp, #0
 8105f26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105f2e:	2b01      	cmp	r3, #1
 8105f30:	d101      	bne.n	8105f36 <HAL_UARTEx_DisableFifoMode+0x16>
 8105f32:	2302      	movs	r3, #2
 8105f34:	e027      	b.n	8105f86 <HAL_UARTEx_DisableFifoMode+0x66>
 8105f36:	687b      	ldr	r3, [r7, #4]
 8105f38:	2201      	movs	r2, #1
 8105f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	2224      	movs	r2, #36	; 0x24
 8105f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	681a      	ldr	r2, [r3, #0]
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	681b      	ldr	r3, [r3, #0]
 8105f58:	f022 0201 	bic.w	r2, r2, #1
 8105f5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105f64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	2200      	movs	r2, #0
 8105f6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	68fa      	ldr	r2, [r7, #12]
 8105f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	2220      	movs	r2, #32
 8105f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	2200      	movs	r2, #0
 8105f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105f84:	2300      	movs	r3, #0
}
 8105f86:	4618      	mov	r0, r3
 8105f88:	3714      	adds	r7, #20
 8105f8a:	46bd      	mov	sp, r7
 8105f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f90:	4770      	bx	lr

08105f92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105f92:	b580      	push	{r7, lr}
 8105f94:	b084      	sub	sp, #16
 8105f96:	af00      	add	r7, sp, #0
 8105f98:	6078      	str	r0, [r7, #4]
 8105f9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105fa2:	2b01      	cmp	r3, #1
 8105fa4:	d101      	bne.n	8105faa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105fa6:	2302      	movs	r3, #2
 8105fa8:	e02d      	b.n	8106006 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105faa:	687b      	ldr	r3, [r7, #4]
 8105fac:	2201      	movs	r2, #1
 8105fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	2224      	movs	r2, #36	; 0x24
 8105fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105fc2:	687b      	ldr	r3, [r7, #4]
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	681a      	ldr	r2, [r3, #0]
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	f022 0201 	bic.w	r2, r2, #1
 8105fd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	689b      	ldr	r3, [r3, #8]
 8105fd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	683a      	ldr	r2, [r7, #0]
 8105fe2:	430a      	orrs	r2, r1
 8105fe4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105fe6:	6878      	ldr	r0, [r7, #4]
 8105fe8:	f000 f850 	bl	810608c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	68fa      	ldr	r2, [r7, #12]
 8105ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	2220      	movs	r2, #32
 8105ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	2200      	movs	r2, #0
 8106000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106004:	2300      	movs	r3, #0
}
 8106006:	4618      	mov	r0, r3
 8106008:	3710      	adds	r7, #16
 810600a:	46bd      	mov	sp, r7
 810600c:	bd80      	pop	{r7, pc}

0810600e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810600e:	b580      	push	{r7, lr}
 8106010:	b084      	sub	sp, #16
 8106012:	af00      	add	r7, sp, #0
 8106014:	6078      	str	r0, [r7, #4]
 8106016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810601e:	2b01      	cmp	r3, #1
 8106020:	d101      	bne.n	8106026 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106022:	2302      	movs	r3, #2
 8106024:	e02d      	b.n	8106082 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	2201      	movs	r2, #1
 810602a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	2224      	movs	r2, #36	; 0x24
 8106032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	681b      	ldr	r3, [r3, #0]
 8106042:	681a      	ldr	r2, [r3, #0]
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	f022 0201 	bic.w	r2, r2, #1
 810604c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	689b      	ldr	r3, [r3, #8]
 8106054:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	683a      	ldr	r2, [r7, #0]
 810605e:	430a      	orrs	r2, r1
 8106060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106062:	6878      	ldr	r0, [r7, #4]
 8106064:	f000 f812 	bl	810608c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	68fa      	ldr	r2, [r7, #12]
 810606e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106070:	687b      	ldr	r3, [r7, #4]
 8106072:	2220      	movs	r2, #32
 8106074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	2200      	movs	r2, #0
 810607c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106080:	2300      	movs	r3, #0
}
 8106082:	4618      	mov	r0, r3
 8106084:	3710      	adds	r7, #16
 8106086:	46bd      	mov	sp, r7
 8106088:	bd80      	pop	{r7, pc}
	...

0810608c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810608c:	b480      	push	{r7}
 810608e:	b085      	sub	sp, #20
 8106090:	af00      	add	r7, sp, #0
 8106092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106098:	2b00      	cmp	r3, #0
 810609a:	d108      	bne.n	81060ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	2201      	movs	r2, #1
 81060a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81060a4:	687b      	ldr	r3, [r7, #4]
 81060a6:	2201      	movs	r2, #1
 81060a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81060ac:	e031      	b.n	8106112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81060ae:	2310      	movs	r3, #16
 81060b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81060b2:	2310      	movs	r3, #16
 81060b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	689b      	ldr	r3, [r3, #8]
 81060bc:	0e5b      	lsrs	r3, r3, #25
 81060be:	b2db      	uxtb	r3, r3
 81060c0:	f003 0307 	and.w	r3, r3, #7
 81060c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	681b      	ldr	r3, [r3, #0]
 81060ca:	689b      	ldr	r3, [r3, #8]
 81060cc:	0f5b      	lsrs	r3, r3, #29
 81060ce:	b2db      	uxtb	r3, r3
 81060d0:	f003 0307 	and.w	r3, r3, #7
 81060d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81060d6:	7bbb      	ldrb	r3, [r7, #14]
 81060d8:	7b3a      	ldrb	r2, [r7, #12]
 81060da:	4911      	ldr	r1, [pc, #68]	; (8106120 <UARTEx_SetNbDataToProcess+0x94>)
 81060dc:	5c8a      	ldrb	r2, [r1, r2]
 81060de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81060e2:	7b3a      	ldrb	r2, [r7, #12]
 81060e4:	490f      	ldr	r1, [pc, #60]	; (8106124 <UARTEx_SetNbDataToProcess+0x98>)
 81060e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81060e8:	fb93 f3f2 	sdiv	r3, r3, r2
 81060ec:	b29a      	uxth	r2, r3
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81060f4:	7bfb      	ldrb	r3, [r7, #15]
 81060f6:	7b7a      	ldrb	r2, [r7, #13]
 81060f8:	4909      	ldr	r1, [pc, #36]	; (8106120 <UARTEx_SetNbDataToProcess+0x94>)
 81060fa:	5c8a      	ldrb	r2, [r1, r2]
 81060fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106100:	7b7a      	ldrb	r2, [r7, #13]
 8106102:	4908      	ldr	r1, [pc, #32]	; (8106124 <UARTEx_SetNbDataToProcess+0x98>)
 8106104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106106:	fb93 f3f2 	sdiv	r3, r3, r2
 810610a:	b29a      	uxth	r2, r3
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106112:	bf00      	nop
 8106114:	3714      	adds	r7, #20
 8106116:	46bd      	mov	sp, r7
 8106118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810611c:	4770      	bx	lr
 810611e:	bf00      	nop
 8106120:	081071d4 	.word	0x081071d4
 8106124:	081071dc 	.word	0x081071dc

08106128 <__errno>:
 8106128:	4b01      	ldr	r3, [pc, #4]	; (8106130 <__errno+0x8>)
 810612a:	6818      	ldr	r0, [r3, #0]
 810612c:	4770      	bx	lr
 810612e:	bf00      	nop
 8106130:	10000018 	.word	0x10000018

08106134 <__libc_init_array>:
 8106134:	b570      	push	{r4, r5, r6, lr}
 8106136:	4d0d      	ldr	r5, [pc, #52]	; (810616c <__libc_init_array+0x38>)
 8106138:	4c0d      	ldr	r4, [pc, #52]	; (8106170 <__libc_init_array+0x3c>)
 810613a:	1b64      	subs	r4, r4, r5
 810613c:	10a4      	asrs	r4, r4, #2
 810613e:	2600      	movs	r6, #0
 8106140:	42a6      	cmp	r6, r4
 8106142:	d109      	bne.n	8106158 <__libc_init_array+0x24>
 8106144:	4d0b      	ldr	r5, [pc, #44]	; (8106174 <__libc_init_array+0x40>)
 8106146:	4c0c      	ldr	r4, [pc, #48]	; (8106178 <__libc_init_array+0x44>)
 8106148:	f000 fc5c 	bl	8106a04 <_init>
 810614c:	1b64      	subs	r4, r4, r5
 810614e:	10a4      	asrs	r4, r4, #2
 8106150:	2600      	movs	r6, #0
 8106152:	42a6      	cmp	r6, r4
 8106154:	d105      	bne.n	8106162 <__libc_init_array+0x2e>
 8106156:	bd70      	pop	{r4, r5, r6, pc}
 8106158:	f855 3b04 	ldr.w	r3, [r5], #4
 810615c:	4798      	blx	r3
 810615e:	3601      	adds	r6, #1
 8106160:	e7ee      	b.n	8106140 <__libc_init_array+0xc>
 8106162:	f855 3b04 	ldr.w	r3, [r5], #4
 8106166:	4798      	blx	r3
 8106168:	3601      	adds	r6, #1
 810616a:	e7f2      	b.n	8106152 <__libc_init_array+0x1e>
 810616c:	08107220 	.word	0x08107220
 8106170:	08107220 	.word	0x08107220
 8106174:	08107220 	.word	0x08107220
 8106178:	08107224 	.word	0x08107224

0810617c <memcpy>:
 810617c:	440a      	add	r2, r1
 810617e:	4291      	cmp	r1, r2
 8106180:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8106184:	d100      	bne.n	8106188 <memcpy+0xc>
 8106186:	4770      	bx	lr
 8106188:	b510      	push	{r4, lr}
 810618a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810618e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106192:	4291      	cmp	r1, r2
 8106194:	d1f9      	bne.n	810618a <memcpy+0xe>
 8106196:	bd10      	pop	{r4, pc}

08106198 <memset>:
 8106198:	4402      	add	r2, r0
 810619a:	4603      	mov	r3, r0
 810619c:	4293      	cmp	r3, r2
 810619e:	d100      	bne.n	81061a2 <memset+0xa>
 81061a0:	4770      	bx	lr
 81061a2:	f803 1b01 	strb.w	r1, [r3], #1
 81061a6:	e7f9      	b.n	810619c <memset+0x4>

081061a8 <siprintf>:
 81061a8:	b40e      	push	{r1, r2, r3}
 81061aa:	b500      	push	{lr}
 81061ac:	b09c      	sub	sp, #112	; 0x70
 81061ae:	ab1d      	add	r3, sp, #116	; 0x74
 81061b0:	9002      	str	r0, [sp, #8]
 81061b2:	9006      	str	r0, [sp, #24]
 81061b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81061b8:	4809      	ldr	r0, [pc, #36]	; (81061e0 <siprintf+0x38>)
 81061ba:	9107      	str	r1, [sp, #28]
 81061bc:	9104      	str	r1, [sp, #16]
 81061be:	4909      	ldr	r1, [pc, #36]	; (81061e4 <siprintf+0x3c>)
 81061c0:	f853 2b04 	ldr.w	r2, [r3], #4
 81061c4:	9105      	str	r1, [sp, #20]
 81061c6:	6800      	ldr	r0, [r0, #0]
 81061c8:	9301      	str	r3, [sp, #4]
 81061ca:	a902      	add	r1, sp, #8
 81061cc:	f000 f876 	bl	81062bc <_svfiprintf_r>
 81061d0:	9b02      	ldr	r3, [sp, #8]
 81061d2:	2200      	movs	r2, #0
 81061d4:	701a      	strb	r2, [r3, #0]
 81061d6:	b01c      	add	sp, #112	; 0x70
 81061d8:	f85d eb04 	ldr.w	lr, [sp], #4
 81061dc:	b003      	add	sp, #12
 81061de:	4770      	bx	lr
 81061e0:	10000018 	.word	0x10000018
 81061e4:	ffff0208 	.word	0xffff0208

081061e8 <strcat>:
 81061e8:	b510      	push	{r4, lr}
 81061ea:	4602      	mov	r2, r0
 81061ec:	7814      	ldrb	r4, [r2, #0]
 81061ee:	4613      	mov	r3, r2
 81061f0:	3201      	adds	r2, #1
 81061f2:	2c00      	cmp	r4, #0
 81061f4:	d1fa      	bne.n	81061ec <strcat+0x4>
 81061f6:	3b01      	subs	r3, #1
 81061f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 81061fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8106200:	2a00      	cmp	r2, #0
 8106202:	d1f9      	bne.n	81061f8 <strcat+0x10>
 8106204:	bd10      	pop	{r4, pc}

08106206 <__ssputs_r>:
 8106206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810620a:	688e      	ldr	r6, [r1, #8]
 810620c:	429e      	cmp	r6, r3
 810620e:	4682      	mov	sl, r0
 8106210:	460c      	mov	r4, r1
 8106212:	4690      	mov	r8, r2
 8106214:	461f      	mov	r7, r3
 8106216:	d838      	bhi.n	810628a <__ssputs_r+0x84>
 8106218:	898a      	ldrh	r2, [r1, #12]
 810621a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810621e:	d032      	beq.n	8106286 <__ssputs_r+0x80>
 8106220:	6825      	ldr	r5, [r4, #0]
 8106222:	6909      	ldr	r1, [r1, #16]
 8106224:	eba5 0901 	sub.w	r9, r5, r1
 8106228:	6965      	ldr	r5, [r4, #20]
 810622a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810622e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8106232:	3301      	adds	r3, #1
 8106234:	444b      	add	r3, r9
 8106236:	106d      	asrs	r5, r5, #1
 8106238:	429d      	cmp	r5, r3
 810623a:	bf38      	it	cc
 810623c:	461d      	movcc	r5, r3
 810623e:	0553      	lsls	r3, r2, #21
 8106240:	d531      	bpl.n	81062a6 <__ssputs_r+0xa0>
 8106242:	4629      	mov	r1, r5
 8106244:	f000 fb38 	bl	81068b8 <_malloc_r>
 8106248:	4606      	mov	r6, r0
 810624a:	b950      	cbnz	r0, 8106262 <__ssputs_r+0x5c>
 810624c:	230c      	movs	r3, #12
 810624e:	f8ca 3000 	str.w	r3, [sl]
 8106252:	89a3      	ldrh	r3, [r4, #12]
 8106254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106258:	81a3      	strh	r3, [r4, #12]
 810625a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810625e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106262:	6921      	ldr	r1, [r4, #16]
 8106264:	464a      	mov	r2, r9
 8106266:	f7ff ff89 	bl	810617c <memcpy>
 810626a:	89a3      	ldrh	r3, [r4, #12]
 810626c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8106270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106274:	81a3      	strh	r3, [r4, #12]
 8106276:	6126      	str	r6, [r4, #16]
 8106278:	6165      	str	r5, [r4, #20]
 810627a:	444e      	add	r6, r9
 810627c:	eba5 0509 	sub.w	r5, r5, r9
 8106280:	6026      	str	r6, [r4, #0]
 8106282:	60a5      	str	r5, [r4, #8]
 8106284:	463e      	mov	r6, r7
 8106286:	42be      	cmp	r6, r7
 8106288:	d900      	bls.n	810628c <__ssputs_r+0x86>
 810628a:	463e      	mov	r6, r7
 810628c:	4632      	mov	r2, r6
 810628e:	6820      	ldr	r0, [r4, #0]
 8106290:	4641      	mov	r1, r8
 8106292:	f000 faa7 	bl	81067e4 <memmove>
 8106296:	68a3      	ldr	r3, [r4, #8]
 8106298:	6822      	ldr	r2, [r4, #0]
 810629a:	1b9b      	subs	r3, r3, r6
 810629c:	4432      	add	r2, r6
 810629e:	60a3      	str	r3, [r4, #8]
 81062a0:	6022      	str	r2, [r4, #0]
 81062a2:	2000      	movs	r0, #0
 81062a4:	e7db      	b.n	810625e <__ssputs_r+0x58>
 81062a6:	462a      	mov	r2, r5
 81062a8:	f000 fb60 	bl	810696c <_realloc_r>
 81062ac:	4606      	mov	r6, r0
 81062ae:	2800      	cmp	r0, #0
 81062b0:	d1e1      	bne.n	8106276 <__ssputs_r+0x70>
 81062b2:	6921      	ldr	r1, [r4, #16]
 81062b4:	4650      	mov	r0, sl
 81062b6:	f000 faaf 	bl	8106818 <_free_r>
 81062ba:	e7c7      	b.n	810624c <__ssputs_r+0x46>

081062bc <_svfiprintf_r>:
 81062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81062c0:	4698      	mov	r8, r3
 81062c2:	898b      	ldrh	r3, [r1, #12]
 81062c4:	061b      	lsls	r3, r3, #24
 81062c6:	b09d      	sub	sp, #116	; 0x74
 81062c8:	4607      	mov	r7, r0
 81062ca:	460d      	mov	r5, r1
 81062cc:	4614      	mov	r4, r2
 81062ce:	d50e      	bpl.n	81062ee <_svfiprintf_r+0x32>
 81062d0:	690b      	ldr	r3, [r1, #16]
 81062d2:	b963      	cbnz	r3, 81062ee <_svfiprintf_r+0x32>
 81062d4:	2140      	movs	r1, #64	; 0x40
 81062d6:	f000 faef 	bl	81068b8 <_malloc_r>
 81062da:	6028      	str	r0, [r5, #0]
 81062dc:	6128      	str	r0, [r5, #16]
 81062de:	b920      	cbnz	r0, 81062ea <_svfiprintf_r+0x2e>
 81062e0:	230c      	movs	r3, #12
 81062e2:	603b      	str	r3, [r7, #0]
 81062e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81062e8:	e0d1      	b.n	810648e <_svfiprintf_r+0x1d2>
 81062ea:	2340      	movs	r3, #64	; 0x40
 81062ec:	616b      	str	r3, [r5, #20]
 81062ee:	2300      	movs	r3, #0
 81062f0:	9309      	str	r3, [sp, #36]	; 0x24
 81062f2:	2320      	movs	r3, #32
 81062f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81062f8:	f8cd 800c 	str.w	r8, [sp, #12]
 81062fc:	2330      	movs	r3, #48	; 0x30
 81062fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 81064a8 <_svfiprintf_r+0x1ec>
 8106302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8106306:	f04f 0901 	mov.w	r9, #1
 810630a:	4623      	mov	r3, r4
 810630c:	469a      	mov	sl, r3
 810630e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106312:	b10a      	cbz	r2, 8106318 <_svfiprintf_r+0x5c>
 8106314:	2a25      	cmp	r2, #37	; 0x25
 8106316:	d1f9      	bne.n	810630c <_svfiprintf_r+0x50>
 8106318:	ebba 0b04 	subs.w	fp, sl, r4
 810631c:	d00b      	beq.n	8106336 <_svfiprintf_r+0x7a>
 810631e:	465b      	mov	r3, fp
 8106320:	4622      	mov	r2, r4
 8106322:	4629      	mov	r1, r5
 8106324:	4638      	mov	r0, r7
 8106326:	f7ff ff6e 	bl	8106206 <__ssputs_r>
 810632a:	3001      	adds	r0, #1
 810632c:	f000 80aa 	beq.w	8106484 <_svfiprintf_r+0x1c8>
 8106330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106332:	445a      	add	r2, fp
 8106334:	9209      	str	r2, [sp, #36]	; 0x24
 8106336:	f89a 3000 	ldrb.w	r3, [sl]
 810633a:	2b00      	cmp	r3, #0
 810633c:	f000 80a2 	beq.w	8106484 <_svfiprintf_r+0x1c8>
 8106340:	2300      	movs	r3, #0
 8106342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8106346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810634a:	f10a 0a01 	add.w	sl, sl, #1
 810634e:	9304      	str	r3, [sp, #16]
 8106350:	9307      	str	r3, [sp, #28]
 8106352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8106356:	931a      	str	r3, [sp, #104]	; 0x68
 8106358:	4654      	mov	r4, sl
 810635a:	2205      	movs	r2, #5
 810635c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106360:	4851      	ldr	r0, [pc, #324]	; (81064a8 <_svfiprintf_r+0x1ec>)
 8106362:	f7f9 ffd5 	bl	8100310 <memchr>
 8106366:	9a04      	ldr	r2, [sp, #16]
 8106368:	b9d8      	cbnz	r0, 81063a2 <_svfiprintf_r+0xe6>
 810636a:	06d0      	lsls	r0, r2, #27
 810636c:	bf44      	itt	mi
 810636e:	2320      	movmi	r3, #32
 8106370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106374:	0711      	lsls	r1, r2, #28
 8106376:	bf44      	itt	mi
 8106378:	232b      	movmi	r3, #43	; 0x2b
 810637a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810637e:	f89a 3000 	ldrb.w	r3, [sl]
 8106382:	2b2a      	cmp	r3, #42	; 0x2a
 8106384:	d015      	beq.n	81063b2 <_svfiprintf_r+0xf6>
 8106386:	9a07      	ldr	r2, [sp, #28]
 8106388:	4654      	mov	r4, sl
 810638a:	2000      	movs	r0, #0
 810638c:	f04f 0c0a 	mov.w	ip, #10
 8106390:	4621      	mov	r1, r4
 8106392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106396:	3b30      	subs	r3, #48	; 0x30
 8106398:	2b09      	cmp	r3, #9
 810639a:	d94e      	bls.n	810643a <_svfiprintf_r+0x17e>
 810639c:	b1b0      	cbz	r0, 81063cc <_svfiprintf_r+0x110>
 810639e:	9207      	str	r2, [sp, #28]
 81063a0:	e014      	b.n	81063cc <_svfiprintf_r+0x110>
 81063a2:	eba0 0308 	sub.w	r3, r0, r8
 81063a6:	fa09 f303 	lsl.w	r3, r9, r3
 81063aa:	4313      	orrs	r3, r2
 81063ac:	9304      	str	r3, [sp, #16]
 81063ae:	46a2      	mov	sl, r4
 81063b0:	e7d2      	b.n	8106358 <_svfiprintf_r+0x9c>
 81063b2:	9b03      	ldr	r3, [sp, #12]
 81063b4:	1d19      	adds	r1, r3, #4
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	9103      	str	r1, [sp, #12]
 81063ba:	2b00      	cmp	r3, #0
 81063bc:	bfbb      	ittet	lt
 81063be:	425b      	neglt	r3, r3
 81063c0:	f042 0202 	orrlt.w	r2, r2, #2
 81063c4:	9307      	strge	r3, [sp, #28]
 81063c6:	9307      	strlt	r3, [sp, #28]
 81063c8:	bfb8      	it	lt
 81063ca:	9204      	strlt	r2, [sp, #16]
 81063cc:	7823      	ldrb	r3, [r4, #0]
 81063ce:	2b2e      	cmp	r3, #46	; 0x2e
 81063d0:	d10c      	bne.n	81063ec <_svfiprintf_r+0x130>
 81063d2:	7863      	ldrb	r3, [r4, #1]
 81063d4:	2b2a      	cmp	r3, #42	; 0x2a
 81063d6:	d135      	bne.n	8106444 <_svfiprintf_r+0x188>
 81063d8:	9b03      	ldr	r3, [sp, #12]
 81063da:	1d1a      	adds	r2, r3, #4
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	9203      	str	r2, [sp, #12]
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	bfb8      	it	lt
 81063e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 81063e8:	3402      	adds	r4, #2
 81063ea:	9305      	str	r3, [sp, #20]
 81063ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 81064b8 <_svfiprintf_r+0x1fc>
 81063f0:	7821      	ldrb	r1, [r4, #0]
 81063f2:	2203      	movs	r2, #3
 81063f4:	4650      	mov	r0, sl
 81063f6:	f7f9 ff8b 	bl	8100310 <memchr>
 81063fa:	b140      	cbz	r0, 810640e <_svfiprintf_r+0x152>
 81063fc:	2340      	movs	r3, #64	; 0x40
 81063fe:	eba0 000a 	sub.w	r0, r0, sl
 8106402:	fa03 f000 	lsl.w	r0, r3, r0
 8106406:	9b04      	ldr	r3, [sp, #16]
 8106408:	4303      	orrs	r3, r0
 810640a:	3401      	adds	r4, #1
 810640c:	9304      	str	r3, [sp, #16]
 810640e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106412:	4826      	ldr	r0, [pc, #152]	; (81064ac <_svfiprintf_r+0x1f0>)
 8106414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106418:	2206      	movs	r2, #6
 810641a:	f7f9 ff79 	bl	8100310 <memchr>
 810641e:	2800      	cmp	r0, #0
 8106420:	d038      	beq.n	8106494 <_svfiprintf_r+0x1d8>
 8106422:	4b23      	ldr	r3, [pc, #140]	; (81064b0 <_svfiprintf_r+0x1f4>)
 8106424:	bb1b      	cbnz	r3, 810646e <_svfiprintf_r+0x1b2>
 8106426:	9b03      	ldr	r3, [sp, #12]
 8106428:	3307      	adds	r3, #7
 810642a:	f023 0307 	bic.w	r3, r3, #7
 810642e:	3308      	adds	r3, #8
 8106430:	9303      	str	r3, [sp, #12]
 8106432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106434:	4433      	add	r3, r6
 8106436:	9309      	str	r3, [sp, #36]	; 0x24
 8106438:	e767      	b.n	810630a <_svfiprintf_r+0x4e>
 810643a:	fb0c 3202 	mla	r2, ip, r2, r3
 810643e:	460c      	mov	r4, r1
 8106440:	2001      	movs	r0, #1
 8106442:	e7a5      	b.n	8106390 <_svfiprintf_r+0xd4>
 8106444:	2300      	movs	r3, #0
 8106446:	3401      	adds	r4, #1
 8106448:	9305      	str	r3, [sp, #20]
 810644a:	4619      	mov	r1, r3
 810644c:	f04f 0c0a 	mov.w	ip, #10
 8106450:	4620      	mov	r0, r4
 8106452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106456:	3a30      	subs	r2, #48	; 0x30
 8106458:	2a09      	cmp	r2, #9
 810645a:	d903      	bls.n	8106464 <_svfiprintf_r+0x1a8>
 810645c:	2b00      	cmp	r3, #0
 810645e:	d0c5      	beq.n	81063ec <_svfiprintf_r+0x130>
 8106460:	9105      	str	r1, [sp, #20]
 8106462:	e7c3      	b.n	81063ec <_svfiprintf_r+0x130>
 8106464:	fb0c 2101 	mla	r1, ip, r1, r2
 8106468:	4604      	mov	r4, r0
 810646a:	2301      	movs	r3, #1
 810646c:	e7f0      	b.n	8106450 <_svfiprintf_r+0x194>
 810646e:	ab03      	add	r3, sp, #12
 8106470:	9300      	str	r3, [sp, #0]
 8106472:	462a      	mov	r2, r5
 8106474:	4b0f      	ldr	r3, [pc, #60]	; (81064b4 <_svfiprintf_r+0x1f8>)
 8106476:	a904      	add	r1, sp, #16
 8106478:	4638      	mov	r0, r7
 810647a:	f3af 8000 	nop.w
 810647e:	1c42      	adds	r2, r0, #1
 8106480:	4606      	mov	r6, r0
 8106482:	d1d6      	bne.n	8106432 <_svfiprintf_r+0x176>
 8106484:	89ab      	ldrh	r3, [r5, #12]
 8106486:	065b      	lsls	r3, r3, #25
 8106488:	f53f af2c 	bmi.w	81062e4 <_svfiprintf_r+0x28>
 810648c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810648e:	b01d      	add	sp, #116	; 0x74
 8106490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106494:	ab03      	add	r3, sp, #12
 8106496:	9300      	str	r3, [sp, #0]
 8106498:	462a      	mov	r2, r5
 810649a:	4b06      	ldr	r3, [pc, #24]	; (81064b4 <_svfiprintf_r+0x1f8>)
 810649c:	a904      	add	r1, sp, #16
 810649e:	4638      	mov	r0, r7
 81064a0:	f000 f87a 	bl	8106598 <_printf_i>
 81064a4:	e7eb      	b.n	810647e <_svfiprintf_r+0x1c2>
 81064a6:	bf00      	nop
 81064a8:	081071e4 	.word	0x081071e4
 81064ac:	081071ee 	.word	0x081071ee
 81064b0:	00000000 	.word	0x00000000
 81064b4:	08106207 	.word	0x08106207
 81064b8:	081071ea 	.word	0x081071ea

081064bc <_printf_common>:
 81064bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81064c0:	4616      	mov	r6, r2
 81064c2:	4699      	mov	r9, r3
 81064c4:	688a      	ldr	r2, [r1, #8]
 81064c6:	690b      	ldr	r3, [r1, #16]
 81064c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81064cc:	4293      	cmp	r3, r2
 81064ce:	bfb8      	it	lt
 81064d0:	4613      	movlt	r3, r2
 81064d2:	6033      	str	r3, [r6, #0]
 81064d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81064d8:	4607      	mov	r7, r0
 81064da:	460c      	mov	r4, r1
 81064dc:	b10a      	cbz	r2, 81064e2 <_printf_common+0x26>
 81064de:	3301      	adds	r3, #1
 81064e0:	6033      	str	r3, [r6, #0]
 81064e2:	6823      	ldr	r3, [r4, #0]
 81064e4:	0699      	lsls	r1, r3, #26
 81064e6:	bf42      	ittt	mi
 81064e8:	6833      	ldrmi	r3, [r6, #0]
 81064ea:	3302      	addmi	r3, #2
 81064ec:	6033      	strmi	r3, [r6, #0]
 81064ee:	6825      	ldr	r5, [r4, #0]
 81064f0:	f015 0506 	ands.w	r5, r5, #6
 81064f4:	d106      	bne.n	8106504 <_printf_common+0x48>
 81064f6:	f104 0a19 	add.w	sl, r4, #25
 81064fa:	68e3      	ldr	r3, [r4, #12]
 81064fc:	6832      	ldr	r2, [r6, #0]
 81064fe:	1a9b      	subs	r3, r3, r2
 8106500:	42ab      	cmp	r3, r5
 8106502:	dc26      	bgt.n	8106552 <_printf_common+0x96>
 8106504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106508:	1e13      	subs	r3, r2, #0
 810650a:	6822      	ldr	r2, [r4, #0]
 810650c:	bf18      	it	ne
 810650e:	2301      	movne	r3, #1
 8106510:	0692      	lsls	r2, r2, #26
 8106512:	d42b      	bmi.n	810656c <_printf_common+0xb0>
 8106514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106518:	4649      	mov	r1, r9
 810651a:	4638      	mov	r0, r7
 810651c:	47c0      	blx	r8
 810651e:	3001      	adds	r0, #1
 8106520:	d01e      	beq.n	8106560 <_printf_common+0xa4>
 8106522:	6823      	ldr	r3, [r4, #0]
 8106524:	68e5      	ldr	r5, [r4, #12]
 8106526:	6832      	ldr	r2, [r6, #0]
 8106528:	f003 0306 	and.w	r3, r3, #6
 810652c:	2b04      	cmp	r3, #4
 810652e:	bf08      	it	eq
 8106530:	1aad      	subeq	r5, r5, r2
 8106532:	68a3      	ldr	r3, [r4, #8]
 8106534:	6922      	ldr	r2, [r4, #16]
 8106536:	bf0c      	ite	eq
 8106538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810653c:	2500      	movne	r5, #0
 810653e:	4293      	cmp	r3, r2
 8106540:	bfc4      	itt	gt
 8106542:	1a9b      	subgt	r3, r3, r2
 8106544:	18ed      	addgt	r5, r5, r3
 8106546:	2600      	movs	r6, #0
 8106548:	341a      	adds	r4, #26
 810654a:	42b5      	cmp	r5, r6
 810654c:	d11a      	bne.n	8106584 <_printf_common+0xc8>
 810654e:	2000      	movs	r0, #0
 8106550:	e008      	b.n	8106564 <_printf_common+0xa8>
 8106552:	2301      	movs	r3, #1
 8106554:	4652      	mov	r2, sl
 8106556:	4649      	mov	r1, r9
 8106558:	4638      	mov	r0, r7
 810655a:	47c0      	blx	r8
 810655c:	3001      	adds	r0, #1
 810655e:	d103      	bne.n	8106568 <_printf_common+0xac>
 8106560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8106564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106568:	3501      	adds	r5, #1
 810656a:	e7c6      	b.n	81064fa <_printf_common+0x3e>
 810656c:	18e1      	adds	r1, r4, r3
 810656e:	1c5a      	adds	r2, r3, #1
 8106570:	2030      	movs	r0, #48	; 0x30
 8106572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8106576:	4422      	add	r2, r4
 8106578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810657c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106580:	3302      	adds	r3, #2
 8106582:	e7c7      	b.n	8106514 <_printf_common+0x58>
 8106584:	2301      	movs	r3, #1
 8106586:	4622      	mov	r2, r4
 8106588:	4649      	mov	r1, r9
 810658a:	4638      	mov	r0, r7
 810658c:	47c0      	blx	r8
 810658e:	3001      	adds	r0, #1
 8106590:	d0e6      	beq.n	8106560 <_printf_common+0xa4>
 8106592:	3601      	adds	r6, #1
 8106594:	e7d9      	b.n	810654a <_printf_common+0x8e>
	...

08106598 <_printf_i>:
 8106598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810659c:	460c      	mov	r4, r1
 810659e:	4691      	mov	r9, r2
 81065a0:	7e27      	ldrb	r7, [r4, #24]
 81065a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 81065a4:	2f78      	cmp	r7, #120	; 0x78
 81065a6:	4680      	mov	r8, r0
 81065a8:	469a      	mov	sl, r3
 81065aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81065ae:	d807      	bhi.n	81065c0 <_printf_i+0x28>
 81065b0:	2f62      	cmp	r7, #98	; 0x62
 81065b2:	d80a      	bhi.n	81065ca <_printf_i+0x32>
 81065b4:	2f00      	cmp	r7, #0
 81065b6:	f000 80d8 	beq.w	810676a <_printf_i+0x1d2>
 81065ba:	2f58      	cmp	r7, #88	; 0x58
 81065bc:	f000 80a3 	beq.w	8106706 <_printf_i+0x16e>
 81065c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81065c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81065c8:	e03a      	b.n	8106640 <_printf_i+0xa8>
 81065ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81065ce:	2b15      	cmp	r3, #21
 81065d0:	d8f6      	bhi.n	81065c0 <_printf_i+0x28>
 81065d2:	a001      	add	r0, pc, #4	; (adr r0, 81065d8 <_printf_i+0x40>)
 81065d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81065d8:	08106631 	.word	0x08106631
 81065dc:	08106645 	.word	0x08106645
 81065e0:	081065c1 	.word	0x081065c1
 81065e4:	081065c1 	.word	0x081065c1
 81065e8:	081065c1 	.word	0x081065c1
 81065ec:	081065c1 	.word	0x081065c1
 81065f0:	08106645 	.word	0x08106645
 81065f4:	081065c1 	.word	0x081065c1
 81065f8:	081065c1 	.word	0x081065c1
 81065fc:	081065c1 	.word	0x081065c1
 8106600:	081065c1 	.word	0x081065c1
 8106604:	08106751 	.word	0x08106751
 8106608:	08106675 	.word	0x08106675
 810660c:	08106733 	.word	0x08106733
 8106610:	081065c1 	.word	0x081065c1
 8106614:	081065c1 	.word	0x081065c1
 8106618:	08106773 	.word	0x08106773
 810661c:	081065c1 	.word	0x081065c1
 8106620:	08106675 	.word	0x08106675
 8106624:	081065c1 	.word	0x081065c1
 8106628:	081065c1 	.word	0x081065c1
 810662c:	0810673b 	.word	0x0810673b
 8106630:	680b      	ldr	r3, [r1, #0]
 8106632:	1d1a      	adds	r2, r3, #4
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	600a      	str	r2, [r1, #0]
 8106638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810663c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106640:	2301      	movs	r3, #1
 8106642:	e0a3      	b.n	810678c <_printf_i+0x1f4>
 8106644:	6825      	ldr	r5, [r4, #0]
 8106646:	6808      	ldr	r0, [r1, #0]
 8106648:	062e      	lsls	r6, r5, #24
 810664a:	f100 0304 	add.w	r3, r0, #4
 810664e:	d50a      	bpl.n	8106666 <_printf_i+0xce>
 8106650:	6805      	ldr	r5, [r0, #0]
 8106652:	600b      	str	r3, [r1, #0]
 8106654:	2d00      	cmp	r5, #0
 8106656:	da03      	bge.n	8106660 <_printf_i+0xc8>
 8106658:	232d      	movs	r3, #45	; 0x2d
 810665a:	426d      	negs	r5, r5
 810665c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106660:	485e      	ldr	r0, [pc, #376]	; (81067dc <_printf_i+0x244>)
 8106662:	230a      	movs	r3, #10
 8106664:	e019      	b.n	810669a <_printf_i+0x102>
 8106666:	f015 0f40 	tst.w	r5, #64	; 0x40
 810666a:	6805      	ldr	r5, [r0, #0]
 810666c:	600b      	str	r3, [r1, #0]
 810666e:	bf18      	it	ne
 8106670:	b22d      	sxthne	r5, r5
 8106672:	e7ef      	b.n	8106654 <_printf_i+0xbc>
 8106674:	680b      	ldr	r3, [r1, #0]
 8106676:	6825      	ldr	r5, [r4, #0]
 8106678:	1d18      	adds	r0, r3, #4
 810667a:	6008      	str	r0, [r1, #0]
 810667c:	0628      	lsls	r0, r5, #24
 810667e:	d501      	bpl.n	8106684 <_printf_i+0xec>
 8106680:	681d      	ldr	r5, [r3, #0]
 8106682:	e002      	b.n	810668a <_printf_i+0xf2>
 8106684:	0669      	lsls	r1, r5, #25
 8106686:	d5fb      	bpl.n	8106680 <_printf_i+0xe8>
 8106688:	881d      	ldrh	r5, [r3, #0]
 810668a:	4854      	ldr	r0, [pc, #336]	; (81067dc <_printf_i+0x244>)
 810668c:	2f6f      	cmp	r7, #111	; 0x6f
 810668e:	bf0c      	ite	eq
 8106690:	2308      	moveq	r3, #8
 8106692:	230a      	movne	r3, #10
 8106694:	2100      	movs	r1, #0
 8106696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810669a:	6866      	ldr	r6, [r4, #4]
 810669c:	60a6      	str	r6, [r4, #8]
 810669e:	2e00      	cmp	r6, #0
 81066a0:	bfa2      	ittt	ge
 81066a2:	6821      	ldrge	r1, [r4, #0]
 81066a4:	f021 0104 	bicge.w	r1, r1, #4
 81066a8:	6021      	strge	r1, [r4, #0]
 81066aa:	b90d      	cbnz	r5, 81066b0 <_printf_i+0x118>
 81066ac:	2e00      	cmp	r6, #0
 81066ae:	d04d      	beq.n	810674c <_printf_i+0x1b4>
 81066b0:	4616      	mov	r6, r2
 81066b2:	fbb5 f1f3 	udiv	r1, r5, r3
 81066b6:	fb03 5711 	mls	r7, r3, r1, r5
 81066ba:	5dc7      	ldrb	r7, [r0, r7]
 81066bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81066c0:	462f      	mov	r7, r5
 81066c2:	42bb      	cmp	r3, r7
 81066c4:	460d      	mov	r5, r1
 81066c6:	d9f4      	bls.n	81066b2 <_printf_i+0x11a>
 81066c8:	2b08      	cmp	r3, #8
 81066ca:	d10b      	bne.n	81066e4 <_printf_i+0x14c>
 81066cc:	6823      	ldr	r3, [r4, #0]
 81066ce:	07df      	lsls	r7, r3, #31
 81066d0:	d508      	bpl.n	81066e4 <_printf_i+0x14c>
 81066d2:	6923      	ldr	r3, [r4, #16]
 81066d4:	6861      	ldr	r1, [r4, #4]
 81066d6:	4299      	cmp	r1, r3
 81066d8:	bfde      	ittt	le
 81066da:	2330      	movle	r3, #48	; 0x30
 81066dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 81066e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 81066e4:	1b92      	subs	r2, r2, r6
 81066e6:	6122      	str	r2, [r4, #16]
 81066e8:	f8cd a000 	str.w	sl, [sp]
 81066ec:	464b      	mov	r3, r9
 81066ee:	aa03      	add	r2, sp, #12
 81066f0:	4621      	mov	r1, r4
 81066f2:	4640      	mov	r0, r8
 81066f4:	f7ff fee2 	bl	81064bc <_printf_common>
 81066f8:	3001      	adds	r0, #1
 81066fa:	d14c      	bne.n	8106796 <_printf_i+0x1fe>
 81066fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8106700:	b004      	add	sp, #16
 8106702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106706:	4835      	ldr	r0, [pc, #212]	; (81067dc <_printf_i+0x244>)
 8106708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810670c:	6823      	ldr	r3, [r4, #0]
 810670e:	680e      	ldr	r6, [r1, #0]
 8106710:	061f      	lsls	r7, r3, #24
 8106712:	f856 5b04 	ldr.w	r5, [r6], #4
 8106716:	600e      	str	r6, [r1, #0]
 8106718:	d514      	bpl.n	8106744 <_printf_i+0x1ac>
 810671a:	07d9      	lsls	r1, r3, #31
 810671c:	bf44      	itt	mi
 810671e:	f043 0320 	orrmi.w	r3, r3, #32
 8106722:	6023      	strmi	r3, [r4, #0]
 8106724:	b91d      	cbnz	r5, 810672e <_printf_i+0x196>
 8106726:	6823      	ldr	r3, [r4, #0]
 8106728:	f023 0320 	bic.w	r3, r3, #32
 810672c:	6023      	str	r3, [r4, #0]
 810672e:	2310      	movs	r3, #16
 8106730:	e7b0      	b.n	8106694 <_printf_i+0xfc>
 8106732:	6823      	ldr	r3, [r4, #0]
 8106734:	f043 0320 	orr.w	r3, r3, #32
 8106738:	6023      	str	r3, [r4, #0]
 810673a:	2378      	movs	r3, #120	; 0x78
 810673c:	4828      	ldr	r0, [pc, #160]	; (81067e0 <_printf_i+0x248>)
 810673e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106742:	e7e3      	b.n	810670c <_printf_i+0x174>
 8106744:	065e      	lsls	r6, r3, #25
 8106746:	bf48      	it	mi
 8106748:	b2ad      	uxthmi	r5, r5
 810674a:	e7e6      	b.n	810671a <_printf_i+0x182>
 810674c:	4616      	mov	r6, r2
 810674e:	e7bb      	b.n	81066c8 <_printf_i+0x130>
 8106750:	680b      	ldr	r3, [r1, #0]
 8106752:	6826      	ldr	r6, [r4, #0]
 8106754:	6960      	ldr	r0, [r4, #20]
 8106756:	1d1d      	adds	r5, r3, #4
 8106758:	600d      	str	r5, [r1, #0]
 810675a:	0635      	lsls	r5, r6, #24
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	d501      	bpl.n	8106764 <_printf_i+0x1cc>
 8106760:	6018      	str	r0, [r3, #0]
 8106762:	e002      	b.n	810676a <_printf_i+0x1d2>
 8106764:	0671      	lsls	r1, r6, #25
 8106766:	d5fb      	bpl.n	8106760 <_printf_i+0x1c8>
 8106768:	8018      	strh	r0, [r3, #0]
 810676a:	2300      	movs	r3, #0
 810676c:	6123      	str	r3, [r4, #16]
 810676e:	4616      	mov	r6, r2
 8106770:	e7ba      	b.n	81066e8 <_printf_i+0x150>
 8106772:	680b      	ldr	r3, [r1, #0]
 8106774:	1d1a      	adds	r2, r3, #4
 8106776:	600a      	str	r2, [r1, #0]
 8106778:	681e      	ldr	r6, [r3, #0]
 810677a:	6862      	ldr	r2, [r4, #4]
 810677c:	2100      	movs	r1, #0
 810677e:	4630      	mov	r0, r6
 8106780:	f7f9 fdc6 	bl	8100310 <memchr>
 8106784:	b108      	cbz	r0, 810678a <_printf_i+0x1f2>
 8106786:	1b80      	subs	r0, r0, r6
 8106788:	6060      	str	r0, [r4, #4]
 810678a:	6863      	ldr	r3, [r4, #4]
 810678c:	6123      	str	r3, [r4, #16]
 810678e:	2300      	movs	r3, #0
 8106790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106794:	e7a8      	b.n	81066e8 <_printf_i+0x150>
 8106796:	6923      	ldr	r3, [r4, #16]
 8106798:	4632      	mov	r2, r6
 810679a:	4649      	mov	r1, r9
 810679c:	4640      	mov	r0, r8
 810679e:	47d0      	blx	sl
 81067a0:	3001      	adds	r0, #1
 81067a2:	d0ab      	beq.n	81066fc <_printf_i+0x164>
 81067a4:	6823      	ldr	r3, [r4, #0]
 81067a6:	079b      	lsls	r3, r3, #30
 81067a8:	d413      	bmi.n	81067d2 <_printf_i+0x23a>
 81067aa:	68e0      	ldr	r0, [r4, #12]
 81067ac:	9b03      	ldr	r3, [sp, #12]
 81067ae:	4298      	cmp	r0, r3
 81067b0:	bfb8      	it	lt
 81067b2:	4618      	movlt	r0, r3
 81067b4:	e7a4      	b.n	8106700 <_printf_i+0x168>
 81067b6:	2301      	movs	r3, #1
 81067b8:	4632      	mov	r2, r6
 81067ba:	4649      	mov	r1, r9
 81067bc:	4640      	mov	r0, r8
 81067be:	47d0      	blx	sl
 81067c0:	3001      	adds	r0, #1
 81067c2:	d09b      	beq.n	81066fc <_printf_i+0x164>
 81067c4:	3501      	adds	r5, #1
 81067c6:	68e3      	ldr	r3, [r4, #12]
 81067c8:	9903      	ldr	r1, [sp, #12]
 81067ca:	1a5b      	subs	r3, r3, r1
 81067cc:	42ab      	cmp	r3, r5
 81067ce:	dcf2      	bgt.n	81067b6 <_printf_i+0x21e>
 81067d0:	e7eb      	b.n	81067aa <_printf_i+0x212>
 81067d2:	2500      	movs	r5, #0
 81067d4:	f104 0619 	add.w	r6, r4, #25
 81067d8:	e7f5      	b.n	81067c6 <_printf_i+0x22e>
 81067da:	bf00      	nop
 81067dc:	081071f5 	.word	0x081071f5
 81067e0:	08107206 	.word	0x08107206

081067e4 <memmove>:
 81067e4:	4288      	cmp	r0, r1
 81067e6:	b510      	push	{r4, lr}
 81067e8:	eb01 0402 	add.w	r4, r1, r2
 81067ec:	d902      	bls.n	81067f4 <memmove+0x10>
 81067ee:	4284      	cmp	r4, r0
 81067f0:	4623      	mov	r3, r4
 81067f2:	d807      	bhi.n	8106804 <memmove+0x20>
 81067f4:	1e43      	subs	r3, r0, #1
 81067f6:	42a1      	cmp	r1, r4
 81067f8:	d008      	beq.n	810680c <memmove+0x28>
 81067fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 81067fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8106802:	e7f8      	b.n	81067f6 <memmove+0x12>
 8106804:	4402      	add	r2, r0
 8106806:	4601      	mov	r1, r0
 8106808:	428a      	cmp	r2, r1
 810680a:	d100      	bne.n	810680e <memmove+0x2a>
 810680c:	bd10      	pop	{r4, pc}
 810680e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8106812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8106816:	e7f7      	b.n	8106808 <memmove+0x24>

08106818 <_free_r>:
 8106818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810681a:	2900      	cmp	r1, #0
 810681c:	d048      	beq.n	81068b0 <_free_r+0x98>
 810681e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106822:	9001      	str	r0, [sp, #4]
 8106824:	2b00      	cmp	r3, #0
 8106826:	f1a1 0404 	sub.w	r4, r1, #4
 810682a:	bfb8      	it	lt
 810682c:	18e4      	addlt	r4, r4, r3
 810682e:	f000 f8d3 	bl	81069d8 <__malloc_lock>
 8106832:	4a20      	ldr	r2, [pc, #128]	; (81068b4 <_free_r+0x9c>)
 8106834:	9801      	ldr	r0, [sp, #4]
 8106836:	6813      	ldr	r3, [r2, #0]
 8106838:	4615      	mov	r5, r2
 810683a:	b933      	cbnz	r3, 810684a <_free_r+0x32>
 810683c:	6063      	str	r3, [r4, #4]
 810683e:	6014      	str	r4, [r2, #0]
 8106840:	b003      	add	sp, #12
 8106842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106846:	f000 b8cd 	b.w	81069e4 <__malloc_unlock>
 810684a:	42a3      	cmp	r3, r4
 810684c:	d90b      	bls.n	8106866 <_free_r+0x4e>
 810684e:	6821      	ldr	r1, [r4, #0]
 8106850:	1862      	adds	r2, r4, r1
 8106852:	4293      	cmp	r3, r2
 8106854:	bf04      	itt	eq
 8106856:	681a      	ldreq	r2, [r3, #0]
 8106858:	685b      	ldreq	r3, [r3, #4]
 810685a:	6063      	str	r3, [r4, #4]
 810685c:	bf04      	itt	eq
 810685e:	1852      	addeq	r2, r2, r1
 8106860:	6022      	streq	r2, [r4, #0]
 8106862:	602c      	str	r4, [r5, #0]
 8106864:	e7ec      	b.n	8106840 <_free_r+0x28>
 8106866:	461a      	mov	r2, r3
 8106868:	685b      	ldr	r3, [r3, #4]
 810686a:	b10b      	cbz	r3, 8106870 <_free_r+0x58>
 810686c:	42a3      	cmp	r3, r4
 810686e:	d9fa      	bls.n	8106866 <_free_r+0x4e>
 8106870:	6811      	ldr	r1, [r2, #0]
 8106872:	1855      	adds	r5, r2, r1
 8106874:	42a5      	cmp	r5, r4
 8106876:	d10b      	bne.n	8106890 <_free_r+0x78>
 8106878:	6824      	ldr	r4, [r4, #0]
 810687a:	4421      	add	r1, r4
 810687c:	1854      	adds	r4, r2, r1
 810687e:	42a3      	cmp	r3, r4
 8106880:	6011      	str	r1, [r2, #0]
 8106882:	d1dd      	bne.n	8106840 <_free_r+0x28>
 8106884:	681c      	ldr	r4, [r3, #0]
 8106886:	685b      	ldr	r3, [r3, #4]
 8106888:	6053      	str	r3, [r2, #4]
 810688a:	4421      	add	r1, r4
 810688c:	6011      	str	r1, [r2, #0]
 810688e:	e7d7      	b.n	8106840 <_free_r+0x28>
 8106890:	d902      	bls.n	8106898 <_free_r+0x80>
 8106892:	230c      	movs	r3, #12
 8106894:	6003      	str	r3, [r0, #0]
 8106896:	e7d3      	b.n	8106840 <_free_r+0x28>
 8106898:	6825      	ldr	r5, [r4, #0]
 810689a:	1961      	adds	r1, r4, r5
 810689c:	428b      	cmp	r3, r1
 810689e:	bf04      	itt	eq
 81068a0:	6819      	ldreq	r1, [r3, #0]
 81068a2:	685b      	ldreq	r3, [r3, #4]
 81068a4:	6063      	str	r3, [r4, #4]
 81068a6:	bf04      	itt	eq
 81068a8:	1949      	addeq	r1, r1, r5
 81068aa:	6021      	streq	r1, [r4, #0]
 81068ac:	6054      	str	r4, [r2, #4]
 81068ae:	e7c7      	b.n	8106840 <_free_r+0x28>
 81068b0:	b003      	add	sp, #12
 81068b2:	bd30      	pop	{r4, r5, pc}
 81068b4:	100008bc 	.word	0x100008bc

081068b8 <_malloc_r>:
 81068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81068ba:	1ccd      	adds	r5, r1, #3
 81068bc:	f025 0503 	bic.w	r5, r5, #3
 81068c0:	3508      	adds	r5, #8
 81068c2:	2d0c      	cmp	r5, #12
 81068c4:	bf38      	it	cc
 81068c6:	250c      	movcc	r5, #12
 81068c8:	2d00      	cmp	r5, #0
 81068ca:	4606      	mov	r6, r0
 81068cc:	db01      	blt.n	81068d2 <_malloc_r+0x1a>
 81068ce:	42a9      	cmp	r1, r5
 81068d0:	d903      	bls.n	81068da <_malloc_r+0x22>
 81068d2:	230c      	movs	r3, #12
 81068d4:	6033      	str	r3, [r6, #0]
 81068d6:	2000      	movs	r0, #0
 81068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81068da:	f000 f87d 	bl	81069d8 <__malloc_lock>
 81068de:	4921      	ldr	r1, [pc, #132]	; (8106964 <_malloc_r+0xac>)
 81068e0:	680a      	ldr	r2, [r1, #0]
 81068e2:	4614      	mov	r4, r2
 81068e4:	b99c      	cbnz	r4, 810690e <_malloc_r+0x56>
 81068e6:	4f20      	ldr	r7, [pc, #128]	; (8106968 <_malloc_r+0xb0>)
 81068e8:	683b      	ldr	r3, [r7, #0]
 81068ea:	b923      	cbnz	r3, 81068f6 <_malloc_r+0x3e>
 81068ec:	4621      	mov	r1, r4
 81068ee:	4630      	mov	r0, r6
 81068f0:	f000 f862 	bl	81069b8 <_sbrk_r>
 81068f4:	6038      	str	r0, [r7, #0]
 81068f6:	4629      	mov	r1, r5
 81068f8:	4630      	mov	r0, r6
 81068fa:	f000 f85d 	bl	81069b8 <_sbrk_r>
 81068fe:	1c43      	adds	r3, r0, #1
 8106900:	d123      	bne.n	810694a <_malloc_r+0x92>
 8106902:	230c      	movs	r3, #12
 8106904:	6033      	str	r3, [r6, #0]
 8106906:	4630      	mov	r0, r6
 8106908:	f000 f86c 	bl	81069e4 <__malloc_unlock>
 810690c:	e7e3      	b.n	81068d6 <_malloc_r+0x1e>
 810690e:	6823      	ldr	r3, [r4, #0]
 8106910:	1b5b      	subs	r3, r3, r5
 8106912:	d417      	bmi.n	8106944 <_malloc_r+0x8c>
 8106914:	2b0b      	cmp	r3, #11
 8106916:	d903      	bls.n	8106920 <_malloc_r+0x68>
 8106918:	6023      	str	r3, [r4, #0]
 810691a:	441c      	add	r4, r3
 810691c:	6025      	str	r5, [r4, #0]
 810691e:	e004      	b.n	810692a <_malloc_r+0x72>
 8106920:	6863      	ldr	r3, [r4, #4]
 8106922:	42a2      	cmp	r2, r4
 8106924:	bf0c      	ite	eq
 8106926:	600b      	streq	r3, [r1, #0]
 8106928:	6053      	strne	r3, [r2, #4]
 810692a:	4630      	mov	r0, r6
 810692c:	f000 f85a 	bl	81069e4 <__malloc_unlock>
 8106930:	f104 000b 	add.w	r0, r4, #11
 8106934:	1d23      	adds	r3, r4, #4
 8106936:	f020 0007 	bic.w	r0, r0, #7
 810693a:	1ac2      	subs	r2, r0, r3
 810693c:	d0cc      	beq.n	81068d8 <_malloc_r+0x20>
 810693e:	1a1b      	subs	r3, r3, r0
 8106940:	50a3      	str	r3, [r4, r2]
 8106942:	e7c9      	b.n	81068d8 <_malloc_r+0x20>
 8106944:	4622      	mov	r2, r4
 8106946:	6864      	ldr	r4, [r4, #4]
 8106948:	e7cc      	b.n	81068e4 <_malloc_r+0x2c>
 810694a:	1cc4      	adds	r4, r0, #3
 810694c:	f024 0403 	bic.w	r4, r4, #3
 8106950:	42a0      	cmp	r0, r4
 8106952:	d0e3      	beq.n	810691c <_malloc_r+0x64>
 8106954:	1a21      	subs	r1, r4, r0
 8106956:	4630      	mov	r0, r6
 8106958:	f000 f82e 	bl	81069b8 <_sbrk_r>
 810695c:	3001      	adds	r0, #1
 810695e:	d1dd      	bne.n	810691c <_malloc_r+0x64>
 8106960:	e7cf      	b.n	8106902 <_malloc_r+0x4a>
 8106962:	bf00      	nop
 8106964:	100008bc 	.word	0x100008bc
 8106968:	100008c0 	.word	0x100008c0

0810696c <_realloc_r>:
 810696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810696e:	4607      	mov	r7, r0
 8106970:	4614      	mov	r4, r2
 8106972:	460e      	mov	r6, r1
 8106974:	b921      	cbnz	r1, 8106980 <_realloc_r+0x14>
 8106976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810697a:	4611      	mov	r1, r2
 810697c:	f7ff bf9c 	b.w	81068b8 <_malloc_r>
 8106980:	b922      	cbnz	r2, 810698c <_realloc_r+0x20>
 8106982:	f7ff ff49 	bl	8106818 <_free_r>
 8106986:	4625      	mov	r5, r4
 8106988:	4628      	mov	r0, r5
 810698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810698c:	f000 f830 	bl	81069f0 <_malloc_usable_size_r>
 8106990:	42a0      	cmp	r0, r4
 8106992:	d20f      	bcs.n	81069b4 <_realloc_r+0x48>
 8106994:	4621      	mov	r1, r4
 8106996:	4638      	mov	r0, r7
 8106998:	f7ff ff8e 	bl	81068b8 <_malloc_r>
 810699c:	4605      	mov	r5, r0
 810699e:	2800      	cmp	r0, #0
 81069a0:	d0f2      	beq.n	8106988 <_realloc_r+0x1c>
 81069a2:	4631      	mov	r1, r6
 81069a4:	4622      	mov	r2, r4
 81069a6:	f7ff fbe9 	bl	810617c <memcpy>
 81069aa:	4631      	mov	r1, r6
 81069ac:	4638      	mov	r0, r7
 81069ae:	f7ff ff33 	bl	8106818 <_free_r>
 81069b2:	e7e9      	b.n	8106988 <_realloc_r+0x1c>
 81069b4:	4635      	mov	r5, r6
 81069b6:	e7e7      	b.n	8106988 <_realloc_r+0x1c>

081069b8 <_sbrk_r>:
 81069b8:	b538      	push	{r3, r4, r5, lr}
 81069ba:	4d06      	ldr	r5, [pc, #24]	; (81069d4 <_sbrk_r+0x1c>)
 81069bc:	2300      	movs	r3, #0
 81069be:	4604      	mov	r4, r0
 81069c0:	4608      	mov	r0, r1
 81069c2:	602b      	str	r3, [r5, #0]
 81069c4:	f7fa febe 	bl	8101744 <_sbrk>
 81069c8:	1c43      	adds	r3, r0, #1
 81069ca:	d102      	bne.n	81069d2 <_sbrk_r+0x1a>
 81069cc:	682b      	ldr	r3, [r5, #0]
 81069ce:	b103      	cbz	r3, 81069d2 <_sbrk_r+0x1a>
 81069d0:	6023      	str	r3, [r4, #0]
 81069d2:	bd38      	pop	{r3, r4, r5, pc}
 81069d4:	100009f8 	.word	0x100009f8

081069d8 <__malloc_lock>:
 81069d8:	4801      	ldr	r0, [pc, #4]	; (81069e0 <__malloc_lock+0x8>)
 81069da:	f000 b811 	b.w	8106a00 <__retarget_lock_acquire_recursive>
 81069de:	bf00      	nop
 81069e0:	10000a00 	.word	0x10000a00

081069e4 <__malloc_unlock>:
 81069e4:	4801      	ldr	r0, [pc, #4]	; (81069ec <__malloc_unlock+0x8>)
 81069e6:	f000 b80c 	b.w	8106a02 <__retarget_lock_release_recursive>
 81069ea:	bf00      	nop
 81069ec:	10000a00 	.word	0x10000a00

081069f0 <_malloc_usable_size_r>:
 81069f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81069f4:	1f18      	subs	r0, r3, #4
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	bfbc      	itt	lt
 81069fa:	580b      	ldrlt	r3, [r1, r0]
 81069fc:	18c0      	addlt	r0, r0, r3
 81069fe:	4770      	bx	lr

08106a00 <__retarget_lock_acquire_recursive>:
 8106a00:	4770      	bx	lr

08106a02 <__retarget_lock_release_recursive>:
 8106a02:	4770      	bx	lr

08106a04 <_init>:
 8106a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106a06:	bf00      	nop
 8106a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106a0a:	bc08      	pop	{r3}
 8106a0c:	469e      	mov	lr, r3
 8106a0e:	4770      	bx	lr

08106a10 <_fini>:
 8106a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106a12:	bf00      	nop
 8106a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106a16:	bc08      	pop	{r3}
 8106a18:	469e      	mov	lr, r3
 8106a1a:	4770      	bx	lr
