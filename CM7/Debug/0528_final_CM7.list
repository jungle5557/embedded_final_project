
0528_final_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800cf30  0800cf30  0001cf30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d464  0800d464  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d464  0800d464  0001d464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d46c  0800d46c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d46c  0800d46c  0001d46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d470  0800d470  0001d470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800d474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  240001e8  0800d658  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000470  0800d658  00020470  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002756e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003933  00000000  00000000  00047780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0004b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0004c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d0df  00000000  00000000  0004db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a539  00000000  00000000  0008abdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019a53e  00000000  00000000  000a5118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023f656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007134  00000000  00000000  0023f6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf18 	.word	0x0800cf18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800cf18 	.word	0x0800cf18

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemInit+0x104>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <SystemInit+0x104>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemInit+0x104>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemInit+0x104>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d807      	bhi.n	8000aac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <SystemInit+0x108>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <SystemInit+0x108>)
 8000aa6:	f043 0307 	orr.w	r3, r3, #7
 8000aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <SystemInit+0x10c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x10c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemInit+0x10c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0x10c>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <SystemInit+0x10c>)
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x110>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemInit+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemInit+0x108>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 030f 	bic.w	r3, r3, #15
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <SystemInit+0x108>)
 8000ae0:	f043 0307 	orr.w	r3, r3, #7
 8000ae4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemInit+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemInit+0x10c>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemInit+0x114>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemInit+0x10c>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemInit+0x118>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemInit+0x10c>)
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemInit+0x11c>)
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemInit+0x10c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <SystemInit+0x10c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <SystemInit+0x11c>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemInit+0x10c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SystemInit+0x10c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemInit+0x11c>)
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <SystemInit+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x10c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x10c>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x120>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x120>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x124>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0x128>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b52:	d202      	bcs.n	8000b5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x130>)
 8000b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x104>)
 8000b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	52002000 	.word	0x52002000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b84:	02020200 	.word	0x02020200
 8000b88:	01ff0000 	.word	0x01ff0000
 8000b8c:	01010280 	.word	0x01010280
 8000b90:	580000c0 	.word	0x580000c0
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float map(float val, float I_Min, float I_Max, float O_Min, float O_Max)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	ed87 0a05 	vstr	s0, [r7, #20]
 8000bae:	edc7 0a04 	vstr	s1, [r7, #16]
 8000bb2:	ed87 1a03 	vstr	s2, [r7, #12]
 8000bb6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000bba:	ed87 2a01 	vstr	s4, [r7, #4]
	return (((val-I_Min)*((O_Max-O_Min)/(I_Max-I_Min)))+O_Min);
 8000bbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bca:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bd2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8000bd6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000be2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b0b9      	sub	sp, #228	; 0xe4
 8000c04:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c0e:	bf00      	nop
 8000c10:	4b7a      	ldr	r3, [pc, #488]	; (8000dfc <main+0x1fc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <main+0x2a>
 8000c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dcf2      	bgt.n	8000c10 <main+0x10>
  if ( timeout < 0 )
 8000c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	da01      	bge.n	8000c36 <main+0x36>
  {
  Error_Handler();
 8000c32:	f000 fd67 	bl	8001704 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 ffc7 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f8fd 	bl	8000e38 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c3e:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <main+0x1fc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a6d      	ldr	r2, [pc, #436]	; (8000dfc <main+0x1fc>)
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b6b      	ldr	r3, [pc, #428]	; (8000dfc <main+0x1fc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f002 fdab 	bl	80037bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f002 fdc1 	bl	80037f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c76:	bf00      	nop
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <main+0x1fc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d106      	bne.n	8000c92 <main+0x92>
 8000c84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dcf2      	bgt.n	8000c78 <main+0x78>
if ( timeout < 0 )
 8000c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	da01      	bge.n	8000c9e <main+0x9e>
{
Error_Handler();
 8000c9a:	f000 fd33 	bl	8001704 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f000 fa89 	bl	80011b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ca2:	f000 f93d 	bl	8000f20 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000ca6:	f000 fa03 	bl	80010b0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000caa:	f000 f9b1 	bl	8001010 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000cae:	f000 fa35 	bl	800111c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000cb2:	4853      	ldr	r0, [pc, #332]	; (8000e00 <main+0x200>)
 8000cb4:	f005 ffa0 	bl	8006bf8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000cb8:	4852      	ldr	r0, [pc, #328]	; (8000e04 <main+0x204>)
 8000cba:	f006 f80d 	bl	8006cd8 <HAL_TIM_Base_Start_IT>
  int moisture_threshold = 50;
 8000cbe:	2332      	movs	r3, #50	; 0x32
 8000cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_UART_Transmit(&huart3,"Test start\r\n",10,100);
  HAL_UART_Transmit(&huart3,"#### Start Init####\r\n",21,100);
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2215      	movs	r2, #21
 8000cc8:	494f      	ldr	r1, [pc, #316]	; (8000e08 <main+0x208>)
 8000cca:	4850      	ldr	r0, [pc, #320]	; (8000e0c <main+0x20c>)
 8000ccc:	f006 fcf0 	bl	80076b0 <HAL_UART_Transmit>
//		 }
  while (1)
  {
	  // YL69 + relay
	  char adc_buffer[100];
	  HAL_ADC_Start(&hadc1);
 8000cd0:	484f      	ldr	r0, [pc, #316]	; (8000e10 <main+0x210>)
 8000cd2:	f001 fb9d 	bl	8002410 <HAL_ADC_Start>

	  uint32_t readvalue;

	  readvalue = HAL_ADC_GetValue(&hadc1);
 8000cd6:	484e      	ldr	r0, [pc, #312]	; (8000e10 <main+0x210>)
 8000cd8:	f001 fc64 	bl	80025a4 <HAL_ADC_GetValue>
 8000cdc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	  readvalue = map(readvalue,150,255,100,0);
 8000ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cec:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8000e14 <main+0x214>
 8000cf0:	eddf 1a49 	vldr	s3, [pc, #292]	; 8000e18 <main+0x218>
 8000cf4:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8000e1c <main+0x21c>
 8000cf8:	eddf 0a49 	vldr	s1, [pc, #292]	; 8000e20 <main+0x220>
 8000cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000d00:	f7ff ff50 	bl	8000ba4 <map>
 8000d04:	eef0 7a40 	vmov.f32	s15, s0
 8000d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d0c:	ee17 3a90 	vmov	r3, s15
 8000d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  sprintf(adc_buffer,"Moisture:%d\r\n",readvalue);
 8000d14:	463b      	mov	r3, r7
 8000d16:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000d1a:	4942      	ldr	r1, [pc, #264]	; (8000e24 <main+0x224>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f008 fbf3 	bl	8009508 <siprintf>
	  HAL_UART_Transmit(&huart3,adc_buffer,strlen(adc_buffer),1000);
 8000d22:	463b      	mov	r3, r7
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fadb 	bl	80002e0 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d34:	4835      	ldr	r0, [pc, #212]	; (8000e0c <main+0x20c>)
 8000d36:	f006 fcbb 	bl	80076b0 <HAL_UART_Transmit>


	  if (readvalue<=moisture_threshold)
 8000d3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000d3e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d805      	bhi.n	8000d52 <main+0x152>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	4837      	ldr	r0, [pc, #220]	; (8000e28 <main+0x228>)
 8000d4c:	f002 fce0 	bl	8003710 <HAL_GPIO_WritePin>
 8000d50:	e004      	b.n	8000d5c <main+0x15c>
	  } else {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	4834      	ldr	r0, [pc, #208]	; (8000e28 <main+0x228>)
 8000d58:	f002 fcda 	bl	8003710 <HAL_GPIO_WritePin>
	  }




	  if(HAL_HSEM_Take(9, 0) == HAL_OK){
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2009      	movs	r0, #9
 8000d60:	f002 fd0a 	bl	8003778 <HAL_HSEM_Take>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d142      	bne.n	8000df0 <main+0x1f0>
		  char test_buffer[100];
		  shared_ptr->r = (uint8_t) dat_v[2]%256;
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <main+0x22c>)
 8000d6c:	889a      	ldrh	r2, [r3, #4]
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <main+0x230>)
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	715a      	strb	r2, [r3, #5]
		  shared_ptr->g = (uint8_t) dat_v[0]%256;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <main+0x22c>)
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <main+0x230>)
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	719a      	strb	r2, [r3, #6]
		  shared_ptr->b = (uint8_t) dat_v[1]%256;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <main+0x22c>)
 8000d80:	885a      	ldrh	r2, [r3, #2]
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <main+0x230>)
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	71da      	strb	r2, [r3, #7]
		  //shared_ptr->soil = readvalue;
		  shared_ptr->soil = (uint8_t) readvalue;
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <main+0x230>)
 8000d8a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	721a      	strb	r2, [r3, #8]
		  shared_ptr->fan_on = 1;
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <main+0x230>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
		  shared_ptr->light_on = 0;
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <main+0x230>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	705a      	strb	r2, [r3, #1]
		  shared_ptr->water_on = 1;
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <main+0x230>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	709a      	strb	r2, [r3, #2]
		  sprintf(test_buffer,"Write r: %d, g: %d b: %d\r\n",dat_v[2]%256,dat_v[0]%256,dat_v[1]%256,readvalue);
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <main+0x22c>)
 8000da6:	889b      	ldrh	r3, [r3, #4]
 8000da8:	b2d9      	uxtb	r1, r3
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <main+0x22c>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	b2dc      	uxtb	r4, r3
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <main+0x22c>)
 8000db2:	885b      	ldrh	r3, [r3, #2]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000dba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	491b      	ldr	r1, [pc, #108]	; (8000e34 <main+0x234>)
 8000dc8:	f008 fb9e 	bl	8009508 <siprintf>

		  HAL_UART_Transmit(&huart3,test_buffer,strlen(test_buffer),1000);
 8000dcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa85 	bl	80002e0 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <main+0x20c>)
 8000de4:	f006 fc64 	bl	80076b0 <HAL_UART_Transmit>
		  HAL_HSEM_Release(9, 0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2009      	movs	r0, #9
 8000dec:	f002 fd00 	bl	80037f0 <HAL_HSEM_Release>
	  }




	  HAL_Delay(3000);
 8000df0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000df4:	f000 ff7a 	bl	8001cec <HAL_Delay>
  {
 8000df8:	e76a      	b.n	8000cd0 <main+0xd0>
 8000dfa:	bf00      	nop
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	24000384 	.word	0x24000384
 8000e04:	240002a8 	.word	0x240002a8
 8000e08:	0800cf30 	.word	0x0800cf30
 8000e0c:	24000214 	.word	0x24000214
 8000e10:	240002f8 	.word	0x240002f8
 8000e14:	00000000 	.word	0x00000000
 8000e18:	42c80000 	.word	0x42c80000
 8000e1c:	437f0000 	.word	0x437f0000
 8000e20:	43160000 	.word	0x43160000
 8000e24:	0800cf48 	.word	0x0800cf48
 8000e28:	58020400 	.word	0x58020400
 8000e2c:	24000360 	.word	0x24000360
 8000e30:	38001000 	.word	0x38001000
 8000e34:	0800cf58 	.word	0x0800cf58

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09c      	sub	sp, #112	; 0x70
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fd0a 	bl	8008860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2220      	movs	r2, #32
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fd04 	bl	8008860 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e58:	2004      	movs	r0, #4
 8000e5a:	f002 fcdd 	bl	8003818 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e94:	bf00      	nop
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ea2:	d1f8      	bne.n	8000e96 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <SystemClock_Config+0xe4>)
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <SystemClock_Config+0xe4>)
 8000eaa:	f023 0303 	bic.w	r3, r3, #3
 8000eae:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 fcff 	bl	80038cc <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ed4:	f000 fc16 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	233f      	movs	r3, #63	; 0x3f
 8000eda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eec:	2340      	movs	r3, #64	; 0x40
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2101      	movs	r1, #1
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 f911 	bl	8004124 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f08:	f000 fbfc 	bl	8001704 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3770      	adds	r7, #112	; 0x70
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58000400 	.word	0x58000400
 8000f18:	58024800 	.word	0x58024800
 8000f1c:	58024400 	.word	0x58024400

08000f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f46:	4a30      	ldr	r2, [pc, #192]	; (8001008 <MX_ADC1_Init+0xe8>)
 8000f48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	4818      	ldr	r0, [pc, #96]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000fa2:	f001 f895 	bl	80020d0 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fac:	f000 fbaa 	bl	8001704 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4812      	ldr	r0, [pc, #72]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000fbc:	f002 f80a 	bl	8002fd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fc6:	f000 fb9d 	bl	8001704 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_ADC1_Init+0xec>)
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0xe4>)
 8000fee:	f001 fae7 	bl	80025c0 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ff8:	f000 fb84 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	240002f8 	.word	0x240002f8
 8001008:	40022000 	.word	0x40022000
 800100c:	3ef08000 	.word	0x3ef08000

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_TIM3_Init+0x9c>)
 8001032:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001036:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800103a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM3_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001048:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_TIM3_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001058:	f005 fd76 	bl	8006b48 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001062:	f000 fb4f 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001074:	f005 ffc8 	bl	8007008 <HAL_TIM_ConfigClockSource>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800107e:	f000 fb41 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001090:	f006 fa12 	bl	80074b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800109a:	f000 fb33 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	240002a8 	.word	0x240002a8
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_TIM6_Init+0x64>)
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_TIM6_Init+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_TIM6_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_TIM6_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_TIM6_Init+0x64>)
 80010d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_TIM6_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_TIM6_Init+0x64>)
 80010e2:	f005 fd31 	bl	8006b48 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010ec:	f000 fb0a 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_TIM6_Init+0x64>)
 80010fe:	f006 f9db 	bl	80074b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 fafc 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	24000384 	.word	0x24000384
 8001118:	40001000 	.word	0x40001000

0800111c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <MX_USART3_UART_Init+0x94>)
 8001124:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_USART3_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_USART3_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART3_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001166:	f006 fa53 	bl	8007610 <HAL_UART_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001170:	f000 fac8 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_USART3_UART_Init+0x90>)
 8001178:	f007 fa7e 	bl	8008678 <HAL_UARTEx_SetTxFifoThreshold>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001182:	f000 fabf 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <MX_USART3_UART_Init+0x90>)
 800118a:	f007 fab3 	bl	80086f4 <HAL_UARTEx_SetRxFifoThreshold>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 fab6 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_USART3_UART_Init+0x90>)
 800119a:	f007 fa34 	bl	8008606 <HAL_UARTEx_DisableFifoMode>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f000 faae 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	24000214 	.word	0x24000214
 80011b0:	40004800 	.word	0x40004800

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b9b      	ldr	r3, [pc, #620]	; (8001438 <MX_GPIO_Init+0x284>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a99      	ldr	r2, [pc, #612]	; (8001438 <MX_GPIO_Init+0x284>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b97      	ldr	r3, [pc, #604]	; (8001438 <MX_GPIO_Init+0x284>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <MX_GPIO_Init+0x284>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a92      	ldr	r2, [pc, #584]	; (8001438 <MX_GPIO_Init+0x284>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <MX_GPIO_Init+0x284>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <MX_GPIO_Init+0x284>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a8a      	ldr	r2, [pc, #552]	; (8001438 <MX_GPIO_Init+0x284>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b88      	ldr	r3, [pc, #544]	; (8001438 <MX_GPIO_Init+0x284>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b84      	ldr	r3, [pc, #528]	; (8001438 <MX_GPIO_Init+0x284>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a83      	ldr	r2, [pc, #524]	; (8001438 <MX_GPIO_Init+0x284>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <MX_GPIO_Init+0x284>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <MX_GPIO_Init+0x284>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	4a7b      	ldr	r2, [pc, #492]	; (8001438 <MX_GPIO_Init+0x284>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001252:	4b79      	ldr	r3, [pc, #484]	; (8001438 <MX_GPIO_Init+0x284>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001260:	4b75      	ldr	r3, [pc, #468]	; (8001438 <MX_GPIO_Init+0x284>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	4a74      	ldr	r2, [pc, #464]	; (8001438 <MX_GPIO_Init+0x284>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001270:	4b71      	ldr	r3, [pc, #452]	; (8001438 <MX_GPIO_Init+0x284>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127e:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <MX_GPIO_Init+0x284>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a6c      	ldr	r2, [pc, #432]	; (8001438 <MX_GPIO_Init+0x284>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <MX_GPIO_Init+0x284>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	4866      	ldr	r0, [pc, #408]	; (800143c <MX_GPIO_Init+0x288>)
 80012a2:	f002 fa35 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2110      	movs	r1, #16
 80012aa:	4865      	ldr	r0, [pc, #404]	; (8001440 <MX_GPIO_Init+0x28c>)
 80012ac:	f002 fa30 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	4863      	ldr	r0, [pc, #396]	; (8001444 <MX_GPIO_Init+0x290>)
 80012b8:	f002 fa2a 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2140      	movs	r1, #64	; 0x40
 80012c0:	4861      	ldr	r0, [pc, #388]	; (8001448 <MX_GPIO_Init+0x294>)
 80012c2:	f002 fa25 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2102      	movs	r1, #2
 80012ca:	4860      	ldr	r0, [pc, #384]	; (800144c <MX_GPIO_Init+0x298>)
 80012cc:	f002 fa20 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4855      	ldr	r0, [pc, #340]	; (800143c <MX_GPIO_Init+0x288>)
 80012e8:	f002 f862 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012ec:	2332      	movs	r3, #50	; 0x32
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fc:	230b      	movs	r3, #11
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	484d      	ldr	r0, [pc, #308]	; (800143c <MX_GPIO_Init+0x288>)
 8001308:	f002 f852 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001310:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4847      	ldr	r0, [pc, #284]	; (8001440 <MX_GPIO_Init+0x28c>)
 8001322:	f002 f845 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001326:	2386      	movs	r3, #134	; 0x86
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001336:	230b      	movs	r3, #11
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	483f      	ldr	r0, [pc, #252]	; (8001440 <MX_GPIO_Init+0x28c>)
 8001342:	f002 f835 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001346:	2310      	movs	r3, #16
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <MX_GPIO_Init+0x28c>)
 800135e:	f002 f827 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001374:	230b      	movs	r3, #11
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4832      	ldr	r0, [pc, #200]	; (8001448 <MX_GPIO_Init+0x294>)
 8001380:	f002 f816 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001384:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001396:	230a      	movs	r3, #10
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4827      	ldr	r0, [pc, #156]	; (8001440 <MX_GPIO_Init+0x28c>)
 80013a2:	f002 f805 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b8:	230b      	movs	r3, #11
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4820      	ldr	r0, [pc, #128]	; (8001444 <MX_GPIO_Init+0x290>)
 80013c4:	f001 fff4 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_GPIO_Init+0x290>)
 80013e2:	f001 ffe5 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ea:	2311      	movs	r3, #17
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4812      	ldr	r0, [pc, #72]	; (8001448 <MX_GPIO_Init+0x294>)
 80013fe:	f001 ffd7 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_GPIO_Init+0x298>)
 800141a:	f001 ffc9 	bl	80033b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2102      	movs	r1, #2
 8001422:	2006      	movs	r0, #6
 8001424:	f001 ff8f 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001428:	2006      	movs	r0, #6
 800142a:	f001 ffa6 	bl	800337a <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	58024400 	.word	0x58024400
 800143c:	58020800 	.word	0x58020800
 8001440:	58020000 	.word	0x58020000
 8001444:	58021800 	.word	0x58021800
 8001448:	58020400 	.word	0x58020400
 800144c:	58021000 	.word	0x58021000

08001450 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b94      	ldr	r3, [pc, #592]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8116 	bne.w	8001692 <HAL_TIM_PeriodElapsedCallback+0x242>
	{
		i++;
 8001466:	4b93      	ldr	r3, [pc, #588]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b91      	ldr	r3, [pc, #580]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001470:	701a      	strb	r2, [r3, #0]
		if(i>=3)
 8001472:	4b90      	ldr	r3, [pc, #576]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d902      	bls.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x30>
			i=0;
 800147a:	4b8e      	ldr	r3, [pc, #568]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
		if(i==0) //set the filter to red
 8001480:	4b8c      	ldr	r3, [pc, #560]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d134      	bne.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2110      	movs	r1, #16
 800148c:	488a      	ldr	r0, [pc, #552]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800148e:	f002 f93f 	bl	8003710 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2101      	movs	r1, #1
 8001496:	4889      	ldr	r0, [pc, #548]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001498:	f002 f93a 	bl	8003710 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0|GPIO_PIN_4,GPIO_PIN_RESET);
			//read blue value
			dat_v[2]=dat;
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80014a2:	809a      	strh	r2, [r3, #4]
			dat=0;
 80014a4:	4b86      	ldr	r3, [pc, #536]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]
			if(adj_en)
 80014aa:	4b87      	ldr	r3, [pc, #540]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_TIM_PeriodElapsedCallback+0x90>
			{
				dat_v[2]=(uint16_t)((double)dat_v[2]*adj_v[2]/10.0);
 80014b2:	4b84      	ldr	r3, [pc, #528]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80014b4:	889b      	ldrh	r3, [r3, #4]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80014be:	4b83      	ldr	r3, [pc, #524]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80014c0:	ed93 7b04 	vldr	d7, [r3, #16]
 80014c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014c8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80014cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d4:	ee17 3a90 	vmov	r3, s15
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80014dc:	809a      	strh	r2, [r3, #4]
 80014de:	e075      	b.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x17c>
				// HAL_UART_Transmit(&huart3,(uint8_t*) "Blue\r\n",sizeof("Blue\r\n") - 1, HAL_MAX_DELAY);
				//printf("Blue=%d-%d\r\n",dat_v[2]/256,dat_v[2]%256);
			}
			else
			{
				adj_temp[2]+=dat_v[2];
 80014e0:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80014e2:	889a      	ldrh	r2, [r3, #4]
 80014e4:	4b77      	ldr	r3, [pc, #476]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80014e6:	889b      	ldrh	r3, [r3, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80014ee:	809a      	strh	r2, [r3, #4]
 80014f0:	e06c      	b.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x17c>
			}
		}
		else if(i==1) //set the filter to green
 80014f2:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d134      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x114>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2110      	movs	r1, #16
 80014fe:	486e      	ldr	r0, [pc, #440]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001500:	f002 f906 	bl	8003710 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2101      	movs	r1, #1
 8001508:	486c      	ldr	r0, [pc, #432]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800150a:	f002 f901 	bl	8003710 <HAL_GPIO_WritePin>
			//read red value
			dat_v[0]=dat;
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001514:	801a      	strh	r2, [r3, #0]
			dat=0;
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
			if(adj_en)
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d016      	beq.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x102>
			{
				dat_v[0]=(uint16_t)((double)dat_v[0]*adj_v[0]/10.0);
 8001524:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001530:	4b66      	ldr	r3, [pc, #408]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001532:	ed93 7b00 	vldr	d7, [r3]
 8001536:	ee26 6b07 	vmul.f64	d6, d6, d7
 800153a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800153e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001542:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001546:	ee17 3a90 	vmov	r3, s15
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800154e:	801a      	strh	r2, [r3, #0]
 8001550:	e03c      	b.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x17c>
//				sprintf(buffer_2, "Red=%d-%d\r\n",dat_v[0]/256,dat_v[0]%256);
//				HAL_UART_Transmit(&huart3, (uint8_t *)buffer_2, strlen(buffer_2), HAL_MAX_DELAY);
			}
			else
			{
				adj_temp[0]+=dat_v[0];
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	e033      	b.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x17c>
			}
		}
		else  //set the filter to blue
		{

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2110      	movs	r1, #16
 8001568:	4853      	ldr	r0, [pc, #332]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800156a:	f002 f8d1 	bl	8003710 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	4852      	ldr	r0, [pc, #328]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001574:	f002 f8cc 	bl	8003710 <HAL_GPIO_WritePin>

			//read green value
			dat_v[1]=dat;
 8001578:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800157e:	805a      	strh	r2, [r3, #2]
			dat=0;
 8001580:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
			if(adj_en)
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x16c>
			{
				dat_v[1]=(uint16_t)((double)dat_v[1]*adj_v[1]/10.0);
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001590:	885b      	ldrh	r3, [r3, #2]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800159a:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800159c:	ed93 7b02 	vldr	d7, [r3, #8]
 80015a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015a4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80015a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015b0:	ee17 3a90 	vmov	r3, s15
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80015b8:	805a      	strh	r2, [r3, #2]
 80015ba:	e007      	b.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x17c>
				//HAL_UART_Transmit(&huart3,(uint8_t*) "Green\r\n",sizeof("Green\r\n") - 1, HAL_MAX_DELAY);
				//printf("Green=%d-%d\r\n",dat_v[1]/256,dat_v[1]%256);
			}
			else
			{
				adj_temp[1]+=dat_v[1];
 80015bc:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015be:	885a      	ldrh	r2, [r3, #2]
 80015c0:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80015c2:	885b      	ldrh	r3, [r3, #2]
 80015c4:	4413      	add	r3, r2
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015ca:	805a      	strh	r2, [r3, #2]
			}
		}
		if(!adj_en)
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d15e      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x242>
		{
			if(adj_num>=5)
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d954      	bls.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x236>
			{
				adj_v[0]=(double)adj_temp[0]/100.0;
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015e8:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 80016a0 <HAL_TIM_PeriodElapsedCallback+0x250>
 80015ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015f2:	ed83 7b00 	vstr	d7, [r3]
				adj_v[0]=255.0/adj_v[0]*10.0;
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015f8:	ed93 6b00 	vldr	d6, [r3]
 80015fc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80016a8 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001600:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001604:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001608:	ee27 7b06 	vmul.f64	d7, d7, d6
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800160e:	ed83 7b00 	vstr	d7, [r3]
				adj_v[1]=(double)adj_temp[1]/100.0;
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001614:	885b      	ldrh	r3, [r3, #2]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800161e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80016a0 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001622:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001628:	ed83 7b02 	vstr	d7, [r3, #8]
				adj_v[1]=255.0/adj_v[1]*10.0;
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800162e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001632:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80016a8 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001636:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800163a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800163e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001644:	ed83 7b02 	vstr	d7, [r3, #8]
				adj_v[2]=(double)adj_temp[2]/100.0;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800164a:	889b      	ldrh	r3, [r3, #4]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001654:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80016a0 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800165e:	ed83 7b04 	vstr	d7, [r3, #16]
				adj_v[2]=255.0/adj_v[2]*10.0;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001664:	ed93 6b04 	vldr	d6, [r3, #16]
 8001668:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 80016a8 <HAL_TIM_PeriodElapsedCallback+0x258>
 800166c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001670:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001674:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800167a:	ed83 7b04 	vstr	d7, [r3, #16]
				adj_en=1;
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
			{
				adj_num++;
			}
		}
	}
}
 8001684:	e005      	b.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x242>
				adj_num++;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001690:	801a      	strh	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40590000 	.word	0x40590000
 80016a8:	00000000 	.word	0x00000000
 80016ac:	406fe000 	.word	0x406fe000
 80016b0:	240002a8 	.word	0x240002a8
 80016b4:	2400035c 	.word	0x2400035c
 80016b8:	58020000 	.word	0x58020000
 80016bc:	58020800 	.word	0x58020800
 80016c0:	24000210 	.word	0x24000210
 80016c4:	24000360 	.word	0x24000360
 80016c8:	24000212 	.word	0x24000212
 80016cc:	24000368 	.word	0x24000368
 80016d0:	24000454 	.word	0x24000454
 80016d4:	24000450 	.word	0x24000450

080016d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    /* Toggle LED1 */
    dat++;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_GPIO_EXTI_Callback+0x28>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GPIO_EXTI_Callback+0x28>)
 80016f2:	801a      	strh	r2, [r3, #0]
  }
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	24000210 	.word	0x24000210

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	e7fe      	b.n	800170c <Error_Handler+0x8>
	...

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_MspInit+0x30>)
 8001718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x30>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x30>)
 8001728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	58024400 	.word	0x58024400

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0b8      	sub	sp, #224	; 0xe0
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	22bc      	movs	r2, #188	; 0xbc
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f007 f87b 	bl	8008860 <memset>
  if(hadc->Instance==ADC1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_ADC_MspInit+0xd4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d14d      	bne.n	8001810 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001778:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800177a:	2304      	movs	r3, #4
 800177c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 800177e:	2309      	movs	r3, #9
 8001780:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001782:	2304      	movs	r3, #4
 8001784:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800178e:	23c0      	movs	r3, #192	; 0xc0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001792:	2320      	movs	r3, #32
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001796:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f848 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 80017b2:	f7ff ffa7 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_ADC_MspInit+0xd8>)
 80017b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_ADC_MspInit+0xd8>)
 80017be:	f043 0320 	orr.w	r3, r3, #32
 80017c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_ADC_MspInit+0xd8>)
 80017c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_ADC_MspInit+0xd8>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_ADC_MspInit+0xd8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_ADC_MspInit+0xd8>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f2:	2308      	movs	r3, #8
 80017f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 800180c:	f001 fdd0 	bl	80033b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	37e0      	adds	r7, #224	; 0xe0
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40022000 	.word	0x40022000
 800181c:	58024400 	.word	0x58024400
 8001820:	58020000 	.word	0x58020000

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0x74>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d117      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	201d      	movs	r0, #29
 800185a:	f001 fd74 	bl	8003346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800185e:	201d      	movs	r0, #29
 8001860:	f001 fd8b 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001864:	e013      	b.n	800188e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_TIM_Base_MspInit+0x7c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d10e      	bne.n	800188e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_TIM_Base_MspInit+0x78>)
 8001882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40000400 	.word	0x40000400
 800189c:	58024400 	.word	0x58024400
 80018a0:	40001000 	.word	0x40001000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b8      	sub	sp, #224	; 0xe0
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	22bc      	movs	r2, #188	; 0xbc
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 ffcb 	bl	8008860 <memset>
  if(huart->Instance==USART3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_UART_MspInit+0xc0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d142      	bne.n	800195a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ffaa 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ee:	f7ff ff09 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_UART_MspInit+0xc4>)
 80018f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_UART_MspInit+0xc4>)
 80018fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_UART_MspInit+0xc4>)
 8001904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_UART_MspInit+0xc4>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_UART_MspInit+0xc4>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_UART_MspInit+0xc4>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800192e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001932:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001948:	2307      	movs	r3, #7
 800194a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_UART_MspInit+0xc8>)
 8001956:	f001 fd2b 	bl	80033b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	37e0      	adds	r7, #224	; 0xe0
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40004800 	.word	0x40004800
 8001968:	58024400 	.word	0x58024400
 800196c:	58020c00 	.word	0x58020c00

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 f976 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f001 feba 	bl	8003742 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM3_IRQHandler+0x10>)
 80019da:	f005 f9f5 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	240002a8 	.word	0x240002a8

080019e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a02:	f006 ff03 	bl	800880c <__errno>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2216      	movs	r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe7 	bl	80019f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a2a:	e7fe      	b.n	8001a2a <_exit+0x12>

08001a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
	}

return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
	}
	return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f006 fe68 	bl	800880c <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	24080000 	.word	0x24080000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	24000204 	.word	0x24000204
 8001b70:	24000470 	.word	0x24000470

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f7fe ff7a 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	; (8001bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f006 fe39 	bl	8008818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff f82b 	bl	8000c00 <main>
  bx  lr
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bb4:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001bb8:	0800d474 	.word	0x0800d474
  ldr r2, =_sbss
 8001bbc:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001bc0:	24000470 	.word	0x24000470

08001bc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC3_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f001 fbae 	bl	8003330 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bd4:	f002 fc5c 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_Init+0x68>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	4913      	ldr	r1, [pc, #76]	; (8001c34 <HAL_Init+0x6c>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_Init+0x68>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_Init+0x6c>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_Init+0x70>)
 8001c0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <HAL_Init+0x74>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f814 	bl	8001c40 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e002      	b.n	8001c28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c22:	f7ff fd75 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58024400 	.word	0x58024400
 8001c34:	0800cf74 	.word	0x0800cf74
 8001c38:	24000004 	.word	0x24000004
 8001c3c:	24000000 	.word	0x24000000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_InitTick+0x60>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e021      	b.n	8001c98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_InitTick+0x64>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_InitTick+0x60>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fb93 	bl	8003396 <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00e      	b.n	8001c98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d80a      	bhi.n	8001c96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c88:	f001 fb5d 	bl	8003346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_InitTick+0x68>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2400000c 	.word	0x2400000c
 8001ca4:	24000000 	.word	0x24000000
 8001ca8:	24000008 	.word	0x24000008

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2400000c 	.word	0x2400000c
 8001cd0:	2400045c 	.word	0x2400045c

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2400045c 	.word	0x2400045c

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff ffee 	bl	8001cd4 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffde 	bl	8001cd4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2400000c 	.word	0x2400000c

08001d34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetREVID+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	5c001000 	.word	0x5c001000

08001d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b087      	sub	sp, #28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
  }
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3330      	adds	r3, #48	; 0x30
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	211f      	movs	r1, #31
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 011f 	and.w	r1, r3, #31
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ea8:	bf00      	nop
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3314      	adds	r3, #20
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0e5b      	lsrs	r3, r3, #25
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	0d1b      	lsrs	r3, r3, #20
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2107      	movs	r1, #7
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0d1b      	lsrs	r3, r3, #20
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0318 	and.w	r3, r3, #24
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f30:	40d9      	lsrs	r1, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	400b      	ands	r3, r1
 8001f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	000fffff 	.word	0x000fffff

08001f54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 031f 	and.w	r3, r3, #31
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	5fffffc0 	.word	0x5fffffc0

08001f94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	6fffffc0 	.word	0x6fffffc0

08001fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <LL_ADC_Enable+0x24>)
 800201a:	4013      	ands	r3, r2
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	7fffffc0 	.word	0x7fffffc0

08002034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <LL_ADC_IsEnabled+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_ADC_IsEnabled+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <LL_ADC_REG_StartConversion+0x24>)
 800206a:	4013      	ands	r3, r2
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	7fffffc0 	.word	0x7fffffc0

08002084 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b04      	cmp	r3, #4
 8002096:	d101      	bne.n	800209c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d101      	bne.n	80020c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e18e      	b.n	8002408 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fb23 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff3f 	bl	8001f94 <LL_ADC_IsDeepPowerDownEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff25 	bl	8001f70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff5a 	bl	8001fe4 <LL_ADC_IsInternalRegulatorEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d114      	bne.n	8002160 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff3e 	bl	8001fbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002140:	4b9a      	ldr	r3, [pc, #616]	; (80023ac <HAL_ADC_Init+0x2dc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	4a9a      	ldr	r2, [pc, #616]	; (80023b0 <HAL_ADC_Init+0x2e0>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002152:	e002      	b.n	800215a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3b01      	subs	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f9      	bne.n	8002154 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff3d 	bl	8001fe4 <LL_ADC_IsInternalRegulatorEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0210 	orr.w	r2, r3, #16
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff77 	bl	8002084 <LL_ADC_REG_IsConversionOngoing>
 8002196:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 8128 	bne.w	80023f6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 8124 	bne.w	80023f6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff36 	bl	8002034 <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d136      	bne.n	800223c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a78      	ldr	r2, [pc, #480]	; (80023b4 <HAL_ADC_Init+0x2e4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_ADC_Init+0x112>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a76      	ldr	r2, [pc, #472]	; (80023b8 <HAL_ADC_Init+0x2e8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10e      	bne.n	8002200 <HAL_ADC_Init+0x130>
 80021e2:	4874      	ldr	r0, [pc, #464]	; (80023b4 <HAL_ADC_Init+0x2e4>)
 80021e4:	f7ff ff26 	bl	8002034 <LL_ADC_IsEnabled>
 80021e8:	4604      	mov	r4, r0
 80021ea:	4873      	ldr	r0, [pc, #460]	; (80023b8 <HAL_ADC_Init+0x2e8>)
 80021ec:	f7ff ff22 	bl	8002034 <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e008      	b.n	8002212 <HAL_ADC_Init+0x142>
 8002200:	486e      	ldr	r0, [pc, #440]	; (80023bc <HAL_ADC_Init+0x2ec>)
 8002202:	f7ff ff17 	bl	8002034 <LL_ADC_IsEnabled>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a66      	ldr	r2, [pc, #408]	; (80023b4 <HAL_ADC_Init+0x2e4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_ADC_Init+0x15a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <HAL_ADC_Init+0x2e8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x15e>
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_ADC_Init+0x2f0>)
 800222c:	e000      	b.n	8002230 <HAL_ADC_Init+0x160>
 800222e:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_ADC_Init+0x2f4>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7ff fd88 	bl	8001d4c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800223c:	f7ff fd7a 	bl	8001d34 <HAL_GetREVID>
 8002240:	4603      	mov	r3, r0
 8002242:	f241 0203 	movw	r2, #4099	; 0x1003
 8002246:	4293      	cmp	r3, r2
 8002248:	d914      	bls.n	8002274 <HAL_ADC_Init+0x1a4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d110      	bne.n	8002274 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7d5b      	ldrb	r3, [r3, #21]
 8002256:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800225c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002262:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f1b      	ldrb	r3, [r3, #28]
 8002268:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800226a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800226c:	f043 030c 	orr.w	r3, r3, #12
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e00d      	b.n	8002290 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7d5b      	ldrb	r3, [r3, #21]
 8002278:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800227e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002284:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7f1b      	ldrb	r3, [r3, #28]
 800228a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7f1b      	ldrb	r3, [r3, #28]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	3b01      	subs	r3, #1
 800229e:	045b      	lsls	r3, r3, #17
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_ADC_Init+0x2f8>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	69b9      	ldr	r1, [r7, #24]
 80022d2:	430b      	orrs	r3, r1
 80022d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fed2 	bl	8002084 <LL_ADC_REG_IsConversionOngoing>
 80022e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fedf 	bl	80020aa <LL_ADC_INJ_IsConversionOngoing>
 80022ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d14a      	bne.n	800238a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d147      	bne.n	800238a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7d1b      	ldrb	r3, [r3, #20]
 80022fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_ADC_Init+0x2fc>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	430b      	orrs	r3, r1
 800231a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11b      	bne.n	800235e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_ADC_Init+0x300>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800233a:	3a01      	subs	r2, #1
 800233c:	0411      	lsls	r1, r2, #16
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800234e:	430a      	orrs	r2, r1
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	e007      	b.n	800236e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fcf5 	bl	8002d74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d120      	bne.n	80023d4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f023 010f 	bic.w	r1, r3, #15
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
 80023aa:	e01b      	b.n	80023e4 <HAL_ADC_Init+0x314>
 80023ac:	24000000 	.word	0x24000000
 80023b0:	053e2d63 	.word	0x053e2d63
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40022100 	.word	0x40022100
 80023bc:	58026000 	.word	0x58026000
 80023c0:	40022300 	.word	0x40022300
 80023c4:	58026300 	.word	0x58026300
 80023c8:	fff0c003 	.word	0xfff0c003
 80023cc:	ffffbffc 	.word	0xffffbffc
 80023d0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 020f 	bic.w	r2, r2, #15
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f023 0303 	bic.w	r3, r3, #3
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
 80023f4:	e007      	b.n	8002406 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002406:	7ffb      	ldrb	r3, [r7, #31]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3724      	adds	r7, #36	; 0x24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd90      	pop	{r4, r7, pc}

08002410 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a5c      	ldr	r2, [pc, #368]	; (8002590 <HAL_ADC_Start+0x180>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_ADC_Start+0x1c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5b      	ldr	r2, [pc, #364]	; (8002594 <HAL_ADC_Start+0x184>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_ADC_Start+0x20>
 800242c:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_ADC_Start+0x188>)
 800242e:	e000      	b.n	8002432 <HAL_ADC_Start+0x22>
 8002430:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_ADC_Start+0x18c>)
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fd8e 	bl	8001f54 <LL_ADC_GetMultimode>
 8002438:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe20 	bl	8002084 <LL_ADC_REG_IsConversionOngoing>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 809a 	bne.w	8002580 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_ADC_Start+0x4a>
 8002456:	2302      	movs	r3, #2
 8002458:	e095      	b.n	8002586 <HAL_ADC_Start+0x176>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fbfc 	bl	8002c60 <ADC_Enable>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 8081 	bne.w	8002576 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002478:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_ADC_Start+0x190>)
 800247a:	4013      	ands	r3, r2
 800247c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a42      	ldr	r2, [pc, #264]	; (8002594 <HAL_ADC_Start+0x184>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d002      	beq.n	8002494 <HAL_ADC_Start+0x84>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e000      	b.n	8002496 <HAL_ADC_Start+0x86>
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_ADC_Start+0x180>)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4293      	cmp	r3, r2
 800249c:	d002      	beq.n	80024a4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	f023 0206 	bic.w	r2, r3, #6
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	659a      	str	r2, [r3, #88]	; 0x58
 80024ca:	e002      	b.n	80024d2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	221c      	movs	r2, #28
 80024d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2b      	ldr	r2, [pc, #172]	; (8002594 <HAL_ADC_Start+0x184>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_Start+0xe2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_Start+0xe4>
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_ADC_Start+0x180>)
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d008      	beq.n	800250e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d002      	beq.n	800250e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b09      	cmp	r3, #9
 800250c:	d114      	bne.n	8002538 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002524:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd93 	bl	800205c <LL_ADC_REG_StartConversion>
 8002536:	e025      	b.n	8002584 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_ADC_Start+0x184>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d002      	beq.n	8002554 <HAL_ADC_Start+0x144>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e000      	b.n	8002556 <HAL_ADC_Start+0x146>
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_ADC_Start+0x180>)
 8002556:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00f      	beq.n	8002584 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
 8002574:	e006      	b.n	8002584 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800257e:	e001      	b.n	8002584 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002580:	2302      	movs	r3, #2
 8002582:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002584:	7dfb      	ldrb	r3, [r7, #23]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000
 8002594:	40022100 	.word	0x40022100
 8002598:	40022300 	.word	0x40022300
 800259c:	58026300 	.word	0x58026300
 80025a0:	fffff0fe 	.word	0xfffff0fe

080025a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b0a1      	sub	sp, #132	; 0x84
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a9d      	ldr	r2, [pc, #628]	; (8002850 <HAL_ADC_ConfigChannel+0x290>)
 80025da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x2a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e321      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x66e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fd44 	bl	8002084 <LL_ADC_REG_IsConversionOngoing>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8306 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800260c:	2b00      	cmp	r3, #0
 800260e:	d108      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x62>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2201      	movs	r2, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	e016      	b.n	8002650 <HAL_ADC_ConfigChannel+0x90>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002632:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e003      	b.n	8002646 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800263e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2201      	movs	r2, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	69d1      	ldr	r1, [r2, #28]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	430b      	orrs	r3, r1
 800265c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	f7ff fbf6 	bl	8001e5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd05 	bl	8002084 <LL_ADC_REG_IsConversionOngoing>
 800267a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fd12 	bl	80020aa <LL_ADC_INJ_IsConversionOngoing>
 8002686:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 80b3 	bne.w	80027f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 80af 	bne.w	80027f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f7ff fc05 	bl	8001eb4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026aa:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_ADC_ConfigChannel+0x294>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80026b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b6:	d10b      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x110>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	e01d      	b.n	800270c <HAL_ADC_ConfigChannel+0x14c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x136>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	e00a      	b.n	800270c <HAL_ADC_ConfigChannel+0x14c>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d027      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002724:	f7ff fb46 	bl	8001db4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7e5b      	ldrb	r3, [r3, #25]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d102      	bne.n	800273e <HAL_ADC_ConfigChannel+0x17e>
 8002738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800273c:	e000      	b.n	8002740 <HAL_ADC_ConfigChannel+0x180>
 800273e:	2300      	movs	r3, #0
 8002740:	461a      	mov	r2, r3
 8002742:	f7ff fb70 	bl	8001e26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7e1b      	ldrb	r3, [r3, #24]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_ADC_ConfigChannel+0x19c>
 8002756:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800275a:	e000      	b.n	800275e <HAL_ADC_ConfigChannel+0x19e>
 800275c:	2300      	movs	r3, #0
 800275e:	461a      	mov	r2, r3
 8002760:	f7ff fb48 	bl	8001df4 <LL_ADC_SetDataRightShift>
 8002764:	e047      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	429a      	cmp	r2, r3
 8002778:	d107      	bne.n	800278a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	069b      	lsls	r3, r3, #26
 800279a:	429a      	cmp	r2, r3
 800279c:	d107      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	069b      	lsls	r3, r3, #26
 80027be:	429a      	cmp	r2, r3
 80027c0:	d107      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	069b      	lsls	r3, r3, #26
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d107      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fc1a 	bl	8002034 <LL_ADC_IsEnabled>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 820d 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	461a      	mov	r2, r3
 8002816:	f7ff fb79 	bl	8001f0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_ADC_ConfigChannel+0x290>)
 8002820:	4293      	cmp	r3, r2
 8002822:	f040 8133 	bne.w	8002a8c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002832:	2b00      	cmp	r3, #0
 8002834:	d110      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x298>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	3301      	adds	r3, #1
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2b09      	cmp	r3, #9
 8002844:	bf94      	ite	ls
 8002846:	2301      	movls	r3, #1
 8002848:	2300      	movhi	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e01e      	b.n	800288c <HAL_ADC_ConfigChannel+0x2cc>
 800284e:	bf00      	nop
 8002850:	47ff0000 	.word	0x47ff0000
 8002854:	5c001000 	.word	0x5c001000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800286a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e003      	b.n	800287c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2b09      	cmp	r3, #9
 8002884:	bf94      	ite	ls
 8002886:	2301      	movls	r3, #1
 8002888:	2300      	movhi	r3, #0
 800288a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288c:	2b00      	cmp	r3, #0
 800288e:	d079      	beq.n	8002984 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x2ec>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	069b      	lsls	r3, r3, #26
 80028a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028aa:	e015      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x318>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80028ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80028be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	069b      	lsls	r3, r3, #26
 80028d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x338>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	3301      	adds	r3, #1
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	e017      	b.n	8002928 <HAL_ADC_ConfigChannel+0x368>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800290a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e003      	b.n	800291c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	ea42 0103 	orr.w	r1, r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <HAL_ADC_ConfigChannel+0x38e>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	3301      	adds	r3, #1
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	051b      	lsls	r3, r3, #20
 800294c:	e018      	b.n	8002980 <HAL_ADC_ConfigChannel+0x3c0>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e003      	b.n	8002972 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002980:	430b      	orrs	r3, r1
 8002982:	e07e      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x3e0>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	069b      	lsls	r3, r3, #26
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299e:	e015      	b.n	80029cc <HAL_ADC_ConfigChannel+0x40c>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	069b      	lsls	r3, r3, #26
 80029c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x42c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	e017      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x45c>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	61bb      	str	r3, [r7, #24]
  return result;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	ea42 0103 	orr.w	r1, r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x488>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b1e      	subs	r3, #30
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a46:	e01b      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x4c0>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	60fb      	str	r3, [r7, #12]
  return result;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 021f 	and.w	r2, r3, #31
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	3b1e      	subs	r3, #30
 8002a7a:	051b      	lsls	r3, r3, #20
 8002a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	430b      	orrs	r3, r1
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	6892      	ldr	r2, [r2, #8]
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7ff fa14 	bl	8001eb4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f280 80c6 	bge.w	8002c22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a67      	ldr	r2, [pc, #412]	; (8002c38 <HAL_ADC_ConfigChannel+0x678>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x4ea>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a65      	ldr	r2, [pc, #404]	; (8002c3c <HAL_ADC_ConfigChannel+0x67c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x4ee>
 8002aaa:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_ADC_ConfigChannel+0x680>)
 8002aac:	e000      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x4f0>
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_ADC_ConfigChannel+0x684>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f971 	bl	8001d98 <LL_ADC_GetCommonPathInternalCh>
 8002ab6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5e      	ldr	r2, [pc, #376]	; (8002c38 <HAL_ADC_ConfigChannel+0x678>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x50c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <HAL_ADC_ConfigChannel+0x67c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10e      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x52a>
 8002acc:	485a      	ldr	r0, [pc, #360]	; (8002c38 <HAL_ADC_ConfigChannel+0x678>)
 8002ace:	f7ff fab1 	bl	8002034 <LL_ADC_IsEnabled>
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	4859      	ldr	r0, [pc, #356]	; (8002c3c <HAL_ADC_ConfigChannel+0x67c>)
 8002ad6:	f7ff faad 	bl	8002034 <LL_ADC_IsEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4323      	orrs	r3, r4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e008      	b.n	8002afc <HAL_ADC_ConfigChannel+0x53c>
 8002aea:	4857      	ldr	r0, [pc, #348]	; (8002c48 <HAL_ADC_ConfigChannel+0x688>)
 8002aec:	f7ff faa2 	bl	8002034 <LL_ADC_IsEnabled>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07d      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a51      	ldr	r2, [pc, #324]	; (8002c4c <HAL_ADC_ConfigChannel+0x68c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d130      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x5ac>
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d12b      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	; (8002c48 <HAL_ADC_ConfigChannel+0x688>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	f040 8081 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a44      	ldr	r2, [pc, #272]	; (8002c38 <HAL_ADC_ConfigChannel+0x678>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_ADC_ConfigChannel+0x574>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a43      	ldr	r2, [pc, #268]	; (8002c3c <HAL_ADC_ConfigChannel+0x67c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x578>
 8002b34:	4a42      	ldr	r2, [pc, #264]	; (8002c40 <HAL_ADC_ConfigChannel+0x680>)
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x57a>
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_ADC_ConfigChannel+0x684>)
 8002b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f7ff f915 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <HAL_ADC_ConfigChannel+0x690>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <HAL_ADC_ConfigChannel+0x694>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b6a:	e05a      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <HAL_ADC_ConfigChannel+0x698>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d11e      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x5f4>
 8002b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d119      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <HAL_ADC_ConfigChannel+0x688>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d14b      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <HAL_ADC_ConfigChannel+0x678>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x5de>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <HAL_ADC_ConfigChannel+0x67c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x5e2>
 8002b9e:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <HAL_ADC_ConfigChannel+0x680>)
 8002ba0:	e000      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5e4>
 8002ba2:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_ADC_ConfigChannel+0x684>)
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7ff f8e0 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb2:	e036      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <HAL_ADC_ConfigChannel+0x69c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d131      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d12c      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_ADC_ConfigChannel+0x688>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d127      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_ADC_ConfigChannel+0x678>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x626>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_ADC_ConfigChannel+0x67c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x62a>
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_ADC_ConfigChannel+0x680>)
 8002be8:	e000      	b.n	8002bec <HAL_ADC_ConfigChannel+0x62c>
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_ADC_ConfigChannel+0x684>)
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f7ff f8bc 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
 8002bfa:	e012      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c0e:	e008      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3784      	adds	r7, #132	; 0x84
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd90      	pop	{r4, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40022100 	.word	0x40022100
 8002c40:	40022300 	.word	0x40022300
 8002c44:	58026300 	.word	0x58026300
 8002c48:	58026000 	.word	0x58026000
 8002c4c:	cb840000 	.word	0xcb840000
 8002c50:	24000000 	.word	0x24000000
 8002c54:	053e2d63 	.word	0x053e2d63
 8002c58:	c7520000 	.word	0xc7520000
 8002c5c:	cfb80000 	.word	0xcfb80000

08002c60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f9e1 	bl	8002034 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d16e      	bne.n	8002d56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <ADC_Enable+0x100>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e05a      	b.n	8002d58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f9b0 	bl	800200c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cac:	f7ff f812 	bl	8001cd4 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <ADC_Enable+0x104>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d004      	beq.n	8002cc6 <ADC_Enable+0x66>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <ADC_Enable+0x108>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <ADC_Enable+0x6a>
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <ADC_Enable+0x10c>)
 8002cc8:	e000      	b.n	8002ccc <ADC_Enable+0x6c>
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <ADC_Enable+0x110>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f941 	bl	8001f54 <LL_ADC_GetMultimode>
 8002cd2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <ADC_Enable+0x108>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d002      	beq.n	8002ce4 <ADC_Enable+0x84>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e000      	b.n	8002ce6 <ADC_Enable+0x86>
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <ADC_Enable+0x104>)
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02c      	beq.n	8002d48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d130      	bne.n	8002d56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf4:	e028      	b.n	8002d48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f99a 	bl	8002034 <LL_ADC_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f97e 	bl	800200c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d10:	f7fe ffe0 	bl	8001cd4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d914      	bls.n	8002d48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d00d      	beq.n	8002d48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d1cf      	bne.n	8002cf6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	8000003f 	.word	0x8000003f
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40022100 	.word	0x40022100
 8002d6c:	40022300 	.word	0x40022300
 8002d70:	58026300 	.word	0x58026300

08002d74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a79      	ldr	r2, [pc, #484]	; (8002f68 <ADC_ConfigureBoostMode+0x1f4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <ADC_ConfigureBoostMode+0x1c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a78      	ldr	r2, [pc, #480]	; (8002f6c <ADC_ConfigureBoostMode+0x1f8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d109      	bne.n	8002da4 <ADC_ConfigureBoostMode+0x30>
 8002d90:	4b77      	ldr	r3, [pc, #476]	; (8002f70 <ADC_ConfigureBoostMode+0x1fc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e008      	b.n	8002db6 <ADC_ConfigureBoostMode+0x42>
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <ADC_ConfigureBoostMode+0x200>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01c      	beq.n	8002df4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002dba:	f001 fce3 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 8002dbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc8:	d010      	beq.n	8002dec <ADC_ConfigureBoostMode+0x78>
 8002dca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dce:	d871      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x140>
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d002      	beq.n	8002ddc <ADC_ConfigureBoostMode+0x68>
 8002dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dda:	d16b      	bne.n	8002eb4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	60fb      	str	r3, [r7, #12]
        break;
 8002dea:	e066      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	60fb      	str	r3, [r7, #12]
        break;
 8002df2:	e062      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002df4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002df8:	f002 fc60 	bl	80056bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002dfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e06:	d051      	beq.n	8002eac <ADC_ConfigureBoostMode+0x138>
 8002e08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e0c:	d854      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e12:	d047      	beq.n	8002ea4 <ADC_ConfigureBoostMode+0x130>
 8002e14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e18:	d84e      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e1e:	d03d      	beq.n	8002e9c <ADC_ConfigureBoostMode+0x128>
 8002e20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e24:	d848      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2a:	d033      	beq.n	8002e94 <ADC_ConfigureBoostMode+0x120>
 8002e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e30:	d842      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e36:	d029      	beq.n	8002e8c <ADC_ConfigureBoostMode+0x118>
 8002e38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e3c:	d83c      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e42:	d01a      	beq.n	8002e7a <ADC_ConfigureBoostMode+0x106>
 8002e44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e48:	d836      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e4e:	d014      	beq.n	8002e7a <ADC_ConfigureBoostMode+0x106>
 8002e50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e54:	d830      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5a:	d00e      	beq.n	8002e7a <ADC_ConfigureBoostMode+0x106>
 8002e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e60:	d82a      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e66:	d008      	beq.n	8002e7a <ADC_ConfigureBoostMode+0x106>
 8002e68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e6c:	d824      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
 8002e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e72:	d002      	beq.n	8002e7a <ADC_ConfigureBoostMode+0x106>
 8002e74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e78:	d11e      	bne.n	8002eb8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	60fb      	str	r3, [r7, #12]
        break;
 8002e8a:	e016      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	60fb      	str	r3, [r7, #12]
        break;
 8002e92:	e012      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	60fb      	str	r3, [r7, #12]
        break;
 8002e9a:	e00e      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	60fb      	str	r3, [r7, #12]
        break;
 8002ea2:	e00a      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	09db      	lsrs	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
        break;
 8002eaa:	e006      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	60fb      	str	r3, [r7, #12]
        break;
 8002eb2:	e002      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
        break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002eb8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002eba:	f7fe ff3b 	bl	8001d34 <HAL_GetREVID>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d815      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <ADC_ConfigureBoostMode+0x204>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d908      	bls.n	8002ee2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ede:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ee0:	e03e      	b.n	8002f60 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	e035      	b.n	8002f60 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <ADC_ConfigureBoostMode+0x208>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d808      	bhi.n	8002f14 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	e025      	b.n	8002f60 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <ADC_ConfigureBoostMode+0x20c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d80a      	bhi.n	8002f32 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	e016      	b.n	8002f60 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <ADC_ConfigureBoostMode+0x210>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d80a      	bhi.n	8002f50 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	609a      	str	r2, [r3, #8]
}
 8002f4e:	e007      	b.n	8002f60 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022100 	.word	0x40022100
 8002f70:	40022300 	.word	0x40022300
 8002f74:	58026300 	.word	0x58026300
 8002f78:	01312d00 	.word	0x01312d00
 8002f7c:	005f5e10 	.word	0x005f5e10
 8002f80:	00bebc20 	.word	0x00bebc20
 8002f84:	017d7840 	.word	0x017d7840

08002f88 <LL_ADC_IsEnabled>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <LL_ADC_IsEnabled+0x18>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_ADC_IsEnabled+0x1a>
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_REG_IsConversionOngoing>:
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d101      	bne.n	8002fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b09f      	sub	sp, #124	; 0x7c
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0be      	b.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d102      	bne.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800300c:	4b5b      	ldr	r3, [pc, #364]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e001      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e09d      	b.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ffb9 	bl	8002fae <LL_ADC_REG_IsConversionOngoing>
 800303c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffb3 	bl	8002fae <LL_ADC_REG_IsConversionOngoing>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d17f      	bne.n	800314e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800304e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003050:	2b00      	cmp	r3, #0
 8003052:	d17c      	bne.n	800314e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a47      	ldr	r2, [pc, #284]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a46      	ldr	r2, [pc, #280]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d101      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800306a:	e000      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800306e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d039      	beq.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003088:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3a      	ldr	r2, [pc, #232]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a38      	ldr	r2, [pc, #224]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10e      	bne.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800309e:	4836      	ldr	r0, [pc, #216]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030a0:	f7ff ff72 	bl	8002f88 <LL_ADC_IsEnabled>
 80030a4:	4604      	mov	r4, r0
 80030a6:	4835      	ldr	r0, [pc, #212]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030a8:	f7ff ff6e 	bl	8002f88 <LL_ADC_IsEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4323      	orrs	r3, r4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e008      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80030bc:	4832      	ldr	r0, [pc, #200]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80030be:	f7ff ff63 	bl	8002f88 <LL_ADC_IsEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d047      	beq.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80030d8:	4013      	ands	r3, r2
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	6811      	ldr	r1, [r2, #0]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ea:	e03a      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10e      	bne.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800310c:	481a      	ldr	r0, [pc, #104]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800310e:	f7ff ff3b 	bl	8002f88 <LL_ADC_IsEnabled>
 8003112:	4604      	mov	r4, r0
 8003114:	4819      	ldr	r0, [pc, #100]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003116:	f7ff ff37 	bl	8002f88 <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	4323      	orrs	r3, r4
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e008      	b.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800312a:	4817      	ldr	r0, [pc, #92]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800312c:	f7ff ff2c 	bl	8002f88 <LL_ADC_IsEnabled>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003146:	4013      	ands	r3, r2
 8003148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800314a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800314c:	e009      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003160:	e000      	b.n	8003164 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003162:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800316c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003170:	4618      	mov	r0, r3
 8003172:	377c      	adds	r7, #124	; 0x7c
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	40022000 	.word	0x40022000
 800317c:	40022100 	.word	0x40022100
 8003180:	40022300 	.word	0x40022300
 8003184:	58026300 	.word	0x58026300
 8003188:	58026000 	.word	0x58026000
 800318c:	fffff0e0 	.word	0xfffff0e0

08003190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <__NVIC_SetPriorityGrouping+0x40>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <__NVIC_SetPriorityGrouping+0x40>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00
 80031d4:	05fa0000 	.word	0x05fa0000

080031d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <__NVIC_GetPriorityGrouping+0x18>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 0307 	and.w	r3, r3, #7
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0b      	blt.n	800321e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	; (800322c <__NVIC_EnableIRQ+0x38>)
 800320e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800323c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db0a      	blt.n	800325a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	490c      	ldr	r1, [pc, #48]	; (800327c <__NVIC_SetPriority+0x4c>)
 800324a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	440b      	add	r3, r1
 8003254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003258:	e00a      	b.n	8003270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <__NVIC_SetPriority+0x50>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	440b      	add	r3, r1
 800326e:	761a      	strb	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f1c3 0307 	rsb	r3, r3, #7
 800329e:	2b04      	cmp	r3, #4
 80032a0:	bf28      	it	cs
 80032a2:	2304      	movcs	r3, #4
 80032a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d902      	bls.n	80032b4 <NVIC_EncodePriority+0x30>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3b03      	subs	r3, #3
 80032b2:	e000      	b.n	80032b6 <NVIC_EncodePriority+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	4313      	orrs	r3, r2
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032fc:	d301      	bcc.n	8003302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fe:	2301      	movs	r3, #1
 8003300:	e00f      	b.n	8003322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <SysTick_Config+0x40>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800330a:	210f      	movs	r1, #15
 800330c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003310:	f7ff ff8e 	bl	8003230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <SysTick_Config+0x40>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <SysTick_Config+0x40>)
 800331c:	2207      	movs	r2, #7
 800331e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000e010 	.word	0xe000e010

08003330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff29 	bl	8003190 <__NVIC_SetPriorityGrouping>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff40 	bl	80031d8 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff90 	bl	8003284 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5f 	bl	8003230 <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff33 	bl	80031f4 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffa4 	bl	80032ec <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033be:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <HAL_GPIO_Init+0x234>)
 80033c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033c2:	e194      	b.n	80036ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8186 	beq.w	80036e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d005      	beq.n	80033f4 <HAL_GPIO_Init+0x44>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d130      	bne.n	8003456 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800342a:	2201      	movs	r2, #1
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0201 	and.w	r2, r3, #1
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b03      	cmp	r3, #3
 8003460:	d017      	beq.n	8003492 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d123      	bne.n	80034e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	08da      	lsrs	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3208      	adds	r2, #8
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80e0 	beq.w	80036e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003528:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <HAL_GPIO_Init+0x238>)
 800352a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800352e:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_GPIO_Init+0x238>)
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_GPIO_Init+0x238>)
 800353a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_GPIO_Init+0x23c>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a20      	ldr	r2, [pc, #128]	; (80035f0 <HAL_GPIO_Init+0x240>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d052      	beq.n	8003618 <HAL_GPIO_Init+0x268>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_GPIO_Init+0x244>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_GPIO_Init+0x22e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <HAL_GPIO_Init+0x248>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02b      	beq.n	80035da <HAL_GPIO_Init+0x22a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_GPIO_Init+0x24c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d025      	beq.n	80035d6 <HAL_GPIO_Init+0x226>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_GPIO_Init+0x250>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01f      	beq.n	80035d2 <HAL_GPIO_Init+0x222>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_GPIO_Init+0x254>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d019      	beq.n	80035ce <HAL_GPIO_Init+0x21e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <HAL_GPIO_Init+0x258>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_GPIO_Init+0x21a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <HAL_GPIO_Init+0x25c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00d      	beq.n	80035c6 <HAL_GPIO_Init+0x216>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a18      	ldr	r2, [pc, #96]	; (8003610 <HAL_GPIO_Init+0x260>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <HAL_GPIO_Init+0x212>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_GPIO_Init+0x264>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_GPIO_Init+0x20e>
 80035ba:	2309      	movs	r3, #9
 80035bc:	e02d      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035be:	230a      	movs	r3, #10
 80035c0:	e02b      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035c2:	2308      	movs	r3, #8
 80035c4:	e029      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035c6:	2307      	movs	r3, #7
 80035c8:	e027      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e025      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035ce:	2305      	movs	r3, #5
 80035d0:	e023      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035d2:	2304      	movs	r3, #4
 80035d4:	e021      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e01f      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035da:	2302      	movs	r3, #2
 80035dc:	e01d      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035de:	2301      	movs	r3, #1
 80035e0:	e01b      	b.n	800361a <HAL_GPIO_Init+0x26a>
 80035e2:	bf00      	nop
 80035e4:	58000080 	.word	0x58000080
 80035e8:	58024400 	.word	0x58024400
 80035ec:	58000400 	.word	0x58000400
 80035f0:	58020000 	.word	0x58020000
 80035f4:	58020400 	.word	0x58020400
 80035f8:	58020800 	.word	0x58020800
 80035fc:	58020c00 	.word	0x58020c00
 8003600:	58021000 	.word	0x58021000
 8003604:	58021400 	.word	0x58021400
 8003608:	58021800 	.word	0x58021800
 800360c:	58021c00 	.word	0x58021c00
 8003610:	58022000 	.word	0x58022000
 8003614:	58022400 	.word	0x58022400
 8003618:	2300      	movs	r3, #0
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	f002 0203 	and.w	r2, r2, #3
 8003620:	0092      	lsls	r2, r2, #2
 8003622:	4093      	lsls	r3, r2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800362a:	4938      	ldr	r1, [pc, #224]	; (800370c <HAL_GPIO_Init+0x35c>)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800365e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800368c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3301      	adds	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f47f ae63 	bne.w	80033c4 <HAL_GPIO_Init+0x14>
  }
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	3724      	adds	r7, #36	; 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	58000400 	.word	0x58000400

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	4603      	mov	r3, r0
 800374a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800375c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd ffb5 	bl	80016d8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8003782:	490c      	ldr	r1, [pc, #48]	; (80037b4 <HAL_HSEM_Take+0x3c>)
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_HSEM_Take+0x40>)
 8003788:	4313      	orrs	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8003790:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <HAL_HSEM_Take+0x3c>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_HSEM_Take+0x40>)
 800379c:	430b      	orrs	r3, r1
 800379e:	429a      	cmp	r2, r3
 80037a0:	d101      	bne.n	80037a6 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	58026400 	.word	0x58026400
 80037b8:	80000300 	.word	0x80000300

080037bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_HSEM_FastTake+0x2c>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3320      	adds	r3, #32
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_HSEM_FastTake+0x30>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	58026400 	.word	0x58026400
 80037ec:	80000300 	.word	0x80000300

080037f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80037fa:	4906      	ldr	r1, [pc, #24]	; (8003814 <HAL_HSEM_Release+0x24>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	58026400 	.word	0x58026400

08003818 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	2b06      	cmp	r3, #6
 800382a:	d00a      	beq.n	8003842 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e040      	b.n	80038c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e03e      	b.n	80038c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003842:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800384a:	491f      	ldr	r1, [pc, #124]	; (80038c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003852:	f7fe fa3f 	bl	8001cd4 <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003858:	e009      	b.n	800386e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800385a:	f7fe fa3b 	bl	8001cd4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003868:	d901      	bls.n	800386e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e028      	b.n	80038c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387a:	d1ee      	bne.n	800385a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b1e      	cmp	r3, #30
 8003880:	d008      	beq.n	8003894 <HAL_PWREx_ConfigSupply+0x7c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b2e      	cmp	r3, #46	; 0x2e
 8003886:	d005      	beq.n	8003894 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b1d      	cmp	r3, #29
 800388c:	d002      	beq.n	8003894 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b2d      	cmp	r3, #45	; 0x2d
 8003892:	d114      	bne.n	80038be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003894:	f7fe fa1e 	bl	8001cd4 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800389a:	e009      	b.n	80038b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800389c:	f7fe fa1a 	bl	8001cd4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038aa:	d901      	bls.n	80038b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d1ee      	bne.n	800389c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58024800 	.word	0x58024800

080038cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f000 bc1c 	b.w	8004118 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8087 	beq.w	80039fc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b9e      	ldr	r3, [pc, #632]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f8:	4b9b      	ldr	r3, [pc, #620]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	2b10      	cmp	r3, #16
 8003902:	d007      	beq.n	8003914 <HAL_RCC_OscConfig+0x48>
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b18      	cmp	r3, #24
 8003908:	d110      	bne.n	800392c <HAL_RCC_OscConfig+0x60>
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b94      	ldr	r3, [pc, #592]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d06c      	beq.n	80039fa <HAL_RCC_OscConfig+0x12e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d168      	bne.n	80039fa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e3f5      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x78>
 8003936:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a8b      	ldr	r2, [pc, #556]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e02e      	b.n	80039a2 <HAL_RCC_OscConfig+0xd6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10c      	bne.n	8003966 <HAL_RCC_OscConfig+0x9a>
 800394c:	4b86      	ldr	r3, [pc, #536]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a85      	ldr	r2, [pc, #532]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b83      	ldr	r3, [pc, #524]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a82      	ldr	r2, [pc, #520]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e01d      	b.n	80039a2 <HAL_RCC_OscConfig+0xd6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0xbe>
 8003970:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7c      	ldr	r2, [pc, #496]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b7a      	ldr	r3, [pc, #488]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a79      	ldr	r2, [pc, #484]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0xd6>
 800398a:	4b77      	ldr	r3, [pc, #476]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a76      	ldr	r2, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b74      	ldr	r3, [pc, #464]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a73      	ldr	r2, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 800399c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fe f993 	bl	8001cd4 <HAL_GetTick>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b2:	f7fe f98f 	bl	8001cd4 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	; 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e3a9      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039c4:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0xe6>
 80039d0:	e014      	b.n	80039fc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe f97f 	bl	8001cd4 <HAL_GetTick>
 80039d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039da:	f7fe f97b 	bl	8001cd4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b64      	cmp	r3, #100	; 0x64
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e395      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ec:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x10e>
 80039f8:	e000      	b.n	80039fc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80ca 	beq.w	8003b9e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0a:	4b57      	ldr	r3, [pc, #348]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a12:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a14:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCC_OscConfig+0x164>
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b18      	cmp	r3, #24
 8003a24:	d156      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x208>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d151      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x17c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e367      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a48:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 0219 	bic.w	r2, r3, #25
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4944      	ldr	r1, [pc, #272]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a5a:	f7fe f93b 	bl	8001cd4 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a62:	f7fe f937 	bl	8001cd4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e351      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a74:	4b3c      	ldr	r3, [pc, #240]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	f7fe f958 	bl	8001d34 <HAL_GetREVID>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d817      	bhi.n	8003abe <HAL_RCC_OscConfig+0x1f2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1dc>
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a9e:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa6:	e07a      	b.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	492c      	ldr	r1, [pc, #176]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abc:	e06f      	b.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	4926      	ldr	r1, [pc, #152]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad2:	e064      	b.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d047      	beq.n	8003b6c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003adc:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 0219 	bic.w	r2, r3, #25
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	491f      	ldr	r1, [pc, #124]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fe f8f1 	bl	8001cd4 <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fe f8ed 	bl	8001cd4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e307      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	f7fe f90e 	bl	8001d34 <HAL_GetREVID>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d817      	bhi.n	8003b52 <HAL_RCC_OscConfig+0x286>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x270>
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b32:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	e030      	b.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	4907      	ldr	r1, [pc, #28]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	e025      	b.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	4901      	ldr	r1, [pc, #4]	; (8003b68 <HAL_RCC_OscConfig+0x29c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
 8003b66:	e01a      	b.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
 8003b68:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6c:	4b9e      	ldr	r3, [pc, #632]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a9d      	ldr	r2, [pc, #628]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe f8ac 	bl	8001cd4 <HAL_GetTick>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fe f8a8 	bl	8001cd4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e2c2      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b92:	4b95      	ldr	r3, [pc, #596]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80a9 	beq.w	8003cfe <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bac:	4b8e      	ldr	r3, [pc, #568]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb6:	4b8c      	ldr	r3, [pc, #560]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d007      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x306>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b18      	cmp	r3, #24
 8003bc6:	d13a      	bne.n	8003c3e <HAL_RCC_OscConfig+0x372>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d135      	bne.n	8003c3e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bd2:	4b85      	ldr	r3, [pc, #532]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x31e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e296      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bea:	f7fe f8a3 	bl	8001d34 <HAL_GetREVID>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d817      	bhi.n	8003c28 <HAL_RCC_OscConfig+0x35c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d108      	bne.n	8003c12 <HAL_RCC_OscConfig+0x346>
 8003c00:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c08:	4a77      	ldr	r2, [pc, #476]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c0e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c10:	e075      	b.n	8003cfe <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c12:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	069b      	lsls	r3, r3, #26
 8003c20:	4971      	ldr	r1, [pc, #452]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c26:	e06a      	b.n	8003cfe <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c28:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	496c      	ldr	r1, [pc, #432]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c3c:	e05f      	b.n	8003cfe <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d042      	beq.n	8003ccc <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c46:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a67      	ldr	r2, [pc, #412]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fe f83f 	bl	8001cd4 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c5a:	f7fe f83b 	bl	8001cd4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e255      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c78:	f7fe f85c 	bl	8001d34 <HAL_GetREVID>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d817      	bhi.n	8003cb6 <HAL_RCC_OscConfig+0x3ea>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x3d4>
 8003c8e:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c96:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c9c:	6053      	str	r3, [r2, #4]
 8003c9e:	e02e      	b.n	8003cfe <HAL_RCC_OscConfig+0x432>
 8003ca0:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	069b      	lsls	r3, r3, #26
 8003cae:	494e      	ldr	r1, [pc, #312]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
 8003cb4:	e023      	b.n	8003cfe <HAL_RCC_OscConfig+0x432>
 8003cb6:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	4948      	ldr	r1, [pc, #288]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60cb      	str	r3, [r1, #12]
 8003cca:	e018      	b.n	8003cfe <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a45      	ldr	r2, [pc, #276]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fffc 	bl	8001cd4 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fff8 	bl	8001cd4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e212      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d019      	beq.n	8003d46 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d12:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fd ffd9 	bl	8001cd4 <HAL_GetTick>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fd ffd5 	bl	8001cd4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e1ef      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x45a>
 8003d44:	e018      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d46:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fd ffbf 	bl	8001cd4 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fd ffbb 	bl	8001cd4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1d5      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d039      	beq.n	8003df8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d019      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d8c:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d98:	f7fd ff9c 	bl	8001cd4 <HAL_GetTick>
 8003d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003da0:	f7fd ff98 	bl	8001cd4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e1b2      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4d4>
 8003dbe:	e01b      	b.n	8003df8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x51c>)
 8003dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dcc:	f7fd ff82 	bl	8001cd4 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dd4:	f7fd ff7e 	bl	8001cd4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d904      	bls.n	8003dec <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e198      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
 8003de6:	bf00      	nop
 8003de8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dec:	4ba3      	ldr	r3, [pc, #652]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ed      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8081 	beq.w	8003f08 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e06:	4b9e      	ldr	r3, [pc, #632]	; (8004080 <HAL_RCC_OscConfig+0x7b4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a9d      	ldr	r2, [pc, #628]	; (8004080 <HAL_RCC_OscConfig+0x7b4>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e12:	f7fd ff5f 	bl	8001cd4 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e1a:	f7fd ff5b 	bl	8001cd4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b64      	cmp	r3, #100	; 0x64
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e175      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2c:	4b94      	ldr	r3, [pc, #592]	; (8004080 <HAL_RCC_OscConfig+0x7b4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x582>
 8003e40:	4b8e      	ldr	r3, [pc, #568]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a8d      	ldr	r2, [pc, #564]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	e02d      	b.n	8003eaa <HAL_RCC_OscConfig+0x5de>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5a4>
 8003e56:	4b89      	ldr	r3, [pc, #548]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a88      	ldr	r2, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
 8003e62:	4b86      	ldr	r3, [pc, #536]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a85      	ldr	r2, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6e:	e01c      	b.n	8003eaa <HAL_RCC_OscConfig+0x5de>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d10c      	bne.n	8003e92 <HAL_RCC_OscConfig+0x5c6>
 8003e78:	4b80      	ldr	r3, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a7f      	ldr	r2, [pc, #508]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	4b7d      	ldr	r3, [pc, #500]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a7c      	ldr	r2, [pc, #496]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	e00b      	b.n	8003eaa <HAL_RCC_OscConfig+0x5de>
 8003e92:	4b7a      	ldr	r3, [pc, #488]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a79      	ldr	r2, [pc, #484]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	4b77      	ldr	r3, [pc, #476]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a76      	ldr	r2, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d015      	beq.n	8003ede <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd ff0f 	bl	8001cd4 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd ff0b 	bl	8001cd4 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e123      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0ee      	beq.n	8003eba <HAL_RCC_OscConfig+0x5ee>
 8003edc:	e014      	b.n	8003f08 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ede:	f7fd fef9 	bl	8001cd4 <HAL_GetTick>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fd fef5 	bl	8001cd4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e10d      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003efc:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1ee      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8102 	beq.w	8004116 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f12:	4b5a      	ldr	r3, [pc, #360]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1a:	2b18      	cmp	r3, #24
 8003f1c:	f000 80bd 	beq.w	800409a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f040 8095 	bne.w	8004054 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a53      	ldr	r2, [pc, #332]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fecd 	bl	8001cd4 <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd fec9 	bl	8001cd4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0e3      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f50:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5c:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f60:	4b48      	ldr	r3, [pc, #288]	; (8004084 <HAL_RCC_OscConfig+0x7b8>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	4942      	ldr	r1, [pc, #264]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	628b      	str	r3, [r1, #40]	; 0x28
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	3b01      	subs	r3, #1
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fa6:	4935      	ldr	r1, [pc, #212]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003fac:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	4a32      	ldr	r2, [pc, #200]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fb8:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbc:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_RCC_OscConfig+0x7bc>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fc4:	00d2      	lsls	r2, r2, #3
 8003fc6:	492d      	ldr	r1, [pc, #180]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f023 020c 	bic.w	r2, r3, #12
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	4928      	ldr	r1, [pc, #160]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fde:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	f023 0202 	bic.w	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4924      	ldr	r1, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8004002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004008:	4b1c      	ldr	r3, [pc, #112]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 800400e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd fe52 	bl	8001cd4 <HAL_GetTick>
 8004030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd fe4e 	bl	8001cd4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e068      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x768>
 8004052:	e060      	b.n	8004116 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a08      	ldr	r2, [pc, #32]	; (800407c <HAL_RCC_OscConfig+0x7b0>)
 800405a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd fe38 	bl	8001cd4 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004066:	e011      	b.n	800408c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004068:	f7fd fe34 	bl	8001cd4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d90a      	bls.n	800408c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e04e      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400
 8004080:	58024800 	.word	0x58024800
 8004084:	fffffc0c 	.word	0xfffffc0c
 8004088:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_OscConfig+0x854>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e7      	bne.n	8004068 <HAL_RCC_OscConfig+0x79c>
 8004098:	e03d      	b.n	8004116 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800409a:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCC_OscConfig+0x854>)
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_RCC_OscConfig+0x854>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d031      	beq.n	8004112 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f003 0203 	and.w	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d12a      	bne.n	8004112 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d122      	bne.n	8004112 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d11a      	bne.n	8004112 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d111      	bne.n	8004112 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d108      	bne.n	8004112 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0e1b      	lsrs	r3, r3, #24
 8004104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3730      	adds	r7, #48	; 0x30
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	58024400 	.word	0x58024400

08004124 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e19c      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004138:	4b8a      	ldr	r3, [pc, #552]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d910      	bls.n	8004168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b87      	ldr	r3, [pc, #540]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 020f 	bic.w	r2, r3, #15
 800414e:	4985      	ldr	r1, [pc, #532]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b83      	ldr	r3, [pc, #524]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e184      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d010      	beq.n	8004196 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004180:	429a      	cmp	r2, r3
 8004182:	d908      	bls.n	8004196 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004184:	4b78      	ldr	r3, [pc, #480]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4975      	ldr	r1, [pc, #468]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004192:	4313      	orrs	r3, r2
 8004194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	4b70      	ldr	r3, [pc, #448]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d908      	bls.n	80041c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041b2:	4b6d      	ldr	r3, [pc, #436]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	496a      	ldr	r1, [pc, #424]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	4b64      	ldr	r3, [pc, #400]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041dc:	429a      	cmp	r2, r3
 80041de:	d908      	bls.n	80041f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041e0:	4b61      	ldr	r3, [pc, #388]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	495e      	ldr	r1, [pc, #376]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800420a:	429a      	cmp	r2, r3
 800420c:	d908      	bls.n	8004220 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800420e:	4b56      	ldr	r3, [pc, #344]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	4953      	ldr	r1, [pc, #332]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 800421c:	4313      	orrs	r3, r2
 800421e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4b4d      	ldr	r3, [pc, #308]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	429a      	cmp	r2, r3
 800423a:	d908      	bls.n	800424e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f023 020f 	bic.w	r2, r3, #15
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4947      	ldr	r1, [pc, #284]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 800424a:	4313      	orrs	r3, r2
 800424c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d055      	beq.n	8004306 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800425a:	4b43      	ldr	r3, [pc, #268]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4940      	ldr	r1, [pc, #256]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004268:	4313      	orrs	r3, r2
 800426a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d107      	bne.n	8004284 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004274:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d121      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0f6      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d107      	bne.n	800429c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d115      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0ea      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042a4:	4b30      	ldr	r3, [pc, #192]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0de      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d6      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c4:	4b28      	ldr	r3, [pc, #160]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f023 0207 	bic.w	r2, r3, #7
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4925      	ldr	r1, [pc, #148]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fd fcfd 	bl	8001cd4 <HAL_GetTick>
 80042da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042de:	f7fd fcf9 	bl	8001cd4 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0be      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	429a      	cmp	r2, r3
 8004304:	d1eb      	bne.n	80042de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	429a      	cmp	r2, r3
 8004320:	d208      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f023 020f 	bic.w	r2, r3, #15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	490e      	ldr	r1, [pc, #56]	; (8004368 <HAL_RCC_ClockConfig+0x244>)
 8004330:	4313      	orrs	r3, r2
 8004332:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d214      	bcs.n	800436c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	4906      	ldr	r1, [pc, #24]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e086      	b.n	8004472 <HAL_RCC_ClockConfig+0x34e>
 8004364:	52002000 	.word	0x52002000
 8004368:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d010      	beq.n	800439a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	4b3f      	ldr	r3, [pc, #252]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004384:	429a      	cmp	r2, r3
 8004386:	d208      	bcs.n	800439a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004388:	4b3c      	ldr	r3, [pc, #240]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	4939      	ldr	r1, [pc, #228]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 8004396:	4313      	orrs	r3, r2
 8004398:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	4b34      	ldr	r3, [pc, #208]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d208      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043b6:	4b31      	ldr	r3, [pc, #196]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	492e      	ldr	r1, [pc, #184]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d208      	bcs.n	80043f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	4922      	ldr	r1, [pc, #136]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d010      	beq.n	8004424 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800440e:	429a      	cmp	r2, r3
 8004410:	d208      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4917      	ldr	r1, [pc, #92]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 8004420:	4313      	orrs	r3, r2
 8004422:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004424:	f000 f834 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b14      	ldr	r3, [pc, #80]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	4912      	ldr	r1, [pc, #72]	; (8004480 <HAL_RCC_ClockConfig+0x35c>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_RCC_ClockConfig+0x358>)
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <HAL_RCC_ClockConfig+0x35c>)
 800444c:	5cd3      	ldrb	r3, [r2, r3]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <HAL_RCC_ClockConfig+0x360>)
 800445a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x364>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_ClockConfig+0x368>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fbea 	bl	8001c40 <HAL_InitTick>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	0800cf74 	.word	0x0800cf74
 8004484:	24000004 	.word	0x24000004
 8004488:	24000000 	.word	0x24000000
 800448c:	24000008 	.word	0x24000008

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004496:	4bb3      	ldr	r3, [pc, #716]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800449e:	2b18      	cmp	r3, #24
 80044a0:	f200 8155 	bhi.w	800474e <HAL_RCC_GetSysClockFreq+0x2be>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	08004511 	.word	0x08004511
 80044b0:	0800474f 	.word	0x0800474f
 80044b4:	0800474f 	.word	0x0800474f
 80044b8:	0800474f 	.word	0x0800474f
 80044bc:	0800474f 	.word	0x0800474f
 80044c0:	0800474f 	.word	0x0800474f
 80044c4:	0800474f 	.word	0x0800474f
 80044c8:	0800474f 	.word	0x0800474f
 80044cc:	08004537 	.word	0x08004537
 80044d0:	0800474f 	.word	0x0800474f
 80044d4:	0800474f 	.word	0x0800474f
 80044d8:	0800474f 	.word	0x0800474f
 80044dc:	0800474f 	.word	0x0800474f
 80044e0:	0800474f 	.word	0x0800474f
 80044e4:	0800474f 	.word	0x0800474f
 80044e8:	0800474f 	.word	0x0800474f
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800474f 	.word	0x0800474f
 80044f4:	0800474f 	.word	0x0800474f
 80044f8:	0800474f 	.word	0x0800474f
 80044fc:	0800474f 	.word	0x0800474f
 8004500:	0800474f 	.word	0x0800474f
 8004504:	0800474f 	.word	0x0800474f
 8004508:	0800474f 	.word	0x0800474f
 800450c:	08004543 	.word	0x08004543
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004510:	4b94      	ldr	r3, [pc, #592]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800451c:	4b91      	ldr	r3, [pc, #580]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	4a90      	ldr	r2, [pc, #576]	; (8004768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800452e:	e111      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004530:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004532:	61bb      	str	r3, [r7, #24]
    break;
 8004534:	e10e      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004536:	4b8d      	ldr	r3, [pc, #564]	; (800476c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004538:	61bb      	str	r3, [r7, #24]
    break;
 800453a:	e10b      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800453c:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800453e:	61bb      	str	r3, [r7, #24]
    break;
 8004540:	e108      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004542:	4b88      	ldr	r3, [pc, #544]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800454c:	4b85      	ldr	r3, [pc, #532]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004556:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004558:	4b82      	ldr	r3, [pc, #520]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004562:	4b80      	ldr	r3, [pc, #512]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	08db      	lsrs	r3, r3, #3
 8004568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80e1 	beq.w	8004748 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b02      	cmp	r3, #2
 800458a:	f000 8083 	beq.w	8004694 <HAL_RCC_GetSysClockFreq+0x204>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b02      	cmp	r3, #2
 8004592:	f200 80a1 	bhi.w	80046d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x114>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d056      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045a2:	e099      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a4:	4b6f      	ldr	r3, [pc, #444]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02d      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b0:	4b6c      	ldr	r3, [pc, #432]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	4a6b      	ldr	r2, [pc, #428]	; (8004768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b62      	ldr	r3, [pc, #392]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800460a:	e087      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004778 <HAL_RCC_GetSysClockFreq+0x2e8>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b51      	ldr	r3, [pc, #324]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004632:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464e:	e065      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800477c <HAL_RCC_GetSysClockFreq+0x2ec>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b40      	ldr	r3, [pc, #256]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a02 	vldr	s12, [r7, #8]
 8004676:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004692:	e043      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004780 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d6:	e021      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800477c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800471a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	0a5b      	lsrs	r3, r3, #9
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	3301      	adds	r3, #1
 8004728:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004734:	edd7 6a07 	vldr	s13, [r7, #28]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 3a90 	vmov	r3, s15
 8004744:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004746:	e005      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
    break;
 800474c:	e002      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004750:	61bb      	str	r3, [r7, #24]
    break;
 8004752:	bf00      	nop
  }

  return sysclockfreq;
 8004754:	69bb      	ldr	r3, [r7, #24]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
 8004768:	03d09000 	.word	0x03d09000
 800476c:	003d0900 	.word	0x003d0900
 8004770:	017d7840 	.word	0x017d7840
 8004774:	46000000 	.word	0x46000000
 8004778:	4c742400 	.word	0x4c742400
 800477c:	4a742400 	.word	0x4a742400
 8004780:	4bbebc20 	.word	0x4bbebc20

08004784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800478a:	f7ff fe81 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	0a1b      	lsrs	r3, r3, #8
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	490f      	ldr	r1, [pc, #60]	; (80047d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	fa22 f303 	lsr.w	r3, r2, r3
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <HAL_RCC_GetHCLKFreq+0x58>)
 80047c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCC_GetHCLKFreq+0x58>)
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	58024400 	.word	0x58024400
 80047d8:	0800cf74 	.word	0x0800cf74
 80047dc:	24000004 	.word	0x24000004
 80047e0:	24000000 	.word	0x24000000

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047e8:	f7ff ffcc 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4904      	ldr	r1, [pc, #16]	; (800480c <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	58024400 	.word	0x58024400
 800480c:	0800cf74 	.word	0x0800cf74

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004814:	f7ff ffb6 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	58024400 	.word	0x58024400
 8004838:	0800cf74 	.word	0x0800cf74

0800483c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004844:	2300      	movs	r3, #0
 8004846:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004848:	2300      	movs	r3, #0
 800484a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d03f      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004860:	d02a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004866:	d824      	bhi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486c:	d018      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800486e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004872:	d81e      	bhi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800487c:	d007      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800487e:	e018      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004880:	4bab      	ldr	r3, [pc, #684]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4aaa      	ldr	r2, [pc, #680]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800488c:	e015      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f001 fff3 	bl	8006880 <RCCEx_PLL2_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800489e:	e00c      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3324      	adds	r3, #36	; 0x24
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f002 f89c 	bl	80069e4 <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
      break;
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048c0:	4b9b      	ldr	r3, [pc, #620]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048cc:	4998      	ldr	r1, [pc, #608]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	650b      	str	r3, [r1, #80]	; 0x50
 80048d2:	e001      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03d      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d826      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004909 	.word	0x08004909
 80048f8:	08004917 	.word	0x08004917
 80048fc:	08004929 	.word	0x08004929
 8004900:	08004941 	.word	0x08004941
 8004904:	08004941 	.word	0x08004941
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004908:	4b89      	ldr	r3, [pc, #548]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	4a88      	ldr	r2, [pc, #544]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800490e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004914:	e015      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f001 ffaf 	bl	8006880 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004926:	e00c      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3324      	adds	r3, #36	; 0x24
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f002 f858 	bl	80069e4 <RCCEx_PLL3_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004938:	e003      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      break;
 800493e:	e000      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004948:	4b79      	ldr	r3, [pc, #484]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	f023 0207 	bic.w	r2, r3, #7
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	4976      	ldr	r1, [pc, #472]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	650b      	str	r3, [r1, #80]	; 0x50
 800495a:	e001      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004968:	2b00      	cmp	r3, #0
 800496a:	d042      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004974:	d02b      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497a:	d825      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800497c:	2bc0      	cmp	r3, #192	; 0xc0
 800497e:	d028      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004980:	2bc0      	cmp	r3, #192	; 0xc0
 8004982:	d821      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d016      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d81d      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d007      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004994:	e018      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4b66      	ldr	r3, [pc, #408]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a65      	ldr	r2, [pc, #404]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049a2:	e017      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 ff68 	bl	8006880 <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049b4:	e00e      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3324      	adds	r3, #36	; 0x24
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f002 f811 	bl	80069e4 <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049c6:	e005      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	e002      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049da:	4b55      	ldr	r3, [pc, #340]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	4952      	ldr	r1, [pc, #328]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	650b      	str	r3, [r1, #80]	; 0x50
 80049ec:	e001      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d049      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a08:	d030      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a0e:	d82a      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a14:	d02c      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a1a:	d824      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a20:	d018      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a26:	d81e      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a30:	d007      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a32:	e018      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a3d      	ldr	r2, [pc, #244]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a40:	e017      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 ff19 	bl	8006880 <RCCEx_PLL2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a52:	e00e      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 ffc2 	bl	80069e4 <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a64:	e005      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a78:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a86:	492a      	ldr	r1, [pc, #168]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	658b      	str	r3, [r1, #88]	; 0x58
 8004a8c:	e001      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04c      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa8:	d030      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aae:	d82a      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab4:	d02c      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004ab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aba:	d824      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac0:	d018      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac6:	d81e      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad0:	d007      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ad2:	e018      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae0:	e017      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 fec9 	bl	8006880 <RCCEx_PLL2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004af2:	e00e      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3324      	adds	r3, #36	; 0x24
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 ff72 	bl	80069e4 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b04:	e005      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10d      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b26:	4902      	ldr	r1, [pc, #8]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b2e:	bf00      	nop
 8004b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d032      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d01c      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d817      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d00c      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d813      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d10f      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4baf      	ldr	r3, [pc, #700]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4aae      	ldr	r2, [pc, #696]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b6c:	e00e      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2102      	movs	r1, #2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 fe83 	bl	8006880 <RCCEx_PLL2_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b7e:	e005      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b92:	4ba3      	ldr	r3, [pc, #652]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	49a0      	ldr	r1, [pc, #640]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ba4:	e001      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d047      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bbe:	d030      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc4:	d82a      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bca:	d02c      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd0:	d824      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d018      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d81e      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d007      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004be8:	e018      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bea:	4b8d      	ldr	r3, [pc, #564]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a8c      	ldr	r2, [pc, #560]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bf6:	e017      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fe3e 	bl	8006880 <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c08:	e00e      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fee7 	bl	80069e4 <RCCEx_PLL3_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c1a:	e005      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c2e:	4b7c      	ldr	r3, [pc, #496]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	4979      	ldr	r1, [pc, #484]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c40:	e001      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d049      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c5a:	d02e      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c60:	d828      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c66:	d02a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c6c:	d822      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c72:	d026      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c78:	d81c      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c84:	d816      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01d      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8e:	d111      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2101      	movs	r1, #1
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 fdf2 	bl	8006880 <RCCEx_PLL2_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ca0:	e012      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3324      	adds	r3, #36	; 0x24
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fe9b 	bl	80069e4 <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cb2:	e009      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb8:	e006      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cce:	4b54      	ldr	r3, [pc, #336]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cda:	4951      	ldr	r1, [pc, #324]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	650b      	str	r3, [r1, #80]	; 0x50
 8004ce0:	e001      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04b      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cfc:	d02e      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d02:	d828      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d02a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d822      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d14:	d026      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d1a:	d81c      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d20:	d010      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d26:	d816      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01d      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d30:	d111      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 fda1 	bl	8006880 <RCCEx_PLL2_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d42:	e012      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 fe4a 	bl	80069e4 <RCCEx_PLL3_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d54:	e009      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5a:	e006      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e004      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d60:	bf00      	nop
 8004d62:	e002      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d64:	bf00      	nop
 8004d66:	e000      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d7e:	4928      	ldr	r1, [pc, #160]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	658b      	str	r3, [r1, #88]	; 0x58
 8004d84:	e001      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02f      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9e:	d00e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da4:	d814      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d015      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dae:	d10f      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fd5b 	bl	8006880 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	490d      	ldr	r1, [pc, #52]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	650b      	str	r3, [r1, #80]	; 0x50
 8004df0:	e001      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d033      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d81c      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e4b 	.word	0x08004e4b
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e33 	.word	0x08004e33
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e24:	4bb8      	ldr	r3, [pc, #736]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4ab7      	ldr	r2, [pc, #732]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e30:	e00c      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fd21 	bl	8006880 <RCCEx_PLL2_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e52:	4bad      	ldr	r3, [pc, #692]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	49aa      	ldr	r1, [pc, #680]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e64:	e001      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8086 	beq.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e78:	4ba4      	ldr	r3, [pc, #656]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4aa3      	ldr	r2, [pc, #652]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e84:	f7fc ff26 	bl	8001cd4 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e8a:	e009      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8c:	f7fc ff22 	bl	8001cd4 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	; 0x64
 8004e98:	d902      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e9e:	e005      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea0:	4b9a      	ldr	r3, [pc, #616]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ef      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d166      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004eb2:	4b95      	ldr	r3, [pc, #596]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ebc:	4053      	eors	r3, r2
 8004ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d013      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec6:	4b90      	ldr	r3, [pc, #576]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ed0:	4b8d      	ldr	r3, [pc, #564]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a8c      	ldr	r2, [pc, #560]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004edc:	4b8a      	ldr	r3, [pc, #552]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a89      	ldr	r2, [pc, #548]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ee8:	4a87      	ldr	r2, [pc, #540]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef8:	d115      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fc feeb 	bl	8001cd4 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f00:	e00b      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fc fee7 	bl	8001cd4 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d902      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	75fb      	strb	r3, [r7, #23]
            break;
 8004f18:	e005      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f1a:	4b7b      	ldr	r3, [pc, #492]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0ed      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d126      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3a:	d10d      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f3c:	4b72      	ldr	r3, [pc, #456]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f4a:	0919      	lsrs	r1, r3, #4
 8004f4c:	4b70      	ldr	r3, [pc, #448]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004f4e:	400b      	ands	r3, r1
 8004f50:	496d      	ldr	r1, [pc, #436]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	610b      	str	r3, [r1, #16]
 8004f56:	e005      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f58:	4b6b      	ldr	r3, [pc, #428]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4a6a      	ldr	r2, [pc, #424]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f62:	6113      	str	r3, [r2, #16]
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f72:	4965      	ldr	r1, [pc, #404]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	670b      	str	r3, [r1, #112]	; 0x70
 8004f78:	e004      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	75bb      	strb	r3, [r7, #22]
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d07e      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f94:	2b28      	cmp	r3, #40	; 0x28
 8004f96:	d867      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	0800506f 	.word	0x0800506f
 8004fa4:	08005069 	.word	0x08005069
 8004fa8:	08005069 	.word	0x08005069
 8004fac:	08005069 	.word	0x08005069
 8004fb0:	08005069 	.word	0x08005069
 8004fb4:	08005069 	.word	0x08005069
 8004fb8:	08005069 	.word	0x08005069
 8004fbc:	08005069 	.word	0x08005069
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	08005069 	.word	0x08005069
 8004fcc:	08005069 	.word	0x08005069
 8004fd0:	08005069 	.word	0x08005069
 8004fd4:	08005069 	.word	0x08005069
 8004fd8:	08005069 	.word	0x08005069
 8004fdc:	08005069 	.word	0x08005069
 8004fe0:	08005057 	.word	0x08005057
 8004fe4:	08005069 	.word	0x08005069
 8004fe8:	08005069 	.word	0x08005069
 8004fec:	08005069 	.word	0x08005069
 8004ff0:	08005069 	.word	0x08005069
 8004ff4:	08005069 	.word	0x08005069
 8004ff8:	08005069 	.word	0x08005069
 8004ffc:	08005069 	.word	0x08005069
 8005000:	0800506f 	.word	0x0800506f
 8005004:	08005069 	.word	0x08005069
 8005008:	08005069 	.word	0x08005069
 800500c:	08005069 	.word	0x08005069
 8005010:	08005069 	.word	0x08005069
 8005014:	08005069 	.word	0x08005069
 8005018:	08005069 	.word	0x08005069
 800501c:	08005069 	.word	0x08005069
 8005020:	0800506f 	.word	0x0800506f
 8005024:	08005069 	.word	0x08005069
 8005028:	08005069 	.word	0x08005069
 800502c:	08005069 	.word	0x08005069
 8005030:	08005069 	.word	0x08005069
 8005034:	08005069 	.word	0x08005069
 8005038:	08005069 	.word	0x08005069
 800503c:	08005069 	.word	0x08005069
 8005040:	0800506f 	.word	0x0800506f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fc18 	bl	8006880 <RCCEx_PLL2_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005054:	e00c      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3324      	adds	r3, #36	; 0x24
 800505a:	2101      	movs	r1, #1
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fcc1 	bl	80069e4 <RCCEx_PLL3_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005066:	e003      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
      break;
 800506c:	e000      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800506e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005082:	4921      	ldr	r1, [pc, #132]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005084:	4313      	orrs	r3, r2
 8005086:	654b      	str	r3, [r1, #84]	; 0x54
 8005088:	e001      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03e      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d820      	bhi.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050eb 	.word	0x080050eb
 80050ac:	080050c1 	.word	0x080050c1
 80050b0:	080050d3 	.word	0x080050d3
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050eb 	.word	0x080050eb
 80050bc:	080050eb 	.word	0x080050eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 fbda 	bl	8006880 <RCCEx_PLL2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050d0:	e00c      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3324      	adds	r3, #36	; 0x24
 80050d6:	2101      	movs	r1, #1
 80050d8:	4618      	mov	r0, r3
 80050da:	f001 fc83 	bl	80069e4 <RCCEx_PLL3_Config>
 80050de:	4603      	mov	r3, r0
 80050e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050e2:	e003      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
      break;
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80050ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d110      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	f023 0207 	bic.w	r2, r3, #7
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fe:	4902      	ldr	r1, [pc, #8]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	654b      	str	r3, [r1, #84]	; 0x54
 8005104:	e008      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005106:	bf00      	nop
 8005108:	58024400 	.word	0x58024400
 800510c:	58024800 	.word	0x58024800
 8005110:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d039      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	2b05      	cmp	r3, #5
 800512c:	d820      	bhi.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005177 	.word	0x08005177
 8005138:	0800514d 	.word	0x0800514d
 800513c:	0800515f 	.word	0x0800515f
 8005140:	08005177 	.word	0x08005177
 8005144:	08005177 	.word	0x08005177
 8005148:	08005177 	.word	0x08005177
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fb94 	bl	8006880 <RCCEx_PLL2_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800515c:	e00c      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f001 fc3d 	bl	80069e4 <RCCEx_PLL3_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
      break;
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800517e:	4bb7      	ldr	r3, [pc, #732]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	f023 0207 	bic.w	r2, r3, #7
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	49b3      	ldr	r1, [pc, #716]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800518e:	4313      	orrs	r3, r2
 8005190:	658b      	str	r3, [r1, #88]	; 0x58
 8005192:	e001      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d04b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ae:	d02e      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80051b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b4:	d828      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d02a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d822      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c6:	d026      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80051c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051cc:	d81c      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d2:	d010      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d816      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01d      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80051de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e2:	d111      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fb48 	bl	8006880 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051f4:	e012      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3324      	adds	r3, #36	; 0x24
 80051fa:	2102      	movs	r1, #2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fbf1 	bl	80069e4 <RCCEx_PLL3_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
      break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800520e:	bf00      	nop
 8005210:	e004      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005212:	bf00      	nop
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800521a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005222:	4b8e      	ldr	r3, [pc, #568]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005230:	498a      	ldr	r1, [pc, #552]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005232:	4313      	orrs	r3, r2
 8005234:	654b      	str	r3, [r1, #84]	; 0x54
 8005236:	e001      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d04b      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800524e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005252:	d02e      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005258:	d828      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d02a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005264:	d822      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800526a:	d026      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800526c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005270:	d81c      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d010      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527c:	d816      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01d      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005286:	d111      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f001 faf6 	bl	8006880 <RCCEx_PLL2_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005298:	e012      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	2102      	movs	r1, #2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fb9f 	bl	80069e4 <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052aa:	e009      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	e006      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052b2:	bf00      	nop
 80052b4:	e004      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052b6:	bf00      	nop
 80052b8:	e002      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052ba:	bf00      	nop
 80052bc:	e000      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052c6:	4b65      	ldr	r3, [pc, #404]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052d4:	4961      	ldr	r1, [pc, #388]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	658b      	str	r3, [r1, #88]	; 0x58
 80052da:	e001      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d04b      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052f6:	d02e      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80052f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052fc:	d828      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005302:	d02a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005308:	d822      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800530a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800530e:	d026      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005310:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005314:	d81c      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531a:	d010      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800531c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005320:	d816      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01d      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532a:	d111      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	2100      	movs	r1, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f001 faa4 	bl	8006880 <RCCEx_PLL2_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800533c:	e012      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3324      	adds	r3, #36	; 0x24
 8005342:	2102      	movs	r1, #2
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fb4d 	bl	80069e4 <RCCEx_PLL3_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800534e:	e009      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
      break;
 8005354:	e006      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005356:	bf00      	nop
 8005358:	e004      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800535a:	bf00      	nop
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800536a:	4b3c      	ldr	r3, [pc, #240]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005378:	4938      	ldr	r1, [pc, #224]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800537a:	4313      	orrs	r3, r2
 800537c:	658b      	str	r3, [r1, #88]	; 0x58
 800537e:	e001      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d10a      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fb1e 	bl	80069e4 <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053b2:	4b2a      	ldr	r3, [pc, #168]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c0:	4926      	ldr	r1, [pc, #152]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053dc:	d10a      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	2102      	movs	r1, #2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fafd 	bl	80069e4 <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005402:	4916      	ldr	r1, [pc, #88]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005404:	4313      	orrs	r3, r2
 8005406:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d036      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800541a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541e:	d01f      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005424:	d817      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800542a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542e:	d009      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005430:	e011      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f001 fa21 	bl	8006880 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005442:	e00e      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	2102      	movs	r1, #2
 800544a:	4618      	mov	r0, r3
 800544c:	f001 faca 	bl	80069e4 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005454:	e005      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800545c:	58024400 	.word	0x58024400
      break;
 8005460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005468:	4b93      	ldr	r3, [pc, #588]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005476:	4990      	ldr	r1, [pc, #576]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	658b      	str	r3, [r1, #88]	; 0x58
 800547c:	e001      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d033      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005498:	d01c      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800549a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800549e:	d816      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80054a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a4:	d003      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80054a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054aa:	d007      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ae:	4b82      	ldr	r3, [pc, #520]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	4a81      	ldr	r2, [pc, #516]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3324      	adds	r3, #36	; 0x24
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 fa8e 	bl	80069e4 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054dc:	4b76      	ldr	r3, [pc, #472]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ea:	4973      	ldr	r1, [pc, #460]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	654b      	str	r3, [r1, #84]	; 0x54
 80054f0:	e001      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d029      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d007      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005510:	e00f      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005512:	4b69      	ldr	r3, [pc, #420]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a68      	ldr	r2, [pc, #416]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800551e:	e00b      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2102      	movs	r1, #2
 8005526:	4618      	mov	r0, r3
 8005528:	f001 f9aa 	bl	8006880 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005530:	e002      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
      break;
 8005536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800553e:	4b5e      	ldr	r3, [pc, #376]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005542:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	495b      	ldr	r1, [pc, #364]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005550:	e001      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3324      	adds	r3, #36	; 0x24
 8005566:	2102      	movs	r1, #2
 8005568:	4618      	mov	r0, r3
 800556a:	f001 fa3b 	bl	80069e4 <RCCEx_PLL3_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d030      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558c:	d017      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800558e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005592:	d811      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005598:	d013      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800559a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559e:	d80b      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d010      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a8:	d106      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055aa:	4b43      	ldr	r3, [pc, #268]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	4a42      	ldr	r2, [pc, #264]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055b6:	e007      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	e004      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ce:	4b3a      	ldr	r3, [pc, #232]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055da:	4937      	ldr	r1, [pc, #220]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	654b      	str	r3, [r1, #84]	; 0x54
 80055e0:	e001      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	492e      	ldr	r1, [pc, #184]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005610:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800561e:	4926      	ldr	r1, [pc, #152]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005630:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563c:	491e      	ldr	r1, [pc, #120]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800564e:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005658:	6113      	str	r3, [r2, #16]
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005664:	4914      	ldr	r1, [pc, #80]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005666:	4313      	orrs	r3, r2
 8005668:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da08      	bge.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	490e      	ldr	r1, [pc, #56]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	4906      	ldr	r1, [pc, #24]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80056a4:	7dbb      	ldrb	r3, [r7, #22]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	58024400 	.word	0x58024400

080056bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b090      	sub	sp, #64	; 0x40
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	f040 8095 	bne.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80056ce:	4bae      	ldr	r3, [pc, #696]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2b04      	cmp	r3, #4
 80056dc:	f200 8088 	bhi.w	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	080056fd 	.word	0x080056fd
 80056ec:	08005725 	.word	0x08005725
 80056f0:	0800574d 	.word	0x0800574d
 80056f4:	080057e9 	.word	0x080057e9
 80056f8:	08005775 	.word	0x08005775

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056fc:	4ba2      	ldr	r3, [pc, #648]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005708:	d108      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800570a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570e:	4618      	mov	r0, r3
 8005710:	f000 ff64 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005718:	f000 bc95 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005720:	f000 bc91 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005724:	4b98      	ldr	r3, [pc, #608]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005730:	d108      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005732:	f107 0318 	add.w	r3, r7, #24
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fca8 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005740:	f000 bc81 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005748:	f000 bc7d 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800574c:	4b8e      	ldr	r3, [pc, #568]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005758:	d108      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fde8 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005768:	f000 bc6d 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005770:	f000 bc69 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005774:	4b84      	ldr	r3, [pc, #528]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800577c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800577e:	4b82      	ldr	r3, [pc, #520]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005790:	4b7d      	ldr	r3, [pc, #500]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	08db      	lsrs	r3, r3, #3
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	4a7c      	ldr	r2, [pc, #496]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a2:	e01f      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057a4:	4b78      	ldr	r3, [pc, #480]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d106      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b8:	d102      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057ba:	4b75      	ldr	r3, [pc, #468]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057c0:	4b71      	ldr	r3, [pc, #452]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057cc:	d106      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d4:	d102      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057d6:	4b6f      	ldr	r3, [pc, #444]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057e0:	f000 bc31 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80057e4:	f000 bc2f 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057e8:	4b6b      	ldr	r3, [pc, #428]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ec:	f000 bc2b 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f4:	f000 bc27 	b.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057fe:	f040 8095 	bne.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005802:	4b61      	ldr	r3, [pc, #388]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005806:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800580a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005812:	d04d      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581a:	f200 8084 	bhi.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2bc0      	cmp	r3, #192	; 0xc0
 8005822:	d07d      	beq.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	2bc0      	cmp	r3, #192	; 0xc0
 8005828:	d87d      	bhi.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d02d      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d877      	bhi.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d012      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005842:	e070      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005844:	4b50      	ldr	r3, [pc, #320]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005850:	d107      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fec0 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005860:	e3f1      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005866:	e3ee      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005868:	4b47      	ldr	r3, [pc, #284]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005874:	d107      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fc06 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005884:	e3df      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800588a:	e3dc      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800588c:	4b3e      	ldr	r3, [pc, #248]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005898:	d107      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fd48 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058a8:	e3cd      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ae:	e3ca      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058b0:	4b35      	ldr	r3, [pc, #212]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058ba:	4b33      	ldr	r3, [pc, #204]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058cc:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	08db      	lsrs	r3, r3, #3
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	4a2d      	ldr	r2, [pc, #180]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058de:	e01e      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ec:	d106      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f4:	d102      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fa:	e010      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058fc:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005908:	d106      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005910:	d102      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005916:	e002      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800591c:	e393      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800591e:	e392      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005924:	e38f      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800592a:	e38c      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005932:	f040 80a7 	bne.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800593e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005946:	d05f      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800594e:	f200 8096 	bhi.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005958:	f000 808e 	beq.w	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005962:	f200 808c 	bhi.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800596c:	d03a      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005974:	f200 8083 	bhi.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00e      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005984:	d01c      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005986:	e07a      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005988:	58024400 	.word	0x58024400
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	017d7840 	.word	0x017d7840
 8005998:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800599c:	4baa      	ldr	r3, [pc, #680]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059a8:	d107      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fe14 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059b8:	e345      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059be:	e342      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059c0:	4ba1      	ldr	r3, [pc, #644]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059cc:	d107      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ce:	f107 0318 	add.w	r3, r7, #24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fb5a 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059dc:	e333      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e2:	e330      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059e4:	4b98      	ldr	r3, [pc, #608]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f0:	d107      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fc9c 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a00:	e321      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a06:	e31e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a08:	4b8f      	ldr	r3, [pc, #572]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a12:	4b8d      	ldr	r3, [pc, #564]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a24:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	4a87      	ldr	r2, [pc, #540]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a36:	e01e      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a38:	4b83      	ldr	r3, [pc, #524]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a44:	d106      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a4e:	4b80      	ldr	r3, [pc, #512]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a52:	e010      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a54:	4b7c      	ldr	r3, [pc, #496]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a60:	d106      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a68:	d102      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a6a:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a6e:	e002      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a74:	e2e7      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a76:	e2e6      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a78:	4b77      	ldr	r3, [pc, #476]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a7c:	e2e3      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a82:	e2e0      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8a:	f040 809c 	bne.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005a8e:	4b6e      	ldr	r3, [pc, #440]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005a96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a9e:	d054      	beq.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aa6:	f200 808b 	bhi.w	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ab0:	f000 8083 	beq.w	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aba:	f200 8081 	bhi.w	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac4:	d02f      	beq.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005acc:	d878      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ada:	d012      	beq.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005adc:	e070      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ade:	4b5a      	ldr	r3, [pc, #360]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aea:	d107      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fd73 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005afa:	e2a4      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b00:	e2a1      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b02:	4b51      	ldr	r3, [pc, #324]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b10:	f107 0318 	add.w	r3, r7, #24
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fab9 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005b1e:	e292      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b24:	e28f      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b26:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b32:	d107      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fbfb 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b42:	e280      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b48:	e27d      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b4a:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b54:	4b3c      	ldr	r3, [pc, #240]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d10c      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	4a36      	ldr	r2, [pc, #216]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b78:	e01e      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b7a:	4b33      	ldr	r3, [pc, #204]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d106      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b8e:	d102      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b90:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b94:	e010      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b96:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005bac:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb0:	e002      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005bb6:	e246      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bb8:	e245      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bba:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bbe:	e242      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc4:	e23f      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	f040 80a8 	bne.w	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005bd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be0:	d060      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be8:	f200 8097 	bhi.w	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf2:	f000 808f 	beq.w	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfc:	f200 808d 	bhi.w	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	d03b      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0e:	f200 8084 	bhi.w	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	d01d      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005c20:	e07b      	b.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fcd1 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c3e:	e202      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c44:	e1ff      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c46:	bf00      	nop
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	03d09000 	.word	0x03d09000
 8005c50:	003d0900 	.word	0x003d0900
 8005c54:	017d7840 	.word	0x017d7840
 8005c58:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c5c:	4ba3      	ldr	r3, [pc, #652]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c68:	d107      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c6a:	f107 0318 	add.w	r3, r7, #24
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fa0c 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c78:	e1e5      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c7e:	e1e2      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c80:	4b9a      	ldr	r3, [pc, #616]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c8e:	f107 030c 	add.w	r3, r7, #12
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fb4e 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c9c:	e1d3      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca2:	e1d0      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ca4:	4b91      	ldr	r3, [pc, #580]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cae:	4b8f      	ldr	r3, [pc, #572]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cc0:	4b8a      	ldr	r3, [pc, #552]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	08db      	lsrs	r3, r3, #3
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	4a89      	ldr	r2, [pc, #548]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd2:	e01e      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cd4:	4b85      	ldr	r3, [pc, #532]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce0:	d106      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ce8:	d102      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005cea:	4b82      	ldr	r3, [pc, #520]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cee:	e010      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cf0:	4b7e      	ldr	r3, [pc, #504]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d04:	d102      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d06:	4b7c      	ldr	r3, [pc, #496]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0a:	e002      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d10:	e199      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d12:	e198      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d14:	4b79      	ldr	r3, [pc, #484]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d18:	e195      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d1e:	e192      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d26:	d173      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005d28:	4b70      	ldr	r3, [pc, #448]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d38:	d02f      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d40:	d863      	bhi.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d012      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005d50:	e05b      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d52:	4b66      	ldr	r3, [pc, #408]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d60:	f107 0318 	add.w	r3, r7, #24
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f991 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d6e:	e16a      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d74:	e167      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d76:	4b5d      	ldr	r3, [pc, #372]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d82:	d107      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fad3 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d92:	e158      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d98:	e155      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d9a:	4b54      	ldr	r3, [pc, #336]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005da4:	4b51      	ldr	r3, [pc, #324]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d10c      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005db6:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	4a4b      	ldr	r2, [pc, #300]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc8:	e01e      	b.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dca:	4b48      	ldr	r3, [pc, #288]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd6:	d106      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dde:	d102      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005de0:	4b44      	ldr	r3, [pc, #272]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	e010      	b.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df2:	d106      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfa:	d102      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e06:	e11e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e08:	e11d      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e0e:	e11a      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e16:	d133      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e18:	4b34      	ldr	r3, [pc, #208]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005e30:	e023      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e32:	4b2e      	ldr	r3, [pc, #184]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e3e:	d107      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fbc9 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e4e:	e0fa      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e54:	e0f7      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e56:	4b25      	ldr	r3, [pc, #148]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e62:	d107      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e64:	f107 0318 	add.w	r3, r7, #24
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 f90f 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e72:	e0e8      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e78:	e0e5      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e7e:	e0e2      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e86:	f040 808f 	bne.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e9a:	d075      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ea2:	d87e      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eaa:	d060      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d876      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eba:	d045      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ec2:	d86e      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eca:	d02b      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed2:	d866      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee0:	d00e      	beq.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005ee2:	e05e      	b.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ee4:	f000 f8bc 	bl	8006060 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ee8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005eea:	e0ac      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	03d09000 	.word	0x03d09000
 8005ef4:	003d0900 	.word	0x003d0900
 8005ef8:	017d7840 	.word	0x017d7840
 8005efc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f00:	4b53      	ldr	r3, [pc, #332]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f0e:	f107 0318 	add.w	r3, r7, #24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f8ba 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f1c:	e093      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f22:	e090      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f24:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f30:	d107      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f9fc 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f40:	e081      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f46:	e07e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f48:	4b41      	ldr	r3, [pc, #260]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d109      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f54:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	08db      	lsrs	r3, r3, #3
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	4a3d      	ldr	r2, [pc, #244]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f66:	e06e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f6c:	e06b      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f6e:	4b38      	ldr	r3, [pc, #224]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7a:	d102      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f80:	e061      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f86:	e05e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f88:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f94:	d102      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005f96:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f9a:	e054      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa0:	e051      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa6:	e04e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fae:	d148      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc0:	d02a      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc8:	d838      	bhi.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd6:	d00d      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005fd8:	e030      	b.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe6:	d102      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fec:	e02b      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ff2:	e028      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ff4:	4b16      	ldr	r3, [pc, #88]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006000:	d107      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fae8 	bl	80065dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006010:	e019      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006016:	e016      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006024:	d107      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006026:	f107 0318 	add.w	r3, r7, #24
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f82e 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006034:	e007      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006040:	e001      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006048:	4618      	mov	r0, r3
 800604a:	3740      	adds	r7, #64	; 0x40
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	58024400 	.word	0x58024400
 8006054:	03d09000 	.word	0x03d09000
 8006058:	003d0900 	.word	0x003d0900
 800605c:	017d7840 	.word	0x017d7840

08006060 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006064:	f7fe fb8e 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4904      	ldr	r1, [pc, #16]	; (8006088 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	58024400 	.word	0x58024400
 8006088:	0800cf74 	.word	0x0800cf74

0800608c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800608c:	b480      	push	{r7}
 800608e:	b089      	sub	sp, #36	; 0x24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006094:	4ba1      	ldr	r3, [pc, #644]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800609e:	4b9f      	ldr	r3, [pc, #636]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	0b1b      	lsrs	r3, r3, #12
 80060a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060aa:	4b9c      	ldr	r3, [pc, #624]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	091b      	lsrs	r3, r3, #4
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80060b6:	4b99      	ldr	r3, [pc, #612]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ba:	08db      	lsrs	r3, r3, #3
 80060bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8111 	beq.w	80062fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	f000 8083 	beq.w	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	f200 80a1 	bhi.w	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d056      	beq.n	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80060f6:	e099      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f8:	4b88      	ldr	r3, [pc, #544]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02d      	beq.n	8006160 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006104:	4b85      	ldr	r3, [pc, #532]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	08db      	lsrs	r3, r3, #3
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	4a84      	ldr	r2, [pc, #528]	; (8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
 8006114:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b7b      	ldr	r3, [pc, #492]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006142:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800615e:	e087      	b.n	8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b6a      	ldr	r3, [pc, #424]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a03 	vldr	s12, [r7, #12]
 8006186:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061a2:	e065      	b.n	8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b59      	ldr	r3, [pc, #356]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e6:	e043      	b.n	8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a03 	vldr	s12, [r7, #12]
 800620e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800622a:	e021      	b.n	8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006236:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800632c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800623a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623e:	4b37      	ldr	r3, [pc, #220]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006252:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800626e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006270:	4b2a      	ldr	r3, [pc, #168]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	0a5b      	lsrs	r3, r3, #9
 8006276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800628a:	edd7 6a07 	vldr	s13, [r7, #28]
 800628e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006296:	ee17 2a90 	vmov	r2, s15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800629e:	4b1f      	ldr	r3, [pc, #124]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80062bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c4:	ee17 2a90 	vmov	r2, s15
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80062cc:	4b13      	ldr	r3, [pc, #76]	; (800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	0e1b      	lsrs	r3, r3, #24
 80062d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f2:	ee17 2a90 	vmov	r2, s15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80062fa:	e008      	b.n	800630e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	609a      	str	r2, [r3, #8]
}
 800630e:	bf00      	nop
 8006310:	3724      	adds	r7, #36	; 0x24
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
 8006320:	03d09000 	.word	0x03d09000
 8006324:	46000000 	.word	0x46000000
 8006328:	4c742400 	.word	0x4c742400
 800632c:	4a742400 	.word	0x4a742400
 8006330:	4bbebc20 	.word	0x4bbebc20

08006334 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800633c:	4ba1      	ldr	r3, [pc, #644]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006346:	4b9f      	ldr	r3, [pc, #636]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006350:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006352:	4b9c      	ldr	r3, [pc, #624]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800635e:	4b99      	ldr	r3, [pc, #612]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	08db      	lsrs	r3, r3, #3
 8006364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8111 	beq.w	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b02      	cmp	r3, #2
 8006386:	f000 8083 	beq.w	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b02      	cmp	r3, #2
 800638e:	f200 80a1 	bhi.w	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d056      	beq.n	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800639e:	e099      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a0:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d02d      	beq.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063ac:	4b85      	ldr	r3, [pc, #532]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	08db      	lsrs	r3, r3, #3
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	4a84      	ldr	r2, [pc, #528]	; (80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063b8:	fa22 f303 	lsr.w	r3, r2, r3
 80063bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d6:	4b7b      	ldr	r3, [pc, #492]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006406:	e087      	b.n	8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006412:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641a:	4b6a      	ldr	r3, [pc, #424]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642a:	ed97 6a03 	vldr	s12, [r7, #12]
 800642e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800644a:	e065      	b.n	8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800645a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645e:	4b59      	ldr	r3, [pc, #356]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006472:	eddf 5a56 	vldr	s11, [pc, #344]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800648e:	e043      	b.n	8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800649e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a2:	4b48      	ldr	r3, [pc, #288]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064d2:	e021      	b.n	8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b37      	ldr	r3, [pc, #220]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006516:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006518:	4b2a      	ldr	r3, [pc, #168]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	0a5b      	lsrs	r3, r3, #9
 800651e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800652e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006532:	edd7 6a07 	vldr	s13, [r7, #28]
 8006536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653e:	ee17 2a90 	vmov	r2, s15
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006546:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	0c1b      	lsrs	r3, r3, #16
 800654c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006550:	ee07 3a90 	vmov	s15, r3
 8006554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800655c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006560:	edd7 6a07 	vldr	s13, [r7, #28]
 8006564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656c:	ee17 2a90 	vmov	r2, s15
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006574:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	0e1b      	lsrs	r3, r3, #24
 800657a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800658e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659a:	ee17 2a90 	vmov	r2, s15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065a2:	e008      	b.n	80065b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
}
 80065b6:	bf00      	nop
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	58024400 	.word	0x58024400
 80065c8:	03d09000 	.word	0x03d09000
 80065cc:	46000000 	.word	0x46000000
 80065d0:	4c742400 	.word	0x4c742400
 80065d4:	4a742400 	.word	0x4a742400
 80065d8:	4bbebc20 	.word	0x4bbebc20

080065dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80065dc:	b480      	push	{r7}
 80065de:	b089      	sub	sp, #36	; 0x24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065e4:	4ba0      	ldr	r3, [pc, #640]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80065ee:	4b9e      	ldr	r3, [pc, #632]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80065fa:	4b9b      	ldr	r3, [pc, #620]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006604:	4b98      	ldr	r3, [pc, #608]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	08db      	lsrs	r3, r3, #3
 800660a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	ee07 3a90 	vmov	s15, r3
 8006618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8111 	beq.w	800684a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b02      	cmp	r3, #2
 800662c:	f000 8083 	beq.w	8006736 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b02      	cmp	r3, #2
 8006634:	f200 80a1 	bhi.w	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d056      	beq.n	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006644:	e099      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006646:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d02d      	beq.n	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006652:	4b85      	ldr	r3, [pc, #532]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	08db      	lsrs	r3, r3, #3
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	4a83      	ldr	r2, [pc, #524]	; (800686c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667c:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006690:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80066ac:	e087      	b.n	80067be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c0:	4b69      	ldr	r3, [pc, #420]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066f0:	e065      	b.n	80067be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006704:	4b58      	ldr	r3, [pc, #352]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006714:	ed97 6a03 	vldr	s12, [r7, #12]
 8006718:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800671c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006734:	e043      	b.n	80067be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006740:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800687c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006748:	4b47      	ldr	r3, [pc, #284]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006758:	ed97 6a03 	vldr	s12, [r7, #12]
 800675c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006778:	e021      	b.n	80067be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006784:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006874 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679c:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80067be:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	0a5b      	lsrs	r3, r3, #9
 80067c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e4:	ee17 2a90 	vmov	r2, s15
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006806:	edd7 6a07 	vldr	s13, [r7, #28]
 800680a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800680e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006812:	ee17 2a90 	vmov	r2, s15
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	0e1b      	lsrs	r3, r3, #24
 8006820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006834:	edd7 6a07 	vldr	s13, [r7, #28]
 8006838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006840:	ee17 2a90 	vmov	r2, s15
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006848:	e008      	b.n	800685c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	3724      	adds	r7, #36	; 0x24
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	58024400 	.word	0x58024400
 800686c:	03d09000 	.word	0x03d09000
 8006870:	46000000 	.word	0x46000000
 8006874:	4c742400 	.word	0x4c742400
 8006878:	4a742400 	.word	0x4a742400
 800687c:	4bbebc20 	.word	0x4bbebc20

08006880 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800688e:	4b53      	ldr	r3, [pc, #332]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b03      	cmp	r3, #3
 8006898:	d101      	bne.n	800689e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e099      	b.n	80069d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800689e:	4b4f      	ldr	r3, [pc, #316]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a4e      	ldr	r2, [pc, #312]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80068a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068aa:	f7fb fa13 	bl	8001cd4 <HAL_GetTick>
 80068ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068b0:	e008      	b.n	80068c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068b2:	f7fb fa0f 	bl	8001cd4 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e086      	b.n	80069d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068c4:	4b45      	ldr	r3, [pc, #276]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f0      	bne.n	80068b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068d0:	4b42      	ldr	r3, [pc, #264]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	493f      	ldr	r1, [pc, #252]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	628b      	str	r3, [r1, #40]	; 0x28
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	3b01      	subs	r3, #1
 8006900:	041b      	lsls	r3, r3, #16
 8006902:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	3b01      	subs	r3, #1
 800690e:	061b      	lsls	r3, r3, #24
 8006910:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006914:	4931      	ldr	r1, [pc, #196]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800691a:	4b30      	ldr	r3, [pc, #192]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	492d      	ldr	r1, [pc, #180]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006928:	4313      	orrs	r3, r2
 800692a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800692c:	4b2b      	ldr	r3, [pc, #172]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	f023 0220 	bic.w	r2, r3, #32
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	4928      	ldr	r1, [pc, #160]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 800693a:	4313      	orrs	r3, r2
 800693c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800693e:	4b27      	ldr	r3, [pc, #156]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	4a26      	ldr	r2, [pc, #152]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006944:	f023 0310 	bic.w	r3, r3, #16
 8006948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 800694c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <RCCEx_PLL2_Config+0x160>)
 8006950:	4013      	ands	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	69d2      	ldr	r2, [r2, #28]
 8006956:	00d2      	lsls	r2, r2, #3
 8006958:	4920      	ldr	r1, [pc, #128]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 800695a:	4313      	orrs	r3, r2
 800695c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800695e:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006964:	f043 0310 	orr.w	r3, r3, #16
 8006968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800697a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800697c:	e00f      	b.n	800699e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d106      	bne.n	8006992 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006984:	4b15      	ldr	r3, [pc, #84]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a14      	ldr	r2, [pc, #80]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 800698a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006990:	e005      	b.n	800699e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	4a11      	ldr	r2, [pc, #68]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 8006998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800699c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80069a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069aa:	f7fb f993 	bl	8001cd4 <HAL_GetTick>
 80069ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069b0:	e008      	b.n	80069c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069b2:	f7fb f98f 	bl	8001cd4 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e006      	b.n	80069d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <RCCEx_PLL2_Config+0x15c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	58024400 	.word	0x58024400
 80069e0:	ffff0007 	.word	0xffff0007

080069e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069f2:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d101      	bne.n	8006a02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e099      	b.n	8006b36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a02:	4b4f      	ldr	r3, [pc, #316]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a4e      	ldr	r2, [pc, #312]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0e:	f7fb f961 	bl	8001cd4 <HAL_GetTick>
 8006a12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a14:	e008      	b.n	8006a28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a16:	f7fb f95d 	bl	8001cd4 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e086      	b.n	8006b36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a28:	4b45      	ldr	r3, [pc, #276]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f0      	bne.n	8006a16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a34:	4b42      	ldr	r3, [pc, #264]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	051b      	lsls	r3, r3, #20
 8006a42:	493f      	ldr	r1, [pc, #252]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	628b      	str	r3, [r1, #40]	; 0x28
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	025b      	lsls	r3, r3, #9
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a78:	4931      	ldr	r1, [pc, #196]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a7e:	4b30      	ldr	r3, [pc, #192]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	492d      	ldr	r1, [pc, #180]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a90:	4b2b      	ldr	r3, [pc, #172]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	4928      	ldr	r1, [pc, #160]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006aa2:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	4a26      	ldr	r2, [pc, #152]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006aae:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab2:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <RCCEx_PLL3_Config+0x160>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	69d2      	ldr	r2, [r2, #28]
 8006aba:	00d2      	lsls	r2, r2, #3
 8006abc:	4920      	ldr	r1, [pc, #128]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006acc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d106      	bne.n	8006ae2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006ada:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ae0:	e00f      	b.n	8006b02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d106      	bne.n	8006af6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a14      	ldr	r2, [pc, #80]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006aee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006af4:	e005      	b.n	8006b02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	4a11      	ldr	r2, [pc, #68]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a0e      	ldr	r2, [pc, #56]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0e:	f7fb f8e1 	bl	8001cd4 <HAL_GetTick>
 8006b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b14:	e008      	b.n	8006b28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b16:	f7fb f8dd 	bl	8001cd4 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e006      	b.n	8006b36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b28:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <RCCEx_PLL3_Config+0x15c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f0      	beq.n	8006b16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	58024400 	.word	0x58024400
 8006b44:	ffff0007 	.word	0xffff0007

08006b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e049      	b.n	8006bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fa fe58 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4619      	mov	r1, r3
 8006b86:	4610      	mov	r0, r2
 8006b88:	f000 fb5e 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d001      	beq.n	8006c10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e04c      	b.n	8006caa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <HAL_TIM_Base_Start+0xc0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2a:	d01d      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <HAL_TIM_Base_Start+0xc4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <HAL_TIM_Base_Start+0xc8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <HAL_TIM_Base_Start+0xcc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <HAL_TIM_Base_Start+0xd0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <HAL_TIM_Base_Start+0xd4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <HAL_TIM_Base_Start+0xd8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d115      	bne.n	8006c94 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <HAL_TIM_Base_Start+0xdc>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d015      	beq.n	8006ca6 <HAL_TIM_Base_Start+0xae>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d011      	beq.n	8006ca6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c92:	e008      	b.n	8006ca6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e000      	b.n	8006ca8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40010400 	.word	0x40010400
 8006ccc:	40001800 	.word	0x40001800
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	00010007 	.word	0x00010007

08006cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d001      	beq.n	8006cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e054      	b.n	8006d9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d022      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d01d      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a22      	ldr	r2, [pc, #136]	; (8006dac <HAL_TIM_Base_Start_IT+0xd4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d018      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a21      	ldr	r2, [pc, #132]	; (8006db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1f      	ldr	r2, [pc, #124]	; (8006db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	; (8006db8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <HAL_TIM_Base_Start_IT+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d115      	bne.n	8006d84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <HAL_TIM_Base_Start_IT+0xec>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d015      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0xbe>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d70:	d011      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0201 	orr.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d82:	e008      	b.n	8006d96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e000      	b.n	8006d98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40000c00 	.word	0x40000c00
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40001800 	.word	0x40001800
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	00010007 	.word	0x00010007

08006dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0202 	mvn.w	r2, #2
 8006df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9fe 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9f0 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa01 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0204 	mvn.w	r2, #4
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9d4 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9c6 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f9d7 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0208 	mvn.w	r2, #8
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9aa 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f99c 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9ad 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2b10      	cmp	r3, #16
 8006ed8:	d122      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b10      	cmp	r3, #16
 8006ee6:	d11b      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0210 	mvn.w	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f980 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f972 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f983 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d10e      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d107      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0201 	mvn.w	r2, #1
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fa fa82 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b80      	cmp	r3, #128	; 0x80
 8006f58:	d10e      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f64:	2b80      	cmp	r3, #128	; 0x80
 8006f66:	d107      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fb38 	bl	80075e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f86:	d10e      	bne.n	8006fa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f92:	2b80      	cmp	r3, #128	; 0x80
 8006f94:	d107      	bne.n	8006fa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fb2b 	bl	80075fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d10e      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d107      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f931 	bl	8007234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d10e      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0220 	mvn.w	r2, #32
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 faeb 	bl	80075d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_TIM_ConfigClockSource+0x1c>
 8007020:	2302      	movs	r3, #2
 8007022:	e0dc      	b.n	80071de <HAL_TIM_ConfigClockSource+0x1d6>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	4b6a      	ldr	r3, [pc, #424]	; (80071e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007040:	4013      	ands	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800704a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a64      	ldr	r2, [pc, #400]	; (80071ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	f000 80a9 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007060:	4a62      	ldr	r2, [pc, #392]	; (80071ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	f200 80ae 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007068:	4a61      	ldr	r2, [pc, #388]	; (80071f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	f000 80a1 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007070:	4a5f      	ldr	r2, [pc, #380]	; (80071f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f200 80a6 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007078:	4a5e      	ldr	r2, [pc, #376]	; (80071f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800707a:	4293      	cmp	r3, r2
 800707c:	f000 8099 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007080:	4a5c      	ldr	r2, [pc, #368]	; (80071f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007082:	4293      	cmp	r3, r2
 8007084:	f200 809e 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007088:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800708c:	f000 8091 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007090:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007094:	f200 8096 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800709c:	f000 8089 	beq.w	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80070a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a4:	f200 808e 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ac:	d03e      	beq.n	800712c <HAL_TIM_ConfigClockSource+0x124>
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b2:	f200 8087 	bhi.w	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	f000 8086 	beq.w	80071ca <HAL_TIM_ConfigClockSource+0x1c2>
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d87f      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070c4:	2b70      	cmp	r3, #112	; 0x70
 80070c6:	d01a      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0xf6>
 80070c8:	2b70      	cmp	r3, #112	; 0x70
 80070ca:	d87b      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070cc:	2b60      	cmp	r3, #96	; 0x60
 80070ce:	d050      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x16a>
 80070d0:	2b60      	cmp	r3, #96	; 0x60
 80070d2:	d877      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070d4:	2b50      	cmp	r3, #80	; 0x50
 80070d6:	d03c      	beq.n	8007152 <HAL_TIM_ConfigClockSource+0x14a>
 80070d8:	2b50      	cmp	r3, #80	; 0x50
 80070da:	d873      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d058      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x18a>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d86f      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070e4:	2b30      	cmp	r3, #48	; 0x30
 80070e6:	d064      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80070e8:	2b30      	cmp	r3, #48	; 0x30
 80070ea:	d86b      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d060      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d867      	bhi.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d05c      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d05a      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80070fc:	e062      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f000 f9b3 	bl	8007478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	609a      	str	r2, [r3, #8]
      break;
 800712a:	e04f      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6899      	ldr	r1, [r3, #8]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f000 f99c 	bl	8007478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800714e:	609a      	str	r2, [r3, #8]
      break;
 8007150:	e03c      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	461a      	mov	r2, r3
 8007160:	f000 f90c 	bl	800737c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2150      	movs	r1, #80	; 0x50
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f966 	bl	800743c <TIM_ITRx_SetConfig>
      break;
 8007170:	e02c      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6859      	ldr	r1, [r3, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	461a      	mov	r2, r3
 8007180:	f000 f92b 	bl	80073da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2160      	movs	r1, #96	; 0x60
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f956 	bl	800743c <TIM_ITRx_SetConfig>
      break;
 8007190:	e01c      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6859      	ldr	r1, [r3, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	461a      	mov	r2, r3
 80071a0:	f000 f8ec 	bl	800737c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2140      	movs	r1, #64	; 0x40
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f946 	bl	800743c <TIM_ITRx_SetConfig>
      break;
 80071b0:	e00c      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f000 f93d 	bl	800743c <TIM_ITRx_SetConfig>
      break;
 80071c2:	e003      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
      break;
 80071c8:	e000      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80071ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	ffceff88 	.word	0xffceff88
 80071ec:	00100040 	.word	0x00100040
 80071f0:	00100030 	.word	0x00100030
 80071f4:	00100020 	.word	0x00100020

080071f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a40      	ldr	r2, [pc, #256]	; (800735c <TIM_Base_SetConfig+0x114>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d013      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d00f      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3d      	ldr	r2, [pc, #244]	; (8007360 <TIM_Base_SetConfig+0x118>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00b      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <TIM_Base_SetConfig+0x11c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3b      	ldr	r2, [pc, #236]	; (8007368 <TIM_Base_SetConfig+0x120>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3a      	ldr	r2, [pc, #232]	; (800736c <TIM_Base_SetConfig+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2f      	ldr	r2, [pc, #188]	; (800735c <TIM_Base_SetConfig+0x114>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d01f      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d01b      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <TIM_Base_SetConfig+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d017      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2b      	ldr	r2, [pc, #172]	; (8007364 <TIM_Base_SetConfig+0x11c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2a      	ldr	r2, [pc, #168]	; (8007368 <TIM_Base_SetConfig+0x120>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00f      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a29      	ldr	r2, [pc, #164]	; (800736c <TIM_Base_SetConfig+0x124>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a28      	ldr	r2, [pc, #160]	; (8007370 <TIM_Base_SetConfig+0x128>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a27      	ldr	r2, [pc, #156]	; (8007374 <TIM_Base_SetConfig+0x12c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <TIM_Base_SetConfig+0x130>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a10      	ldr	r2, [pc, #64]	; (800735c <TIM_Base_SetConfig+0x114>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00f      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a12      	ldr	r2, [pc, #72]	; (800736c <TIM_Base_SetConfig+0x124>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00b      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a11      	ldr	r2, [pc, #68]	; (8007370 <TIM_Base_SetConfig+0x128>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a10      	ldr	r2, [pc, #64]	; (8007374 <TIM_Base_SetConfig+0x12c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <TIM_Base_SetConfig+0x130>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d103      	bne.n	8007348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	615a      	str	r2, [r3, #20]
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40010000 	.word	0x40010000
 8007360:	40000400 	.word	0x40000400
 8007364:	40000800 	.word	0x40000800
 8007368:	40000c00 	.word	0x40000c00
 800736c:	40010400 	.word	0x40010400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0201 	bic.w	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f023 030a 	bic.w	r3, r3, #10
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073da:	b480      	push	{r7}
 80073dc:	b087      	sub	sp, #28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f023 0210 	bic.w	r2, r3, #16
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	031b      	lsls	r3, r3, #12
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4b09      	ldr	r3, [pc, #36]	; (8007474 <TIM_ITRx_SetConfig+0x38>)
 8007450:	4013      	ands	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	f043 0307 	orr.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	609a      	str	r2, [r3, #8]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	ffcfff8f 	.word	0xffcfff8f

08007478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	021a      	lsls	r2, r3, #8
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	431a      	orrs	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4313      	orrs	r3, r2
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	609a      	str	r2, [r3, #8]
}
 80074ac:	bf00      	nop
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e06d      	b.n	80075ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a30      	ldr	r2, [pc, #192]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2f      	ldr	r2, [pc, #188]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d108      	bne.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800750a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a20      	ldr	r2, [pc, #128]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d022      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d01d      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d018      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00e      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a15      	ldr	r2, [pc, #84]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d009      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a16      	ldr	r2, [pc, #88]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d10c      	bne.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	4313      	orrs	r3, r2
 8007590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40010400 	.word	0x40010400
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	40001800 	.word	0x40001800
 80075d0:	40014000 	.word	0x40014000

080075d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e042      	b.n	80076a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fa f935 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2224      	movs	r2, #36	; 0x24
 800763e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0201 	bic.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f8c2 	bl	80077dc <UART_SetConfig>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e022      	b.n	80076a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fe16 	bl	800829c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800767e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800768e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fe9d 	bl	80083e0 <UART_CheckIdleState>
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	f040 8083 	bne.w	80077d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Transmit+0x28>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e07b      	b.n	80077d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Transmit+0x3a>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e074      	b.n	80077d4 <HAL_UART_Transmit+0x124>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2221      	movs	r2, #33	; 0x21
 80076fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007702:	f7fa fae7 	bl	8001cd4 <HAL_GetTick>
 8007706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007720:	d108      	bne.n	8007734 <HAL_UART_Transmit+0x84>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	e003      	b.n	800773c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007738:	2300      	movs	r3, #0
 800773a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007744:	e02c      	b.n	80077a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2200      	movs	r2, #0
 800774e:	2180      	movs	r1, #128	; 0x80
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fe90 	bl	8008476 <UART_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e039      	b.n	80077d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007774:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	3302      	adds	r3, #2
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	e007      	b.n	800778e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	3301      	adds	r3, #1
 800778c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1cc      	bne.n	8007746 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2200      	movs	r2, #0
 80077b4:	2140      	movs	r1, #64	; 0x40
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fe5d 	bl	8008476 <UART_WaitOnFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e006      	b.n	80077d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e000      	b.n	80077d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
  }
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077dc:	b5b0      	push	{r4, r5, r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	4313      	orrs	r3, r2
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4bbf      	ldr	r3, [pc, #764]	; (8007b08 <UART_SetConfig+0x32c>)
 800780a:	4013      	ands	r3, r2
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007812:	430b      	orrs	r3, r1
 8007814:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4ab5      	ldr	r2, [pc, #724]	; (8007b0c <UART_SetConfig+0x330>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007842:	4313      	orrs	r3, r2
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	4bb0      	ldr	r3, [pc, #704]	; (8007b10 <UART_SetConfig+0x334>)
 800784e:	4013      	ands	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6812      	ldr	r2, [r2, #0]
 8007854:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007856:	430b      	orrs	r3, r1
 8007858:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	f023 010f 	bic.w	r1, r3, #15
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4aa7      	ldr	r2, [pc, #668]	; (8007b14 <UART_SetConfig+0x338>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d176      	bne.n	8007968 <UART_SetConfig+0x18c>
 800787a:	4ba7      	ldr	r3, [pc, #668]	; (8007b18 <UART_SetConfig+0x33c>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007882:	2b28      	cmp	r3, #40	; 0x28
 8007884:	d86c      	bhi.n	8007960 <UART_SetConfig+0x184>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0xb0>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	08007931 	.word	0x08007931
 8007890:	08007961 	.word	0x08007961
 8007894:	08007961 	.word	0x08007961
 8007898:	08007961 	.word	0x08007961
 800789c:	08007961 	.word	0x08007961
 80078a0:	08007961 	.word	0x08007961
 80078a4:	08007961 	.word	0x08007961
 80078a8:	08007961 	.word	0x08007961
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007961 	.word	0x08007961
 80078b4:	08007961 	.word	0x08007961
 80078b8:	08007961 	.word	0x08007961
 80078bc:	08007961 	.word	0x08007961
 80078c0:	08007961 	.word	0x08007961
 80078c4:	08007961 	.word	0x08007961
 80078c8:	08007961 	.word	0x08007961
 80078cc:	08007941 	.word	0x08007941
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007961 	.word	0x08007961
 80078d8:	08007961 	.word	0x08007961
 80078dc:	08007961 	.word	0x08007961
 80078e0:	08007961 	.word	0x08007961
 80078e4:	08007961 	.word	0x08007961
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007949 	.word	0x08007949
 80078f0:	08007961 	.word	0x08007961
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007961 	.word	0x08007961
 80078fc:	08007961 	.word	0x08007961
 8007900:	08007961 	.word	0x08007961
 8007904:	08007961 	.word	0x08007961
 8007908:	08007961 	.word	0x08007961
 800790c:	08007951 	.word	0x08007951
 8007910:	08007961 	.word	0x08007961
 8007914:	08007961 	.word	0x08007961
 8007918:	08007961 	.word	0x08007961
 800791c:	08007961 	.word	0x08007961
 8007920:	08007961 	.word	0x08007961
 8007924:	08007961 	.word	0x08007961
 8007928:	08007961 	.word	0x08007961
 800792c:	08007959 	.word	0x08007959
 8007930:	2301      	movs	r3, #1
 8007932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007936:	e222      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793e:	e21e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007946:	e21a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794e:	e216      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007950:	2320      	movs	r3, #32
 8007952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007956:	e212      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800795e:	e20e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007960:	2380      	movs	r3, #128	; 0x80
 8007962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007966:	e20a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a6b      	ldr	r2, [pc, #428]	; (8007b1c <UART_SetConfig+0x340>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d130      	bne.n	80079d4 <UART_SetConfig+0x1f8>
 8007972:	4b69      	ldr	r3, [pc, #420]	; (8007b18 <UART_SetConfig+0x33c>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b05      	cmp	r3, #5
 800797c:	d826      	bhi.n	80079cc <UART_SetConfig+0x1f0>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x1a8>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	0800799d 	.word	0x0800799d
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079ad 	.word	0x080079ad
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	2300      	movs	r3, #0
 800799e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079a2:	e1ec      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079aa:	e1e8      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b2:	e1e4      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ba:	e1e0      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079bc:	2320      	movs	r3, #32
 80079be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079c2:	e1dc      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079c4:	2340      	movs	r3, #64	; 0x40
 80079c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ca:	e1d8      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079d2:	e1d4      	b.n	8007d7e <UART_SetConfig+0x5a2>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a51      	ldr	r2, [pc, #324]	; (8007b20 <UART_SetConfig+0x344>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d130      	bne.n	8007a40 <UART_SetConfig+0x264>
 80079de:	4b4e      	ldr	r3, [pc, #312]	; (8007b18 <UART_SetConfig+0x33c>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d826      	bhi.n	8007a38 <UART_SetConfig+0x25c>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0x214>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a31 	.word	0x08007a31
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0e:	e1b6      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a16:	e1b2      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1e:	e1ae      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a26:	e1aa      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a28:	2320      	movs	r3, #32
 8007a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a2e:	e1a6      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a36:	e1a2      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a38:	2380      	movs	r3, #128	; 0x80
 8007a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a3e:	e19e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a37      	ldr	r2, [pc, #220]	; (8007b24 <UART_SetConfig+0x348>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d130      	bne.n	8007aac <UART_SetConfig+0x2d0>
 8007a4a:	4b33      	ldr	r3, [pc, #204]	; (8007b18 <UART_SetConfig+0x33c>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d826      	bhi.n	8007aa4 <UART_SetConfig+0x2c8>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0x280>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a85 	.word	0x08007a85
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7a:	e180      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a82:	e17c      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8a:	e178      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a92:	e174      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a94:	2320      	movs	r3, #32
 8007a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9a:	e170      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa2:	e16c      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aaa:	e168      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <UART_SetConfig+0x34c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d142      	bne.n	8007b3c <UART_SetConfig+0x360>
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <UART_SetConfig+0x33c>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d838      	bhi.n	8007b34 <UART_SetConfig+0x358>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0x2ec>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b01 	.word	0x08007b01
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae6:	e14a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aee:	e146      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af6:	e142      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afe:	e13e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007b00:	2320      	movs	r3, #32
 8007b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b06:	e13a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007b08:	cfff69f3 	.word	0xcfff69f3
 8007b0c:	58000c00 	.word	0x58000c00
 8007b10:	11fff4ff 	.word	0x11fff4ff
 8007b14:	40011000 	.word	0x40011000
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	40004400 	.word	0x40004400
 8007b20:	40004800 	.word	0x40004800
 8007b24:	40004c00 	.word	0x40004c00
 8007b28:	40005000 	.word	0x40005000
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b32:	e124      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007b34:	2380      	movs	r3, #128	; 0x80
 8007b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b3a:	e120      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4acc      	ldr	r2, [pc, #816]	; (8007e74 <UART_SetConfig+0x698>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d176      	bne.n	8007c34 <UART_SetConfig+0x458>
 8007b46:	4bcc      	ldr	r3, [pc, #816]	; (8007e78 <UART_SetConfig+0x69c>)
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4e:	2b28      	cmp	r3, #40	; 0x28
 8007b50:	d86c      	bhi.n	8007c2c <UART_SetConfig+0x450>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x37c>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bfd 	.word	0x08007bfd
 8007b5c:	08007c2d 	.word	0x08007c2d
 8007b60:	08007c2d 	.word	0x08007c2d
 8007b64:	08007c2d 	.word	0x08007c2d
 8007b68:	08007c2d 	.word	0x08007c2d
 8007b6c:	08007c2d 	.word	0x08007c2d
 8007b70:	08007c2d 	.word	0x08007c2d
 8007b74:	08007c2d 	.word	0x08007c2d
 8007b78:	08007c05 	.word	0x08007c05
 8007b7c:	08007c2d 	.word	0x08007c2d
 8007b80:	08007c2d 	.word	0x08007c2d
 8007b84:	08007c2d 	.word	0x08007c2d
 8007b88:	08007c2d 	.word	0x08007c2d
 8007b8c:	08007c2d 	.word	0x08007c2d
 8007b90:	08007c2d 	.word	0x08007c2d
 8007b94:	08007c2d 	.word	0x08007c2d
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c2d 	.word	0x08007c2d
 8007ba4:	08007c2d 	.word	0x08007c2d
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c2d 	.word	0x08007c2d
 8007bb0:	08007c2d 	.word	0x08007c2d
 8007bb4:	08007c2d 	.word	0x08007c2d
 8007bb8:	08007c15 	.word	0x08007c15
 8007bbc:	08007c2d 	.word	0x08007c2d
 8007bc0:	08007c2d 	.word	0x08007c2d
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007c2d 	.word	0x08007c2d
 8007bcc:	08007c2d 	.word	0x08007c2d
 8007bd0:	08007c2d 	.word	0x08007c2d
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c2d 	.word	0x08007c2d
 8007be0:	08007c2d 	.word	0x08007c2d
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c2d 	.word	0x08007c2d
 8007bec:	08007c2d 	.word	0x08007c2d
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c02:	e0bc      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0a:	e0b8      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c12:	e0b4      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1a:	e0b0      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c22:	e0ac      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2a:	e0a8      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c32:	e0a4      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a90      	ldr	r2, [pc, #576]	; (8007e7c <UART_SetConfig+0x6a0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x4c4>
 8007c3e:	4b8e      	ldr	r3, [pc, #568]	; (8007e78 <UART_SetConfig+0x69c>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x4bc>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x474>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6e:	e086      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c76:	e082      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e07e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c86:	e07a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c8e:	e076      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c96:	e072      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c9e:	e06e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a76      	ldr	r2, [pc, #472]	; (8007e80 <UART_SetConfig+0x6a4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d130      	bne.n	8007d0c <UART_SetConfig+0x530>
 8007caa:	4b73      	ldr	r3, [pc, #460]	; (8007e78 <UART_SetConfig+0x69c>)
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d826      	bhi.n	8007d04 <UART_SetConfig+0x528>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <UART_SetConfig+0x4e0>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	08007ce5 	.word	0x08007ce5
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cda:	e050      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce2:	e04c      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cea:	e048      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf2:	e044      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfa:	e040      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d02:	e03c      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0a:	e038      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5c      	ldr	r2, [pc, #368]	; (8007e84 <UART_SetConfig+0x6a8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d130      	bne.n	8007d78 <UART_SetConfig+0x59c>
 8007d16:	4b58      	ldr	r3, [pc, #352]	; (8007e78 <UART_SetConfig+0x69c>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	d826      	bhi.n	8007d70 <UART_SetConfig+0x594>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x54c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d46:	e01a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d4e:	e016      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e012      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e00e      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e00a      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e006      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	e002      	b.n	8007d7e <UART_SetConfig+0x5a2>
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a40      	ldr	r2, [pc, #256]	; (8007e84 <UART_SetConfig+0x6a8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	f040 80ef 	bne.w	8007f68 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	dc46      	bgt.n	8007e20 <UART_SetConfig+0x644>
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	f2c0 8081 	blt.w	8007e9a <UART_SetConfig+0x6be>
 8007d98:	3b02      	subs	r3, #2
 8007d9a:	2b1e      	cmp	r3, #30
 8007d9c:	d87d      	bhi.n	8007e9a <UART_SetConfig+0x6be>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <UART_SetConfig+0x5c8>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007e27 	.word	0x08007e27
 8007da8:	08007e9b 	.word	0x08007e9b
 8007dac:	08007e2f 	.word	0x08007e2f
 8007db0:	08007e9b 	.word	0x08007e9b
 8007db4:	08007e9b 	.word	0x08007e9b
 8007db8:	08007e9b 	.word	0x08007e9b
 8007dbc:	08007e3f 	.word	0x08007e3f
 8007dc0:	08007e9b 	.word	0x08007e9b
 8007dc4:	08007e9b 	.word	0x08007e9b
 8007dc8:	08007e9b 	.word	0x08007e9b
 8007dcc:	08007e9b 	.word	0x08007e9b
 8007dd0:	08007e9b 	.word	0x08007e9b
 8007dd4:	08007e9b 	.word	0x08007e9b
 8007dd8:	08007e9b 	.word	0x08007e9b
 8007ddc:	08007e4f 	.word	0x08007e4f
 8007de0:	08007e9b 	.word	0x08007e9b
 8007de4:	08007e9b 	.word	0x08007e9b
 8007de8:	08007e9b 	.word	0x08007e9b
 8007dec:	08007e9b 	.word	0x08007e9b
 8007df0:	08007e9b 	.word	0x08007e9b
 8007df4:	08007e9b 	.word	0x08007e9b
 8007df8:	08007e9b 	.word	0x08007e9b
 8007dfc:	08007e9b 	.word	0x08007e9b
 8007e00:	08007e9b 	.word	0x08007e9b
 8007e04:	08007e9b 	.word	0x08007e9b
 8007e08:	08007e9b 	.word	0x08007e9b
 8007e0c:	08007e9b 	.word	0x08007e9b
 8007e10:	08007e9b 	.word	0x08007e9b
 8007e14:	08007e9b 	.word	0x08007e9b
 8007e18:	08007e9b 	.word	0x08007e9b
 8007e1c:	08007e8d 	.word	0x08007e8d
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d036      	beq.n	8007e92 <UART_SetConfig+0x6b6>
 8007e24:	e039      	b.n	8007e9a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e26:	f7fe f91b 	bl	8006060 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e2c:	e03b      	b.n	8007ea6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2e:	f107 0314 	add.w	r3, r7, #20
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe f92a 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e3c:	e033      	b.n	8007ea6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fa76 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e4c:	e02b      	b.n	8007ea6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <UART_SetConfig+0x69c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <UART_SetConfig+0x69c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <UART_SetConfig+0x6ac>)
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e6c:	e01b      	b.n	8007ea6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <UART_SetConfig+0x6ac>)
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e72:	e018      	b.n	8007ea6 <UART_SetConfig+0x6ca>
 8007e74:	40011400 	.word	0x40011400
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	40007800 	.word	0x40007800
 8007e80:	40007c00 	.word	0x40007c00
 8007e84:	58000c00 	.word	0x58000c00
 8007e88:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e8c:	4bc4      	ldr	r3, [pc, #784]	; (80081a0 <UART_SetConfig+0x9c4>)
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e90:	e009      	b.n	8007ea6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e98:	e005      	b.n	8007ea6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 81da 	beq.w	8008262 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	4abc      	ldr	r2, [pc, #752]	; (80081a4 <UART_SetConfig+0x9c8>)
 8007eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	4413      	add	r3, r2
 8007ecc:	6a3a      	ldr	r2, [r7, #32]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d305      	bcc.n	8007ede <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d903      	bls.n	8007ee6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ee4:	e1bd      	b.n	8008262 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	4aac      	ldr	r2, [pc, #688]	; (80081a4 <UART_SetConfig+0x9c8>)
 8007ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	f7f8 fc03 	bl	8000708 <__aeabi_uldivmod>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4610      	mov	r0, r2
 8007f08:	4619      	mov	r1, r3
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	020b      	lsls	r3, r1, #8
 8007f14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f18:	0202      	lsls	r2, r0, #8
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	6849      	ldr	r1, [r1, #4]
 8007f1e:	0849      	lsrs	r1, r1, #1
 8007f20:	4608      	mov	r0, r1
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	1814      	adds	r4, r2, r0
 8007f28:	eb43 0501 	adc.w	r5, r3, r1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fbe5 	bl	8000708 <__aeabi_uldivmod>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4613      	mov	r3, r2
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f4c:	d308      	bcc.n	8007f60 <UART_SetConfig+0x784>
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f54:	d204      	bcs.n	8007f60 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5c:	60da      	str	r2, [r3, #12]
 8007f5e:	e180      	b.n	8008262 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f66:	e17c      	b.n	8008262 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f70:	f040 80be 	bne.w	80080f0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8007f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	dc49      	bgt.n	8008010 <UART_SetConfig+0x834>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	db7c      	blt.n	800807a <UART_SetConfig+0x89e>
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d87a      	bhi.n	800807a <UART_SetConfig+0x89e>
 8007f84:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <UART_SetConfig+0x7b0>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08008017 	.word	0x08008017
 8007f90:	0800801f 	.word	0x0800801f
 8007f94:	0800807b 	.word	0x0800807b
 8007f98:	0800807b 	.word	0x0800807b
 8007f9c:	08008027 	.word	0x08008027
 8007fa0:	0800807b 	.word	0x0800807b
 8007fa4:	0800807b 	.word	0x0800807b
 8007fa8:	0800807b 	.word	0x0800807b
 8007fac:	08008037 	.word	0x08008037
 8007fb0:	0800807b 	.word	0x0800807b
 8007fb4:	0800807b 	.word	0x0800807b
 8007fb8:	0800807b 	.word	0x0800807b
 8007fbc:	0800807b 	.word	0x0800807b
 8007fc0:	0800807b 	.word	0x0800807b
 8007fc4:	0800807b 	.word	0x0800807b
 8007fc8:	0800807b 	.word	0x0800807b
 8007fcc:	08008047 	.word	0x08008047
 8007fd0:	0800807b 	.word	0x0800807b
 8007fd4:	0800807b 	.word	0x0800807b
 8007fd8:	0800807b 	.word	0x0800807b
 8007fdc:	0800807b 	.word	0x0800807b
 8007fe0:	0800807b 	.word	0x0800807b
 8007fe4:	0800807b 	.word	0x0800807b
 8007fe8:	0800807b 	.word	0x0800807b
 8007fec:	0800807b 	.word	0x0800807b
 8007ff0:	0800807b 	.word	0x0800807b
 8007ff4:	0800807b 	.word	0x0800807b
 8007ff8:	0800807b 	.word	0x0800807b
 8007ffc:	0800807b 	.word	0x0800807b
 8008000:	0800807b 	.word	0x0800807b
 8008004:	0800807b 	.word	0x0800807b
 8008008:	0800807b 	.word	0x0800807b
 800800c:	0800806d 	.word	0x0800806d
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d02e      	beq.n	8008072 <UART_SetConfig+0x896>
 8008014:	e031      	b.n	800807a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008016:	f7fc fbe5 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 800801a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800801c:	e033      	b.n	8008086 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800801e:	f7fc fbf7 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 8008022:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008024:	e02f      	b.n	8008086 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe f82e 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008034:	e027      	b.n	8008086 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008036:	f107 0308 	add.w	r3, r7, #8
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe f97a 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008044:	e01f      	b.n	8008086 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008046:	4b58      	ldr	r3, [pc, #352]	; (80081a8 <UART_SetConfig+0x9cc>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008052:	4b55      	ldr	r3, [pc, #340]	; (80081a8 <UART_SetConfig+0x9cc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	08db      	lsrs	r3, r3, #3
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	4a53      	ldr	r2, [pc, #332]	; (80081ac <UART_SetConfig+0x9d0>)
 800805e:	fa22 f303 	lsr.w	r3, r2, r3
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008064:	e00f      	b.n	8008086 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008066:	4b51      	ldr	r3, [pc, #324]	; (80081ac <UART_SetConfig+0x9d0>)
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800806a:	e00c      	b.n	8008086 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800806c:	4b4c      	ldr	r3, [pc, #304]	; (80081a0 <UART_SetConfig+0x9c4>)
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008070:	e009      	b.n	8008086 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008078:	e005      	b.n	8008086 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80ea 	beq.w	8008262 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	4a44      	ldr	r2, [pc, #272]	; (80081a4 <UART_SetConfig+0x9c8>)
 8008094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008098:	461a      	mov	r2, r3
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	fbb3 f3f2 	udiv	r3, r3, r2
 80080a0:	005a      	lsls	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	441a      	add	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	2b0f      	cmp	r3, #15
 80080b8:	d916      	bls.n	80080e8 <UART_SetConfig+0x90c>
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c0:	d212      	bcs.n	80080e8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f023 030f 	bic.w	r3, r3, #15
 80080ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080da:	4313      	orrs	r3, r2
 80080dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080e4:	60da      	str	r2, [r3, #12]
 80080e6:	e0bc      	b.n	8008262 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080ee:	e0b8      	b.n	8008262 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	dc4b      	bgt.n	8008190 <UART_SetConfig+0x9b4>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f2c0 8087 	blt.w	800820c <UART_SetConfig+0xa30>
 80080fe:	2b20      	cmp	r3, #32
 8008100:	f200 8084 	bhi.w	800820c <UART_SetConfig+0xa30>
 8008104:	a201      	add	r2, pc, #4	; (adr r2, 800810c <UART_SetConfig+0x930>)
 8008106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810a:	bf00      	nop
 800810c:	08008197 	.word	0x08008197
 8008110:	080081b1 	.word	0x080081b1
 8008114:	0800820d 	.word	0x0800820d
 8008118:	0800820d 	.word	0x0800820d
 800811c:	080081b9 	.word	0x080081b9
 8008120:	0800820d 	.word	0x0800820d
 8008124:	0800820d 	.word	0x0800820d
 8008128:	0800820d 	.word	0x0800820d
 800812c:	080081c9 	.word	0x080081c9
 8008130:	0800820d 	.word	0x0800820d
 8008134:	0800820d 	.word	0x0800820d
 8008138:	0800820d 	.word	0x0800820d
 800813c:	0800820d 	.word	0x0800820d
 8008140:	0800820d 	.word	0x0800820d
 8008144:	0800820d 	.word	0x0800820d
 8008148:	0800820d 	.word	0x0800820d
 800814c:	080081d9 	.word	0x080081d9
 8008150:	0800820d 	.word	0x0800820d
 8008154:	0800820d 	.word	0x0800820d
 8008158:	0800820d 	.word	0x0800820d
 800815c:	0800820d 	.word	0x0800820d
 8008160:	0800820d 	.word	0x0800820d
 8008164:	0800820d 	.word	0x0800820d
 8008168:	0800820d 	.word	0x0800820d
 800816c:	0800820d 	.word	0x0800820d
 8008170:	0800820d 	.word	0x0800820d
 8008174:	0800820d 	.word	0x0800820d
 8008178:	0800820d 	.word	0x0800820d
 800817c:	0800820d 	.word	0x0800820d
 8008180:	0800820d 	.word	0x0800820d
 8008184:	0800820d 	.word	0x0800820d
 8008188:	0800820d 	.word	0x0800820d
 800818c:	080081ff 	.word	0x080081ff
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d037      	beq.n	8008204 <UART_SetConfig+0xa28>
 8008194:	e03a      	b.n	800820c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008196:	f7fc fb25 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 800819a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800819c:	e03c      	b.n	8008218 <UART_SetConfig+0xa3c>
 800819e:	bf00      	nop
 80081a0:	003d0900 	.word	0x003d0900
 80081a4:	0800cf84 	.word	0x0800cf84
 80081a8:	58024400 	.word	0x58024400
 80081ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fc fb2e 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 80081b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081b6:	e02f      	b.n	8008218 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081b8:	f107 0314 	add.w	r3, r7, #20
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fd ff65 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081c6:	e027      	b.n	8008218 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081c8:	f107 0308 	add.w	r3, r7, #8
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe f8b1 	bl	8006334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081d6:	e01f      	b.n	8008218 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081d8:	4b2c      	ldr	r3, [pc, #176]	; (800828c <UART_SetConfig+0xab0>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081e4:	4b29      	ldr	r3, [pc, #164]	; (800828c <UART_SetConfig+0xab0>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	4a28      	ldr	r2, [pc, #160]	; (8008290 <UART_SetConfig+0xab4>)
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081f6:	e00f      	b.n	8008218 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <UART_SetConfig+0xab4>)
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081fc:	e00c      	b.n	8008218 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081fe:	4b25      	ldr	r3, [pc, #148]	; (8008294 <UART_SetConfig+0xab8>)
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008202:	e009      	b.n	8008218 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800820a:	e005      	b.n	8008218 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008216:	bf00      	nop
    }

    if (pclk != 0U)
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d021      	beq.n	8008262 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <UART_SetConfig+0xabc>)
 8008224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008228:	461a      	mov	r2, r3
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	441a      	add	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008240:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2b0f      	cmp	r3, #15
 8008246:	d909      	bls.n	800825c <UART_SetConfig+0xa80>
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824e:	d205      	bcs.n	800825c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	e002      	b.n	8008262 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800827e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008282:	4618      	mov	r0, r3
 8008284:	3738      	adds	r7, #56	; 0x38
 8008286:	46bd      	mov	sp, r7
 8008288:	bdb0      	pop	{r4, r5, r7, pc}
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
 8008290:	03d09000 	.word	0x03d09000
 8008294:	003d0900 	.word	0x003d0900
 8008298:	0800cf84 	.word	0x0800cf84

0800829c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00a      	beq.n	800830a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01a      	beq.n	80083b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800839a:	d10a      	bne.n	80083b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
  }
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083f0:	f7f9 fc70 	bl	8001cd4 <HAL_GetTick>
 80083f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0308 	and.w	r3, r3, #8
 8008400:	2b08      	cmp	r3, #8
 8008402:	d10e      	bne.n	8008422 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f82f 	bl	8008476 <UART_WaitOnFlagUntilTimeout>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e025      	b.n	800846e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b04      	cmp	r3, #4
 800842e:	d10e      	bne.n	800844e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f819 	bl	8008476 <UART_WaitOnFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e00f      	b.n	800846e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b09c      	sub	sp, #112	; 0x70
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	603b      	str	r3, [r7, #0]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008486:	e0a9      	b.n	80085dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800848e:	f000 80a5 	beq.w	80085dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008492:	f7f9 fc1f 	bl	8001cd4 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80084a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d140      	bne.n	800852a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084bc:	667b      	str	r3, [r7, #100]	; 0x64
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e6      	bne.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	663b      	str	r3, [r7, #96]	; 0x60
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80084fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e5      	bne.n	80084da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2220      	movs	r2, #32
 8008512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e069      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d051      	beq.n	80085dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008546:	d149      	bne.n	80085dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008550:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
 8008572:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e6      	bne.n	8008552 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	613b      	str	r3, [r7, #16]
   return(result);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	66bb      	str	r3, [r7, #104]	; 0x68
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085a4:	623a      	str	r2, [r7, #32]
 80085a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e010      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69da      	ldr	r2, [r3, #28]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4013      	ands	r3, r2
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	bf0c      	ite	eq
 80085ec:	2301      	moveq	r3, #1
 80085ee:	2300      	movne	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	f43f af46 	beq.w	8008488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3770      	adds	r7, #112	; 0x70
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_UARTEx_DisableFifoMode+0x16>
 8008618:	2302      	movs	r3, #2
 800861a:	e027      	b.n	800866c <HAL_UARTEx_DisableFifoMode+0x66>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2224      	movs	r2, #36	; 0x24
 8008628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800864a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800868c:	2302      	movs	r3, #2
 800868e:	e02d      	b.n	80086ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2224      	movs	r2, #36	; 0x24
 800869c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f84f 	bl	8008770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008708:	2302      	movs	r3, #2
 800870a:	e02d      	b.n	8008768 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	; 0x24
 8008718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f811 	bl	8008770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008790:	e031      	b.n	80087f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008792:	2310      	movs	r3, #16
 8008794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008796:	2310      	movs	r3, #16
 8008798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	0e5b      	lsrs	r3, r3, #25
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	0f5b      	lsrs	r3, r3, #29
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	7b3a      	ldrb	r2, [r7, #12]
 80087be:	4911      	ldr	r1, [pc, #68]	; (8008804 <UARTEx_SetNbDataToProcess+0x94>)
 80087c0:	5c8a      	ldrb	r2, [r1, r2]
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087c6:	7b3a      	ldrb	r2, [r7, #12]
 80087c8:	490f      	ldr	r1, [pc, #60]	; (8008808 <UARTEx_SetNbDataToProcess+0x98>)
 80087ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	7b7a      	ldrb	r2, [r7, #13]
 80087dc:	4909      	ldr	r1, [pc, #36]	; (8008804 <UARTEx_SetNbDataToProcess+0x94>)
 80087de:	5c8a      	ldrb	r2, [r1, r2]
 80087e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087e4:	7b7a      	ldrb	r2, [r7, #13]
 80087e6:	4908      	ldr	r1, [pc, #32]	; (8008808 <UARTEx_SetNbDataToProcess+0x98>)
 80087e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087f6:	bf00      	nop
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	0800cf9c 	.word	0x0800cf9c
 8008808:	0800cfa4 	.word	0x0800cfa4

0800880c <__errno>:
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <__errno+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	24000010 	.word	0x24000010

08008818 <__libc_init_array>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	4d0d      	ldr	r5, [pc, #52]	; (8008850 <__libc_init_array+0x38>)
 800881c:	4c0d      	ldr	r4, [pc, #52]	; (8008854 <__libc_init_array+0x3c>)
 800881e:	1b64      	subs	r4, r4, r5
 8008820:	10a4      	asrs	r4, r4, #2
 8008822:	2600      	movs	r6, #0
 8008824:	42a6      	cmp	r6, r4
 8008826:	d109      	bne.n	800883c <__libc_init_array+0x24>
 8008828:	4d0b      	ldr	r5, [pc, #44]	; (8008858 <__libc_init_array+0x40>)
 800882a:	4c0c      	ldr	r4, [pc, #48]	; (800885c <__libc_init_array+0x44>)
 800882c:	f004 fb74 	bl	800cf18 <_init>
 8008830:	1b64      	subs	r4, r4, r5
 8008832:	10a4      	asrs	r4, r4, #2
 8008834:	2600      	movs	r6, #0
 8008836:	42a6      	cmp	r6, r4
 8008838:	d105      	bne.n	8008846 <__libc_init_array+0x2e>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008840:	4798      	blx	r3
 8008842:	3601      	adds	r6, #1
 8008844:	e7ee      	b.n	8008824 <__libc_init_array+0xc>
 8008846:	f855 3b04 	ldr.w	r3, [r5], #4
 800884a:	4798      	blx	r3
 800884c:	3601      	adds	r6, #1
 800884e:	e7f2      	b.n	8008836 <__libc_init_array+0x1e>
 8008850:	0800d46c 	.word	0x0800d46c
 8008854:	0800d46c 	.word	0x0800d46c
 8008858:	0800d46c 	.word	0x0800d46c
 800885c:	0800d470 	.word	0x0800d470

08008860 <memset>:
 8008860:	4402      	add	r2, r0
 8008862:	4603      	mov	r3, r0
 8008864:	4293      	cmp	r3, r2
 8008866:	d100      	bne.n	800886a <memset+0xa>
 8008868:	4770      	bx	lr
 800886a:	f803 1b01 	strb.w	r1, [r3], #1
 800886e:	e7f9      	b.n	8008864 <memset+0x4>

08008870 <__cvt>:
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008872:	ed2d 8b02 	vpush	{d8}
 8008876:	eeb0 8b40 	vmov.f64	d8, d0
 800887a:	b085      	sub	sp, #20
 800887c:	4617      	mov	r7, r2
 800887e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008880:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008882:	ee18 2a90 	vmov	r2, s17
 8008886:	f025 0520 	bic.w	r5, r5, #32
 800888a:	2a00      	cmp	r2, #0
 800888c:	bfb6      	itet	lt
 800888e:	222d      	movlt	r2, #45	; 0x2d
 8008890:	2200      	movge	r2, #0
 8008892:	eeb1 8b40 	vneglt.f64	d8, d0
 8008896:	2d46      	cmp	r5, #70	; 0x46
 8008898:	460c      	mov	r4, r1
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	d004      	beq.n	80088a8 <__cvt+0x38>
 800889e:	2d45      	cmp	r5, #69	; 0x45
 80088a0:	d100      	bne.n	80088a4 <__cvt+0x34>
 80088a2:	3401      	adds	r4, #1
 80088a4:	2102      	movs	r1, #2
 80088a6:	e000      	b.n	80088aa <__cvt+0x3a>
 80088a8:	2103      	movs	r1, #3
 80088aa:	ab03      	add	r3, sp, #12
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	ab02      	add	r3, sp, #8
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	4622      	mov	r2, r4
 80088b4:	4633      	mov	r3, r6
 80088b6:	eeb0 0b48 	vmov.f64	d0, d8
 80088ba:	f001 fd51 	bl	800a360 <_dtoa_r>
 80088be:	2d47      	cmp	r5, #71	; 0x47
 80088c0:	d109      	bne.n	80088d6 <__cvt+0x66>
 80088c2:	07fb      	lsls	r3, r7, #31
 80088c4:	d407      	bmi.n	80088d6 <__cvt+0x66>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ca:	1a1b      	subs	r3, r3, r0
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	b005      	add	sp, #20
 80088d0:	ecbd 8b02 	vpop	{d8}
 80088d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d6:	2d46      	cmp	r5, #70	; 0x46
 80088d8:	eb00 0204 	add.w	r2, r0, r4
 80088dc:	d10c      	bne.n	80088f8 <__cvt+0x88>
 80088de:	7803      	ldrb	r3, [r0, #0]
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	d107      	bne.n	80088f4 <__cvt+0x84>
 80088e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ec:	bf1c      	itt	ne
 80088ee:	f1c4 0401 	rsbne	r4, r4, #1
 80088f2:	6034      	strne	r4, [r6, #0]
 80088f4:	6833      	ldr	r3, [r6, #0]
 80088f6:	441a      	add	r2, r3
 80088f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008900:	bf08      	it	eq
 8008902:	9203      	streq	r2, [sp, #12]
 8008904:	2130      	movs	r1, #48	; 0x30
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	4293      	cmp	r3, r2
 800890a:	d2dc      	bcs.n	80088c6 <__cvt+0x56>
 800890c:	1c5c      	adds	r4, r3, #1
 800890e:	9403      	str	r4, [sp, #12]
 8008910:	7019      	strb	r1, [r3, #0]
 8008912:	e7f8      	b.n	8008906 <__cvt+0x96>

08008914 <__exponent>:
 8008914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008916:	4603      	mov	r3, r0
 8008918:	2900      	cmp	r1, #0
 800891a:	bfb8      	it	lt
 800891c:	4249      	neglt	r1, r1
 800891e:	f803 2b02 	strb.w	r2, [r3], #2
 8008922:	bfb4      	ite	lt
 8008924:	222d      	movlt	r2, #45	; 0x2d
 8008926:	222b      	movge	r2, #43	; 0x2b
 8008928:	2909      	cmp	r1, #9
 800892a:	7042      	strb	r2, [r0, #1]
 800892c:	dd2a      	ble.n	8008984 <__exponent+0x70>
 800892e:	f10d 0407 	add.w	r4, sp, #7
 8008932:	46a4      	mov	ip, r4
 8008934:	270a      	movs	r7, #10
 8008936:	46a6      	mov	lr, r4
 8008938:	460a      	mov	r2, r1
 800893a:	fb91 f6f7 	sdiv	r6, r1, r7
 800893e:	fb07 1516 	mls	r5, r7, r6, r1
 8008942:	3530      	adds	r5, #48	; 0x30
 8008944:	2a63      	cmp	r2, #99	; 0x63
 8008946:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800894a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800894e:	4631      	mov	r1, r6
 8008950:	dcf1      	bgt.n	8008936 <__exponent+0x22>
 8008952:	3130      	adds	r1, #48	; 0x30
 8008954:	f1ae 0502 	sub.w	r5, lr, #2
 8008958:	f804 1c01 	strb.w	r1, [r4, #-1]
 800895c:	1c44      	adds	r4, r0, #1
 800895e:	4629      	mov	r1, r5
 8008960:	4561      	cmp	r1, ip
 8008962:	d30a      	bcc.n	800897a <__exponent+0x66>
 8008964:	f10d 0209 	add.w	r2, sp, #9
 8008968:	eba2 020e 	sub.w	r2, r2, lr
 800896c:	4565      	cmp	r5, ip
 800896e:	bf88      	it	hi
 8008970:	2200      	movhi	r2, #0
 8008972:	4413      	add	r3, r2
 8008974:	1a18      	subs	r0, r3, r0
 8008976:	b003      	add	sp, #12
 8008978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800897e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008982:	e7ed      	b.n	8008960 <__exponent+0x4c>
 8008984:	2330      	movs	r3, #48	; 0x30
 8008986:	3130      	adds	r1, #48	; 0x30
 8008988:	7083      	strb	r3, [r0, #2]
 800898a:	70c1      	strb	r1, [r0, #3]
 800898c:	1d03      	adds	r3, r0, #4
 800898e:	e7f1      	b.n	8008974 <__exponent+0x60>

08008990 <_printf_float>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	b08b      	sub	sp, #44	; 0x2c
 8008996:	460c      	mov	r4, r1
 8008998:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800899c:	4616      	mov	r6, r2
 800899e:	461f      	mov	r7, r3
 80089a0:	4605      	mov	r5, r0
 80089a2:	f002 fdcf 	bl	800b544 <_localeconv_r>
 80089a6:	f8d0 b000 	ldr.w	fp, [r0]
 80089aa:	4658      	mov	r0, fp
 80089ac:	f7f7 fc98 	bl	80002e0 <strlen>
 80089b0:	2300      	movs	r3, #0
 80089b2:	9308      	str	r3, [sp, #32]
 80089b4:	f8d8 3000 	ldr.w	r3, [r8]
 80089b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	3307      	adds	r3, #7
 80089c0:	f023 0307 	bic.w	r3, r3, #7
 80089c4:	f103 0108 	add.w	r1, r3, #8
 80089c8:	f8c8 1000 	str.w	r1, [r8]
 80089cc:	4682      	mov	sl, r0
 80089ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80089d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008c38 <_printf_float+0x2a8>
 80089da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80089de:	eeb0 6bc0 	vabs.f64	d6, d0
 80089e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	dd24      	ble.n	8008a36 <_printf_float+0xa6>
 80089ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	d502      	bpl.n	80089fc <_printf_float+0x6c>
 80089f6:	232d      	movs	r3, #45	; 0x2d
 80089f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fc:	4b90      	ldr	r3, [pc, #576]	; (8008c40 <_printf_float+0x2b0>)
 80089fe:	4891      	ldr	r0, [pc, #580]	; (8008c44 <_printf_float+0x2b4>)
 8008a00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a04:	bf94      	ite	ls
 8008a06:	4698      	movls	r8, r3
 8008a08:	4680      	movhi	r8, r0
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	6123      	str	r3, [r4, #16]
 8008a0e:	f022 0204 	bic.w	r2, r2, #4
 8008a12:	2300      	movs	r3, #0
 8008a14:	6022      	str	r2, [r4, #0]
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	9700      	str	r7, [sp, #0]
 8008a1a:	4633      	mov	r3, r6
 8008a1c:	aa09      	add	r2, sp, #36	; 0x24
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f9d3 	bl	8008dcc <_printf_common>
 8008a26:	3001      	adds	r0, #1
 8008a28:	f040 808a 	bne.w	8008b40 <_printf_float+0x1b0>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a30:	b00b      	add	sp, #44	; 0x2c
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3e:	d709      	bvc.n	8008a54 <_printf_float+0xc4>
 8008a40:	ee10 3a90 	vmov	r3, s1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bfbc      	itt	lt
 8008a48:	232d      	movlt	r3, #45	; 0x2d
 8008a4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a4e:	487e      	ldr	r0, [pc, #504]	; (8008c48 <_printf_float+0x2b8>)
 8008a50:	4b7e      	ldr	r3, [pc, #504]	; (8008c4c <_printf_float+0x2bc>)
 8008a52:	e7d5      	b.n	8008a00 <_printf_float+0x70>
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a5a:	9104      	str	r1, [sp, #16]
 8008a5c:	1c59      	adds	r1, r3, #1
 8008a5e:	d13c      	bne.n	8008ada <_printf_float+0x14a>
 8008a60:	2306      	movs	r3, #6
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	2300      	movs	r3, #0
 8008a66:	9303      	str	r3, [sp, #12]
 8008a68:	ab08      	add	r3, sp, #32
 8008a6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a72:	ab07      	add	r3, sp, #28
 8008a74:	6861      	ldr	r1, [r4, #4]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	f10d 031b 	add.w	r3, sp, #27
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f7ff fef6 	bl	8008870 <__cvt>
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	9907      	ldr	r1, [sp, #28]
 8008a88:	2b47      	cmp	r3, #71	; 0x47
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	d108      	bne.n	8008aa0 <_printf_float+0x110>
 8008a8e:	1cc8      	adds	r0, r1, #3
 8008a90:	db02      	blt.n	8008a98 <_printf_float+0x108>
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	4299      	cmp	r1, r3
 8008a96:	dd41      	ble.n	8008b1c <_printf_float+0x18c>
 8008a98:	f1a9 0902 	sub.w	r9, r9, #2
 8008a9c:	fa5f f989 	uxtb.w	r9, r9
 8008aa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008aa4:	d820      	bhi.n	8008ae8 <_printf_float+0x158>
 8008aa6:	3901      	subs	r1, #1
 8008aa8:	464a      	mov	r2, r9
 8008aaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008aae:	9107      	str	r1, [sp, #28]
 8008ab0:	f7ff ff30 	bl	8008914 <__exponent>
 8008ab4:	9a08      	ldr	r2, [sp, #32]
 8008ab6:	9004      	str	r0, [sp, #16]
 8008ab8:	1813      	adds	r3, r2, r0
 8008aba:	2a01      	cmp	r2, #1
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	dc02      	bgt.n	8008ac6 <_printf_float+0x136>
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	07d2      	lsls	r2, r2, #31
 8008ac4:	d501      	bpl.n	8008aca <_printf_float+0x13a>
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0a2      	beq.n	8008a18 <_printf_float+0x88>
 8008ad2:	232d      	movs	r3, #45	; 0x2d
 8008ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad8:	e79e      	b.n	8008a18 <_printf_float+0x88>
 8008ada:	9904      	ldr	r1, [sp, #16]
 8008adc:	2947      	cmp	r1, #71	; 0x47
 8008ade:	d1c1      	bne.n	8008a64 <_printf_float+0xd4>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1bf      	bne.n	8008a64 <_printf_float+0xd4>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e7bc      	b.n	8008a62 <_printf_float+0xd2>
 8008ae8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008aec:	d118      	bne.n	8008b20 <_printf_float+0x190>
 8008aee:	2900      	cmp	r1, #0
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	dd0b      	ble.n	8008b0c <_printf_float+0x17c>
 8008af4:	6121      	str	r1, [r4, #16]
 8008af6:	b913      	cbnz	r3, 8008afe <_printf_float+0x16e>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	07d0      	lsls	r0, r2, #31
 8008afc:	d502      	bpl.n	8008b04 <_printf_float+0x174>
 8008afe:	3301      	adds	r3, #1
 8008b00:	440b      	add	r3, r1
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	2300      	movs	r3, #0
 8008b06:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	e7de      	b.n	8008aca <_printf_float+0x13a>
 8008b0c:	b913      	cbnz	r3, 8008b14 <_printf_float+0x184>
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	07d2      	lsls	r2, r2, #31
 8008b12:	d501      	bpl.n	8008b18 <_printf_float+0x188>
 8008b14:	3302      	adds	r3, #2
 8008b16:	e7f4      	b.n	8008b02 <_printf_float+0x172>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e7f2      	b.n	8008b02 <_printf_float+0x172>
 8008b1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	4299      	cmp	r1, r3
 8008b24:	db05      	blt.n	8008b32 <_printf_float+0x1a2>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	6121      	str	r1, [r4, #16]
 8008b2a:	07d8      	lsls	r0, r3, #31
 8008b2c:	d5ea      	bpl.n	8008b04 <_printf_float+0x174>
 8008b2e:	1c4b      	adds	r3, r1, #1
 8008b30:	e7e7      	b.n	8008b02 <_printf_float+0x172>
 8008b32:	2900      	cmp	r1, #0
 8008b34:	bfd4      	ite	le
 8008b36:	f1c1 0202 	rsble	r2, r1, #2
 8008b3a:	2201      	movgt	r2, #1
 8008b3c:	4413      	add	r3, r2
 8008b3e:	e7e0      	b.n	8008b02 <_printf_float+0x172>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	055a      	lsls	r2, r3, #21
 8008b44:	d407      	bmi.n	8008b56 <_printf_float+0x1c6>
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	4642      	mov	r2, r8
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	d12a      	bne.n	8008baa <_printf_float+0x21a>
 8008b54:	e76a      	b.n	8008a2c <_printf_float+0x9c>
 8008b56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b5a:	f240 80e2 	bls.w	8008d22 <_printf_float+0x392>
 8008b5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	d133      	bne.n	8008bd4 <_printf_float+0x244>
 8008b6c:	4a38      	ldr	r2, [pc, #224]	; (8008c50 <_printf_float+0x2c0>)
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f af58 	beq.w	8008a2c <_printf_float+0x9c>
 8008b7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	db02      	blt.n	8008b8a <_printf_float+0x1fa>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	07d8      	lsls	r0, r3, #31
 8008b88:	d50f      	bpl.n	8008baa <_printf_float+0x21a>
 8008b8a:	4653      	mov	r3, sl
 8008b8c:	465a      	mov	r2, fp
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	f43f af49 	beq.w	8008a2c <_printf_float+0x9c>
 8008b9a:	f04f 0800 	mov.w	r8, #0
 8008b9e:	f104 091a 	add.w	r9, r4, #26
 8008ba2:	9b08      	ldr	r3, [sp, #32]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	4543      	cmp	r3, r8
 8008ba8:	dc09      	bgt.n	8008bbe <_printf_float+0x22e>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	079b      	lsls	r3, r3, #30
 8008bae:	f100 8108 	bmi.w	8008dc2 <_printf_float+0x432>
 8008bb2:	68e0      	ldr	r0, [r4, #12]
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	4298      	cmp	r0, r3
 8008bb8:	bfb8      	it	lt
 8008bba:	4618      	movlt	r0, r3
 8008bbc:	e738      	b.n	8008a30 <_printf_float+0xa0>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	464a      	mov	r2, r9
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f af2f 	beq.w	8008a2c <_printf_float+0x9c>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	e7e6      	b.n	8008ba2 <_printf_float+0x212>
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc3c      	bgt.n	8008c54 <_printf_float+0x2c4>
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <_printf_float+0x2c0>)
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4631      	mov	r1, r6
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b8      	blx	r7
 8008be4:	3001      	adds	r0, #1
 8008be6:	f43f af21 	beq.w	8008a2c <_printf_float+0x9c>
 8008bea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	d102      	bne.n	8008bf8 <_printf_float+0x268>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	07d9      	lsls	r1, r3, #31
 8008bf6:	d5d8      	bpl.n	8008baa <_printf_float+0x21a>
 8008bf8:	4653      	mov	r3, sl
 8008bfa:	465a      	mov	r2, fp
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b8      	blx	r7
 8008c02:	3001      	adds	r0, #1
 8008c04:	f43f af12 	beq.w	8008a2c <_printf_float+0x9c>
 8008c08:	f04f 0900 	mov.w	r9, #0
 8008c0c:	f104 0a1a 	add.w	sl, r4, #26
 8008c10:	9b07      	ldr	r3, [sp, #28]
 8008c12:	425b      	negs	r3, r3
 8008c14:	454b      	cmp	r3, r9
 8008c16:	dc01      	bgt.n	8008c1c <_printf_float+0x28c>
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	e795      	b.n	8008b48 <_printf_float+0x1b8>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4652      	mov	r2, sl
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af00 	beq.w	8008a2c <_printf_float+0x9c>
 8008c2c:	f109 0901 	add.w	r9, r9, #1
 8008c30:	e7ee      	b.n	8008c10 <_printf_float+0x280>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
 8008c38:	ffffffff 	.word	0xffffffff
 8008c3c:	7fefffff 	.word	0x7fefffff
 8008c40:	0800cfb0 	.word	0x0800cfb0
 8008c44:	0800cfb4 	.word	0x0800cfb4
 8008c48:	0800cfbc 	.word	0x0800cfbc
 8008c4c:	0800cfb8 	.word	0x0800cfb8
 8008c50:	0800cfc0 	.word	0x0800cfc0
 8008c54:	9a08      	ldr	r2, [sp, #32]
 8008c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bfa8      	it	ge
 8008c5c:	461a      	movge	r2, r3
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	4691      	mov	r9, r2
 8008c62:	dc38      	bgt.n	8008cd6 <_printf_float+0x346>
 8008c64:	2300      	movs	r3, #0
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c6c:	f104 021a 	add.w	r2, r4, #26
 8008c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c72:	9905      	ldr	r1, [sp, #20]
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	eba3 0309 	sub.w	r3, r3, r9
 8008c7a:	428b      	cmp	r3, r1
 8008c7c:	dc33      	bgt.n	8008ce6 <_printf_float+0x356>
 8008c7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	db3c      	blt.n	8008d00 <_printf_float+0x370>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07da      	lsls	r2, r3, #31
 8008c8a:	d439      	bmi.n	8008d00 <_printf_float+0x370>
 8008c8c:	9a08      	ldr	r2, [sp, #32]
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	9907      	ldr	r1, [sp, #28]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	eba2 0901 	sub.w	r9, r2, r1
 8008c98:	4599      	cmp	r9, r3
 8008c9a:	bfa8      	it	ge
 8008c9c:	4699      	movge	r9, r3
 8008c9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ca2:	dc35      	bgt.n	8008d10 <_printf_float+0x380>
 8008ca4:	f04f 0800 	mov.w	r8, #0
 8008ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cac:	f104 0a1a 	add.w	sl, r4, #26
 8008cb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	eba3 0309 	sub.w	r3, r3, r9
 8008cba:	4543      	cmp	r3, r8
 8008cbc:	f77f af75 	ble.w	8008baa <_printf_float+0x21a>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4652      	mov	r2, sl
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	f43f aeae 	beq.w	8008a2c <_printf_float+0x9c>
 8008cd0:	f108 0801 	add.w	r8, r8, #1
 8008cd4:	e7ec      	b.n	8008cb0 <_printf_float+0x320>
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4642      	mov	r2, r8
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1bf      	bne.n	8008c64 <_printf_float+0x2d4>
 8008ce4:	e6a2      	b.n	8008a2c <_printf_float+0x9c>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	9204      	str	r2, [sp, #16]
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	f43f ae9b 	beq.w	8008a2c <_printf_float+0x9c>
 8008cf6:	9b05      	ldr	r3, [sp, #20]
 8008cf8:	9a04      	ldr	r2, [sp, #16]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	e7b7      	b.n	8008c70 <_printf_float+0x2e0>
 8008d00:	4653      	mov	r3, sl
 8008d02:	465a      	mov	r2, fp
 8008d04:	4631      	mov	r1, r6
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d1be      	bne.n	8008c8c <_printf_float+0x2fc>
 8008d0e:	e68d      	b.n	8008a2c <_printf_float+0x9c>
 8008d10:	9a04      	ldr	r2, [sp, #16]
 8008d12:	464b      	mov	r3, r9
 8008d14:	4442      	add	r2, r8
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d1c1      	bne.n	8008ca4 <_printf_float+0x314>
 8008d20:	e684      	b.n	8008a2c <_printf_float+0x9c>
 8008d22:	9a08      	ldr	r2, [sp, #32]
 8008d24:	2a01      	cmp	r2, #1
 8008d26:	dc01      	bgt.n	8008d2c <_printf_float+0x39c>
 8008d28:	07db      	lsls	r3, r3, #31
 8008d2a:	d537      	bpl.n	8008d9c <_printf_float+0x40c>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4642      	mov	r2, r8
 8008d30:	4631      	mov	r1, r6
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	f43f ae78 	beq.w	8008a2c <_printf_float+0x9c>
 8008d3c:	4653      	mov	r3, sl
 8008d3e:	465a      	mov	r2, fp
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f ae70 	beq.w	8008a2c <_printf_float+0x9c>
 8008d4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d58:	d01b      	beq.n	8008d92 <_printf_float+0x402>
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	f108 0201 	add.w	r2, r8, #1
 8008d60:	3b01      	subs	r3, #1
 8008d62:	4631      	mov	r1, r6
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d10e      	bne.n	8008d8a <_printf_float+0x3fa>
 8008d6c:	e65e      	b.n	8008a2c <_printf_float+0x9c>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	464a      	mov	r2, r9
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b8      	blx	r7
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f43f ae57 	beq.w	8008a2c <_printf_float+0x9c>
 8008d7e:	f108 0801 	add.w	r8, r8, #1
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	4543      	cmp	r3, r8
 8008d88:	dcf1      	bgt.n	8008d6e <_printf_float+0x3de>
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d90:	e6db      	b.n	8008b4a <_printf_float+0x1ba>
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	f104 091a 	add.w	r9, r4, #26
 8008d9a:	e7f2      	b.n	8008d82 <_printf_float+0x3f2>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4642      	mov	r2, r8
 8008da0:	e7df      	b.n	8008d62 <_printf_float+0x3d2>
 8008da2:	2301      	movs	r3, #1
 8008da4:	464a      	mov	r2, r9
 8008da6:	4631      	mov	r1, r6
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b8      	blx	r7
 8008dac:	3001      	adds	r0, #1
 8008dae:	f43f ae3d 	beq.w	8008a2c <_printf_float+0x9c>
 8008db2:	f108 0801 	add.w	r8, r8, #1
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	dcf0      	bgt.n	8008da2 <_printf_float+0x412>
 8008dc0:	e6f7      	b.n	8008bb2 <_printf_float+0x222>
 8008dc2:	f04f 0800 	mov.w	r8, #0
 8008dc6:	f104 0919 	add.w	r9, r4, #25
 8008dca:	e7f4      	b.n	8008db6 <_printf_float+0x426>

08008dcc <_printf_common>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	4699      	mov	r9, r3
 8008dd4:	688a      	ldr	r2, [r1, #8]
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bfb8      	it	lt
 8008de0:	4613      	movlt	r3, r2
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008de8:	4607      	mov	r7, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b10a      	cbz	r2, 8008df2 <_printf_common+0x26>
 8008dee:	3301      	adds	r3, #1
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	0699      	lsls	r1, r3, #26
 8008df6:	bf42      	ittt	mi
 8008df8:	6833      	ldrmi	r3, [r6, #0]
 8008dfa:	3302      	addmi	r3, #2
 8008dfc:	6033      	strmi	r3, [r6, #0]
 8008dfe:	6825      	ldr	r5, [r4, #0]
 8008e00:	f015 0506 	ands.w	r5, r5, #6
 8008e04:	d106      	bne.n	8008e14 <_printf_common+0x48>
 8008e06:	f104 0a19 	add.w	sl, r4, #25
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	6832      	ldr	r2, [r6, #0]
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc26      	bgt.n	8008e62 <_printf_common+0x96>
 8008e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e18:	1e13      	subs	r3, r2, #0
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	bf18      	it	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	0692      	lsls	r2, r2, #26
 8008e22:	d42b      	bmi.n	8008e7c <_printf_common+0xb0>
 8008e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d01e      	beq.n	8008e70 <_printf_common+0xa4>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	68e5      	ldr	r5, [r4, #12]
 8008e36:	6832      	ldr	r2, [r6, #0]
 8008e38:	f003 0306 	and.w	r3, r3, #6
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	bf08      	it	eq
 8008e40:	1aad      	subeq	r5, r5, r2
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	bf0c      	ite	eq
 8008e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e4c:	2500      	movne	r5, #0
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bfc4      	itt	gt
 8008e52:	1a9b      	subgt	r3, r3, r2
 8008e54:	18ed      	addgt	r5, r5, r3
 8008e56:	2600      	movs	r6, #0
 8008e58:	341a      	adds	r4, #26
 8008e5a:	42b5      	cmp	r5, r6
 8008e5c:	d11a      	bne.n	8008e94 <_printf_common+0xc8>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e008      	b.n	8008e74 <_printf_common+0xa8>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4652      	mov	r2, sl
 8008e66:	4649      	mov	r1, r9
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c0      	blx	r8
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d103      	bne.n	8008e78 <_printf_common+0xac>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	3501      	adds	r5, #1
 8008e7a:	e7c6      	b.n	8008e0a <_printf_common+0x3e>
 8008e7c:	18e1      	adds	r1, r4, r3
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	2030      	movs	r0, #48	; 0x30
 8008e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e86:	4422      	add	r2, r4
 8008e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e90:	3302      	adds	r3, #2
 8008e92:	e7c7      	b.n	8008e24 <_printf_common+0x58>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0e6      	beq.n	8008e70 <_printf_common+0xa4>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7d9      	b.n	8008e5a <_printf_common+0x8e>
	...

08008ea8 <_printf_i>:
 8008ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	460c      	mov	r4, r1
 8008eae:	4691      	mov	r9, r2
 8008eb0:	7e27      	ldrb	r7, [r4, #24]
 8008eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008eb4:	2f78      	cmp	r7, #120	; 0x78
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ebe:	d807      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ec0:	2f62      	cmp	r7, #98	; 0x62
 8008ec2:	d80a      	bhi.n	8008eda <_printf_i+0x32>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	f000 80d8 	beq.w	800907a <_printf_i+0x1d2>
 8008eca:	2f58      	cmp	r7, #88	; 0x58
 8008ecc:	f000 80a3 	beq.w	8009016 <_printf_i+0x16e>
 8008ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ed8:	e03a      	b.n	8008f50 <_printf_i+0xa8>
 8008eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ede:	2b15      	cmp	r3, #21
 8008ee0:	d8f6      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ee2:	a001      	add	r0, pc, #4	; (adr r0, 8008ee8 <_printf_i+0x40>)
 8008ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008ed1 	.word	0x08008ed1
 8008ef4:	08008ed1 	.word	0x08008ed1
 8008ef8:	08008ed1 	.word	0x08008ed1
 8008efc:	08008ed1 	.word	0x08008ed1
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008ed1 	.word	0x08008ed1
 8008f08:	08008ed1 	.word	0x08008ed1
 8008f0c:	08008ed1 	.word	0x08008ed1
 8008f10:	08008ed1 	.word	0x08008ed1
 8008f14:	08009061 	.word	0x08009061
 8008f18:	08008f85 	.word	0x08008f85
 8008f1c:	08009043 	.word	0x08009043
 8008f20:	08008ed1 	.word	0x08008ed1
 8008f24:	08008ed1 	.word	0x08008ed1
 8008f28:	08009083 	.word	0x08009083
 8008f2c:	08008ed1 	.word	0x08008ed1
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	08008ed1 	.word	0x08008ed1
 8008f38:	08008ed1 	.word	0x08008ed1
 8008f3c:	0800904b 	.word	0x0800904b
 8008f40:	680b      	ldr	r3, [r1, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	600a      	str	r2, [r1, #0]
 8008f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f50:	2301      	movs	r3, #1
 8008f52:	e0a3      	b.n	800909c <_printf_i+0x1f4>
 8008f54:	6825      	ldr	r5, [r4, #0]
 8008f56:	6808      	ldr	r0, [r1, #0]
 8008f58:	062e      	lsls	r6, r5, #24
 8008f5a:	f100 0304 	add.w	r3, r0, #4
 8008f5e:	d50a      	bpl.n	8008f76 <_printf_i+0xce>
 8008f60:	6805      	ldr	r5, [r0, #0]
 8008f62:	600b      	str	r3, [r1, #0]
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	da03      	bge.n	8008f70 <_printf_i+0xc8>
 8008f68:	232d      	movs	r3, #45	; 0x2d
 8008f6a:	426d      	negs	r5, r5
 8008f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f70:	485e      	ldr	r0, [pc, #376]	; (80090ec <_printf_i+0x244>)
 8008f72:	230a      	movs	r3, #10
 8008f74:	e019      	b.n	8008faa <_printf_i+0x102>
 8008f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f7a:	6805      	ldr	r5, [r0, #0]
 8008f7c:	600b      	str	r3, [r1, #0]
 8008f7e:	bf18      	it	ne
 8008f80:	b22d      	sxthne	r5, r5
 8008f82:	e7ef      	b.n	8008f64 <_printf_i+0xbc>
 8008f84:	680b      	ldr	r3, [r1, #0]
 8008f86:	6825      	ldr	r5, [r4, #0]
 8008f88:	1d18      	adds	r0, r3, #4
 8008f8a:	6008      	str	r0, [r1, #0]
 8008f8c:	0628      	lsls	r0, r5, #24
 8008f8e:	d501      	bpl.n	8008f94 <_printf_i+0xec>
 8008f90:	681d      	ldr	r5, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <_printf_i+0xf2>
 8008f94:	0669      	lsls	r1, r5, #25
 8008f96:	d5fb      	bpl.n	8008f90 <_printf_i+0xe8>
 8008f98:	881d      	ldrh	r5, [r3, #0]
 8008f9a:	4854      	ldr	r0, [pc, #336]	; (80090ec <_printf_i+0x244>)
 8008f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008f9e:	bf0c      	ite	eq
 8008fa0:	2308      	moveq	r3, #8
 8008fa2:	230a      	movne	r3, #10
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008faa:	6866      	ldr	r6, [r4, #4]
 8008fac:	60a6      	str	r6, [r4, #8]
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	bfa2      	ittt	ge
 8008fb2:	6821      	ldrge	r1, [r4, #0]
 8008fb4:	f021 0104 	bicge.w	r1, r1, #4
 8008fb8:	6021      	strge	r1, [r4, #0]
 8008fba:	b90d      	cbnz	r5, 8008fc0 <_printf_i+0x118>
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	d04d      	beq.n	800905c <_printf_i+0x1b4>
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008fca:	5dc7      	ldrb	r7, [r0, r7]
 8008fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fd0:	462f      	mov	r7, r5
 8008fd2:	42bb      	cmp	r3, r7
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	d9f4      	bls.n	8008fc2 <_printf_i+0x11a>
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d10b      	bne.n	8008ff4 <_printf_i+0x14c>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	07df      	lsls	r7, r3, #31
 8008fe0:	d508      	bpl.n	8008ff4 <_printf_i+0x14c>
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6861      	ldr	r1, [r4, #4]
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	bfde      	ittt	le
 8008fea:	2330      	movle	r3, #48	; 0x30
 8008fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ff0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008ff4:	1b92      	subs	r2, r2, r6
 8008ff6:	6122      	str	r2, [r4, #16]
 8008ff8:	f8cd a000 	str.w	sl, [sp]
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	aa03      	add	r2, sp, #12
 8009000:	4621      	mov	r1, r4
 8009002:	4640      	mov	r0, r8
 8009004:	f7ff fee2 	bl	8008dcc <_printf_common>
 8009008:	3001      	adds	r0, #1
 800900a:	d14c      	bne.n	80090a6 <_printf_i+0x1fe>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009010:	b004      	add	sp, #16
 8009012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009016:	4835      	ldr	r0, [pc, #212]	; (80090ec <_printf_i+0x244>)
 8009018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	680e      	ldr	r6, [r1, #0]
 8009020:	061f      	lsls	r7, r3, #24
 8009022:	f856 5b04 	ldr.w	r5, [r6], #4
 8009026:	600e      	str	r6, [r1, #0]
 8009028:	d514      	bpl.n	8009054 <_printf_i+0x1ac>
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	bf44      	itt	mi
 800902e:	f043 0320 	orrmi.w	r3, r3, #32
 8009032:	6023      	strmi	r3, [r4, #0]
 8009034:	b91d      	cbnz	r5, 800903e <_printf_i+0x196>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	f023 0320 	bic.w	r3, r3, #32
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	2310      	movs	r3, #16
 8009040:	e7b0      	b.n	8008fa4 <_printf_i+0xfc>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	f043 0320 	orr.w	r3, r3, #32
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	2378      	movs	r3, #120	; 0x78
 800904c:	4828      	ldr	r0, [pc, #160]	; (80090f0 <_printf_i+0x248>)
 800904e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009052:	e7e3      	b.n	800901c <_printf_i+0x174>
 8009054:	065e      	lsls	r6, r3, #25
 8009056:	bf48      	it	mi
 8009058:	b2ad      	uxthmi	r5, r5
 800905a:	e7e6      	b.n	800902a <_printf_i+0x182>
 800905c:	4616      	mov	r6, r2
 800905e:	e7bb      	b.n	8008fd8 <_printf_i+0x130>
 8009060:	680b      	ldr	r3, [r1, #0]
 8009062:	6826      	ldr	r6, [r4, #0]
 8009064:	6960      	ldr	r0, [r4, #20]
 8009066:	1d1d      	adds	r5, r3, #4
 8009068:	600d      	str	r5, [r1, #0]
 800906a:	0635      	lsls	r5, r6, #24
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	d501      	bpl.n	8009074 <_printf_i+0x1cc>
 8009070:	6018      	str	r0, [r3, #0]
 8009072:	e002      	b.n	800907a <_printf_i+0x1d2>
 8009074:	0671      	lsls	r1, r6, #25
 8009076:	d5fb      	bpl.n	8009070 <_printf_i+0x1c8>
 8009078:	8018      	strh	r0, [r3, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	4616      	mov	r6, r2
 8009080:	e7ba      	b.n	8008ff8 <_printf_i+0x150>
 8009082:	680b      	ldr	r3, [r1, #0]
 8009084:	1d1a      	adds	r2, r3, #4
 8009086:	600a      	str	r2, [r1, #0]
 8009088:	681e      	ldr	r6, [r3, #0]
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	2100      	movs	r1, #0
 800908e:	4630      	mov	r0, r6
 8009090:	f7f7 f92e 	bl	80002f0 <memchr>
 8009094:	b108      	cbz	r0, 800909a <_printf_i+0x1f2>
 8009096:	1b80      	subs	r0, r0, r6
 8009098:	6060      	str	r0, [r4, #4]
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	2300      	movs	r3, #0
 80090a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a4:	e7a8      	b.n	8008ff8 <_printf_i+0x150>
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	4632      	mov	r2, r6
 80090aa:	4649      	mov	r1, r9
 80090ac:	4640      	mov	r0, r8
 80090ae:	47d0      	blx	sl
 80090b0:	3001      	adds	r0, #1
 80090b2:	d0ab      	beq.n	800900c <_printf_i+0x164>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	079b      	lsls	r3, r3, #30
 80090b8:	d413      	bmi.n	80090e2 <_printf_i+0x23a>
 80090ba:	68e0      	ldr	r0, [r4, #12]
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	4298      	cmp	r0, r3
 80090c0:	bfb8      	it	lt
 80090c2:	4618      	movlt	r0, r3
 80090c4:	e7a4      	b.n	8009010 <_printf_i+0x168>
 80090c6:	2301      	movs	r3, #1
 80090c8:	4632      	mov	r2, r6
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	47d0      	blx	sl
 80090d0:	3001      	adds	r0, #1
 80090d2:	d09b      	beq.n	800900c <_printf_i+0x164>
 80090d4:	3501      	adds	r5, #1
 80090d6:	68e3      	ldr	r3, [r4, #12]
 80090d8:	9903      	ldr	r1, [sp, #12]
 80090da:	1a5b      	subs	r3, r3, r1
 80090dc:	42ab      	cmp	r3, r5
 80090de:	dcf2      	bgt.n	80090c6 <_printf_i+0x21e>
 80090e0:	e7eb      	b.n	80090ba <_printf_i+0x212>
 80090e2:	2500      	movs	r5, #0
 80090e4:	f104 0619 	add.w	r6, r4, #25
 80090e8:	e7f5      	b.n	80090d6 <_printf_i+0x22e>
 80090ea:	bf00      	nop
 80090ec:	0800cfc2 	.word	0x0800cfc2
 80090f0:	0800cfd3 	.word	0x0800cfd3

080090f4 <_scanf_float>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	b087      	sub	sp, #28
 80090fa:	4617      	mov	r7, r2
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	688b      	ldr	r3, [r1, #8]
 8009100:	1e5a      	subs	r2, r3, #1
 8009102:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009106:	bf83      	ittte	hi
 8009108:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800910c:	195b      	addhi	r3, r3, r5
 800910e:	9302      	strhi	r3, [sp, #8]
 8009110:	2300      	movls	r3, #0
 8009112:	bf86      	itte	hi
 8009114:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009118:	608b      	strhi	r3, [r1, #8]
 800911a:	9302      	strls	r3, [sp, #8]
 800911c:	680b      	ldr	r3, [r1, #0]
 800911e:	468b      	mov	fp, r1
 8009120:	2500      	movs	r5, #0
 8009122:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009126:	f84b 3b1c 	str.w	r3, [fp], #28
 800912a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800912e:	4680      	mov	r8, r0
 8009130:	460c      	mov	r4, r1
 8009132:	465e      	mov	r6, fp
 8009134:	46aa      	mov	sl, r5
 8009136:	46a9      	mov	r9, r5
 8009138:	9501      	str	r5, [sp, #4]
 800913a:	68a2      	ldr	r2, [r4, #8]
 800913c:	b152      	cbz	r2, 8009154 <_scanf_float+0x60>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b4e      	cmp	r3, #78	; 0x4e
 8009144:	d864      	bhi.n	8009210 <_scanf_float+0x11c>
 8009146:	2b40      	cmp	r3, #64	; 0x40
 8009148:	d83c      	bhi.n	80091c4 <_scanf_float+0xd0>
 800914a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800914e:	b2c8      	uxtb	r0, r1
 8009150:	280e      	cmp	r0, #14
 8009152:	d93a      	bls.n	80091ca <_scanf_float+0xd6>
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	d003      	beq.n	8009162 <_scanf_float+0x6e>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009166:	f1ba 0f01 	cmp.w	sl, #1
 800916a:	f200 8113 	bhi.w	8009394 <_scanf_float+0x2a0>
 800916e:	455e      	cmp	r6, fp
 8009170:	f200 8105 	bhi.w	800937e <_scanf_float+0x28a>
 8009174:	2501      	movs	r5, #1
 8009176:	4628      	mov	r0, r5
 8009178:	b007      	add	sp, #28
 800917a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009182:	2a0d      	cmp	r2, #13
 8009184:	d8e6      	bhi.n	8009154 <_scanf_float+0x60>
 8009186:	a101      	add	r1, pc, #4	; (adr r1, 800918c <_scanf_float+0x98>)
 8009188:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800918c:	080092cb 	.word	0x080092cb
 8009190:	08009155 	.word	0x08009155
 8009194:	08009155 	.word	0x08009155
 8009198:	08009155 	.word	0x08009155
 800919c:	0800932b 	.word	0x0800932b
 80091a0:	08009303 	.word	0x08009303
 80091a4:	08009155 	.word	0x08009155
 80091a8:	08009155 	.word	0x08009155
 80091ac:	080092d9 	.word	0x080092d9
 80091b0:	08009155 	.word	0x08009155
 80091b4:	08009155 	.word	0x08009155
 80091b8:	08009155 	.word	0x08009155
 80091bc:	08009155 	.word	0x08009155
 80091c0:	08009291 	.word	0x08009291
 80091c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80091c8:	e7db      	b.n	8009182 <_scanf_float+0x8e>
 80091ca:	290e      	cmp	r1, #14
 80091cc:	d8c2      	bhi.n	8009154 <_scanf_float+0x60>
 80091ce:	a001      	add	r0, pc, #4	; (adr r0, 80091d4 <_scanf_float+0xe0>)
 80091d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091d4:	08009283 	.word	0x08009283
 80091d8:	08009155 	.word	0x08009155
 80091dc:	08009283 	.word	0x08009283
 80091e0:	08009317 	.word	0x08009317
 80091e4:	08009155 	.word	0x08009155
 80091e8:	08009231 	.word	0x08009231
 80091ec:	0800926d 	.word	0x0800926d
 80091f0:	0800926d 	.word	0x0800926d
 80091f4:	0800926d 	.word	0x0800926d
 80091f8:	0800926d 	.word	0x0800926d
 80091fc:	0800926d 	.word	0x0800926d
 8009200:	0800926d 	.word	0x0800926d
 8009204:	0800926d 	.word	0x0800926d
 8009208:	0800926d 	.word	0x0800926d
 800920c:	0800926d 	.word	0x0800926d
 8009210:	2b6e      	cmp	r3, #110	; 0x6e
 8009212:	d809      	bhi.n	8009228 <_scanf_float+0x134>
 8009214:	2b60      	cmp	r3, #96	; 0x60
 8009216:	d8b2      	bhi.n	800917e <_scanf_float+0x8a>
 8009218:	2b54      	cmp	r3, #84	; 0x54
 800921a:	d077      	beq.n	800930c <_scanf_float+0x218>
 800921c:	2b59      	cmp	r3, #89	; 0x59
 800921e:	d199      	bne.n	8009154 <_scanf_float+0x60>
 8009220:	2d07      	cmp	r5, #7
 8009222:	d197      	bne.n	8009154 <_scanf_float+0x60>
 8009224:	2508      	movs	r5, #8
 8009226:	e029      	b.n	800927c <_scanf_float+0x188>
 8009228:	2b74      	cmp	r3, #116	; 0x74
 800922a:	d06f      	beq.n	800930c <_scanf_float+0x218>
 800922c:	2b79      	cmp	r3, #121	; 0x79
 800922e:	e7f6      	b.n	800921e <_scanf_float+0x12a>
 8009230:	6821      	ldr	r1, [r4, #0]
 8009232:	05c8      	lsls	r0, r1, #23
 8009234:	d51a      	bpl.n	800926c <_scanf_float+0x178>
 8009236:	9b02      	ldr	r3, [sp, #8]
 8009238:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800923c:	6021      	str	r1, [r4, #0]
 800923e:	f109 0901 	add.w	r9, r9, #1
 8009242:	b11b      	cbz	r3, 800924c <_scanf_float+0x158>
 8009244:	3b01      	subs	r3, #1
 8009246:	3201      	adds	r2, #1
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	60a2      	str	r2, [r4, #8]
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	3b01      	subs	r3, #1
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	3301      	adds	r3, #1
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3b01      	subs	r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	f340 8084 	ble.w	800936c <_scanf_float+0x278>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	3301      	adds	r3, #1
 8009268:	603b      	str	r3, [r7, #0]
 800926a:	e766      	b.n	800913a <_scanf_float+0x46>
 800926c:	eb1a 0f05 	cmn.w	sl, r5
 8009270:	f47f af70 	bne.w	8009154 <_scanf_float+0x60>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	f806 3b01 	strb.w	r3, [r6], #1
 8009280:	e7e4      	b.n	800924c <_scanf_float+0x158>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	0610      	lsls	r0, r2, #24
 8009286:	f57f af65 	bpl.w	8009154 <_scanf_float+0x60>
 800928a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800928e:	e7f4      	b.n	800927a <_scanf_float+0x186>
 8009290:	f1ba 0f00 	cmp.w	sl, #0
 8009294:	d10e      	bne.n	80092b4 <_scanf_float+0x1c0>
 8009296:	f1b9 0f00 	cmp.w	r9, #0
 800929a:	d10e      	bne.n	80092ba <_scanf_float+0x1c6>
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092a6:	d108      	bne.n	80092ba <_scanf_float+0x1c6>
 80092a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092ac:	6022      	str	r2, [r4, #0]
 80092ae:	f04f 0a01 	mov.w	sl, #1
 80092b2:	e7e3      	b.n	800927c <_scanf_float+0x188>
 80092b4:	f1ba 0f02 	cmp.w	sl, #2
 80092b8:	d055      	beq.n	8009366 <_scanf_float+0x272>
 80092ba:	2d01      	cmp	r5, #1
 80092bc:	d002      	beq.n	80092c4 <_scanf_float+0x1d0>
 80092be:	2d04      	cmp	r5, #4
 80092c0:	f47f af48 	bne.w	8009154 <_scanf_float+0x60>
 80092c4:	3501      	adds	r5, #1
 80092c6:	b2ed      	uxtb	r5, r5
 80092c8:	e7d8      	b.n	800927c <_scanf_float+0x188>
 80092ca:	f1ba 0f01 	cmp.w	sl, #1
 80092ce:	f47f af41 	bne.w	8009154 <_scanf_float+0x60>
 80092d2:	f04f 0a02 	mov.w	sl, #2
 80092d6:	e7d1      	b.n	800927c <_scanf_float+0x188>
 80092d8:	b97d      	cbnz	r5, 80092fa <_scanf_float+0x206>
 80092da:	f1b9 0f00 	cmp.w	r9, #0
 80092de:	f47f af3c 	bne.w	800915a <_scanf_float+0x66>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092ec:	f47f af39 	bne.w	8009162 <_scanf_float+0x6e>
 80092f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	2501      	movs	r5, #1
 80092f8:	e7c0      	b.n	800927c <_scanf_float+0x188>
 80092fa:	2d03      	cmp	r5, #3
 80092fc:	d0e2      	beq.n	80092c4 <_scanf_float+0x1d0>
 80092fe:	2d05      	cmp	r5, #5
 8009300:	e7de      	b.n	80092c0 <_scanf_float+0x1cc>
 8009302:	2d02      	cmp	r5, #2
 8009304:	f47f af26 	bne.w	8009154 <_scanf_float+0x60>
 8009308:	2503      	movs	r5, #3
 800930a:	e7b7      	b.n	800927c <_scanf_float+0x188>
 800930c:	2d06      	cmp	r5, #6
 800930e:	f47f af21 	bne.w	8009154 <_scanf_float+0x60>
 8009312:	2507      	movs	r5, #7
 8009314:	e7b2      	b.n	800927c <_scanf_float+0x188>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	0591      	lsls	r1, r2, #22
 800931a:	f57f af1b 	bpl.w	8009154 <_scanf_float+0x60>
 800931e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	f8cd 9004 	str.w	r9, [sp, #4]
 8009328:	e7a8      	b.n	800927c <_scanf_float+0x188>
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009330:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009334:	d006      	beq.n	8009344 <_scanf_float+0x250>
 8009336:	0550      	lsls	r0, r2, #21
 8009338:	f57f af0c 	bpl.w	8009154 <_scanf_float+0x60>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	f43f af0f 	beq.w	8009162 <_scanf_float+0x6e>
 8009344:	0591      	lsls	r1, r2, #22
 8009346:	bf58      	it	pl
 8009348:	9901      	ldrpl	r1, [sp, #4]
 800934a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800934e:	bf58      	it	pl
 8009350:	eba9 0101 	subpl.w	r1, r9, r1
 8009354:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009358:	bf58      	it	pl
 800935a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800935e:	6022      	str	r2, [r4, #0]
 8009360:	f04f 0900 	mov.w	r9, #0
 8009364:	e78a      	b.n	800927c <_scanf_float+0x188>
 8009366:	f04f 0a03 	mov.w	sl, #3
 800936a:	e787      	b.n	800927c <_scanf_float+0x188>
 800936c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009370:	4639      	mov	r1, r7
 8009372:	4640      	mov	r0, r8
 8009374:	4798      	blx	r3
 8009376:	2800      	cmp	r0, #0
 8009378:	f43f aedf 	beq.w	800913a <_scanf_float+0x46>
 800937c:	e6ea      	b.n	8009154 <_scanf_float+0x60>
 800937e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009386:	463a      	mov	r2, r7
 8009388:	4640      	mov	r0, r8
 800938a:	4798      	blx	r3
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	3b01      	subs	r3, #1
 8009390:	6123      	str	r3, [r4, #16]
 8009392:	e6ec      	b.n	800916e <_scanf_float+0x7a>
 8009394:	1e6b      	subs	r3, r5, #1
 8009396:	2b06      	cmp	r3, #6
 8009398:	d825      	bhi.n	80093e6 <_scanf_float+0x2f2>
 800939a:	2d02      	cmp	r5, #2
 800939c:	d836      	bhi.n	800940c <_scanf_float+0x318>
 800939e:	455e      	cmp	r6, fp
 80093a0:	f67f aee8 	bls.w	8009174 <_scanf_float+0x80>
 80093a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093ac:	463a      	mov	r2, r7
 80093ae:	4640      	mov	r0, r8
 80093b0:	4798      	blx	r3
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	e7f1      	b.n	800939e <_scanf_float+0x2aa>
 80093ba:	9802      	ldr	r0, [sp, #8]
 80093bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	463a      	mov	r2, r7
 80093c8:	4640      	mov	r0, r8
 80093ca:	4798      	blx	r3
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80093d6:	fa5f fa8a 	uxtb.w	sl, sl
 80093da:	f1ba 0f02 	cmp.w	sl, #2
 80093de:	d1ec      	bne.n	80093ba <_scanf_float+0x2c6>
 80093e0:	3d03      	subs	r5, #3
 80093e2:	b2ed      	uxtb	r5, r5
 80093e4:	1b76      	subs	r6, r6, r5
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	05da      	lsls	r2, r3, #23
 80093ea:	d52f      	bpl.n	800944c <_scanf_float+0x358>
 80093ec:	055b      	lsls	r3, r3, #21
 80093ee:	d510      	bpl.n	8009412 <_scanf_float+0x31e>
 80093f0:	455e      	cmp	r6, fp
 80093f2:	f67f aebf 	bls.w	8009174 <_scanf_float+0x80>
 80093f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093fe:	463a      	mov	r2, r7
 8009400:	4640      	mov	r0, r8
 8009402:	4798      	blx	r3
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	3b01      	subs	r3, #1
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	e7f1      	b.n	80093f0 <_scanf_float+0x2fc>
 800940c:	46aa      	mov	sl, r5
 800940e:	9602      	str	r6, [sp, #8]
 8009410:	e7df      	b.n	80093d2 <_scanf_float+0x2de>
 8009412:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	2965      	cmp	r1, #101	; 0x65
 800941a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800941e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	d00c      	beq.n	8009440 <_scanf_float+0x34c>
 8009426:	2945      	cmp	r1, #69	; 0x45
 8009428:	d00a      	beq.n	8009440 <_scanf_float+0x34c>
 800942a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800942e:	463a      	mov	r2, r7
 8009430:	4640      	mov	r0, r8
 8009432:	4798      	blx	r3
 8009434:	6923      	ldr	r3, [r4, #16]
 8009436:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800943a:	3b01      	subs	r3, #1
 800943c:	1eb5      	subs	r5, r6, #2
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009444:	463a      	mov	r2, r7
 8009446:	4640      	mov	r0, r8
 8009448:	4798      	blx	r3
 800944a:	462e      	mov	r6, r5
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	f015 0510 	ands.w	r5, r5, #16
 8009452:	d14d      	bne.n	80094f0 <_scanf_float+0x3fc>
 8009454:	7035      	strb	r5, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800945c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009460:	d11a      	bne.n	8009498 <_scanf_float+0x3a4>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	454b      	cmp	r3, r9
 8009466:	eba3 0209 	sub.w	r2, r3, r9
 800946a:	d122      	bne.n	80094b2 <_scanf_float+0x3be>
 800946c:	2200      	movs	r2, #0
 800946e:	4659      	mov	r1, fp
 8009470:	4640      	mov	r0, r8
 8009472:	f000 fe5b 	bl	800a12c <_strtod_r>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	6821      	ldr	r1, [r4, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f011 0f02 	tst.w	r1, #2
 8009480:	f103 0204 	add.w	r2, r3, #4
 8009484:	d020      	beq.n	80094c8 <_scanf_float+0x3d4>
 8009486:	9903      	ldr	r1, [sp, #12]
 8009488:	600a      	str	r2, [r1, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	ed83 0b00 	vstr	d0, [r3]
 8009490:	68e3      	ldr	r3, [r4, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60e3      	str	r3, [r4, #12]
 8009496:	e66e      	b.n	8009176 <_scanf_float+0x82>
 8009498:	9b04      	ldr	r3, [sp, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0e6      	beq.n	800946c <_scanf_float+0x378>
 800949e:	9905      	ldr	r1, [sp, #20]
 80094a0:	230a      	movs	r3, #10
 80094a2:	462a      	mov	r2, r5
 80094a4:	3101      	adds	r1, #1
 80094a6:	4640      	mov	r0, r8
 80094a8:	f000 feca 	bl	800a240 <_strtol_r>
 80094ac:	9b04      	ldr	r3, [sp, #16]
 80094ae:	9e05      	ldr	r6, [sp, #20]
 80094b0:	1ac2      	subs	r2, r0, r3
 80094b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80094b6:	429e      	cmp	r6, r3
 80094b8:	bf28      	it	cs
 80094ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80094be:	490d      	ldr	r1, [pc, #52]	; (80094f4 <_scanf_float+0x400>)
 80094c0:	4630      	mov	r0, r6
 80094c2:	f000 f821 	bl	8009508 <siprintf>
 80094c6:	e7d1      	b.n	800946c <_scanf_float+0x378>
 80094c8:	f011 0f04 	tst.w	r1, #4
 80094cc:	9903      	ldr	r1, [sp, #12]
 80094ce:	600a      	str	r2, [r1, #0]
 80094d0:	d1db      	bne.n	800948a <_scanf_float+0x396>
 80094d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80094d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094da:	681e      	ldr	r6, [r3, #0]
 80094dc:	d705      	bvc.n	80094ea <_scanf_float+0x3f6>
 80094de:	4806      	ldr	r0, [pc, #24]	; (80094f8 <_scanf_float+0x404>)
 80094e0:	f000 f80c 	bl	80094fc <nanf>
 80094e4:	ed86 0a00 	vstr	s0, [r6]
 80094e8:	e7d2      	b.n	8009490 <_scanf_float+0x39c>
 80094ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80094ee:	e7f9      	b.n	80094e4 <_scanf_float+0x3f0>
 80094f0:	2500      	movs	r5, #0
 80094f2:	e640      	b.n	8009176 <_scanf_float+0x82>
 80094f4:	0800cfe4 	.word	0x0800cfe4
 80094f8:	0800d400 	.word	0x0800d400

080094fc <nanf>:
 80094fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009504 <nanf+0x8>
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	7fc00000 	.word	0x7fc00000

08009508 <siprintf>:
 8009508:	b40e      	push	{r1, r2, r3}
 800950a:	b500      	push	{lr}
 800950c:	b09c      	sub	sp, #112	; 0x70
 800950e:	ab1d      	add	r3, sp, #116	; 0x74
 8009510:	9002      	str	r0, [sp, #8]
 8009512:	9006      	str	r0, [sp, #24]
 8009514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009518:	4809      	ldr	r0, [pc, #36]	; (8009540 <siprintf+0x38>)
 800951a:	9107      	str	r1, [sp, #28]
 800951c:	9104      	str	r1, [sp, #16]
 800951e:	4909      	ldr	r1, [pc, #36]	; (8009544 <siprintf+0x3c>)
 8009520:	f853 2b04 	ldr.w	r2, [r3], #4
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	6800      	ldr	r0, [r0, #0]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	a902      	add	r1, sp, #8
 800952c:	f002 fe08 	bl	800c140 <_svfiprintf_r>
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	b01c      	add	sp, #112	; 0x70
 8009538:	f85d eb04 	ldr.w	lr, [sp], #4
 800953c:	b003      	add	sp, #12
 800953e:	4770      	bx	lr
 8009540:	24000010 	.word	0x24000010
 8009544:	ffff0208 	.word	0xffff0208

08009548 <sulp>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	460d      	mov	r5, r1
 800954e:	4616      	mov	r6, r2
 8009550:	ec45 4b10 	vmov	d0, r4, r5
 8009554:	f002 fb8e 	bl	800bc74 <__ulp>
 8009558:	b17e      	cbz	r6, 800957a <sulp+0x32>
 800955a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800955e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009562:	2b00      	cmp	r3, #0
 8009564:	dd09      	ble.n	800957a <sulp+0x32>
 8009566:	051b      	lsls	r3, r3, #20
 8009568:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800956c:	2000      	movs	r0, #0
 800956e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009572:	ec41 0b17 	vmov	d7, r0, r1
 8009576:	ee20 0b07 	vmul.f64	d0, d0, d7
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	0000      	movs	r0, r0
	...

08009580 <_strtod_l>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	ed2d 8b0c 	vpush	{d8-d13}
 8009588:	b09d      	sub	sp, #116	; 0x74
 800958a:	461f      	mov	r7, r3
 800958c:	2300      	movs	r3, #0
 800958e:	9318      	str	r3, [sp, #96]	; 0x60
 8009590:	4ba6      	ldr	r3, [pc, #664]	; (800982c <_strtod_l+0x2ac>)
 8009592:	9213      	str	r2, [sp, #76]	; 0x4c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	9308      	str	r3, [sp, #32]
 8009598:	4604      	mov	r4, r0
 800959a:	4618      	mov	r0, r3
 800959c:	468a      	mov	sl, r1
 800959e:	f7f6 fe9f 	bl	80002e0 <strlen>
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	4605      	mov	r5, r0
 80095a8:	f04f 0900 	mov.w	r9, #0
 80095ac:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80095b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095b2:	781a      	ldrb	r2, [r3, #0]
 80095b4:	2a2b      	cmp	r2, #43	; 0x2b
 80095b6:	d04d      	beq.n	8009654 <_strtod_l+0xd4>
 80095b8:	d83a      	bhi.n	8009630 <_strtod_l+0xb0>
 80095ba:	2a0d      	cmp	r2, #13
 80095bc:	d833      	bhi.n	8009626 <_strtod_l+0xa6>
 80095be:	2a08      	cmp	r2, #8
 80095c0:	d833      	bhi.n	800962a <_strtod_l+0xaa>
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d03d      	beq.n	8009642 <_strtod_l+0xc2>
 80095c6:	2300      	movs	r3, #0
 80095c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80095cc:	7833      	ldrb	r3, [r6, #0]
 80095ce:	2b30      	cmp	r3, #48	; 0x30
 80095d0:	f040 80b6 	bne.w	8009740 <_strtod_l+0x1c0>
 80095d4:	7873      	ldrb	r3, [r6, #1]
 80095d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095da:	2b58      	cmp	r3, #88	; 0x58
 80095dc:	d16d      	bne.n	80096ba <_strtod_l+0x13a>
 80095de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	ab18      	add	r3, sp, #96	; 0x60
 80095e4:	9702      	str	r7, [sp, #8]
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4a91      	ldr	r2, [pc, #580]	; (8009830 <_strtod_l+0x2b0>)
 80095ea:	ab19      	add	r3, sp, #100	; 0x64
 80095ec:	a917      	add	r1, sp, #92	; 0x5c
 80095ee:	4620      	mov	r0, r4
 80095f0:	f001 fca0 	bl	800af34 <__gethex>
 80095f4:	f010 0507 	ands.w	r5, r0, #7
 80095f8:	4607      	mov	r7, r0
 80095fa:	d005      	beq.n	8009608 <_strtod_l+0x88>
 80095fc:	2d06      	cmp	r5, #6
 80095fe:	d12b      	bne.n	8009658 <_strtod_l+0xd8>
 8009600:	3601      	adds	r6, #1
 8009602:	2300      	movs	r3, #0
 8009604:	9617      	str	r6, [sp, #92]	; 0x5c
 8009606:	930b      	str	r3, [sp, #44]	; 0x2c
 8009608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 856e 	bne.w	800a0ec <_strtod_l+0xb6c>
 8009610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009612:	b1e3      	cbz	r3, 800964e <_strtod_l+0xce>
 8009614:	ec49 8b17 	vmov	d7, r8, r9
 8009618:	eeb1 0b47 	vneg.f64	d0, d7
 800961c:	b01d      	add	sp, #116	; 0x74
 800961e:	ecbd 8b0c 	vpop	{d8-d13}
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	2a20      	cmp	r2, #32
 8009628:	d1cd      	bne.n	80095c6 <_strtod_l+0x46>
 800962a:	3301      	adds	r3, #1
 800962c:	9317      	str	r3, [sp, #92]	; 0x5c
 800962e:	e7bf      	b.n	80095b0 <_strtod_l+0x30>
 8009630:	2a2d      	cmp	r2, #45	; 0x2d
 8009632:	d1c8      	bne.n	80095c6 <_strtod_l+0x46>
 8009634:	2201      	movs	r2, #1
 8009636:	920b      	str	r2, [sp, #44]	; 0x2c
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	9217      	str	r2, [sp, #92]	; 0x5c
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1c3      	bne.n	80095ca <_strtod_l+0x4a>
 8009642:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009644:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 854d 	bne.w	800a0e8 <_strtod_l+0xb68>
 800964e:	ec49 8b10 	vmov	d0, r8, r9
 8009652:	e7e3      	b.n	800961c <_strtod_l+0x9c>
 8009654:	2200      	movs	r2, #0
 8009656:	e7ee      	b.n	8009636 <_strtod_l+0xb6>
 8009658:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800965a:	b13a      	cbz	r2, 800966c <_strtod_l+0xec>
 800965c:	2135      	movs	r1, #53	; 0x35
 800965e:	a81a      	add	r0, sp, #104	; 0x68
 8009660:	f002 fc14 	bl	800be8c <__copybits>
 8009664:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009666:	4620      	mov	r0, r4
 8009668:	f001 ffd8 	bl	800b61c <_Bfree>
 800966c:	3d01      	subs	r5, #1
 800966e:	2d05      	cmp	r5, #5
 8009670:	d807      	bhi.n	8009682 <_strtod_l+0x102>
 8009672:	e8df f005 	tbb	[pc, r5]
 8009676:	0b0e      	.short	0x0b0e
 8009678:	030e1d18 	.word	0x030e1d18
 800967c:	f04f 0900 	mov.w	r9, #0
 8009680:	46c8      	mov	r8, r9
 8009682:	073b      	lsls	r3, r7, #28
 8009684:	d5c0      	bpl.n	8009608 <_strtod_l+0x88>
 8009686:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800968a:	e7bd      	b.n	8009608 <_strtod_l+0x88>
 800968c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8009690:	e7f7      	b.n	8009682 <_strtod_l+0x102>
 8009692:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8009696:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009698:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800969c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80096a4:	e7ed      	b.n	8009682 <_strtod_l+0x102>
 80096a6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8009834 <_strtod_l+0x2b4>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	e7e8      	b.n	8009682 <_strtod_l+0x102>
 80096b0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80096b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80096b8:	e7e3      	b.n	8009682 <_strtod_l+0x102>
 80096ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	9217      	str	r2, [sp, #92]	; 0x5c
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b30      	cmp	r3, #48	; 0x30
 80096c4:	d0f9      	beq.n	80096ba <_strtod_l+0x13a>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d09e      	beq.n	8009608 <_strtod_l+0x88>
 80096ca:	2301      	movs	r3, #1
 80096cc:	9306      	str	r3, [sp, #24]
 80096ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096d0:	930c      	str	r3, [sp, #48]	; 0x30
 80096d2:	2300      	movs	r3, #0
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	930a      	str	r3, [sp, #40]	; 0x28
 80096d8:	461e      	mov	r6, r3
 80096da:	220a      	movs	r2, #10
 80096dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80096de:	f890 b000 	ldrb.w	fp, [r0]
 80096e2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80096e6:	b2d9      	uxtb	r1, r3
 80096e8:	2909      	cmp	r1, #9
 80096ea:	d92b      	bls.n	8009744 <_strtod_l+0x1c4>
 80096ec:	9908      	ldr	r1, [sp, #32]
 80096ee:	462a      	mov	r2, r5
 80096f0:	f002 fe3e 	bl	800c370 <strncmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d035      	beq.n	8009764 <_strtod_l+0x1e4>
 80096f8:	2000      	movs	r0, #0
 80096fa:	465a      	mov	r2, fp
 80096fc:	4633      	mov	r3, r6
 80096fe:	4683      	mov	fp, r0
 8009700:	4601      	mov	r1, r0
 8009702:	2a65      	cmp	r2, #101	; 0x65
 8009704:	d001      	beq.n	800970a <_strtod_l+0x18a>
 8009706:	2a45      	cmp	r2, #69	; 0x45
 8009708:	d118      	bne.n	800973c <_strtod_l+0x1bc>
 800970a:	b91b      	cbnz	r3, 8009714 <_strtod_l+0x194>
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	4303      	orrs	r3, r0
 8009710:	d097      	beq.n	8009642 <_strtod_l+0xc2>
 8009712:	2300      	movs	r3, #0
 8009714:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009718:	f10a 0201 	add.w	r2, sl, #1
 800971c:	9217      	str	r2, [sp, #92]	; 0x5c
 800971e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009722:	2a2b      	cmp	r2, #43	; 0x2b
 8009724:	d077      	beq.n	8009816 <_strtod_l+0x296>
 8009726:	2a2d      	cmp	r2, #45	; 0x2d
 8009728:	d07d      	beq.n	8009826 <_strtod_l+0x2a6>
 800972a:	f04f 0e00 	mov.w	lr, #0
 800972e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009732:	2d09      	cmp	r5, #9
 8009734:	f240 8084 	bls.w	8009840 <_strtod_l+0x2c0>
 8009738:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800973c:	2500      	movs	r5, #0
 800973e:	e09f      	b.n	8009880 <_strtod_l+0x300>
 8009740:	2300      	movs	r3, #0
 8009742:	e7c3      	b.n	80096cc <_strtod_l+0x14c>
 8009744:	2e08      	cmp	r6, #8
 8009746:	bfd5      	itete	le
 8009748:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800974a:	9904      	ldrgt	r1, [sp, #16]
 800974c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009750:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009754:	f100 0001 	add.w	r0, r0, #1
 8009758:	bfd4      	ite	le
 800975a:	930a      	strle	r3, [sp, #40]	; 0x28
 800975c:	9304      	strgt	r3, [sp, #16]
 800975e:	3601      	adds	r6, #1
 8009760:	9017      	str	r0, [sp, #92]	; 0x5c
 8009762:	e7bb      	b.n	80096dc <_strtod_l+0x15c>
 8009764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009766:	195a      	adds	r2, r3, r5
 8009768:	9217      	str	r2, [sp, #92]	; 0x5c
 800976a:	5d5a      	ldrb	r2, [r3, r5]
 800976c:	b3ae      	cbz	r6, 80097da <_strtod_l+0x25a>
 800976e:	4683      	mov	fp, r0
 8009770:	4633      	mov	r3, r6
 8009772:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009776:	2909      	cmp	r1, #9
 8009778:	d912      	bls.n	80097a0 <_strtod_l+0x220>
 800977a:	2101      	movs	r1, #1
 800977c:	e7c1      	b.n	8009702 <_strtod_l+0x182>
 800977e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	9217      	str	r2, [sp, #92]	; 0x5c
 8009784:	785a      	ldrb	r2, [r3, #1]
 8009786:	3001      	adds	r0, #1
 8009788:	2a30      	cmp	r2, #48	; 0x30
 800978a:	d0f8      	beq.n	800977e <_strtod_l+0x1fe>
 800978c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009790:	2b08      	cmp	r3, #8
 8009792:	f200 84b0 	bhi.w	800a0f6 <_strtod_l+0xb76>
 8009796:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009798:	930c      	str	r3, [sp, #48]	; 0x30
 800979a:	4683      	mov	fp, r0
 800979c:	2000      	movs	r0, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	3a30      	subs	r2, #48	; 0x30
 80097a2:	f100 0101 	add.w	r1, r0, #1
 80097a6:	d012      	beq.n	80097ce <_strtod_l+0x24e>
 80097a8:	448b      	add	fp, r1
 80097aa:	eb00 0c03 	add.w	ip, r0, r3
 80097ae:	4619      	mov	r1, r3
 80097b0:	250a      	movs	r5, #10
 80097b2:	4561      	cmp	r1, ip
 80097b4:	d113      	bne.n	80097de <_strtod_l+0x25e>
 80097b6:	1819      	adds	r1, r3, r0
 80097b8:	2908      	cmp	r1, #8
 80097ba:	f103 0301 	add.w	r3, r3, #1
 80097be:	4403      	add	r3, r0
 80097c0:	dc1d      	bgt.n	80097fe <_strtod_l+0x27e>
 80097c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097c4:	210a      	movs	r1, #10
 80097c6:	fb01 2200 	mla	r2, r1, r0, r2
 80097ca:	920a      	str	r2, [sp, #40]	; 0x28
 80097cc:	2100      	movs	r1, #0
 80097ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097d0:	1c50      	adds	r0, r2, #1
 80097d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80097d4:	7852      	ldrb	r2, [r2, #1]
 80097d6:	4608      	mov	r0, r1
 80097d8:	e7cb      	b.n	8009772 <_strtod_l+0x1f2>
 80097da:	4630      	mov	r0, r6
 80097dc:	e7d4      	b.n	8009788 <_strtod_l+0x208>
 80097de:	2908      	cmp	r1, #8
 80097e0:	dc04      	bgt.n	80097ec <_strtod_l+0x26c>
 80097e2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80097e4:	436f      	muls	r7, r5
 80097e6:	970a      	str	r7, [sp, #40]	; 0x28
 80097e8:	3101      	adds	r1, #1
 80097ea:	e7e2      	b.n	80097b2 <_strtod_l+0x232>
 80097ec:	f101 0e01 	add.w	lr, r1, #1
 80097f0:	f1be 0f10 	cmp.w	lr, #16
 80097f4:	bfde      	ittt	le
 80097f6:	9f04      	ldrle	r7, [sp, #16]
 80097f8:	436f      	mulle	r7, r5
 80097fa:	9704      	strle	r7, [sp, #16]
 80097fc:	e7f4      	b.n	80097e8 <_strtod_l+0x268>
 80097fe:	2b10      	cmp	r3, #16
 8009800:	bfdf      	itttt	le
 8009802:	9804      	ldrle	r0, [sp, #16]
 8009804:	210a      	movle	r1, #10
 8009806:	fb01 2200 	mlale	r2, r1, r0, r2
 800980a:	9204      	strle	r2, [sp, #16]
 800980c:	e7de      	b.n	80097cc <_strtod_l+0x24c>
 800980e:	f04f 0b00 	mov.w	fp, #0
 8009812:	2101      	movs	r1, #1
 8009814:	e77a      	b.n	800970c <_strtod_l+0x18c>
 8009816:	f04f 0e00 	mov.w	lr, #0
 800981a:	f10a 0202 	add.w	r2, sl, #2
 800981e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009820:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009824:	e783      	b.n	800972e <_strtod_l+0x1ae>
 8009826:	f04f 0e01 	mov.w	lr, #1
 800982a:	e7f6      	b.n	800981a <_strtod_l+0x29a>
 800982c:	0800d240 	.word	0x0800d240
 8009830:	0800cfec 	.word	0x0800cfec
 8009834:	7ff00000 	.word	0x7ff00000
 8009838:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800983a:	1c55      	adds	r5, r2, #1
 800983c:	9517      	str	r5, [sp, #92]	; 0x5c
 800983e:	7852      	ldrb	r2, [r2, #1]
 8009840:	2a30      	cmp	r2, #48	; 0x30
 8009842:	d0f9      	beq.n	8009838 <_strtod_l+0x2b8>
 8009844:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009848:	2d08      	cmp	r5, #8
 800984a:	f63f af77 	bhi.w	800973c <_strtod_l+0x1bc>
 800984e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009852:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009854:	9208      	str	r2, [sp, #32]
 8009856:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009858:	1c55      	adds	r5, r2, #1
 800985a:	9517      	str	r5, [sp, #92]	; 0x5c
 800985c:	7852      	ldrb	r2, [r2, #1]
 800985e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009862:	2f09      	cmp	r7, #9
 8009864:	d937      	bls.n	80098d6 <_strtod_l+0x356>
 8009866:	9f08      	ldr	r7, [sp, #32]
 8009868:	1bed      	subs	r5, r5, r7
 800986a:	2d08      	cmp	r5, #8
 800986c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009870:	dc02      	bgt.n	8009878 <_strtod_l+0x2f8>
 8009872:	4565      	cmp	r5, ip
 8009874:	bfa8      	it	ge
 8009876:	4665      	movge	r5, ip
 8009878:	f1be 0f00 	cmp.w	lr, #0
 800987c:	d000      	beq.n	8009880 <_strtod_l+0x300>
 800987e:	426d      	negs	r5, r5
 8009880:	2b00      	cmp	r3, #0
 8009882:	d14f      	bne.n	8009924 <_strtod_l+0x3a4>
 8009884:	9b06      	ldr	r3, [sp, #24]
 8009886:	4303      	orrs	r3, r0
 8009888:	f47f aebe 	bne.w	8009608 <_strtod_l+0x88>
 800988c:	2900      	cmp	r1, #0
 800988e:	f47f aed8 	bne.w	8009642 <_strtod_l+0xc2>
 8009892:	2a69      	cmp	r2, #105	; 0x69
 8009894:	d027      	beq.n	80098e6 <_strtod_l+0x366>
 8009896:	dc24      	bgt.n	80098e2 <_strtod_l+0x362>
 8009898:	2a49      	cmp	r2, #73	; 0x49
 800989a:	d024      	beq.n	80098e6 <_strtod_l+0x366>
 800989c:	2a4e      	cmp	r2, #78	; 0x4e
 800989e:	f47f aed0 	bne.w	8009642 <_strtod_l+0xc2>
 80098a2:	499b      	ldr	r1, [pc, #620]	; (8009b10 <_strtod_l+0x590>)
 80098a4:	a817      	add	r0, sp, #92	; 0x5c
 80098a6:	f001 fd9d 	bl	800b3e4 <__match>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f43f aec9 	beq.w	8009642 <_strtod_l+0xc2>
 80098b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b28      	cmp	r3, #40	; 0x28
 80098b6:	d12d      	bne.n	8009914 <_strtod_l+0x394>
 80098b8:	4996      	ldr	r1, [pc, #600]	; (8009b14 <_strtod_l+0x594>)
 80098ba:	aa1a      	add	r2, sp, #104	; 0x68
 80098bc:	a817      	add	r0, sp, #92	; 0x5c
 80098be:	f001 fda5 	bl	800b40c <__hexnan>
 80098c2:	2805      	cmp	r0, #5
 80098c4:	d126      	bne.n	8009914 <_strtod_l+0x394>
 80098c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80098cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80098d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80098d4:	e698      	b.n	8009608 <_strtod_l+0x88>
 80098d6:	250a      	movs	r5, #10
 80098d8:	fb05 250c 	mla	r5, r5, ip, r2
 80098dc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80098e0:	e7b9      	b.n	8009856 <_strtod_l+0x2d6>
 80098e2:	2a6e      	cmp	r2, #110	; 0x6e
 80098e4:	e7db      	b.n	800989e <_strtod_l+0x31e>
 80098e6:	498c      	ldr	r1, [pc, #560]	; (8009b18 <_strtod_l+0x598>)
 80098e8:	a817      	add	r0, sp, #92	; 0x5c
 80098ea:	f001 fd7b 	bl	800b3e4 <__match>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f aea7 	beq.w	8009642 <_strtod_l+0xc2>
 80098f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098f6:	4989      	ldr	r1, [pc, #548]	; (8009b1c <_strtod_l+0x59c>)
 80098f8:	3b01      	subs	r3, #1
 80098fa:	a817      	add	r0, sp, #92	; 0x5c
 80098fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80098fe:	f001 fd71 	bl	800b3e4 <__match>
 8009902:	b910      	cbnz	r0, 800990a <_strtod_l+0x38a>
 8009904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009906:	3301      	adds	r3, #1
 8009908:	9317      	str	r3, [sp, #92]	; 0x5c
 800990a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009b30 <_strtod_l+0x5b0>
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	e679      	b.n	8009608 <_strtod_l+0x88>
 8009914:	4882      	ldr	r0, [pc, #520]	; (8009b20 <_strtod_l+0x5a0>)
 8009916:	f002 fd13 	bl	800c340 <nan>
 800991a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800991e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009922:	e671      	b.n	8009608 <_strtod_l+0x88>
 8009924:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009928:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800992c:	eba5 020b 	sub.w	r2, r5, fp
 8009930:	2e00      	cmp	r6, #0
 8009932:	bf08      	it	eq
 8009934:	461e      	moveq	r6, r3
 8009936:	2b10      	cmp	r3, #16
 8009938:	ed8d 7b08 	vstr	d7, [sp, #32]
 800993c:	9206      	str	r2, [sp, #24]
 800993e:	461a      	mov	r2, r3
 8009940:	bfa8      	it	ge
 8009942:	2210      	movge	r2, #16
 8009944:	2b09      	cmp	r3, #9
 8009946:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800994a:	dd0e      	ble.n	800996a <_strtod_l+0x3ea>
 800994c:	4975      	ldr	r1, [pc, #468]	; (8009b24 <_strtod_l+0x5a4>)
 800994e:	eddd 7a04 	vldr	s15, [sp, #16]
 8009952:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009956:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800995a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800995e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009962:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009966:	ec59 8b17 	vmov	r8, r9, d7
 800996a:	2b0f      	cmp	r3, #15
 800996c:	dc37      	bgt.n	80099de <_strtod_l+0x45e>
 800996e:	9906      	ldr	r1, [sp, #24]
 8009970:	2900      	cmp	r1, #0
 8009972:	f43f ae49 	beq.w	8009608 <_strtod_l+0x88>
 8009976:	dd23      	ble.n	80099c0 <_strtod_l+0x440>
 8009978:	2916      	cmp	r1, #22
 800997a:	dc0b      	bgt.n	8009994 <_strtod_l+0x414>
 800997c:	4b69      	ldr	r3, [pc, #420]	; (8009b24 <_strtod_l+0x5a4>)
 800997e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009982:	ed93 7b00 	vldr	d7, [r3]
 8009986:	ec49 8b16 	vmov	d6, r8, r9
 800998a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800998e:	ec59 8b17 	vmov	r8, r9, d7
 8009992:	e639      	b.n	8009608 <_strtod_l+0x88>
 8009994:	9806      	ldr	r0, [sp, #24]
 8009996:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800999a:	4281      	cmp	r1, r0
 800999c:	db1f      	blt.n	80099de <_strtod_l+0x45e>
 800999e:	4a61      	ldr	r2, [pc, #388]	; (8009b24 <_strtod_l+0x5a4>)
 80099a0:	f1c3 030f 	rsb	r3, r3, #15
 80099a4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80099a8:	ed91 7b00 	vldr	d7, [r1]
 80099ac:	ec49 8b16 	vmov	d6, r8, r9
 80099b0:	1ac3      	subs	r3, r0, r3
 80099b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80099b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099ba:	ed92 6b00 	vldr	d6, [r2]
 80099be:	e7e4      	b.n	800998a <_strtod_l+0x40a>
 80099c0:	9906      	ldr	r1, [sp, #24]
 80099c2:	3116      	adds	r1, #22
 80099c4:	db0b      	blt.n	80099de <_strtod_l+0x45e>
 80099c6:	4b57      	ldr	r3, [pc, #348]	; (8009b24 <_strtod_l+0x5a4>)
 80099c8:	ebab 0505 	sub.w	r5, fp, r5
 80099cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80099d0:	ed95 7b00 	vldr	d7, [r5]
 80099d4:	ec49 8b16 	vmov	d6, r8, r9
 80099d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80099dc:	e7d7      	b.n	800998e <_strtod_l+0x40e>
 80099de:	9906      	ldr	r1, [sp, #24]
 80099e0:	1a9a      	subs	r2, r3, r2
 80099e2:	440a      	add	r2, r1
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	dd74      	ble.n	8009ad2 <_strtod_l+0x552>
 80099e8:	f012 000f 	ands.w	r0, r2, #15
 80099ec:	d00a      	beq.n	8009a04 <_strtod_l+0x484>
 80099ee:	494d      	ldr	r1, [pc, #308]	; (8009b24 <_strtod_l+0x5a4>)
 80099f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80099f4:	ed91 7b00 	vldr	d7, [r1]
 80099f8:	ec49 8b16 	vmov	d6, r8, r9
 80099fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a00:	ec59 8b17 	vmov	r8, r9, d7
 8009a04:	f032 020f 	bics.w	r2, r2, #15
 8009a08:	d04f      	beq.n	8009aaa <_strtod_l+0x52a>
 8009a0a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009a0e:	dd22      	ble.n	8009a56 <_strtod_l+0x4d6>
 8009a10:	2500      	movs	r5, #0
 8009a12:	462e      	mov	r6, r5
 8009a14:	950a      	str	r5, [sp, #40]	; 0x28
 8009a16:	462f      	mov	r7, r5
 8009a18:	2322      	movs	r3, #34	; 0x22
 8009a1a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009b30 <_strtod_l+0x5b0>
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	f04f 0800 	mov.w	r8, #0
 8009a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f43f adee 	beq.w	8009608 <_strtod_l+0x88>
 8009a2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f001 fdf4 	bl	800b61c <_Bfree>
 8009a34:	4639      	mov	r1, r7
 8009a36:	4620      	mov	r0, r4
 8009a38:	f001 fdf0 	bl	800b61c <_Bfree>
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f001 fdec 	bl	800b61c <_Bfree>
 8009a44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a46:	4620      	mov	r0, r4
 8009a48:	f001 fde8 	bl	800b61c <_Bfree>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f001 fde4 	bl	800b61c <_Bfree>
 8009a54:	e5d8      	b.n	8009608 <_strtod_l+0x88>
 8009a56:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	4f32      	ldr	r7, [pc, #200]	; (8009b28 <_strtod_l+0x5a8>)
 8009a5e:	1112      	asrs	r2, r2, #4
 8009a60:	4601      	mov	r1, r0
 8009a62:	2a01      	cmp	r2, #1
 8009a64:	dc24      	bgt.n	8009ab0 <_strtod_l+0x530>
 8009a66:	b108      	cbz	r0, 8009a6c <_strtod_l+0x4ec>
 8009a68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a6c:	4a2e      	ldr	r2, [pc, #184]	; (8009b28 <_strtod_l+0x5a8>)
 8009a6e:	482f      	ldr	r0, [pc, #188]	; (8009b2c <_strtod_l+0x5ac>)
 8009a70:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009a74:	ed91 7b00 	vldr	d7, [r1]
 8009a78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009a7c:	ec49 8b16 	vmov	d6, r8, r9
 8009a80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a88:	9905      	ldr	r1, [sp, #20]
 8009a8a:	4a29      	ldr	r2, [pc, #164]	; (8009b30 <_strtod_l+0x5b0>)
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	4282      	cmp	r2, r0
 8009a90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a94:	d8bc      	bhi.n	8009a10 <_strtod_l+0x490>
 8009a96:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009a9a:	4282      	cmp	r2, r0
 8009a9c:	bf86      	itte	hi
 8009a9e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009b34 <_strtod_l+0x5b4>
 8009aa2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009aa6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009aaa:	2200      	movs	r2, #0
 8009aac:	9204      	str	r2, [sp, #16]
 8009aae:	e07f      	b.n	8009bb0 <_strtod_l+0x630>
 8009ab0:	f012 0f01 	tst.w	r2, #1
 8009ab4:	d00a      	beq.n	8009acc <_strtod_l+0x54c>
 8009ab6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8009aba:	ed90 7b00 	vldr	d7, [r0]
 8009abe:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009ac2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ac6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009aca:	2001      	movs	r0, #1
 8009acc:	3101      	adds	r1, #1
 8009ace:	1052      	asrs	r2, r2, #1
 8009ad0:	e7c7      	b.n	8009a62 <_strtod_l+0x4e2>
 8009ad2:	d0ea      	beq.n	8009aaa <_strtod_l+0x52a>
 8009ad4:	4252      	negs	r2, r2
 8009ad6:	f012 000f 	ands.w	r0, r2, #15
 8009ada:	d00a      	beq.n	8009af2 <_strtod_l+0x572>
 8009adc:	4911      	ldr	r1, [pc, #68]	; (8009b24 <_strtod_l+0x5a4>)
 8009ade:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009ae2:	ed91 7b00 	vldr	d7, [r1]
 8009ae6:	ec49 8b16 	vmov	d6, r8, r9
 8009aea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009aee:	ec59 8b17 	vmov	r8, r9, d7
 8009af2:	1112      	asrs	r2, r2, #4
 8009af4:	d0d9      	beq.n	8009aaa <_strtod_l+0x52a>
 8009af6:	2a1f      	cmp	r2, #31
 8009af8:	dd1e      	ble.n	8009b38 <_strtod_l+0x5b8>
 8009afa:	2500      	movs	r5, #0
 8009afc:	462e      	mov	r6, r5
 8009afe:	950a      	str	r5, [sp, #40]	; 0x28
 8009b00:	462f      	mov	r7, r5
 8009b02:	2322      	movs	r3, #34	; 0x22
 8009b04:	f04f 0800 	mov.w	r8, #0
 8009b08:	f04f 0900 	mov.w	r9, #0
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	e789      	b.n	8009a24 <_strtod_l+0x4a4>
 8009b10:	0800cfbd 	.word	0x0800cfbd
 8009b14:	0800d000 	.word	0x0800d000
 8009b18:	0800cfb5 	.word	0x0800cfb5
 8009b1c:	0800d144 	.word	0x0800d144
 8009b20:	0800d400 	.word	0x0800d400
 8009b24:	0800d2e0 	.word	0x0800d2e0
 8009b28:	0800d2b8 	.word	0x0800d2b8
 8009b2c:	7ca00000 	.word	0x7ca00000
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	7fefffff 	.word	0x7fefffff
 8009b38:	f012 0110 	ands.w	r1, r2, #16
 8009b3c:	bf18      	it	ne
 8009b3e:	216a      	movne	r1, #106	; 0x6a
 8009b40:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009b44:	9104      	str	r1, [sp, #16]
 8009b46:	49c0      	ldr	r1, [pc, #768]	; (8009e48 <_strtod_l+0x8c8>)
 8009b48:	2000      	movs	r0, #0
 8009b4a:	07d7      	lsls	r7, r2, #31
 8009b4c:	d508      	bpl.n	8009b60 <_strtod_l+0x5e0>
 8009b4e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8009b52:	ed91 7b00 	vldr	d7, [r1]
 8009b56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b5a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009b5e:	2001      	movs	r0, #1
 8009b60:	1052      	asrs	r2, r2, #1
 8009b62:	f101 0108 	add.w	r1, r1, #8
 8009b66:	d1f0      	bne.n	8009b4a <_strtod_l+0x5ca>
 8009b68:	b108      	cbz	r0, 8009b6e <_strtod_l+0x5ee>
 8009b6a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8009b6e:	9a04      	ldr	r2, [sp, #16]
 8009b70:	b1ba      	cbz	r2, 8009ba2 <_strtod_l+0x622>
 8009b72:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009b76:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	dd10      	ble.n	8009ba2 <_strtod_l+0x622>
 8009b80:	2a1f      	cmp	r2, #31
 8009b82:	f340 8132 	ble.w	8009dea <_strtod_l+0x86a>
 8009b86:	2a34      	cmp	r2, #52	; 0x34
 8009b88:	bfde      	ittt	le
 8009b8a:	3a20      	suble	r2, #32
 8009b8c:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8009b90:	fa00 f202 	lslle.w	r2, r0, r2
 8009b94:	f04f 0800 	mov.w	r8, #0
 8009b98:	bfcc      	ite	gt
 8009b9a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009b9e:	ea02 0901 	andle.w	r9, r2, r1
 8009ba2:	ec49 8b17 	vmov	d7, r8, r9
 8009ba6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bae:	d0a4      	beq.n	8009afa <_strtod_l+0x57a>
 8009bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bb2:	9200      	str	r2, [sp, #0]
 8009bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f001 fd9b 	bl	800b6f4 <__s2b>
 8009bbe:	900a      	str	r0, [sp, #40]	; 0x28
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f af25 	beq.w	8009a10 <_strtod_l+0x490>
 8009bc6:	9b06      	ldr	r3, [sp, #24]
 8009bc8:	ebab 0505 	sub.w	r5, fp, r5
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bfb4      	ite	lt
 8009bd0:	462b      	movlt	r3, r5
 8009bd2:	2300      	movge	r3, #0
 8009bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8009e30 <_strtod_l+0x8b0>
 8009bdc:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009e38 <_strtod_l+0x8b8>
 8009be0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009e40 <_strtod_l+0x8c0>
 8009be4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009be8:	2500      	movs	r5, #0
 8009bea:	9312      	str	r3, [sp, #72]	; 0x48
 8009bec:	462e      	mov	r6, r5
 8009bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	6859      	ldr	r1, [r3, #4]
 8009bf4:	f001 fcd2 	bl	800b59c <_Balloc>
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f43f af0c 	beq.w	8009a18 <_strtod_l+0x498>
 8009c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	3202      	adds	r2, #2
 8009c06:	f103 010c 	add.w	r1, r3, #12
 8009c0a:	0092      	lsls	r2, r2, #2
 8009c0c:	300c      	adds	r0, #12
 8009c0e:	f001 fcb7 	bl	800b580 <memcpy>
 8009c12:	ec49 8b10 	vmov	d0, r8, r9
 8009c16:	aa1a      	add	r2, sp, #104	; 0x68
 8009c18:	a919      	add	r1, sp, #100	; 0x64
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009c20:	f002 f8a4 	bl	800bd6c <__d2b>
 8009c24:	9018      	str	r0, [sp, #96]	; 0x60
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f43f aef6 	beq.w	8009a18 <_strtod_l+0x498>
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 fdfa 	bl	800b828 <__i2b>
 8009c34:	4606      	mov	r6, r0
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f aeee 	beq.w	8009a18 <_strtod_l+0x498>
 8009c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bfab      	itete	ge
 8009c44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c48:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8009c4c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8009c50:	bfac      	ite	ge
 8009c52:	eb03 0b02 	addge.w	fp, r3, r2
 8009c56:	eba2 0a03 	sublt.w	sl, r2, r3
 8009c5a:	9a04      	ldr	r2, [sp, #16]
 8009c5c:	1a9b      	subs	r3, r3, r2
 8009c5e:	440b      	add	r3, r1
 8009c60:	4a7a      	ldr	r2, [pc, #488]	; (8009e4c <_strtod_l+0x8cc>)
 8009c62:	3b01      	subs	r3, #1
 8009c64:	4293      	cmp	r3, r2
 8009c66:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009c6a:	f280 80d1 	bge.w	8009e10 <_strtod_l+0x890>
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	2a1f      	cmp	r2, #31
 8009c72:	eba1 0102 	sub.w	r1, r1, r2
 8009c76:	f04f 0001 	mov.w	r0, #1
 8009c7a:	f300 80bd 	bgt.w	8009df8 <_strtod_l+0x878>
 8009c7e:	fa00 f302 	lsl.w	r3, r0, r2
 8009c82:	930e      	str	r3, [sp, #56]	; 0x38
 8009c84:	2300      	movs	r3, #0
 8009c86:	930d      	str	r3, [sp, #52]	; 0x34
 8009c88:	eb0b 0301 	add.w	r3, fp, r1
 8009c8c:	9a04      	ldr	r2, [sp, #16]
 8009c8e:	459b      	cmp	fp, r3
 8009c90:	448a      	add	sl, r1
 8009c92:	4492      	add	sl, r2
 8009c94:	465a      	mov	r2, fp
 8009c96:	bfa8      	it	ge
 8009c98:	461a      	movge	r2, r3
 8009c9a:	4552      	cmp	r2, sl
 8009c9c:	bfa8      	it	ge
 8009c9e:	4652      	movge	r2, sl
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	bfc2      	ittt	gt
 8009ca4:	1a9b      	subgt	r3, r3, r2
 8009ca6:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009caa:	ebab 0b02 	subgt.w	fp, fp, r2
 8009cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	dd18      	ble.n	8009ce6 <_strtod_l+0x766>
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	9315      	str	r3, [sp, #84]	; 0x54
 8009cba:	f001 fe71 	bl	800b9a0 <__pow5mult>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	f43f aea9 	beq.w	8009a18 <_strtod_l+0x498>
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f001 fdc2 	bl	800b854 <__multiply>
 8009cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	f43f aea0 	beq.w	8009a18 <_strtod_l+0x498>
 8009cd8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f001 fc9e 	bl	800b61c <_Bfree>
 8009ce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ce4:	9218      	str	r2, [sp, #96]	; 0x60
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f300 8097 	bgt.w	8009e1a <_strtod_l+0x89a>
 8009cec:	9b06      	ldr	r3, [sp, #24]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dd08      	ble.n	8009d04 <_strtod_l+0x784>
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f001 fe52 	bl	800b9a0 <__pow5mult>
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f ae8a 	beq.w	8009a18 <_strtod_l+0x498>
 8009d04:	f1ba 0f00 	cmp.w	sl, #0
 8009d08:	dd08      	ble.n	8009d1c <_strtod_l+0x79c>
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f001 fea0 	bl	800ba54 <__lshift>
 8009d14:	4607      	mov	r7, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f43f ae7e 	beq.w	8009a18 <_strtod_l+0x498>
 8009d1c:	f1bb 0f00 	cmp.w	fp, #0
 8009d20:	dd08      	ble.n	8009d34 <_strtod_l+0x7b4>
 8009d22:	4631      	mov	r1, r6
 8009d24:	465a      	mov	r2, fp
 8009d26:	4620      	mov	r0, r4
 8009d28:	f001 fe94 	bl	800ba54 <__lshift>
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f43f ae72 	beq.w	8009a18 <_strtod_l+0x498>
 8009d34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d36:	463a      	mov	r2, r7
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f001 ff13 	bl	800bb64 <__mdiff>
 8009d3e:	4605      	mov	r5, r0
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f43f ae69 	beq.w	8009a18 <_strtod_l+0x498>
 8009d46:	2300      	movs	r3, #0
 8009d48:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009d4c:	60c3      	str	r3, [r0, #12]
 8009d4e:	4631      	mov	r1, r6
 8009d50:	f001 feec 	bl	800bb2c <__mcmp>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	da7f      	bge.n	8009e58 <_strtod_l+0x8d8>
 8009d58:	ea5a 0308 	orrs.w	r3, sl, r8
 8009d5c:	f040 80a5 	bne.w	8009eaa <_strtod_l+0x92a>
 8009d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 80a0 	bne.w	8009eaa <_strtod_l+0x92a>
 8009d6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d6e:	0d1b      	lsrs	r3, r3, #20
 8009d70:	051b      	lsls	r3, r3, #20
 8009d72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d76:	f240 8098 	bls.w	8009eaa <_strtod_l+0x92a>
 8009d7a:	696b      	ldr	r3, [r5, #20]
 8009d7c:	b91b      	cbnz	r3, 8009d86 <_strtod_l+0x806>
 8009d7e:	692b      	ldr	r3, [r5, #16]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	f340 8092 	ble.w	8009eaa <_strtod_l+0x92a>
 8009d86:	4629      	mov	r1, r5
 8009d88:	2201      	movs	r2, #1
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f001 fe62 	bl	800ba54 <__lshift>
 8009d90:	4631      	mov	r1, r6
 8009d92:	4605      	mov	r5, r0
 8009d94:	f001 feca 	bl	800bb2c <__mcmp>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	f340 8086 	ble.w	8009eaa <_strtod_l+0x92a>
 8009d9e:	9904      	ldr	r1, [sp, #16]
 8009da0:	4a2b      	ldr	r2, [pc, #172]	; (8009e50 <_strtod_l+0x8d0>)
 8009da2:	464b      	mov	r3, r9
 8009da4:	2900      	cmp	r1, #0
 8009da6:	f000 80a1 	beq.w	8009eec <_strtod_l+0x96c>
 8009daa:	ea02 0109 	and.w	r1, r2, r9
 8009dae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009db2:	f300 809b 	bgt.w	8009eec <_strtod_l+0x96c>
 8009db6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009dba:	f77f aea2 	ble.w	8009b02 <_strtod_l+0x582>
 8009dbe:	4a25      	ldr	r2, [pc, #148]	; (8009e54 <_strtod_l+0x8d4>)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009dc6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8009dca:	ec49 8b17 	vmov	d7, r8, r9
 8009dce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009dd6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	bf08      	it	eq
 8009dde:	2322      	moveq	r3, #34	; 0x22
 8009de0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009de4:	bf08      	it	eq
 8009de6:	6023      	streq	r3, [r4, #0]
 8009de8:	e620      	b.n	8009a2c <_strtod_l+0x4ac>
 8009dea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009dee:	fa01 f202 	lsl.w	r2, r1, r2
 8009df2:	ea02 0808 	and.w	r8, r2, r8
 8009df6:	e6d4      	b.n	8009ba2 <_strtod_l+0x622>
 8009df8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009dfc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009e00:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009e04:	33e2      	adds	r3, #226	; 0xe2
 8009e06:	fa00 f303 	lsl.w	r3, r0, r3
 8009e0a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8009e0e:	e73b      	b.n	8009c88 <_strtod_l+0x708>
 8009e10:	2000      	movs	r0, #0
 8009e12:	2301      	movs	r3, #1
 8009e14:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8009e18:	e736      	b.n	8009c88 <_strtod_l+0x708>
 8009e1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f001 fe18 	bl	800ba54 <__lshift>
 8009e24:	9018      	str	r0, [sp, #96]	; 0x60
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f47f af60 	bne.w	8009cec <_strtod_l+0x76c>
 8009e2c:	e5f4      	b.n	8009a18 <_strtod_l+0x498>
 8009e2e:	bf00      	nop
 8009e30:	94a03595 	.word	0x94a03595
 8009e34:	3fcfffff 	.word	0x3fcfffff
 8009e38:	94a03595 	.word	0x94a03595
 8009e3c:	3fdfffff 	.word	0x3fdfffff
 8009e40:	35afe535 	.word	0x35afe535
 8009e44:	3fe00000 	.word	0x3fe00000
 8009e48:	0800d018 	.word	0x0800d018
 8009e4c:	fffffc02 	.word	0xfffffc02
 8009e50:	7ff00000 	.word	0x7ff00000
 8009e54:	39500000 	.word	0x39500000
 8009e58:	46cb      	mov	fp, r9
 8009e5a:	d165      	bne.n	8009f28 <_strtod_l+0x9a8>
 8009e5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e60:	f1ba 0f00 	cmp.w	sl, #0
 8009e64:	d02a      	beq.n	8009ebc <_strtod_l+0x93c>
 8009e66:	4aaa      	ldr	r2, [pc, #680]	; (800a110 <_strtod_l+0xb90>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d12b      	bne.n	8009ec4 <_strtod_l+0x944>
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	4641      	mov	r1, r8
 8009e70:	b1fb      	cbz	r3, 8009eb2 <_strtod_l+0x932>
 8009e72:	4aa8      	ldr	r2, [pc, #672]	; (800a114 <_strtod_l+0xb94>)
 8009e74:	ea09 0202 	and.w	r2, r9, r2
 8009e78:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e80:	d81a      	bhi.n	8009eb8 <_strtod_l+0x938>
 8009e82:	0d12      	lsrs	r2, r2, #20
 8009e84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e88:	fa00 f303 	lsl.w	r3, r0, r3
 8009e8c:	4299      	cmp	r1, r3
 8009e8e:	d119      	bne.n	8009ec4 <_strtod_l+0x944>
 8009e90:	4ba1      	ldr	r3, [pc, #644]	; (800a118 <_strtod_l+0xb98>)
 8009e92:	459b      	cmp	fp, r3
 8009e94:	d102      	bne.n	8009e9c <_strtod_l+0x91c>
 8009e96:	3101      	adds	r1, #1
 8009e98:	f43f adbe 	beq.w	8009a18 <_strtod_l+0x498>
 8009e9c:	4b9d      	ldr	r3, [pc, #628]	; (800a114 <_strtod_l+0xb94>)
 8009e9e:	ea0b 0303 	and.w	r3, fp, r3
 8009ea2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009ea6:	f04f 0800 	mov.w	r8, #0
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d186      	bne.n	8009dbe <_strtod_l+0x83e>
 8009eb0:	e5bc      	b.n	8009a2c <_strtod_l+0x4ac>
 8009eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eb6:	e7e9      	b.n	8009e8c <_strtod_l+0x90c>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	e7e7      	b.n	8009e8c <_strtod_l+0x90c>
 8009ebc:	ea53 0308 	orrs.w	r3, r3, r8
 8009ec0:	f43f af6d 	beq.w	8009d9e <_strtod_l+0x81e>
 8009ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec6:	b1db      	cbz	r3, 8009f00 <_strtod_l+0x980>
 8009ec8:	ea13 0f0b 	tst.w	r3, fp
 8009ecc:	d0ed      	beq.n	8009eaa <_strtod_l+0x92a>
 8009ece:	9a04      	ldr	r2, [sp, #16]
 8009ed0:	4640      	mov	r0, r8
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	f1ba 0f00 	cmp.w	sl, #0
 8009ed8:	d016      	beq.n	8009f08 <_strtod_l+0x988>
 8009eda:	f7ff fb35 	bl	8009548 <sulp>
 8009ede:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009ee2:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009ee6:	ec59 8b17 	vmov	r8, r9, d7
 8009eea:	e7de      	b.n	8009eaa <_strtod_l+0x92a>
 8009eec:	4013      	ands	r3, r2
 8009eee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ef2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ef6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009efa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009efe:	e7d4      	b.n	8009eaa <_strtod_l+0x92a>
 8009f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f02:	ea13 0f08 	tst.w	r3, r8
 8009f06:	e7e1      	b.n	8009ecc <_strtod_l+0x94c>
 8009f08:	f7ff fb1e 	bl	8009548 <sulp>
 8009f0c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009f10:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009f14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f20:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009f24:	d1c1      	bne.n	8009eaa <_strtod_l+0x92a>
 8009f26:	e5ec      	b.n	8009b02 <_strtod_l+0x582>
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f001 ff7a 	bl	800be24 <__ratio>
 8009f30:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009f34:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3c:	d867      	bhi.n	800a00e <_strtod_l+0xa8e>
 8009f3e:	f1ba 0f00 	cmp.w	sl, #0
 8009f42:	d044      	beq.n	8009fce <_strtod_l+0xa4e>
 8009f44:	4b75      	ldr	r3, [pc, #468]	; (800a11c <_strtod_l+0xb9c>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009f4c:	4971      	ldr	r1, [pc, #452]	; (800a114 <_strtod_l+0xb94>)
 8009f4e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a128 <_strtod_l+0xba8>
 8009f52:	ea0b 0001 	and.w	r0, fp, r1
 8009f56:	4560      	cmp	r0, ip
 8009f58:	900d      	str	r0, [sp, #52]	; 0x34
 8009f5a:	f040 808b 	bne.w	800a074 <_strtod_l+0xaf4>
 8009f5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f62:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009f66:	ec49 8b10 	vmov	d0, r8, r9
 8009f6a:	ec43 2b1c 	vmov	d12, r2, r3
 8009f6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f72:	f001 fe7f 	bl	800bc74 <__ulp>
 8009f76:	ec49 8b1d 	vmov	d13, r8, r9
 8009f7a:	eeac db00 	vfma.f64	d13, d12, d0
 8009f7e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8009f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f84:	4963      	ldr	r1, [pc, #396]	; (800a114 <_strtod_l+0xb94>)
 8009f86:	4a66      	ldr	r2, [pc, #408]	; (800a120 <_strtod_l+0xba0>)
 8009f88:	4019      	ands	r1, r3
 8009f8a:	4291      	cmp	r1, r2
 8009f8c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009f90:	d947      	bls.n	800a022 <_strtod_l+0xaa2>
 8009f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d103      	bne.n	8009fa4 <_strtod_l+0xa24>
 8009f9c:	9b08      	ldr	r3, [sp, #32]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	f43f ad3a 	beq.w	8009a18 <_strtod_l+0x498>
 8009fa4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800a118 <_strtod_l+0xb98>
 8009fa8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009fac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f001 fb34 	bl	800b61c <_Bfree>
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f001 fb30 	bl	800b61c <_Bfree>
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f001 fb2c 	bl	800b61c <_Bfree>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f001 fb28 	bl	800b61c <_Bfree>
 8009fcc:	e60f      	b.n	8009bee <_strtod_l+0x66e>
 8009fce:	f1b8 0f00 	cmp.w	r8, #0
 8009fd2:	d112      	bne.n	8009ffa <_strtod_l+0xa7a>
 8009fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fd8:	b9b3      	cbnz	r3, 800a008 <_strtod_l+0xa88>
 8009fda:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009fde:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009fea:	d401      	bmi.n	8009ff0 <_strtod_l+0xa70>
 8009fec:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009ff0:	eeb1 7b48 	vneg.f64	d7, d8
 8009ff4:	ec53 2b17 	vmov	r2, r3, d7
 8009ff8:	e7a8      	b.n	8009f4c <_strtod_l+0x9cc>
 8009ffa:	f1b8 0f01 	cmp.w	r8, #1
 8009ffe:	d103      	bne.n	800a008 <_strtod_l+0xa88>
 800a000:	f1b9 0f00 	cmp.w	r9, #0
 800a004:	f43f ad7d 	beq.w	8009b02 <_strtod_l+0x582>
 800a008:	4b46      	ldr	r3, [pc, #280]	; (800a124 <_strtod_l+0xba4>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	e79c      	b.n	8009f48 <_strtod_l+0x9c8>
 800a00e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a012:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a016:	f1ba 0f00 	cmp.w	sl, #0
 800a01a:	d0e9      	beq.n	8009ff0 <_strtod_l+0xa70>
 800a01c:	ec53 2b18 	vmov	r2, r3, d8
 800a020:	e794      	b.n	8009f4c <_strtod_l+0x9cc>
 800a022:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a026:	9b04      	ldr	r3, [sp, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1bf      	bne.n	8009fac <_strtod_l+0xa2c>
 800a02c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a032:	0d1b      	lsrs	r3, r3, #20
 800a034:	051b      	lsls	r3, r3, #20
 800a036:	429a      	cmp	r2, r3
 800a038:	d1b8      	bne.n	8009fac <_strtod_l+0xa2c>
 800a03a:	ec51 0b18 	vmov	r0, r1, d8
 800a03e:	f7f6 fb7b 	bl	8000738 <__aeabi_d2lz>
 800a042:	f7f6 fb33 	bl	80006ac <__aeabi_l2d>
 800a046:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a04a:	ec41 0b17 	vmov	d7, r0, r1
 800a04e:	ea43 0308 	orr.w	r3, r3, r8
 800a052:	ea53 030a 	orrs.w	r3, r3, sl
 800a056:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a05a:	d03e      	beq.n	800a0da <_strtod_l+0xb5a>
 800a05c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a064:	f53f ace2 	bmi.w	8009a2c <_strtod_l+0x4ac>
 800a068:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	dd9c      	ble.n	8009fac <_strtod_l+0xa2c>
 800a072:	e4db      	b.n	8009a2c <_strtod_l+0x4ac>
 800a074:	9904      	ldr	r1, [sp, #16]
 800a076:	b301      	cbz	r1, 800a0ba <_strtod_l+0xb3a>
 800a078:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a07a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a07e:	d81c      	bhi.n	800a0ba <_strtod_l+0xb3a>
 800a080:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a108 <_strtod_l+0xb88>
 800a084:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08c:	d811      	bhi.n	800a0b2 <_strtod_l+0xb32>
 800a08e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a092:	ee18 3a10 	vmov	r3, s16
 800a096:	2b01      	cmp	r3, #1
 800a098:	bf38      	it	cc
 800a09a:	2301      	movcc	r3, #1
 800a09c:	ee08 3a10 	vmov	s16, r3
 800a0a0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a0a4:	f1ba 0f00 	cmp.w	sl, #0
 800a0a8:	d114      	bne.n	800a0d4 <_strtod_l+0xb54>
 800a0aa:	eeb1 7b48 	vneg.f64	d7, d8
 800a0ae:	ec53 2b17 	vmov	r2, r3, d7
 800a0b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a0b4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800a0b8:	1a0b      	subs	r3, r1, r0
 800a0ba:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a0be:	ec43 2b1c 	vmov	d12, r2, r3
 800a0c2:	f001 fdd7 	bl	800bc74 <__ulp>
 800a0c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a0ca:	eeac 7b00 	vfma.f64	d7, d12, d0
 800a0ce:	ec59 8b17 	vmov	r8, r9, d7
 800a0d2:	e7a8      	b.n	800a026 <_strtod_l+0xaa6>
 800a0d4:	ec53 2b18 	vmov	r2, r3, d8
 800a0d8:	e7eb      	b.n	800a0b2 <_strtod_l+0xb32>
 800a0da:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e2:	f57f af63 	bpl.w	8009fac <_strtod_l+0xa2c>
 800a0e6:	e4a1      	b.n	8009a2c <_strtod_l+0x4ac>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a0ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	f7ff ba8d 	b.w	8009610 <_strtod_l+0x90>
 800a0f6:	2a65      	cmp	r2, #101	; 0x65
 800a0f8:	f43f ab89 	beq.w	800980e <_strtod_l+0x28e>
 800a0fc:	2a45      	cmp	r2, #69	; 0x45
 800a0fe:	f43f ab86 	beq.w	800980e <_strtod_l+0x28e>
 800a102:	2101      	movs	r1, #1
 800a104:	f7ff bbbe 	b.w	8009884 <_strtod_l+0x304>
 800a108:	ffc00000 	.word	0xffc00000
 800a10c:	41dfffff 	.word	0x41dfffff
 800a110:	000fffff 	.word	0x000fffff
 800a114:	7ff00000 	.word	0x7ff00000
 800a118:	7fefffff 	.word	0x7fefffff
 800a11c:	3ff00000 	.word	0x3ff00000
 800a120:	7c9fffff 	.word	0x7c9fffff
 800a124:	bff00000 	.word	0xbff00000
 800a128:	7fe00000 	.word	0x7fe00000

0800a12c <_strtod_r>:
 800a12c:	4b01      	ldr	r3, [pc, #4]	; (800a134 <_strtod_r+0x8>)
 800a12e:	f7ff ba27 	b.w	8009580 <_strtod_l>
 800a132:	bf00      	nop
 800a134:	24000078 	.word	0x24000078

0800a138 <_strtol_l.isra.0>:
 800a138:	2b01      	cmp	r3, #1
 800a13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a13e:	d001      	beq.n	800a144 <_strtol_l.isra.0+0xc>
 800a140:	2b24      	cmp	r3, #36	; 0x24
 800a142:	d906      	bls.n	800a152 <_strtol_l.isra.0+0x1a>
 800a144:	f7fe fb62 	bl	800880c <__errno>
 800a148:	2316      	movs	r3, #22
 800a14a:	6003      	str	r3, [r0, #0]
 800a14c:	2000      	movs	r0, #0
 800a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a152:	4f3a      	ldr	r7, [pc, #232]	; (800a23c <_strtol_l.isra.0+0x104>)
 800a154:	468e      	mov	lr, r1
 800a156:	4676      	mov	r6, lr
 800a158:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a15c:	5de5      	ldrb	r5, [r4, r7]
 800a15e:	f015 0508 	ands.w	r5, r5, #8
 800a162:	d1f8      	bne.n	800a156 <_strtol_l.isra.0+0x1e>
 800a164:	2c2d      	cmp	r4, #45	; 0x2d
 800a166:	d134      	bne.n	800a1d2 <_strtol_l.isra.0+0x9a>
 800a168:	f89e 4000 	ldrb.w	r4, [lr]
 800a16c:	f04f 0801 	mov.w	r8, #1
 800a170:	f106 0e02 	add.w	lr, r6, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d05c      	beq.n	800a232 <_strtol_l.isra.0+0xfa>
 800a178:	2b10      	cmp	r3, #16
 800a17a:	d10c      	bne.n	800a196 <_strtol_l.isra.0+0x5e>
 800a17c:	2c30      	cmp	r4, #48	; 0x30
 800a17e:	d10a      	bne.n	800a196 <_strtol_l.isra.0+0x5e>
 800a180:	f89e 4000 	ldrb.w	r4, [lr]
 800a184:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a188:	2c58      	cmp	r4, #88	; 0x58
 800a18a:	d14d      	bne.n	800a228 <_strtol_l.isra.0+0xf0>
 800a18c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a190:	2310      	movs	r3, #16
 800a192:	f10e 0e02 	add.w	lr, lr, #2
 800a196:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a19a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a19e:	2600      	movs	r6, #0
 800a1a0:	fbbc f9f3 	udiv	r9, ip, r3
 800a1a4:	4635      	mov	r5, r6
 800a1a6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a1aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a1ae:	2f09      	cmp	r7, #9
 800a1b0:	d818      	bhi.n	800a1e4 <_strtol_l.isra.0+0xac>
 800a1b2:	463c      	mov	r4, r7
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	dd24      	ble.n	800a202 <_strtol_l.isra.0+0xca>
 800a1b8:	2e00      	cmp	r6, #0
 800a1ba:	db1f      	blt.n	800a1fc <_strtol_l.isra.0+0xc4>
 800a1bc:	45a9      	cmp	r9, r5
 800a1be:	d31d      	bcc.n	800a1fc <_strtol_l.isra.0+0xc4>
 800a1c0:	d101      	bne.n	800a1c6 <_strtol_l.isra.0+0x8e>
 800a1c2:	45a2      	cmp	sl, r4
 800a1c4:	db1a      	blt.n	800a1fc <_strtol_l.isra.0+0xc4>
 800a1c6:	fb05 4503 	mla	r5, r5, r3, r4
 800a1ca:	2601      	movs	r6, #1
 800a1cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a1d0:	e7eb      	b.n	800a1aa <_strtol_l.isra.0+0x72>
 800a1d2:	2c2b      	cmp	r4, #43	; 0x2b
 800a1d4:	bf08      	it	eq
 800a1d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a1da:	46a8      	mov	r8, r5
 800a1dc:	bf08      	it	eq
 800a1de:	f106 0e02 	addeq.w	lr, r6, #2
 800a1e2:	e7c7      	b.n	800a174 <_strtol_l.isra.0+0x3c>
 800a1e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a1e8:	2f19      	cmp	r7, #25
 800a1ea:	d801      	bhi.n	800a1f0 <_strtol_l.isra.0+0xb8>
 800a1ec:	3c37      	subs	r4, #55	; 0x37
 800a1ee:	e7e1      	b.n	800a1b4 <_strtol_l.isra.0+0x7c>
 800a1f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a1f4:	2f19      	cmp	r7, #25
 800a1f6:	d804      	bhi.n	800a202 <_strtol_l.isra.0+0xca>
 800a1f8:	3c57      	subs	r4, #87	; 0x57
 800a1fa:	e7db      	b.n	800a1b4 <_strtol_l.isra.0+0x7c>
 800a1fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a200:	e7e4      	b.n	800a1cc <_strtol_l.isra.0+0x94>
 800a202:	2e00      	cmp	r6, #0
 800a204:	da05      	bge.n	800a212 <_strtol_l.isra.0+0xda>
 800a206:	2322      	movs	r3, #34	; 0x22
 800a208:	6003      	str	r3, [r0, #0]
 800a20a:	4665      	mov	r5, ip
 800a20c:	b942      	cbnz	r2, 800a220 <_strtol_l.isra.0+0xe8>
 800a20e:	4628      	mov	r0, r5
 800a210:	e79d      	b.n	800a14e <_strtol_l.isra.0+0x16>
 800a212:	f1b8 0f00 	cmp.w	r8, #0
 800a216:	d000      	beq.n	800a21a <_strtol_l.isra.0+0xe2>
 800a218:	426d      	negs	r5, r5
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	d0f7      	beq.n	800a20e <_strtol_l.isra.0+0xd6>
 800a21e:	b10e      	cbz	r6, 800a224 <_strtol_l.isra.0+0xec>
 800a220:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a224:	6011      	str	r1, [r2, #0]
 800a226:	e7f2      	b.n	800a20e <_strtol_l.isra.0+0xd6>
 800a228:	2430      	movs	r4, #48	; 0x30
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1b3      	bne.n	800a196 <_strtol_l.isra.0+0x5e>
 800a22e:	2308      	movs	r3, #8
 800a230:	e7b1      	b.n	800a196 <_strtol_l.isra.0+0x5e>
 800a232:	2c30      	cmp	r4, #48	; 0x30
 800a234:	d0a4      	beq.n	800a180 <_strtol_l.isra.0+0x48>
 800a236:	230a      	movs	r3, #10
 800a238:	e7ad      	b.n	800a196 <_strtol_l.isra.0+0x5e>
 800a23a:	bf00      	nop
 800a23c:	0800d041 	.word	0x0800d041

0800a240 <_strtol_r>:
 800a240:	f7ff bf7a 	b.w	800a138 <_strtol_l.isra.0>

0800a244 <quorem>:
 800a244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	6903      	ldr	r3, [r0, #16]
 800a24a:	690c      	ldr	r4, [r1, #16]
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	4607      	mov	r7, r0
 800a250:	f2c0 8081 	blt.w	800a356 <quorem+0x112>
 800a254:	3c01      	subs	r4, #1
 800a256:	f101 0814 	add.w	r8, r1, #20
 800a25a:	f100 0514 	add.w	r5, r0, #20
 800a25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a26c:	3301      	adds	r3, #1
 800a26e:	429a      	cmp	r2, r3
 800a270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a278:	fbb2 f6f3 	udiv	r6, r2, r3
 800a27c:	d331      	bcc.n	800a2e2 <quorem+0x9e>
 800a27e:	f04f 0e00 	mov.w	lr, #0
 800a282:	4640      	mov	r0, r8
 800a284:	46ac      	mov	ip, r5
 800a286:	46f2      	mov	sl, lr
 800a288:	f850 2b04 	ldr.w	r2, [r0], #4
 800a28c:	b293      	uxth	r3, r2
 800a28e:	fb06 e303 	mla	r3, r6, r3, lr
 800a292:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a296:	b29b      	uxth	r3, r3
 800a298:	ebaa 0303 	sub.w	r3, sl, r3
 800a29c:	0c12      	lsrs	r2, r2, #16
 800a29e:	f8dc a000 	ldr.w	sl, [ip]
 800a2a2:	fb06 e202 	mla	r2, r6, r2, lr
 800a2a6:	fa13 f38a 	uxtah	r3, r3, sl
 800a2aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2ae:	fa1f fa82 	uxth.w	sl, r2
 800a2b2:	f8dc 2000 	ldr.w	r2, [ip]
 800a2b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a2ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2c4:	4581      	cmp	r9, r0
 800a2c6:	f84c 3b04 	str.w	r3, [ip], #4
 800a2ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2ce:	d2db      	bcs.n	800a288 <quorem+0x44>
 800a2d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2d4:	b92b      	cbnz	r3, 800a2e2 <quorem+0x9e>
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	3b04      	subs	r3, #4
 800a2da:	429d      	cmp	r5, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	d32e      	bcc.n	800a33e <quorem+0xfa>
 800a2e0:	613c      	str	r4, [r7, #16]
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	f001 fc22 	bl	800bb2c <__mcmp>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	db24      	blt.n	800a336 <quorem+0xf2>
 800a2ec:	3601      	adds	r6, #1
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f04f 0c00 	mov.w	ip, #0
 800a2f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2f8:	f8d0 e000 	ldr.w	lr, [r0]
 800a2fc:	b293      	uxth	r3, r2
 800a2fe:	ebac 0303 	sub.w	r3, ip, r3
 800a302:	0c12      	lsrs	r2, r2, #16
 800a304:	fa13 f38e 	uxtah	r3, r3, lr
 800a308:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a30c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a310:	b29b      	uxth	r3, r3
 800a312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a316:	45c1      	cmp	r9, r8
 800a318:	f840 3b04 	str.w	r3, [r0], #4
 800a31c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a320:	d2e8      	bcs.n	800a2f4 <quorem+0xb0>
 800a322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a32a:	b922      	cbnz	r2, 800a336 <quorem+0xf2>
 800a32c:	3b04      	subs	r3, #4
 800a32e:	429d      	cmp	r5, r3
 800a330:	461a      	mov	r2, r3
 800a332:	d30a      	bcc.n	800a34a <quorem+0x106>
 800a334:	613c      	str	r4, [r7, #16]
 800a336:	4630      	mov	r0, r6
 800a338:	b003      	add	sp, #12
 800a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	3b04      	subs	r3, #4
 800a342:	2a00      	cmp	r2, #0
 800a344:	d1cc      	bne.n	800a2e0 <quorem+0x9c>
 800a346:	3c01      	subs	r4, #1
 800a348:	e7c7      	b.n	800a2da <quorem+0x96>
 800a34a:	6812      	ldr	r2, [r2, #0]
 800a34c:	3b04      	subs	r3, #4
 800a34e:	2a00      	cmp	r2, #0
 800a350:	d1f0      	bne.n	800a334 <quorem+0xf0>
 800a352:	3c01      	subs	r4, #1
 800a354:	e7eb      	b.n	800a32e <quorem+0xea>
 800a356:	2000      	movs	r0, #0
 800a358:	e7ee      	b.n	800a338 <quorem+0xf4>
 800a35a:	0000      	movs	r0, r0
 800a35c:	0000      	movs	r0, r0
	...

0800a360 <_dtoa_r>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	ec59 8b10 	vmov	r8, r9, d0
 800a368:	b095      	sub	sp, #84	; 0x54
 800a36a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a36c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a36e:	9107      	str	r1, [sp, #28]
 800a370:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a374:	4606      	mov	r6, r0
 800a376:	9209      	str	r2, [sp, #36]	; 0x24
 800a378:	9310      	str	r3, [sp, #64]	; 0x40
 800a37a:	b975      	cbnz	r5, 800a39a <_dtoa_r+0x3a>
 800a37c:	2010      	movs	r0, #16
 800a37e:	f001 f8e5 	bl	800b54c <malloc>
 800a382:	4602      	mov	r2, r0
 800a384:	6270      	str	r0, [r6, #36]	; 0x24
 800a386:	b920      	cbnz	r0, 800a392 <_dtoa_r+0x32>
 800a388:	4bab      	ldr	r3, [pc, #684]	; (800a638 <_dtoa_r+0x2d8>)
 800a38a:	21ea      	movs	r1, #234	; 0xea
 800a38c:	48ab      	ldr	r0, [pc, #684]	; (800a63c <_dtoa_r+0x2dc>)
 800a38e:	f002 f80f 	bl	800c3b0 <__assert_func>
 800a392:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a396:	6005      	str	r5, [r0, #0]
 800a398:	60c5      	str	r5, [r0, #12]
 800a39a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	b151      	cbz	r1, 800a3b6 <_dtoa_r+0x56>
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	604a      	str	r2, [r1, #4]
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4093      	lsls	r3, r2
 800a3a8:	608b      	str	r3, [r1, #8]
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f001 f936 	bl	800b61c <_Bfree>
 800a3b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	f1b9 0300 	subs.w	r3, r9, #0
 800a3ba:	bfbb      	ittet	lt
 800a3bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a3c0:	9303      	strlt	r3, [sp, #12]
 800a3c2:	2300      	movge	r3, #0
 800a3c4:	2201      	movlt	r2, #1
 800a3c6:	bfac      	ite	ge
 800a3c8:	6023      	strge	r3, [r4, #0]
 800a3ca:	6022      	strlt	r2, [r4, #0]
 800a3cc:	4b9c      	ldr	r3, [pc, #624]	; (800a640 <_dtoa_r+0x2e0>)
 800a3ce:	9c03      	ldr	r4, [sp, #12]
 800a3d0:	43a3      	bics	r3, r4
 800a3d2:	d11a      	bne.n	800a40a <_dtoa_r+0xaa>
 800a3d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a3e0:	ea53 0308 	orrs.w	r3, r3, r8
 800a3e4:	f000 8512 	beq.w	800ae0c <_dtoa_r+0xaac>
 800a3e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3ea:	b953      	cbnz	r3, 800a402 <_dtoa_r+0xa2>
 800a3ec:	4b95      	ldr	r3, [pc, #596]	; (800a644 <_dtoa_r+0x2e4>)
 800a3ee:	e01f      	b.n	800a430 <_dtoa_r+0xd0>
 800a3f0:	4b95      	ldr	r3, [pc, #596]	; (800a648 <_dtoa_r+0x2e8>)
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a3f8:	6013      	str	r3, [r2, #0]
 800a3fa:	9800      	ldr	r0, [sp, #0]
 800a3fc:	b015      	add	sp, #84	; 0x54
 800a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a402:	4b90      	ldr	r3, [pc, #576]	; (800a644 <_dtoa_r+0x2e4>)
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	3303      	adds	r3, #3
 800a408:	e7f5      	b.n	800a3f6 <_dtoa_r+0x96>
 800a40a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a40e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a416:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a41a:	d10b      	bne.n	800a434 <_dtoa_r+0xd4>
 800a41c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a41e:	2301      	movs	r3, #1
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 84ee 	beq.w	800ae06 <_dtoa_r+0xaa6>
 800a42a:	4888      	ldr	r0, [pc, #544]	; (800a64c <_dtoa_r+0x2ec>)
 800a42c:	6018      	str	r0, [r3, #0]
 800a42e:	1e43      	subs	r3, r0, #1
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	e7e2      	b.n	800a3fa <_dtoa_r+0x9a>
 800a434:	a913      	add	r1, sp, #76	; 0x4c
 800a436:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a43a:	aa12      	add	r2, sp, #72	; 0x48
 800a43c:	4630      	mov	r0, r6
 800a43e:	f001 fc95 	bl	800bd6c <__d2b>
 800a442:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a446:	4605      	mov	r5, r0
 800a448:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a44a:	2900      	cmp	r1, #0
 800a44c:	d047      	beq.n	800a4de <_dtoa_r+0x17e>
 800a44e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a450:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a458:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a45c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a460:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a464:	2400      	movs	r4, #0
 800a466:	ec43 2b16 	vmov	d6, r2, r3
 800a46a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a46e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a620 <_dtoa_r+0x2c0>
 800a472:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a476:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a628 <_dtoa_r+0x2c8>
 800a47a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a47e:	eeb0 7b46 	vmov.f64	d7, d6
 800a482:	ee06 1a90 	vmov	s13, r1
 800a486:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a48a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a630 <_dtoa_r+0x2d0>
 800a48e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a492:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a496:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49e:	ee16 ba90 	vmov	fp, s13
 800a4a2:	9411      	str	r4, [sp, #68]	; 0x44
 800a4a4:	d508      	bpl.n	800a4b8 <_dtoa_r+0x158>
 800a4a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a4aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800a4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b2:	bf18      	it	ne
 800a4b4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800a4b8:	f1bb 0f16 	cmp.w	fp, #22
 800a4bc:	d832      	bhi.n	800a524 <_dtoa_r+0x1c4>
 800a4be:	4b64      	ldr	r3, [pc, #400]	; (800a650 <_dtoa_r+0x2f0>)
 800a4c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4c4:	ed93 7b00 	vldr	d7, [r3]
 800a4c8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a4cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d4:	d501      	bpl.n	800a4da <_dtoa_r+0x17a>
 800a4d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e023      	b.n	800a526 <_dtoa_r+0x1c6>
 800a4de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a4e0:	4401      	add	r1, r0
 800a4e2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	bfc3      	ittte	gt
 800a4ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4ee:	fa04 f303 	lslgt.w	r3, r4, r3
 800a4f2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a4f6:	f1c3 0320 	rsble	r3, r3, #32
 800a4fa:	bfc6      	itte	gt
 800a4fc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a500:	ea43 0308 	orrgt.w	r3, r3, r8
 800a504:	fa08 f303 	lslle.w	r3, r8, r3
 800a508:	ee07 3a90 	vmov	s15, r3
 800a50c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a510:	3901      	subs	r1, #1
 800a512:	ed8d 7b00 	vstr	d7, [sp]
 800a516:	9c01      	ldr	r4, [sp, #4]
 800a518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a51c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a520:	2401      	movs	r4, #1
 800a522:	e7a0      	b.n	800a466 <_dtoa_r+0x106>
 800a524:	2301      	movs	r3, #1
 800a526:	930f      	str	r3, [sp, #60]	; 0x3c
 800a528:	1a43      	subs	r3, r0, r1
 800a52a:	1e5a      	subs	r2, r3, #1
 800a52c:	bf45      	ittet	mi
 800a52e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a532:	9305      	strmi	r3, [sp, #20]
 800a534:	2300      	movpl	r3, #0
 800a536:	2300      	movmi	r3, #0
 800a538:	9206      	str	r2, [sp, #24]
 800a53a:	bf54      	ite	pl
 800a53c:	9305      	strpl	r3, [sp, #20]
 800a53e:	9306      	strmi	r3, [sp, #24]
 800a540:	f1bb 0f00 	cmp.w	fp, #0
 800a544:	db18      	blt.n	800a578 <_dtoa_r+0x218>
 800a546:	9b06      	ldr	r3, [sp, #24]
 800a548:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a54c:	445b      	add	r3, fp
 800a54e:	9306      	str	r3, [sp, #24]
 800a550:	2300      	movs	r3, #0
 800a552:	9a07      	ldr	r2, [sp, #28]
 800a554:	2a09      	cmp	r2, #9
 800a556:	d849      	bhi.n	800a5ec <_dtoa_r+0x28c>
 800a558:	2a05      	cmp	r2, #5
 800a55a:	bfc4      	itt	gt
 800a55c:	3a04      	subgt	r2, #4
 800a55e:	9207      	strgt	r2, [sp, #28]
 800a560:	9a07      	ldr	r2, [sp, #28]
 800a562:	f1a2 0202 	sub.w	r2, r2, #2
 800a566:	bfcc      	ite	gt
 800a568:	2400      	movgt	r4, #0
 800a56a:	2401      	movle	r4, #1
 800a56c:	2a03      	cmp	r2, #3
 800a56e:	d848      	bhi.n	800a602 <_dtoa_r+0x2a2>
 800a570:	e8df f002 	tbb	[pc, r2]
 800a574:	3a2c2e0b 	.word	0x3a2c2e0b
 800a578:	9b05      	ldr	r3, [sp, #20]
 800a57a:	2200      	movs	r2, #0
 800a57c:	eba3 030b 	sub.w	r3, r3, fp
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	920e      	str	r2, [sp, #56]	; 0x38
 800a584:	f1cb 0300 	rsb	r3, fp, #0
 800a588:	e7e3      	b.n	800a552 <_dtoa_r+0x1f2>
 800a58a:	2200      	movs	r2, #0
 800a58c:	9208      	str	r2, [sp, #32]
 800a58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a590:	2a00      	cmp	r2, #0
 800a592:	dc39      	bgt.n	800a608 <_dtoa_r+0x2a8>
 800a594:	f04f 0a01 	mov.w	sl, #1
 800a598:	46d1      	mov	r9, sl
 800a59a:	4652      	mov	r2, sl
 800a59c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a5a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	6079      	str	r1, [r7, #4]
 800a5a6:	2004      	movs	r0, #4
 800a5a8:	f100 0c14 	add.w	ip, r0, #20
 800a5ac:	4594      	cmp	ip, r2
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	d92f      	bls.n	800a612 <_dtoa_r+0x2b2>
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b6:	f000 fff1 	bl	800b59c <_Balloc>
 800a5ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5bc:	9000      	str	r0, [sp, #0]
 800a5be:	4602      	mov	r2, r0
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d149      	bne.n	800a658 <_dtoa_r+0x2f8>
 800a5c4:	4b23      	ldr	r3, [pc, #140]	; (800a654 <_dtoa_r+0x2f4>)
 800a5c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5ca:	e6df      	b.n	800a38c <_dtoa_r+0x2c>
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	e7dd      	b.n	800a58c <_dtoa_r+0x22c>
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	9208      	str	r2, [sp, #32]
 800a5d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d6:	eb0b 0a02 	add.w	sl, fp, r2
 800a5da:	f10a 0901 	add.w	r9, sl, #1
 800a5de:	464a      	mov	r2, r9
 800a5e0:	2a01      	cmp	r2, #1
 800a5e2:	bfb8      	it	lt
 800a5e4:	2201      	movlt	r2, #1
 800a5e6:	e7db      	b.n	800a5a0 <_dtoa_r+0x240>
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	e7f2      	b.n	800a5d2 <_dtoa_r+0x272>
 800a5ec:	2401      	movs	r4, #1
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a5f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	46d1      	mov	r9, sl
 800a5fc:	2212      	movs	r2, #18
 800a5fe:	9109      	str	r1, [sp, #36]	; 0x24
 800a600:	e7ce      	b.n	800a5a0 <_dtoa_r+0x240>
 800a602:	2201      	movs	r2, #1
 800a604:	9208      	str	r2, [sp, #32]
 800a606:	e7f5      	b.n	800a5f4 <_dtoa_r+0x294>
 800a608:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a60c:	46d1      	mov	r9, sl
 800a60e:	4652      	mov	r2, sl
 800a610:	e7c6      	b.n	800a5a0 <_dtoa_r+0x240>
 800a612:	3101      	adds	r1, #1
 800a614:	6079      	str	r1, [r7, #4]
 800a616:	0040      	lsls	r0, r0, #1
 800a618:	e7c6      	b.n	800a5a8 <_dtoa_r+0x248>
 800a61a:	bf00      	nop
 800a61c:	f3af 8000 	nop.w
 800a620:	636f4361 	.word	0x636f4361
 800a624:	3fd287a7 	.word	0x3fd287a7
 800a628:	8b60c8b3 	.word	0x8b60c8b3
 800a62c:	3fc68a28 	.word	0x3fc68a28
 800a630:	509f79fb 	.word	0x509f79fb
 800a634:	3fd34413 	.word	0x3fd34413
 800a638:	0800d14e 	.word	0x0800d14e
 800a63c:	0800d165 	.word	0x0800d165
 800a640:	7ff00000 	.word	0x7ff00000
 800a644:	0800d14a 	.word	0x0800d14a
 800a648:	0800d141 	.word	0x0800d141
 800a64c:	0800cfc1 	.word	0x0800cfc1
 800a650:	0800d2e0 	.word	0x0800d2e0
 800a654:	0800d1c4 	.word	0x0800d1c4
 800a658:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a65a:	9900      	ldr	r1, [sp, #0]
 800a65c:	6011      	str	r1, [r2, #0]
 800a65e:	f1b9 0f0e 	cmp.w	r9, #14
 800a662:	d872      	bhi.n	800a74a <_dtoa_r+0x3ea>
 800a664:	2c00      	cmp	r4, #0
 800a666:	d070      	beq.n	800a74a <_dtoa_r+0x3ea>
 800a668:	f1bb 0f00 	cmp.w	fp, #0
 800a66c:	f340 80a6 	ble.w	800a7bc <_dtoa_r+0x45c>
 800a670:	49ca      	ldr	r1, [pc, #808]	; (800a99c <_dtoa_r+0x63c>)
 800a672:	f00b 020f 	and.w	r2, fp, #15
 800a676:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a67a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a67e:	ed92 7b00 	vldr	d7, [r2]
 800a682:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a686:	f000 808d 	beq.w	800a7a4 <_dtoa_r+0x444>
 800a68a:	4ac5      	ldr	r2, [pc, #788]	; (800a9a0 <_dtoa_r+0x640>)
 800a68c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a690:	ed92 6b08 	vldr	d6, [r2, #32]
 800a694:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a698:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a69c:	f001 010f 	and.w	r1, r1, #15
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	48bf      	ldr	r0, [pc, #764]	; (800a9a0 <_dtoa_r+0x640>)
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	d17f      	bne.n	800a7a8 <_dtoa_r+0x448>
 800a6a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a6ac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a6b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	f000 80b2 	beq.w	800a820 <_dtoa_r+0x4c0>
 800a6bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a6c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	f140 80a8 	bpl.w	800a820 <_dtoa_r+0x4c0>
 800a6d0:	f1b9 0f00 	cmp.w	r9, #0
 800a6d4:	f000 80a4 	beq.w	800a820 <_dtoa_r+0x4c0>
 800a6d8:	f1ba 0f00 	cmp.w	sl, #0
 800a6dc:	dd31      	ble.n	800a742 <_dtoa_r+0x3e2>
 800a6de:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a6e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6ea:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a6f6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a6fa:	ee07 2a90 	vmov	s15, r2
 800a6fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a702:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a706:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a70a:	9c03      	ldr	r4, [sp, #12]
 800a70c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a710:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a714:	2800      	cmp	r0, #0
 800a716:	f040 8086 	bne.w	800a826 <_dtoa_r+0x4c6>
 800a71a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a71e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a722:	ec42 1b17 	vmov	d7, r1, r2
 800a726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	f300 8272 	bgt.w	800ac16 <_dtoa_r+0x8b6>
 800a732:	eeb1 7b47 	vneg.f64	d7, d7
 800a736:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73e:	f100 8267 	bmi.w	800ac10 <_dtoa_r+0x8b0>
 800a742:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a746:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a74a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a74c:	2a00      	cmp	r2, #0
 800a74e:	f2c0 8129 	blt.w	800a9a4 <_dtoa_r+0x644>
 800a752:	f1bb 0f0e 	cmp.w	fp, #14
 800a756:	f300 8125 	bgt.w	800a9a4 <_dtoa_r+0x644>
 800a75a:	4b90      	ldr	r3, [pc, #576]	; (800a99c <_dtoa_r+0x63c>)
 800a75c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a760:	ed93 6b00 	vldr	d6, [r3]
 800a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	f280 80c3 	bge.w	800a8f2 <_dtoa_r+0x592>
 800a76c:	f1b9 0f00 	cmp.w	r9, #0
 800a770:	f300 80bf 	bgt.w	800a8f2 <_dtoa_r+0x592>
 800a774:	f040 824c 	bne.w	800ac10 <_dtoa_r+0x8b0>
 800a778:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a77c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a780:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a784:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78c:	464c      	mov	r4, r9
 800a78e:	464f      	mov	r7, r9
 800a790:	f280 8222 	bge.w	800abd8 <_dtoa_r+0x878>
 800a794:	f8dd 8000 	ldr.w	r8, [sp]
 800a798:	2331      	movs	r3, #49	; 0x31
 800a79a:	f808 3b01 	strb.w	r3, [r8], #1
 800a79e:	f10b 0b01 	add.w	fp, fp, #1
 800a7a2:	e21e      	b.n	800abe2 <_dtoa_r+0x882>
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	e77c      	b.n	800a6a2 <_dtoa_r+0x342>
 800a7a8:	07cc      	lsls	r4, r1, #31
 800a7aa:	d504      	bpl.n	800a7b6 <_dtoa_r+0x456>
 800a7ac:	ed90 6b00 	vldr	d6, [r0]
 800a7b0:	3201      	adds	r2, #1
 800a7b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7b6:	1049      	asrs	r1, r1, #1
 800a7b8:	3008      	adds	r0, #8
 800a7ba:	e773      	b.n	800a6a4 <_dtoa_r+0x344>
 800a7bc:	d02e      	beq.n	800a81c <_dtoa_r+0x4bc>
 800a7be:	f1cb 0100 	rsb	r1, fp, #0
 800a7c2:	4a76      	ldr	r2, [pc, #472]	; (800a99c <_dtoa_r+0x63c>)
 800a7c4:	f001 000f 	and.w	r0, r1, #15
 800a7c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a7cc:	ed92 7b00 	vldr	d7, [r2]
 800a7d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a7d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a7dc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a7e0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a7e4:	486e      	ldr	r0, [pc, #440]	; (800a9a0 <_dtoa_r+0x640>)
 800a7e6:	1109      	asrs	r1, r1, #4
 800a7e8:	2400      	movs	r4, #0
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	b939      	cbnz	r1, 800a7fe <_dtoa_r+0x49e>
 800a7ee:	2c00      	cmp	r4, #0
 800a7f0:	f43f af60 	beq.w	800a6b4 <_dtoa_r+0x354>
 800a7f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7fc:	e75a      	b.n	800a6b4 <_dtoa_r+0x354>
 800a7fe:	07cf      	lsls	r7, r1, #31
 800a800:	d509      	bpl.n	800a816 <_dtoa_r+0x4b6>
 800a802:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a806:	ed90 7b00 	vldr	d7, [r0]
 800a80a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a80e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a812:	3201      	adds	r2, #1
 800a814:	2401      	movs	r4, #1
 800a816:	1049      	asrs	r1, r1, #1
 800a818:	3008      	adds	r0, #8
 800a81a:	e7e7      	b.n	800a7ec <_dtoa_r+0x48c>
 800a81c:	2202      	movs	r2, #2
 800a81e:	e749      	b.n	800a6b4 <_dtoa_r+0x354>
 800a820:	465f      	mov	r7, fp
 800a822:	4648      	mov	r0, r9
 800a824:	e765      	b.n	800a6f2 <_dtoa_r+0x392>
 800a826:	ec42 1b17 	vmov	d7, r1, r2
 800a82a:	4a5c      	ldr	r2, [pc, #368]	; (800a99c <_dtoa_r+0x63c>)
 800a82c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a830:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a834:	9a00      	ldr	r2, [sp, #0]
 800a836:	1814      	adds	r4, r2, r0
 800a838:	9a08      	ldr	r2, [sp, #32]
 800a83a:	b352      	cbz	r2, 800a892 <_dtoa_r+0x532>
 800a83c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a840:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a844:	f8dd 8000 	ldr.w	r8, [sp]
 800a848:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a84c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a850:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a854:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a858:	ee14 2a90 	vmov	r2, s9
 800a85c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a860:	3230      	adds	r2, #48	; 0x30
 800a862:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a866:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86e:	f808 2b01 	strb.w	r2, [r8], #1
 800a872:	d439      	bmi.n	800a8e8 <_dtoa_r+0x588>
 800a874:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a878:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	d472      	bmi.n	800a968 <_dtoa_r+0x608>
 800a882:	45a0      	cmp	r8, r4
 800a884:	f43f af5d 	beq.w	800a742 <_dtoa_r+0x3e2>
 800a888:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a88c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a890:	e7e0      	b.n	800a854 <_dtoa_r+0x4f4>
 800a892:	f8dd 8000 	ldr.w	r8, [sp]
 800a896:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a89a:	4621      	mov	r1, r4
 800a89c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a8a4:	ee14 2a90 	vmov	r2, s9
 800a8a8:	3230      	adds	r2, #48	; 0x30
 800a8aa:	f808 2b01 	strb.w	r2, [r8], #1
 800a8ae:	45a0      	cmp	r8, r4
 800a8b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a8b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a8b8:	d118      	bne.n	800a8ec <_dtoa_r+0x58c>
 800a8ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a8be:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a8c2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ca:	dc4d      	bgt.n	800a968 <_dtoa_r+0x608>
 800a8cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a8d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d8:	f57f af33 	bpl.w	800a742 <_dtoa_r+0x3e2>
 800a8dc:	4688      	mov	r8, r1
 800a8de:	3901      	subs	r1, #1
 800a8e0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a8e4:	2b30      	cmp	r3, #48	; 0x30
 800a8e6:	d0f9      	beq.n	800a8dc <_dtoa_r+0x57c>
 800a8e8:	46bb      	mov	fp, r7
 800a8ea:	e02a      	b.n	800a942 <_dtoa_r+0x5e2>
 800a8ec:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a8f0:	e7d6      	b.n	800a8a0 <_dtoa_r+0x540>
 800a8f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8f6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a8fa:	f8dd 8000 	ldr.w	r8, [sp]
 800a8fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a902:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a906:	ee15 3a10 	vmov	r3, s10
 800a90a:	3330      	adds	r3, #48	; 0x30
 800a90c:	f808 3b01 	strb.w	r3, [r8], #1
 800a910:	9b00      	ldr	r3, [sp, #0]
 800a912:	eba8 0303 	sub.w	r3, r8, r3
 800a916:	4599      	cmp	r9, r3
 800a918:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a91c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a920:	d133      	bne.n	800a98a <_dtoa_r+0x62a>
 800a922:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a926:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92e:	dc1a      	bgt.n	800a966 <_dtoa_r+0x606>
 800a930:	eeb4 7b46 	vcmp.f64	d7, d6
 800a934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a938:	d103      	bne.n	800a942 <_dtoa_r+0x5e2>
 800a93a:	ee15 3a10 	vmov	r3, s10
 800a93e:	07d9      	lsls	r1, r3, #31
 800a940:	d411      	bmi.n	800a966 <_dtoa_r+0x606>
 800a942:	4629      	mov	r1, r5
 800a944:	4630      	mov	r0, r6
 800a946:	f000 fe69 	bl	800b61c <_Bfree>
 800a94a:	2300      	movs	r3, #0
 800a94c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a94e:	f888 3000 	strb.w	r3, [r8]
 800a952:	f10b 0301 	add.w	r3, fp, #1
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f43f ad4d 	beq.w	800a3fa <_dtoa_r+0x9a>
 800a960:	f8c3 8000 	str.w	r8, [r3]
 800a964:	e549      	b.n	800a3fa <_dtoa_r+0x9a>
 800a966:	465f      	mov	r7, fp
 800a968:	4643      	mov	r3, r8
 800a96a:	4698      	mov	r8, r3
 800a96c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a970:	2a39      	cmp	r2, #57	; 0x39
 800a972:	d106      	bne.n	800a982 <_dtoa_r+0x622>
 800a974:	9a00      	ldr	r2, [sp, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d1f7      	bne.n	800a96a <_dtoa_r+0x60a>
 800a97a:	9900      	ldr	r1, [sp, #0]
 800a97c:	2230      	movs	r2, #48	; 0x30
 800a97e:	3701      	adds	r7, #1
 800a980:	700a      	strb	r2, [r1, #0]
 800a982:	781a      	ldrb	r2, [r3, #0]
 800a984:	3201      	adds	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e7ae      	b.n	800a8e8 <_dtoa_r+0x588>
 800a98a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a98e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a996:	d1b2      	bne.n	800a8fe <_dtoa_r+0x59e>
 800a998:	e7d3      	b.n	800a942 <_dtoa_r+0x5e2>
 800a99a:	bf00      	nop
 800a99c:	0800d2e0 	.word	0x0800d2e0
 800a9a0:	0800d2b8 	.word	0x0800d2b8
 800a9a4:	9908      	ldr	r1, [sp, #32]
 800a9a6:	2900      	cmp	r1, #0
 800a9a8:	f000 80d1 	beq.w	800ab4e <_dtoa_r+0x7ee>
 800a9ac:	9907      	ldr	r1, [sp, #28]
 800a9ae:	2901      	cmp	r1, #1
 800a9b0:	f300 80b4 	bgt.w	800ab1c <_dtoa_r+0x7bc>
 800a9b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9b6:	2900      	cmp	r1, #0
 800a9b8:	f000 80ac 	beq.w	800ab14 <_dtoa_r+0x7b4>
 800a9bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a9c4:	461c      	mov	r4, r3
 800a9c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	4413      	add	r3, r2
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	9306      	str	r3, [sp, #24]
 800a9d8:	f000 ff26 	bl	800b828 <__i2b>
 800a9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9de:	4607      	mov	r7, r0
 800a9e0:	f1b8 0f00 	cmp.w	r8, #0
 800a9e4:	dd0d      	ble.n	800aa02 <_dtoa_r+0x6a2>
 800a9e6:	9a06      	ldr	r2, [sp, #24]
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	dd0a      	ble.n	800aa02 <_dtoa_r+0x6a2>
 800a9ec:	4542      	cmp	r2, r8
 800a9ee:	9905      	ldr	r1, [sp, #20]
 800a9f0:	bfa8      	it	ge
 800a9f2:	4642      	movge	r2, r8
 800a9f4:	1a89      	subs	r1, r1, r2
 800a9f6:	9105      	str	r1, [sp, #20]
 800a9f8:	9906      	ldr	r1, [sp, #24]
 800a9fa:	eba8 0802 	sub.w	r8, r8, r2
 800a9fe:	1a8a      	subs	r2, r1, r2
 800aa00:	9206      	str	r2, [sp, #24]
 800aa02:	b303      	cbz	r3, 800aa46 <_dtoa_r+0x6e6>
 800aa04:	9a08      	ldr	r2, [sp, #32]
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	f000 80a6 	beq.w	800ab58 <_dtoa_r+0x7f8>
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	dd13      	ble.n	800aa38 <_dtoa_r+0x6d8>
 800aa10:	4639      	mov	r1, r7
 800aa12:	4622      	mov	r2, r4
 800aa14:	4630      	mov	r0, r6
 800aa16:	930c      	str	r3, [sp, #48]	; 0x30
 800aa18:	f000 ffc2 	bl	800b9a0 <__pow5mult>
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4601      	mov	r1, r0
 800aa20:	4607      	mov	r7, r0
 800aa22:	4630      	mov	r0, r6
 800aa24:	f000 ff16 	bl	800b854 <__multiply>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	900a      	str	r0, [sp, #40]	; 0x28
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f000 fdf5 	bl	800b61c <_Bfree>
 800aa32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa36:	4615      	mov	r5, r2
 800aa38:	1b1a      	subs	r2, r3, r4
 800aa3a:	d004      	beq.n	800aa46 <_dtoa_r+0x6e6>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f000 ffae 	bl	800b9a0 <__pow5mult>
 800aa44:	4605      	mov	r5, r0
 800aa46:	2101      	movs	r1, #1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f000 feed 	bl	800b828 <__i2b>
 800aa4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	f340 8082 	ble.w	800ab5c <_dtoa_r+0x7fc>
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f000 ff9f 	bl	800b9a0 <__pow5mult>
 800aa62:	9b07      	ldr	r3, [sp, #28]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	4604      	mov	r4, r0
 800aa68:	dd7b      	ble.n	800ab62 <_dtoa_r+0x802>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	930a      	str	r3, [sp, #40]	; 0x28
 800aa6e:	6922      	ldr	r2, [r4, #16]
 800aa70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aa74:	6910      	ldr	r0, [r2, #16]
 800aa76:	f000 fe87 	bl	800b788 <__hi0bits>
 800aa7a:	f1c0 0020 	rsb	r0, r0, #32
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	4418      	add	r0, r3
 800aa82:	f010 001f 	ands.w	r0, r0, #31
 800aa86:	f000 808d 	beq.w	800aba4 <_dtoa_r+0x844>
 800aa8a:	f1c0 0220 	rsb	r2, r0, #32
 800aa8e:	2a04      	cmp	r2, #4
 800aa90:	f340 8086 	ble.w	800aba0 <_dtoa_r+0x840>
 800aa94:	f1c0 001c 	rsb	r0, r0, #28
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	4403      	add	r3, r0
 800aa9c:	9305      	str	r3, [sp, #20]
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	4403      	add	r3, r0
 800aaa2:	4480      	add	r8, r0
 800aaa4:	9306      	str	r3, [sp, #24]
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dd05      	ble.n	800aab8 <_dtoa_r+0x758>
 800aaac:	4629      	mov	r1, r5
 800aaae:	461a      	mov	r2, r3
 800aab0:	4630      	mov	r0, r6
 800aab2:	f000 ffcf 	bl	800ba54 <__lshift>
 800aab6:	4605      	mov	r5, r0
 800aab8:	9b06      	ldr	r3, [sp, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dd05      	ble.n	800aaca <_dtoa_r+0x76a>
 800aabe:	4621      	mov	r1, r4
 800aac0:	461a      	mov	r2, r3
 800aac2:	4630      	mov	r0, r6
 800aac4:	f000 ffc6 	bl	800ba54 <__lshift>
 800aac8:	4604      	mov	r4, r0
 800aaca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d06b      	beq.n	800aba8 <_dtoa_r+0x848>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4628      	mov	r0, r5
 800aad4:	f001 f82a 	bl	800bb2c <__mcmp>
 800aad8:	2800      	cmp	r0, #0
 800aada:	da65      	bge.n	800aba8 <_dtoa_r+0x848>
 800aadc:	2300      	movs	r3, #0
 800aade:	4629      	mov	r1, r5
 800aae0:	220a      	movs	r2, #10
 800aae2:	4630      	mov	r0, r6
 800aae4:	f000 fdbc 	bl	800b660 <__multadd>
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aaee:	4605      	mov	r5, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8192 	beq.w	800ae1a <_dtoa_r+0xaba>
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	2300      	movs	r3, #0
 800aafa:	220a      	movs	r2, #10
 800aafc:	4630      	mov	r0, r6
 800aafe:	f000 fdaf 	bl	800b660 <__multadd>
 800ab02:	f1ba 0f00 	cmp.w	sl, #0
 800ab06:	4607      	mov	r7, r0
 800ab08:	f300 808e 	bgt.w	800ac28 <_dtoa_r+0x8c8>
 800ab0c:	9b07      	ldr	r3, [sp, #28]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	dc51      	bgt.n	800abb6 <_dtoa_r+0x856>
 800ab12:	e089      	b.n	800ac28 <_dtoa_r+0x8c8>
 800ab14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab1a:	e751      	b.n	800a9c0 <_dtoa_r+0x660>
 800ab1c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	bfbf      	itttt	lt
 800ab24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ab26:	1ae3      	sublt	r3, r4, r3
 800ab28:	18d2      	addlt	r2, r2, r3
 800ab2a:	4613      	movlt	r3, r2
 800ab2c:	bfb7      	itett	lt
 800ab2e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ab30:	1b1c      	subge	r4, r3, r4
 800ab32:	4623      	movlt	r3, r4
 800ab34:	2400      	movlt	r4, #0
 800ab36:	f1b9 0f00 	cmp.w	r9, #0
 800ab3a:	bfb5      	itete	lt
 800ab3c:	9a05      	ldrlt	r2, [sp, #20]
 800ab3e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800ab42:	eba2 0809 	sublt.w	r8, r2, r9
 800ab46:	464a      	movge	r2, r9
 800ab48:	bfb8      	it	lt
 800ab4a:	2200      	movlt	r2, #0
 800ab4c:	e73b      	b.n	800a9c6 <_dtoa_r+0x666>
 800ab4e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ab52:	9f08      	ldr	r7, [sp, #32]
 800ab54:	461c      	mov	r4, r3
 800ab56:	e743      	b.n	800a9e0 <_dtoa_r+0x680>
 800ab58:	461a      	mov	r2, r3
 800ab5a:	e76f      	b.n	800aa3c <_dtoa_r+0x6dc>
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	dc18      	bgt.n	800ab94 <_dtoa_r+0x834>
 800ab62:	9b02      	ldr	r3, [sp, #8]
 800ab64:	b9b3      	cbnz	r3, 800ab94 <_dtoa_r+0x834>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ab6c:	b9a2      	cbnz	r2, 800ab98 <_dtoa_r+0x838>
 800ab6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab72:	0d12      	lsrs	r2, r2, #20
 800ab74:	0512      	lsls	r2, r2, #20
 800ab76:	b18a      	cbz	r2, 800ab9c <_dtoa_r+0x83c>
 800ab78:	9b05      	ldr	r3, [sp, #20]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	9305      	str	r3, [sp, #20]
 800ab7e:	9b06      	ldr	r3, [sp, #24]
 800ab80:	3301      	adds	r3, #1
 800ab82:	9306      	str	r3, [sp, #24]
 800ab84:	2301      	movs	r3, #1
 800ab86:	930a      	str	r3, [sp, #40]	; 0x28
 800ab88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f47f af6f 	bne.w	800aa6e <_dtoa_r+0x70e>
 800ab90:	2001      	movs	r0, #1
 800ab92:	e774      	b.n	800aa7e <_dtoa_r+0x71e>
 800ab94:	2300      	movs	r3, #0
 800ab96:	e7f6      	b.n	800ab86 <_dtoa_r+0x826>
 800ab98:	9b02      	ldr	r3, [sp, #8]
 800ab9a:	e7f4      	b.n	800ab86 <_dtoa_r+0x826>
 800ab9c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab9e:	e7f3      	b.n	800ab88 <_dtoa_r+0x828>
 800aba0:	d081      	beq.n	800aaa6 <_dtoa_r+0x746>
 800aba2:	4610      	mov	r0, r2
 800aba4:	301c      	adds	r0, #28
 800aba6:	e777      	b.n	800aa98 <_dtoa_r+0x738>
 800aba8:	f1b9 0f00 	cmp.w	r9, #0
 800abac:	dc37      	bgt.n	800ac1e <_dtoa_r+0x8be>
 800abae:	9b07      	ldr	r3, [sp, #28]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	dd34      	ble.n	800ac1e <_dtoa_r+0x8be>
 800abb4:	46ca      	mov	sl, r9
 800abb6:	f1ba 0f00 	cmp.w	sl, #0
 800abba:	d10d      	bne.n	800abd8 <_dtoa_r+0x878>
 800abbc:	4621      	mov	r1, r4
 800abbe:	4653      	mov	r3, sl
 800abc0:	2205      	movs	r2, #5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f000 fd4c 	bl	800b660 <__multadd>
 800abc8:	4601      	mov	r1, r0
 800abca:	4604      	mov	r4, r0
 800abcc:	4628      	mov	r0, r5
 800abce:	f000 ffad 	bl	800bb2c <__mcmp>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f73f adde 	bgt.w	800a794 <_dtoa_r+0x434>
 800abd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abda:	f8dd 8000 	ldr.w	r8, [sp]
 800abde:	ea6f 0b03 	mvn.w	fp, r3
 800abe2:	f04f 0900 	mov.w	r9, #0
 800abe6:	4621      	mov	r1, r4
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 fd17 	bl	800b61c <_Bfree>
 800abee:	2f00      	cmp	r7, #0
 800abf0:	f43f aea7 	beq.w	800a942 <_dtoa_r+0x5e2>
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	d005      	beq.n	800ac06 <_dtoa_r+0x8a6>
 800abfa:	45b9      	cmp	r9, r7
 800abfc:	d003      	beq.n	800ac06 <_dtoa_r+0x8a6>
 800abfe:	4649      	mov	r1, r9
 800ac00:	4630      	mov	r0, r6
 800ac02:	f000 fd0b 	bl	800b61c <_Bfree>
 800ac06:	4639      	mov	r1, r7
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f000 fd07 	bl	800b61c <_Bfree>
 800ac0e:	e698      	b.n	800a942 <_dtoa_r+0x5e2>
 800ac10:	2400      	movs	r4, #0
 800ac12:	4627      	mov	r7, r4
 800ac14:	e7e0      	b.n	800abd8 <_dtoa_r+0x878>
 800ac16:	46bb      	mov	fp, r7
 800ac18:	4604      	mov	r4, r0
 800ac1a:	4607      	mov	r7, r0
 800ac1c:	e5ba      	b.n	800a794 <_dtoa_r+0x434>
 800ac1e:	9b08      	ldr	r3, [sp, #32]
 800ac20:	46ca      	mov	sl, r9
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8100 	beq.w	800ae28 <_dtoa_r+0xac8>
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	dd05      	ble.n	800ac3a <_dtoa_r+0x8da>
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4642      	mov	r2, r8
 800ac32:	4630      	mov	r0, r6
 800ac34:	f000 ff0e 	bl	800ba54 <__lshift>
 800ac38:	4607      	mov	r7, r0
 800ac3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05d      	beq.n	800acfc <_dtoa_r+0x99c>
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 fcaa 	bl	800b59c <_Balloc>
 800ac48:	4680      	mov	r8, r0
 800ac4a:	b928      	cbnz	r0, 800ac58 <_dtoa_r+0x8f8>
 800ac4c:	4b82      	ldr	r3, [pc, #520]	; (800ae58 <_dtoa_r+0xaf8>)
 800ac4e:	4602      	mov	r2, r0
 800ac50:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac54:	f7ff bb9a 	b.w	800a38c <_dtoa_r+0x2c>
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	3202      	adds	r2, #2
 800ac5c:	0092      	lsls	r2, r2, #2
 800ac5e:	f107 010c 	add.w	r1, r7, #12
 800ac62:	300c      	adds	r0, #12
 800ac64:	f000 fc8c 	bl	800b580 <memcpy>
 800ac68:	2201      	movs	r2, #1
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 fef1 	bl	800ba54 <__lshift>
 800ac72:	9b00      	ldr	r3, [sp, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	9305      	str	r3, [sp, #20]
 800ac78:	9b00      	ldr	r3, [sp, #0]
 800ac7a:	4453      	add	r3, sl
 800ac7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac7e:	9b02      	ldr	r3, [sp, #8]
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	46b9      	mov	r9, r7
 800ac86:	9308      	str	r3, [sp, #32]
 800ac88:	4607      	mov	r7, r0
 800ac8a:	9b05      	ldr	r3, [sp, #20]
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	4628      	mov	r0, r5
 800ac92:	9302      	str	r3, [sp, #8]
 800ac94:	f7ff fad6 	bl	800a244 <quorem>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	3330      	adds	r3, #48	; 0x30
 800ac9c:	9006      	str	r0, [sp, #24]
 800ac9e:	4649      	mov	r1, r9
 800aca0:	4628      	mov	r0, r5
 800aca2:	930a      	str	r3, [sp, #40]	; 0x28
 800aca4:	f000 ff42 	bl	800bb2c <__mcmp>
 800aca8:	463a      	mov	r2, r7
 800acaa:	4682      	mov	sl, r0
 800acac:	4621      	mov	r1, r4
 800acae:	4630      	mov	r0, r6
 800acb0:	f000 ff58 	bl	800bb64 <__mdiff>
 800acb4:	68c2      	ldr	r2, [r0, #12]
 800acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb8:	4680      	mov	r8, r0
 800acba:	bb0a      	cbnz	r2, 800ad00 <_dtoa_r+0x9a0>
 800acbc:	4601      	mov	r1, r0
 800acbe:	4628      	mov	r0, r5
 800acc0:	f000 ff34 	bl	800bb2c <__mcmp>
 800acc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc6:	4602      	mov	r2, r0
 800acc8:	4641      	mov	r1, r8
 800acca:	4630      	mov	r0, r6
 800accc:	920e      	str	r2, [sp, #56]	; 0x38
 800acce:	930a      	str	r3, [sp, #40]	; 0x28
 800acd0:	f000 fca4 	bl	800b61c <_Bfree>
 800acd4:	9b07      	ldr	r3, [sp, #28]
 800acd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800acdc:	ea43 0102 	orr.w	r1, r3, r2
 800ace0:	9b08      	ldr	r3, [sp, #32]
 800ace2:	430b      	orrs	r3, r1
 800ace4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace6:	d10d      	bne.n	800ad04 <_dtoa_r+0x9a4>
 800ace8:	2b39      	cmp	r3, #57	; 0x39
 800acea:	d029      	beq.n	800ad40 <_dtoa_r+0x9e0>
 800acec:	f1ba 0f00 	cmp.w	sl, #0
 800acf0:	dd01      	ble.n	800acf6 <_dtoa_r+0x996>
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	3331      	adds	r3, #49	; 0x31
 800acf6:	9a02      	ldr	r2, [sp, #8]
 800acf8:	7013      	strb	r3, [r2, #0]
 800acfa:	e774      	b.n	800abe6 <_dtoa_r+0x886>
 800acfc:	4638      	mov	r0, r7
 800acfe:	e7b8      	b.n	800ac72 <_dtoa_r+0x912>
 800ad00:	2201      	movs	r2, #1
 800ad02:	e7e1      	b.n	800acc8 <_dtoa_r+0x968>
 800ad04:	f1ba 0f00 	cmp.w	sl, #0
 800ad08:	db06      	blt.n	800ad18 <_dtoa_r+0x9b8>
 800ad0a:	9907      	ldr	r1, [sp, #28]
 800ad0c:	ea41 0a0a 	orr.w	sl, r1, sl
 800ad10:	9908      	ldr	r1, [sp, #32]
 800ad12:	ea5a 0101 	orrs.w	r1, sl, r1
 800ad16:	d120      	bne.n	800ad5a <_dtoa_r+0x9fa>
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	ddec      	ble.n	800acf6 <_dtoa_r+0x996>
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4630      	mov	r0, r6
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	f000 fe96 	bl	800ba54 <__lshift>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	f000 fefe 	bl	800bb2c <__mcmp>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	9b05      	ldr	r3, [sp, #20]
 800ad34:	dc02      	bgt.n	800ad3c <_dtoa_r+0x9dc>
 800ad36:	d1de      	bne.n	800acf6 <_dtoa_r+0x996>
 800ad38:	07da      	lsls	r2, r3, #31
 800ad3a:	d5dc      	bpl.n	800acf6 <_dtoa_r+0x996>
 800ad3c:	2b39      	cmp	r3, #57	; 0x39
 800ad3e:	d1d8      	bne.n	800acf2 <_dtoa_r+0x992>
 800ad40:	9a02      	ldr	r2, [sp, #8]
 800ad42:	2339      	movs	r3, #57	; 0x39
 800ad44:	7013      	strb	r3, [r2, #0]
 800ad46:	4643      	mov	r3, r8
 800ad48:	4698      	mov	r8, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ad50:	2a39      	cmp	r2, #57	; 0x39
 800ad52:	d051      	beq.n	800adf8 <_dtoa_r+0xa98>
 800ad54:	3201      	adds	r2, #1
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	e745      	b.n	800abe6 <_dtoa_r+0x886>
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	dd03      	ble.n	800ad66 <_dtoa_r+0xa06>
 800ad5e:	2b39      	cmp	r3, #57	; 0x39
 800ad60:	d0ee      	beq.n	800ad40 <_dtoa_r+0x9e0>
 800ad62:	3301      	adds	r3, #1
 800ad64:	e7c7      	b.n	800acf6 <_dtoa_r+0x996>
 800ad66:	9a05      	ldr	r2, [sp, #20]
 800ad68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad6e:	428a      	cmp	r2, r1
 800ad70:	d02b      	beq.n	800adca <_dtoa_r+0xa6a>
 800ad72:	4629      	mov	r1, r5
 800ad74:	2300      	movs	r3, #0
 800ad76:	220a      	movs	r2, #10
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f000 fc71 	bl	800b660 <__multadd>
 800ad7e:	45b9      	cmp	r9, r7
 800ad80:	4605      	mov	r5, r0
 800ad82:	f04f 0300 	mov.w	r3, #0
 800ad86:	f04f 020a 	mov.w	r2, #10
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	d107      	bne.n	800ada0 <_dtoa_r+0xa40>
 800ad90:	f000 fc66 	bl	800b660 <__multadd>
 800ad94:	4681      	mov	r9, r0
 800ad96:	4607      	mov	r7, r0
 800ad98:	9b05      	ldr	r3, [sp, #20]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	9305      	str	r3, [sp, #20]
 800ad9e:	e774      	b.n	800ac8a <_dtoa_r+0x92a>
 800ada0:	f000 fc5e 	bl	800b660 <__multadd>
 800ada4:	4639      	mov	r1, r7
 800ada6:	4681      	mov	r9, r0
 800ada8:	2300      	movs	r3, #0
 800adaa:	220a      	movs	r2, #10
 800adac:	4630      	mov	r0, r6
 800adae:	f000 fc57 	bl	800b660 <__multadd>
 800adb2:	4607      	mov	r7, r0
 800adb4:	e7f0      	b.n	800ad98 <_dtoa_r+0xa38>
 800adb6:	f1ba 0f00 	cmp.w	sl, #0
 800adba:	9a00      	ldr	r2, [sp, #0]
 800adbc:	bfcc      	ite	gt
 800adbe:	46d0      	movgt	r8, sl
 800adc0:	f04f 0801 	movle.w	r8, #1
 800adc4:	4490      	add	r8, r2
 800adc6:	f04f 0900 	mov.w	r9, #0
 800adca:	4629      	mov	r1, r5
 800adcc:	2201      	movs	r2, #1
 800adce:	4630      	mov	r0, r6
 800add0:	9302      	str	r3, [sp, #8]
 800add2:	f000 fe3f 	bl	800ba54 <__lshift>
 800add6:	4621      	mov	r1, r4
 800add8:	4605      	mov	r5, r0
 800adda:	f000 fea7 	bl	800bb2c <__mcmp>
 800adde:	2800      	cmp	r0, #0
 800ade0:	dcb1      	bgt.n	800ad46 <_dtoa_r+0x9e6>
 800ade2:	d102      	bne.n	800adea <_dtoa_r+0xa8a>
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	07db      	lsls	r3, r3, #31
 800ade8:	d4ad      	bmi.n	800ad46 <_dtoa_r+0x9e6>
 800adea:	4643      	mov	r3, r8
 800adec:	4698      	mov	r8, r3
 800adee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adf2:	2a30      	cmp	r2, #48	; 0x30
 800adf4:	d0fa      	beq.n	800adec <_dtoa_r+0xa8c>
 800adf6:	e6f6      	b.n	800abe6 <_dtoa_r+0x886>
 800adf8:	9a00      	ldr	r2, [sp, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d1a4      	bne.n	800ad48 <_dtoa_r+0x9e8>
 800adfe:	f10b 0b01 	add.w	fp, fp, #1
 800ae02:	2331      	movs	r3, #49	; 0x31
 800ae04:	e778      	b.n	800acf8 <_dtoa_r+0x998>
 800ae06:	4b15      	ldr	r3, [pc, #84]	; (800ae5c <_dtoa_r+0xafc>)
 800ae08:	f7ff bb12 	b.w	800a430 <_dtoa_r+0xd0>
 800ae0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f47f aaee 	bne.w	800a3f0 <_dtoa_r+0x90>
 800ae14:	4b12      	ldr	r3, [pc, #72]	; (800ae60 <_dtoa_r+0xb00>)
 800ae16:	f7ff bb0b 	b.w	800a430 <_dtoa_r+0xd0>
 800ae1a:	f1ba 0f00 	cmp.w	sl, #0
 800ae1e:	dc03      	bgt.n	800ae28 <_dtoa_r+0xac8>
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	f73f aec7 	bgt.w	800abb6 <_dtoa_r+0x856>
 800ae28:	f8dd 8000 	ldr.w	r8, [sp]
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f7ff fa08 	bl	800a244 <quorem>
 800ae34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae38:	f808 3b01 	strb.w	r3, [r8], #1
 800ae3c:	9a00      	ldr	r2, [sp, #0]
 800ae3e:	eba8 0202 	sub.w	r2, r8, r2
 800ae42:	4592      	cmp	sl, r2
 800ae44:	ddb7      	ble.n	800adb6 <_dtoa_r+0xa56>
 800ae46:	4629      	mov	r1, r5
 800ae48:	2300      	movs	r3, #0
 800ae4a:	220a      	movs	r2, #10
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f000 fc07 	bl	800b660 <__multadd>
 800ae52:	4605      	mov	r5, r0
 800ae54:	e7ea      	b.n	800ae2c <_dtoa_r+0xacc>
 800ae56:	bf00      	nop
 800ae58:	0800d1c4 	.word	0x0800d1c4
 800ae5c:	0800cfc0 	.word	0x0800cfc0
 800ae60:	0800d141 	.word	0x0800d141

0800ae64 <rshift>:
 800ae64:	6903      	ldr	r3, [r0, #16]
 800ae66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae72:	f100 0414 	add.w	r4, r0, #20
 800ae76:	dd45      	ble.n	800af04 <rshift+0xa0>
 800ae78:	f011 011f 	ands.w	r1, r1, #31
 800ae7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae84:	d10c      	bne.n	800aea0 <rshift+0x3c>
 800ae86:	f100 0710 	add.w	r7, r0, #16
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	42b1      	cmp	r1, r6
 800ae8e:	d334      	bcc.n	800aefa <rshift+0x96>
 800ae90:	1a9b      	subs	r3, r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	1eea      	subs	r2, r5, #3
 800ae96:	4296      	cmp	r6, r2
 800ae98:	bf38      	it	cc
 800ae9a:	2300      	movcc	r3, #0
 800ae9c:	4423      	add	r3, r4
 800ae9e:	e015      	b.n	800aecc <rshift+0x68>
 800aea0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aea4:	f1c1 0820 	rsb	r8, r1, #32
 800aea8:	40cf      	lsrs	r7, r1
 800aeaa:	f105 0e04 	add.w	lr, r5, #4
 800aeae:	46a1      	mov	r9, r4
 800aeb0:	4576      	cmp	r6, lr
 800aeb2:	46f4      	mov	ip, lr
 800aeb4:	d815      	bhi.n	800aee2 <rshift+0x7e>
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	009a      	lsls	r2, r3, #2
 800aeba:	3a04      	subs	r2, #4
 800aebc:	3501      	adds	r5, #1
 800aebe:	42ae      	cmp	r6, r5
 800aec0:	bf38      	it	cc
 800aec2:	2200      	movcc	r2, #0
 800aec4:	18a3      	adds	r3, r4, r2
 800aec6:	50a7      	str	r7, [r4, r2]
 800aec8:	b107      	cbz	r7, 800aecc <rshift+0x68>
 800aeca:	3304      	adds	r3, #4
 800aecc:	1b1a      	subs	r2, r3, r4
 800aece:	42a3      	cmp	r3, r4
 800aed0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aed4:	bf08      	it	eq
 800aed6:	2300      	moveq	r3, #0
 800aed8:	6102      	str	r2, [r0, #16]
 800aeda:	bf08      	it	eq
 800aedc:	6143      	streq	r3, [r0, #20]
 800aede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aee2:	f8dc c000 	ldr.w	ip, [ip]
 800aee6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aeea:	ea4c 0707 	orr.w	r7, ip, r7
 800aeee:	f849 7b04 	str.w	r7, [r9], #4
 800aef2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aef6:	40cf      	lsrs	r7, r1
 800aef8:	e7da      	b.n	800aeb0 <rshift+0x4c>
 800aefa:	f851 cb04 	ldr.w	ip, [r1], #4
 800aefe:	f847 cf04 	str.w	ip, [r7, #4]!
 800af02:	e7c3      	b.n	800ae8c <rshift+0x28>
 800af04:	4623      	mov	r3, r4
 800af06:	e7e1      	b.n	800aecc <rshift+0x68>

0800af08 <__hexdig_fun>:
 800af08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af0c:	2b09      	cmp	r3, #9
 800af0e:	d802      	bhi.n	800af16 <__hexdig_fun+0xe>
 800af10:	3820      	subs	r0, #32
 800af12:	b2c0      	uxtb	r0, r0
 800af14:	4770      	bx	lr
 800af16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	d801      	bhi.n	800af22 <__hexdig_fun+0x1a>
 800af1e:	3847      	subs	r0, #71	; 0x47
 800af20:	e7f7      	b.n	800af12 <__hexdig_fun+0xa>
 800af22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af26:	2b05      	cmp	r3, #5
 800af28:	d801      	bhi.n	800af2e <__hexdig_fun+0x26>
 800af2a:	3827      	subs	r0, #39	; 0x27
 800af2c:	e7f1      	b.n	800af12 <__hexdig_fun+0xa>
 800af2e:	2000      	movs	r0, #0
 800af30:	4770      	bx	lr
	...

0800af34 <__gethex>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	ed2d 8b02 	vpush	{d8}
 800af3c:	b089      	sub	sp, #36	; 0x24
 800af3e:	ee08 0a10 	vmov	s16, r0
 800af42:	9304      	str	r3, [sp, #16]
 800af44:	4bbc      	ldr	r3, [pc, #752]	; (800b238 <__gethex+0x304>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	4618      	mov	r0, r3
 800af4c:	468b      	mov	fp, r1
 800af4e:	4690      	mov	r8, r2
 800af50:	f7f5 f9c6 	bl	80002e0 <strlen>
 800af54:	9b01      	ldr	r3, [sp, #4]
 800af56:	f8db 2000 	ldr.w	r2, [fp]
 800af5a:	4403      	add	r3, r0
 800af5c:	4682      	mov	sl, r0
 800af5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	1c93      	adds	r3, r2, #2
 800af66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af6e:	32fe      	adds	r2, #254	; 0xfe
 800af70:	18d1      	adds	r1, r2, r3
 800af72:	461f      	mov	r7, r3
 800af74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af78:	9100      	str	r1, [sp, #0]
 800af7a:	2830      	cmp	r0, #48	; 0x30
 800af7c:	d0f8      	beq.n	800af70 <__gethex+0x3c>
 800af7e:	f7ff ffc3 	bl	800af08 <__hexdig_fun>
 800af82:	4604      	mov	r4, r0
 800af84:	2800      	cmp	r0, #0
 800af86:	d13a      	bne.n	800affe <__gethex+0xca>
 800af88:	9901      	ldr	r1, [sp, #4]
 800af8a:	4652      	mov	r2, sl
 800af8c:	4638      	mov	r0, r7
 800af8e:	f001 f9ef 	bl	800c370 <strncmp>
 800af92:	4605      	mov	r5, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	d168      	bne.n	800b06a <__gethex+0x136>
 800af98:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af9c:	eb07 060a 	add.w	r6, r7, sl
 800afa0:	f7ff ffb2 	bl	800af08 <__hexdig_fun>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d062      	beq.n	800b06e <__gethex+0x13a>
 800afa8:	4633      	mov	r3, r6
 800afaa:	7818      	ldrb	r0, [r3, #0]
 800afac:	2830      	cmp	r0, #48	; 0x30
 800afae:	461f      	mov	r7, r3
 800afb0:	f103 0301 	add.w	r3, r3, #1
 800afb4:	d0f9      	beq.n	800afaa <__gethex+0x76>
 800afb6:	f7ff ffa7 	bl	800af08 <__hexdig_fun>
 800afba:	2301      	movs	r3, #1
 800afbc:	fab0 f480 	clz	r4, r0
 800afc0:	0964      	lsrs	r4, r4, #5
 800afc2:	4635      	mov	r5, r6
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	463a      	mov	r2, r7
 800afc8:	4616      	mov	r6, r2
 800afca:	3201      	adds	r2, #1
 800afcc:	7830      	ldrb	r0, [r6, #0]
 800afce:	f7ff ff9b 	bl	800af08 <__hexdig_fun>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d1f8      	bne.n	800afc8 <__gethex+0x94>
 800afd6:	9901      	ldr	r1, [sp, #4]
 800afd8:	4652      	mov	r2, sl
 800afda:	4630      	mov	r0, r6
 800afdc:	f001 f9c8 	bl	800c370 <strncmp>
 800afe0:	b980      	cbnz	r0, 800b004 <__gethex+0xd0>
 800afe2:	b94d      	cbnz	r5, 800aff8 <__gethex+0xc4>
 800afe4:	eb06 050a 	add.w	r5, r6, sl
 800afe8:	462a      	mov	r2, r5
 800afea:	4616      	mov	r6, r2
 800afec:	3201      	adds	r2, #1
 800afee:	7830      	ldrb	r0, [r6, #0]
 800aff0:	f7ff ff8a 	bl	800af08 <__hexdig_fun>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d1f8      	bne.n	800afea <__gethex+0xb6>
 800aff8:	1bad      	subs	r5, r5, r6
 800affa:	00ad      	lsls	r5, r5, #2
 800affc:	e004      	b.n	800b008 <__gethex+0xd4>
 800affe:	2400      	movs	r4, #0
 800b000:	4625      	mov	r5, r4
 800b002:	e7e0      	b.n	800afc6 <__gethex+0x92>
 800b004:	2d00      	cmp	r5, #0
 800b006:	d1f7      	bne.n	800aff8 <__gethex+0xc4>
 800b008:	7833      	ldrb	r3, [r6, #0]
 800b00a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b00e:	2b50      	cmp	r3, #80	; 0x50
 800b010:	d13b      	bne.n	800b08a <__gethex+0x156>
 800b012:	7873      	ldrb	r3, [r6, #1]
 800b014:	2b2b      	cmp	r3, #43	; 0x2b
 800b016:	d02c      	beq.n	800b072 <__gethex+0x13e>
 800b018:	2b2d      	cmp	r3, #45	; 0x2d
 800b01a:	d02e      	beq.n	800b07a <__gethex+0x146>
 800b01c:	1c71      	adds	r1, r6, #1
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	7808      	ldrb	r0, [r1, #0]
 800b024:	f7ff ff70 	bl	800af08 <__hexdig_fun>
 800b028:	1e43      	subs	r3, r0, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b18      	cmp	r3, #24
 800b02e:	d82c      	bhi.n	800b08a <__gethex+0x156>
 800b030:	f1a0 0210 	sub.w	r2, r0, #16
 800b034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b038:	f7ff ff66 	bl	800af08 <__hexdig_fun>
 800b03c:	1e43      	subs	r3, r0, #1
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b18      	cmp	r3, #24
 800b042:	d91d      	bls.n	800b080 <__gethex+0x14c>
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	d000      	beq.n	800b04c <__gethex+0x118>
 800b04a:	4252      	negs	r2, r2
 800b04c:	4415      	add	r5, r2
 800b04e:	f8cb 1000 	str.w	r1, [fp]
 800b052:	b1e4      	cbz	r4, 800b08e <__gethex+0x15a>
 800b054:	9b00      	ldr	r3, [sp, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	bf14      	ite	ne
 800b05a:	2700      	movne	r7, #0
 800b05c:	2706      	moveq	r7, #6
 800b05e:	4638      	mov	r0, r7
 800b060:	b009      	add	sp, #36	; 0x24
 800b062:	ecbd 8b02 	vpop	{d8}
 800b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06a:	463e      	mov	r6, r7
 800b06c:	4625      	mov	r5, r4
 800b06e:	2401      	movs	r4, #1
 800b070:	e7ca      	b.n	800b008 <__gethex+0xd4>
 800b072:	f04f 0900 	mov.w	r9, #0
 800b076:	1cb1      	adds	r1, r6, #2
 800b078:	e7d3      	b.n	800b022 <__gethex+0xee>
 800b07a:	f04f 0901 	mov.w	r9, #1
 800b07e:	e7fa      	b.n	800b076 <__gethex+0x142>
 800b080:	230a      	movs	r3, #10
 800b082:	fb03 0202 	mla	r2, r3, r2, r0
 800b086:	3a10      	subs	r2, #16
 800b088:	e7d4      	b.n	800b034 <__gethex+0x100>
 800b08a:	4631      	mov	r1, r6
 800b08c:	e7df      	b.n	800b04e <__gethex+0x11a>
 800b08e:	1bf3      	subs	r3, r6, r7
 800b090:	3b01      	subs	r3, #1
 800b092:	4621      	mov	r1, r4
 800b094:	2b07      	cmp	r3, #7
 800b096:	dc0b      	bgt.n	800b0b0 <__gethex+0x17c>
 800b098:	ee18 0a10 	vmov	r0, s16
 800b09c:	f000 fa7e 	bl	800b59c <_Balloc>
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	b940      	cbnz	r0, 800b0b6 <__gethex+0x182>
 800b0a4:	4b65      	ldr	r3, [pc, #404]	; (800b23c <__gethex+0x308>)
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	21de      	movs	r1, #222	; 0xde
 800b0aa:	4865      	ldr	r0, [pc, #404]	; (800b240 <__gethex+0x30c>)
 800b0ac:	f001 f980 	bl	800c3b0 <__assert_func>
 800b0b0:	3101      	adds	r1, #1
 800b0b2:	105b      	asrs	r3, r3, #1
 800b0b4:	e7ee      	b.n	800b094 <__gethex+0x160>
 800b0b6:	f100 0914 	add.w	r9, r0, #20
 800b0ba:	f04f 0b00 	mov.w	fp, #0
 800b0be:	f1ca 0301 	rsb	r3, sl, #1
 800b0c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0c6:	f8cd b000 	str.w	fp, [sp]
 800b0ca:	9306      	str	r3, [sp, #24]
 800b0cc:	42b7      	cmp	r7, r6
 800b0ce:	d340      	bcc.n	800b152 <__gethex+0x21e>
 800b0d0:	9802      	ldr	r0, [sp, #8]
 800b0d2:	9b00      	ldr	r3, [sp, #0]
 800b0d4:	f840 3b04 	str.w	r3, [r0], #4
 800b0d8:	eba0 0009 	sub.w	r0, r0, r9
 800b0dc:	1080      	asrs	r0, r0, #2
 800b0de:	0146      	lsls	r6, r0, #5
 800b0e0:	6120      	str	r0, [r4, #16]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fb50 	bl	800b788 <__hi0bits>
 800b0e8:	1a30      	subs	r0, r6, r0
 800b0ea:	f8d8 6000 	ldr.w	r6, [r8]
 800b0ee:	42b0      	cmp	r0, r6
 800b0f0:	dd63      	ble.n	800b1ba <__gethex+0x286>
 800b0f2:	1b87      	subs	r7, r0, r6
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 feeb 	bl	800bed2 <__any_on>
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	b1a8      	cbz	r0, 800b12c <__gethex+0x1f8>
 800b100:	1e7b      	subs	r3, r7, #1
 800b102:	1159      	asrs	r1, r3, #5
 800b104:	f003 021f 	and.w	r2, r3, #31
 800b108:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b10c:	f04f 0a01 	mov.w	sl, #1
 800b110:	fa0a f202 	lsl.w	r2, sl, r2
 800b114:	420a      	tst	r2, r1
 800b116:	d009      	beq.n	800b12c <__gethex+0x1f8>
 800b118:	4553      	cmp	r3, sl
 800b11a:	dd05      	ble.n	800b128 <__gethex+0x1f4>
 800b11c:	1eb9      	subs	r1, r7, #2
 800b11e:	4620      	mov	r0, r4
 800b120:	f000 fed7 	bl	800bed2 <__any_on>
 800b124:	2800      	cmp	r0, #0
 800b126:	d145      	bne.n	800b1b4 <__gethex+0x280>
 800b128:	f04f 0a02 	mov.w	sl, #2
 800b12c:	4639      	mov	r1, r7
 800b12e:	4620      	mov	r0, r4
 800b130:	f7ff fe98 	bl	800ae64 <rshift>
 800b134:	443d      	add	r5, r7
 800b136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b13a:	42ab      	cmp	r3, r5
 800b13c:	da4c      	bge.n	800b1d8 <__gethex+0x2a4>
 800b13e:	ee18 0a10 	vmov	r0, s16
 800b142:	4621      	mov	r1, r4
 800b144:	f000 fa6a 	bl	800b61c <_Bfree>
 800b148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b14a:	2300      	movs	r3, #0
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	27a3      	movs	r7, #163	; 0xa3
 800b150:	e785      	b.n	800b05e <__gethex+0x12a>
 800b152:	1e73      	subs	r3, r6, #1
 800b154:	9a05      	ldr	r2, [sp, #20]
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d019      	beq.n	800b194 <__gethex+0x260>
 800b160:	f1bb 0f20 	cmp.w	fp, #32
 800b164:	d107      	bne.n	800b176 <__gethex+0x242>
 800b166:	9b02      	ldr	r3, [sp, #8]
 800b168:	9a00      	ldr	r2, [sp, #0]
 800b16a:	f843 2b04 	str.w	r2, [r3], #4
 800b16e:	9302      	str	r3, [sp, #8]
 800b170:	2300      	movs	r3, #0
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	469b      	mov	fp, r3
 800b176:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b17a:	f7ff fec5 	bl	800af08 <__hexdig_fun>
 800b17e:	9b00      	ldr	r3, [sp, #0]
 800b180:	f000 000f 	and.w	r0, r0, #15
 800b184:	fa00 f00b 	lsl.w	r0, r0, fp
 800b188:	4303      	orrs	r3, r0
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	f10b 0b04 	add.w	fp, fp, #4
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	e00d      	b.n	800b1b0 <__gethex+0x27c>
 800b194:	9b03      	ldr	r3, [sp, #12]
 800b196:	9a06      	ldr	r2, [sp, #24]
 800b198:	4413      	add	r3, r2
 800b19a:	42bb      	cmp	r3, r7
 800b19c:	d3e0      	bcc.n	800b160 <__gethex+0x22c>
 800b19e:	4618      	mov	r0, r3
 800b1a0:	9901      	ldr	r1, [sp, #4]
 800b1a2:	9307      	str	r3, [sp, #28]
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	f001 f8e3 	bl	800c370 <strncmp>
 800b1aa:	9b07      	ldr	r3, [sp, #28]
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1d7      	bne.n	800b160 <__gethex+0x22c>
 800b1b0:	461e      	mov	r6, r3
 800b1b2:	e78b      	b.n	800b0cc <__gethex+0x198>
 800b1b4:	f04f 0a03 	mov.w	sl, #3
 800b1b8:	e7b8      	b.n	800b12c <__gethex+0x1f8>
 800b1ba:	da0a      	bge.n	800b1d2 <__gethex+0x29e>
 800b1bc:	1a37      	subs	r7, r6, r0
 800b1be:	4621      	mov	r1, r4
 800b1c0:	ee18 0a10 	vmov	r0, s16
 800b1c4:	463a      	mov	r2, r7
 800b1c6:	f000 fc45 	bl	800ba54 <__lshift>
 800b1ca:	1bed      	subs	r5, r5, r7
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	f100 0914 	add.w	r9, r0, #20
 800b1d2:	f04f 0a00 	mov.w	sl, #0
 800b1d6:	e7ae      	b.n	800b136 <__gethex+0x202>
 800b1d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1dc:	42a8      	cmp	r0, r5
 800b1de:	dd72      	ble.n	800b2c6 <__gethex+0x392>
 800b1e0:	1b45      	subs	r5, r0, r5
 800b1e2:	42ae      	cmp	r6, r5
 800b1e4:	dc36      	bgt.n	800b254 <__gethex+0x320>
 800b1e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d02a      	beq.n	800b244 <__gethex+0x310>
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d02c      	beq.n	800b24c <__gethex+0x318>
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d115      	bne.n	800b222 <__gethex+0x2ee>
 800b1f6:	42ae      	cmp	r6, r5
 800b1f8:	d113      	bne.n	800b222 <__gethex+0x2ee>
 800b1fa:	2e01      	cmp	r6, #1
 800b1fc:	d10b      	bne.n	800b216 <__gethex+0x2e2>
 800b1fe:	9a04      	ldr	r2, [sp, #16]
 800b200:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	2301      	movs	r3, #1
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	f8c9 3000 	str.w	r3, [r9]
 800b20e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b210:	2762      	movs	r7, #98	; 0x62
 800b212:	601c      	str	r4, [r3, #0]
 800b214:	e723      	b.n	800b05e <__gethex+0x12a>
 800b216:	1e71      	subs	r1, r6, #1
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 fe5a 	bl	800bed2 <__any_on>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d1ed      	bne.n	800b1fe <__gethex+0x2ca>
 800b222:	ee18 0a10 	vmov	r0, s16
 800b226:	4621      	mov	r1, r4
 800b228:	f000 f9f8 	bl	800b61c <_Bfree>
 800b22c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b22e:	2300      	movs	r3, #0
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	2750      	movs	r7, #80	; 0x50
 800b234:	e713      	b.n	800b05e <__gethex+0x12a>
 800b236:	bf00      	nop
 800b238:	0800d240 	.word	0x0800d240
 800b23c:	0800d1c4 	.word	0x0800d1c4
 800b240:	0800d1d5 	.word	0x0800d1d5
 800b244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1eb      	bne.n	800b222 <__gethex+0x2ee>
 800b24a:	e7d8      	b.n	800b1fe <__gethex+0x2ca>
 800b24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1d5      	bne.n	800b1fe <__gethex+0x2ca>
 800b252:	e7e6      	b.n	800b222 <__gethex+0x2ee>
 800b254:	1e6f      	subs	r7, r5, #1
 800b256:	f1ba 0f00 	cmp.w	sl, #0
 800b25a:	d131      	bne.n	800b2c0 <__gethex+0x38c>
 800b25c:	b127      	cbz	r7, 800b268 <__gethex+0x334>
 800b25e:	4639      	mov	r1, r7
 800b260:	4620      	mov	r0, r4
 800b262:	f000 fe36 	bl	800bed2 <__any_on>
 800b266:	4682      	mov	sl, r0
 800b268:	117b      	asrs	r3, r7, #5
 800b26a:	2101      	movs	r1, #1
 800b26c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b270:	f007 071f 	and.w	r7, r7, #31
 800b274:	fa01 f707 	lsl.w	r7, r1, r7
 800b278:	421f      	tst	r7, r3
 800b27a:	4629      	mov	r1, r5
 800b27c:	4620      	mov	r0, r4
 800b27e:	bf18      	it	ne
 800b280:	f04a 0a02 	orrne.w	sl, sl, #2
 800b284:	1b76      	subs	r6, r6, r5
 800b286:	f7ff fded 	bl	800ae64 <rshift>
 800b28a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b28e:	2702      	movs	r7, #2
 800b290:	f1ba 0f00 	cmp.w	sl, #0
 800b294:	d048      	beq.n	800b328 <__gethex+0x3f4>
 800b296:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d015      	beq.n	800b2ca <__gethex+0x396>
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d017      	beq.n	800b2d2 <__gethex+0x39e>
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d109      	bne.n	800b2ba <__gethex+0x386>
 800b2a6:	f01a 0f02 	tst.w	sl, #2
 800b2aa:	d006      	beq.n	800b2ba <__gethex+0x386>
 800b2ac:	f8d9 0000 	ldr.w	r0, [r9]
 800b2b0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2b4:	f01a 0f01 	tst.w	sl, #1
 800b2b8:	d10e      	bne.n	800b2d8 <__gethex+0x3a4>
 800b2ba:	f047 0710 	orr.w	r7, r7, #16
 800b2be:	e033      	b.n	800b328 <__gethex+0x3f4>
 800b2c0:	f04f 0a01 	mov.w	sl, #1
 800b2c4:	e7d0      	b.n	800b268 <__gethex+0x334>
 800b2c6:	2701      	movs	r7, #1
 800b2c8:	e7e2      	b.n	800b290 <__gethex+0x35c>
 800b2ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2cc:	f1c3 0301 	rsb	r3, r3, #1
 800b2d0:	9315      	str	r3, [sp, #84]	; 0x54
 800b2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d0f0      	beq.n	800b2ba <__gethex+0x386>
 800b2d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2dc:	f104 0314 	add.w	r3, r4, #20
 800b2e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2e8:	f04f 0c00 	mov.w	ip, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b2f6:	d01c      	beq.n	800b332 <__gethex+0x3fe>
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	6002      	str	r2, [r0, #0]
 800b2fc:	2f02      	cmp	r7, #2
 800b2fe:	f104 0314 	add.w	r3, r4, #20
 800b302:	d13f      	bne.n	800b384 <__gethex+0x450>
 800b304:	f8d8 2000 	ldr.w	r2, [r8]
 800b308:	3a01      	subs	r2, #1
 800b30a:	42b2      	cmp	r2, r6
 800b30c:	d10a      	bne.n	800b324 <__gethex+0x3f0>
 800b30e:	1171      	asrs	r1, r6, #5
 800b310:	2201      	movs	r2, #1
 800b312:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b316:	f006 061f 	and.w	r6, r6, #31
 800b31a:	fa02 f606 	lsl.w	r6, r2, r6
 800b31e:	421e      	tst	r6, r3
 800b320:	bf18      	it	ne
 800b322:	4617      	movne	r7, r2
 800b324:	f047 0720 	orr.w	r7, r7, #32
 800b328:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b32a:	601c      	str	r4, [r3, #0]
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	601d      	str	r5, [r3, #0]
 800b330:	e695      	b.n	800b05e <__gethex+0x12a>
 800b332:	4299      	cmp	r1, r3
 800b334:	f843 cc04 	str.w	ip, [r3, #-4]
 800b338:	d8d8      	bhi.n	800b2ec <__gethex+0x3b8>
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	459b      	cmp	fp, r3
 800b33e:	db19      	blt.n	800b374 <__gethex+0x440>
 800b340:	6861      	ldr	r1, [r4, #4]
 800b342:	ee18 0a10 	vmov	r0, s16
 800b346:	3101      	adds	r1, #1
 800b348:	f000 f928 	bl	800b59c <_Balloc>
 800b34c:	4681      	mov	r9, r0
 800b34e:	b918      	cbnz	r0, 800b358 <__gethex+0x424>
 800b350:	4b1a      	ldr	r3, [pc, #104]	; (800b3bc <__gethex+0x488>)
 800b352:	4602      	mov	r2, r0
 800b354:	2184      	movs	r1, #132	; 0x84
 800b356:	e6a8      	b.n	800b0aa <__gethex+0x176>
 800b358:	6922      	ldr	r2, [r4, #16]
 800b35a:	3202      	adds	r2, #2
 800b35c:	f104 010c 	add.w	r1, r4, #12
 800b360:	0092      	lsls	r2, r2, #2
 800b362:	300c      	adds	r0, #12
 800b364:	f000 f90c 	bl	800b580 <memcpy>
 800b368:	4621      	mov	r1, r4
 800b36a:	ee18 0a10 	vmov	r0, s16
 800b36e:	f000 f955 	bl	800b61c <_Bfree>
 800b372:	464c      	mov	r4, r9
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b37c:	6122      	str	r2, [r4, #16]
 800b37e:	2201      	movs	r2, #1
 800b380:	615a      	str	r2, [r3, #20]
 800b382:	e7bb      	b.n	800b2fc <__gethex+0x3c8>
 800b384:	6922      	ldr	r2, [r4, #16]
 800b386:	455a      	cmp	r2, fp
 800b388:	dd0b      	ble.n	800b3a2 <__gethex+0x46e>
 800b38a:	2101      	movs	r1, #1
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7ff fd69 	bl	800ae64 <rshift>
 800b392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b396:	3501      	adds	r5, #1
 800b398:	42ab      	cmp	r3, r5
 800b39a:	f6ff aed0 	blt.w	800b13e <__gethex+0x20a>
 800b39e:	2701      	movs	r7, #1
 800b3a0:	e7c0      	b.n	800b324 <__gethex+0x3f0>
 800b3a2:	f016 061f 	ands.w	r6, r6, #31
 800b3a6:	d0fa      	beq.n	800b39e <__gethex+0x46a>
 800b3a8:	449a      	add	sl, r3
 800b3aa:	f1c6 0620 	rsb	r6, r6, #32
 800b3ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b3b2:	f000 f9e9 	bl	800b788 <__hi0bits>
 800b3b6:	42b0      	cmp	r0, r6
 800b3b8:	dbe7      	blt.n	800b38a <__gethex+0x456>
 800b3ba:	e7f0      	b.n	800b39e <__gethex+0x46a>
 800b3bc:	0800d1c4 	.word	0x0800d1c4

0800b3c0 <L_shift>:
 800b3c0:	f1c2 0208 	rsb	r2, r2, #8
 800b3c4:	0092      	lsls	r2, r2, #2
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	f1c2 0620 	rsb	r6, r2, #32
 800b3cc:	6843      	ldr	r3, [r0, #4]
 800b3ce:	6804      	ldr	r4, [r0, #0]
 800b3d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b3d4:	432c      	orrs	r4, r5
 800b3d6:	40d3      	lsrs	r3, r2
 800b3d8:	6004      	str	r4, [r0, #0]
 800b3da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3de:	4288      	cmp	r0, r1
 800b3e0:	d3f4      	bcc.n	800b3cc <L_shift+0xc>
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}

0800b3e4 <__match>:
 800b3e4:	b530      	push	{r4, r5, lr}
 800b3e6:	6803      	ldr	r3, [r0, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ee:	b914      	cbnz	r4, 800b3f6 <__match+0x12>
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	2001      	movs	r0, #1
 800b3f4:	bd30      	pop	{r4, r5, pc}
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3fe:	2d19      	cmp	r5, #25
 800b400:	bf98      	it	ls
 800b402:	3220      	addls	r2, #32
 800b404:	42a2      	cmp	r2, r4
 800b406:	d0f0      	beq.n	800b3ea <__match+0x6>
 800b408:	2000      	movs	r0, #0
 800b40a:	e7f3      	b.n	800b3f4 <__match+0x10>

0800b40c <__hexnan>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	680b      	ldr	r3, [r1, #0]
 800b412:	6801      	ldr	r1, [r0, #0]
 800b414:	115e      	asrs	r6, r3, #5
 800b416:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b41a:	f013 031f 	ands.w	r3, r3, #31
 800b41e:	b087      	sub	sp, #28
 800b420:	bf18      	it	ne
 800b422:	3604      	addne	r6, #4
 800b424:	2500      	movs	r5, #0
 800b426:	1f37      	subs	r7, r6, #4
 800b428:	4682      	mov	sl, r0
 800b42a:	4690      	mov	r8, r2
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b432:	46b9      	mov	r9, r7
 800b434:	463c      	mov	r4, r7
 800b436:	9502      	str	r5, [sp, #8]
 800b438:	46ab      	mov	fp, r5
 800b43a:	784a      	ldrb	r2, [r1, #1]
 800b43c:	1c4b      	adds	r3, r1, #1
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	b342      	cbz	r2, 800b494 <__hexnan+0x88>
 800b442:	4610      	mov	r0, r2
 800b444:	9105      	str	r1, [sp, #20]
 800b446:	9204      	str	r2, [sp, #16]
 800b448:	f7ff fd5e 	bl	800af08 <__hexdig_fun>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d14f      	bne.n	800b4f0 <__hexnan+0xe4>
 800b450:	9a04      	ldr	r2, [sp, #16]
 800b452:	9905      	ldr	r1, [sp, #20]
 800b454:	2a20      	cmp	r2, #32
 800b456:	d818      	bhi.n	800b48a <__hexnan+0x7e>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	459b      	cmp	fp, r3
 800b45c:	dd13      	ble.n	800b486 <__hexnan+0x7a>
 800b45e:	454c      	cmp	r4, r9
 800b460:	d206      	bcs.n	800b470 <__hexnan+0x64>
 800b462:	2d07      	cmp	r5, #7
 800b464:	dc04      	bgt.n	800b470 <__hexnan+0x64>
 800b466:	462a      	mov	r2, r5
 800b468:	4649      	mov	r1, r9
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff ffa8 	bl	800b3c0 <L_shift>
 800b470:	4544      	cmp	r4, r8
 800b472:	d950      	bls.n	800b516 <__hexnan+0x10a>
 800b474:	2300      	movs	r3, #0
 800b476:	f1a4 0904 	sub.w	r9, r4, #4
 800b47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b47e:	f8cd b008 	str.w	fp, [sp, #8]
 800b482:	464c      	mov	r4, r9
 800b484:	461d      	mov	r5, r3
 800b486:	9903      	ldr	r1, [sp, #12]
 800b488:	e7d7      	b.n	800b43a <__hexnan+0x2e>
 800b48a:	2a29      	cmp	r2, #41	; 0x29
 800b48c:	d156      	bne.n	800b53c <__hexnan+0x130>
 800b48e:	3102      	adds	r1, #2
 800b490:	f8ca 1000 	str.w	r1, [sl]
 800b494:	f1bb 0f00 	cmp.w	fp, #0
 800b498:	d050      	beq.n	800b53c <__hexnan+0x130>
 800b49a:	454c      	cmp	r4, r9
 800b49c:	d206      	bcs.n	800b4ac <__hexnan+0xa0>
 800b49e:	2d07      	cmp	r5, #7
 800b4a0:	dc04      	bgt.n	800b4ac <__hexnan+0xa0>
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7ff ff8a 	bl	800b3c0 <L_shift>
 800b4ac:	4544      	cmp	r4, r8
 800b4ae:	d934      	bls.n	800b51a <__hexnan+0x10e>
 800b4b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4be:	429f      	cmp	r7, r3
 800b4c0:	d2f9      	bcs.n	800b4b6 <__hexnan+0xaa>
 800b4c2:	1b3b      	subs	r3, r7, r4
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	3e03      	subs	r6, #3
 800b4ce:	42b4      	cmp	r4, r6
 800b4d0:	bf88      	it	hi
 800b4d2:	2304      	movhi	r3, #4
 800b4d4:	4443      	add	r3, r8
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f843 2b04 	str.w	r2, [r3], #4
 800b4dc:	429f      	cmp	r7, r3
 800b4de:	d2fb      	bcs.n	800b4d8 <__hexnan+0xcc>
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	b91b      	cbnz	r3, 800b4ec <__hexnan+0xe0>
 800b4e4:	4547      	cmp	r7, r8
 800b4e6:	d127      	bne.n	800b538 <__hexnan+0x12c>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	2005      	movs	r0, #5
 800b4ee:	e026      	b.n	800b53e <__hexnan+0x132>
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	2d08      	cmp	r5, #8
 800b4f4:	f10b 0b01 	add.w	fp, fp, #1
 800b4f8:	dd06      	ble.n	800b508 <__hexnan+0xfc>
 800b4fa:	4544      	cmp	r4, r8
 800b4fc:	d9c3      	bls.n	800b486 <__hexnan+0x7a>
 800b4fe:	2300      	movs	r3, #0
 800b500:	f844 3c04 	str.w	r3, [r4, #-4]
 800b504:	2501      	movs	r5, #1
 800b506:	3c04      	subs	r4, #4
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	f000 000f 	and.w	r0, r0, #15
 800b50e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	e7b7      	b.n	800b486 <__hexnan+0x7a>
 800b516:	2508      	movs	r5, #8
 800b518:	e7b5      	b.n	800b486 <__hexnan+0x7a>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0df      	beq.n	800b4e0 <__hexnan+0xd4>
 800b520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b524:	f1c3 0320 	rsb	r3, r3, #32
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
 800b52c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b530:	401a      	ands	r2, r3
 800b532:	f846 2c04 	str.w	r2, [r6, #-4]
 800b536:	e7d3      	b.n	800b4e0 <__hexnan+0xd4>
 800b538:	3f04      	subs	r7, #4
 800b53a:	e7d1      	b.n	800b4e0 <__hexnan+0xd4>
 800b53c:	2004      	movs	r0, #4
 800b53e:	b007      	add	sp, #28
 800b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b544 <_localeconv_r>:
 800b544:	4800      	ldr	r0, [pc, #0]	; (800b548 <_localeconv_r+0x4>)
 800b546:	4770      	bx	lr
 800b548:	24000168 	.word	0x24000168

0800b54c <malloc>:
 800b54c:	4b02      	ldr	r3, [pc, #8]	; (800b558 <malloc+0xc>)
 800b54e:	4601      	mov	r1, r0
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f000 bd3f 	b.w	800bfd4 <_malloc_r>
 800b556:	bf00      	nop
 800b558:	24000010 	.word	0x24000010

0800b55c <__ascii_mbtowc>:
 800b55c:	b082      	sub	sp, #8
 800b55e:	b901      	cbnz	r1, 800b562 <__ascii_mbtowc+0x6>
 800b560:	a901      	add	r1, sp, #4
 800b562:	b142      	cbz	r2, 800b576 <__ascii_mbtowc+0x1a>
 800b564:	b14b      	cbz	r3, 800b57a <__ascii_mbtowc+0x1e>
 800b566:	7813      	ldrb	r3, [r2, #0]
 800b568:	600b      	str	r3, [r1, #0]
 800b56a:	7812      	ldrb	r2, [r2, #0]
 800b56c:	1e10      	subs	r0, r2, #0
 800b56e:	bf18      	it	ne
 800b570:	2001      	movne	r0, #1
 800b572:	b002      	add	sp, #8
 800b574:	4770      	bx	lr
 800b576:	4610      	mov	r0, r2
 800b578:	e7fb      	b.n	800b572 <__ascii_mbtowc+0x16>
 800b57a:	f06f 0001 	mvn.w	r0, #1
 800b57e:	e7f8      	b.n	800b572 <__ascii_mbtowc+0x16>

0800b580 <memcpy>:
 800b580:	440a      	add	r2, r1
 800b582:	4291      	cmp	r1, r2
 800b584:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b588:	d100      	bne.n	800b58c <memcpy+0xc>
 800b58a:	4770      	bx	lr
 800b58c:	b510      	push	{r4, lr}
 800b58e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b592:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b596:	4291      	cmp	r1, r2
 800b598:	d1f9      	bne.n	800b58e <memcpy+0xe>
 800b59a:	bd10      	pop	{r4, pc}

0800b59c <_Balloc>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	b976      	cbnz	r6, 800b5c4 <_Balloc+0x28>
 800b5a6:	2010      	movs	r0, #16
 800b5a8:	f7ff ffd0 	bl	800b54c <malloc>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b5b0:	b920      	cbnz	r0, 800b5bc <_Balloc+0x20>
 800b5b2:	4b18      	ldr	r3, [pc, #96]	; (800b614 <_Balloc+0x78>)
 800b5b4:	4818      	ldr	r0, [pc, #96]	; (800b618 <_Balloc+0x7c>)
 800b5b6:	2166      	movs	r1, #102	; 0x66
 800b5b8:	f000 fefa 	bl	800c3b0 <__assert_func>
 800b5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c0:	6006      	str	r6, [r0, #0]
 800b5c2:	60c6      	str	r6, [r0, #12]
 800b5c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5c6:	68f3      	ldr	r3, [r6, #12]
 800b5c8:	b183      	cbz	r3, 800b5ec <_Balloc+0x50>
 800b5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5d2:	b9b8      	cbnz	r0, 800b604 <_Balloc+0x68>
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b5da:	1d72      	adds	r2, r6, #5
 800b5dc:	0092      	lsls	r2, r2, #2
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 fc98 	bl	800bf14 <_calloc_r>
 800b5e4:	b160      	cbz	r0, 800b600 <_Balloc+0x64>
 800b5e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5ea:	e00e      	b.n	800b60a <_Balloc+0x6e>
 800b5ec:	2221      	movs	r2, #33	; 0x21
 800b5ee:	2104      	movs	r1, #4
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fc8f 	bl	800bf14 <_calloc_r>
 800b5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f8:	60f0      	str	r0, [r6, #12]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e4      	bne.n	800b5ca <_Balloc+0x2e>
 800b600:	2000      	movs	r0, #0
 800b602:	bd70      	pop	{r4, r5, r6, pc}
 800b604:	6802      	ldr	r2, [r0, #0]
 800b606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b60a:	2300      	movs	r3, #0
 800b60c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b610:	e7f7      	b.n	800b602 <_Balloc+0x66>
 800b612:	bf00      	nop
 800b614:	0800d14e 	.word	0x0800d14e
 800b618:	0800d254 	.word	0x0800d254

0800b61c <_Bfree>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b620:	4605      	mov	r5, r0
 800b622:	460c      	mov	r4, r1
 800b624:	b976      	cbnz	r6, 800b644 <_Bfree+0x28>
 800b626:	2010      	movs	r0, #16
 800b628:	f7ff ff90 	bl	800b54c <malloc>
 800b62c:	4602      	mov	r2, r0
 800b62e:	6268      	str	r0, [r5, #36]	; 0x24
 800b630:	b920      	cbnz	r0, 800b63c <_Bfree+0x20>
 800b632:	4b09      	ldr	r3, [pc, #36]	; (800b658 <_Bfree+0x3c>)
 800b634:	4809      	ldr	r0, [pc, #36]	; (800b65c <_Bfree+0x40>)
 800b636:	218a      	movs	r1, #138	; 0x8a
 800b638:	f000 feba 	bl	800c3b0 <__assert_func>
 800b63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b640:	6006      	str	r6, [r0, #0]
 800b642:	60c6      	str	r6, [r0, #12]
 800b644:	b13c      	cbz	r4, 800b656 <_Bfree+0x3a>
 800b646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b648:	6862      	ldr	r2, [r4, #4]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b650:	6021      	str	r1, [r4, #0]
 800b652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	0800d14e 	.word	0x0800d14e
 800b65c:	0800d254 	.word	0x0800d254

0800b660 <__multadd>:
 800b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b664:	690e      	ldr	r6, [r1, #16]
 800b666:	4607      	mov	r7, r0
 800b668:	4698      	mov	r8, r3
 800b66a:	460c      	mov	r4, r1
 800b66c:	f101 0014 	add.w	r0, r1, #20
 800b670:	2300      	movs	r3, #0
 800b672:	6805      	ldr	r5, [r0, #0]
 800b674:	b2a9      	uxth	r1, r5
 800b676:	fb02 8101 	mla	r1, r2, r1, r8
 800b67a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b67e:	0c2d      	lsrs	r5, r5, #16
 800b680:	fb02 c505 	mla	r5, r2, r5, ip
 800b684:	b289      	uxth	r1, r1
 800b686:	3301      	adds	r3, #1
 800b688:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b68c:	429e      	cmp	r6, r3
 800b68e:	f840 1b04 	str.w	r1, [r0], #4
 800b692:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b696:	dcec      	bgt.n	800b672 <__multadd+0x12>
 800b698:	f1b8 0f00 	cmp.w	r8, #0
 800b69c:	d022      	beq.n	800b6e4 <__multadd+0x84>
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	42b3      	cmp	r3, r6
 800b6a2:	dc19      	bgt.n	800b6d8 <__multadd+0x78>
 800b6a4:	6861      	ldr	r1, [r4, #4]
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	f7ff ff77 	bl	800b59c <_Balloc>
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	b928      	cbnz	r0, 800b6be <__multadd+0x5e>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <__multadd+0x8c>)
 800b6b6:	480e      	ldr	r0, [pc, #56]	; (800b6f0 <__multadd+0x90>)
 800b6b8:	21b5      	movs	r1, #181	; 0xb5
 800b6ba:	f000 fe79 	bl	800c3b0 <__assert_func>
 800b6be:	6922      	ldr	r2, [r4, #16]
 800b6c0:	3202      	adds	r2, #2
 800b6c2:	f104 010c 	add.w	r1, r4, #12
 800b6c6:	0092      	lsls	r2, r2, #2
 800b6c8:	300c      	adds	r0, #12
 800b6ca:	f7ff ff59 	bl	800b580 <memcpy>
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f7ff ffa3 	bl	800b61c <_Bfree>
 800b6d6:	462c      	mov	r4, r5
 800b6d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b6dc:	3601      	adds	r6, #1
 800b6de:	f8c3 8014 	str.w	r8, [r3, #20]
 800b6e2:	6126      	str	r6, [r4, #16]
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0800d1c4 	.word	0x0800d1c4
 800b6f0:	0800d254 	.word	0x0800d254

0800b6f4 <__s2b>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	4615      	mov	r5, r2
 800b6fc:	461f      	mov	r7, r3
 800b6fe:	2209      	movs	r2, #9
 800b700:	3308      	adds	r3, #8
 800b702:	4606      	mov	r6, r0
 800b704:	fb93 f3f2 	sdiv	r3, r3, r2
 800b708:	2100      	movs	r1, #0
 800b70a:	2201      	movs	r2, #1
 800b70c:	429a      	cmp	r2, r3
 800b70e:	db09      	blt.n	800b724 <__s2b+0x30>
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff ff43 	bl	800b59c <_Balloc>
 800b716:	b940      	cbnz	r0, 800b72a <__s2b+0x36>
 800b718:	4602      	mov	r2, r0
 800b71a:	4b19      	ldr	r3, [pc, #100]	; (800b780 <__s2b+0x8c>)
 800b71c:	4819      	ldr	r0, [pc, #100]	; (800b784 <__s2b+0x90>)
 800b71e:	21ce      	movs	r1, #206	; 0xce
 800b720:	f000 fe46 	bl	800c3b0 <__assert_func>
 800b724:	0052      	lsls	r2, r2, #1
 800b726:	3101      	adds	r1, #1
 800b728:	e7f0      	b.n	800b70c <__s2b+0x18>
 800b72a:	9b08      	ldr	r3, [sp, #32]
 800b72c:	6143      	str	r3, [r0, #20]
 800b72e:	2d09      	cmp	r5, #9
 800b730:	f04f 0301 	mov.w	r3, #1
 800b734:	6103      	str	r3, [r0, #16]
 800b736:	dd16      	ble.n	800b766 <__s2b+0x72>
 800b738:	f104 0909 	add.w	r9, r4, #9
 800b73c:	46c8      	mov	r8, r9
 800b73e:	442c      	add	r4, r5
 800b740:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b744:	4601      	mov	r1, r0
 800b746:	3b30      	subs	r3, #48	; 0x30
 800b748:	220a      	movs	r2, #10
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff ff88 	bl	800b660 <__multadd>
 800b750:	45a0      	cmp	r8, r4
 800b752:	d1f5      	bne.n	800b740 <__s2b+0x4c>
 800b754:	f1a5 0408 	sub.w	r4, r5, #8
 800b758:	444c      	add	r4, r9
 800b75a:	1b2d      	subs	r5, r5, r4
 800b75c:	1963      	adds	r3, r4, r5
 800b75e:	42bb      	cmp	r3, r7
 800b760:	db04      	blt.n	800b76c <__s2b+0x78>
 800b762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b766:	340a      	adds	r4, #10
 800b768:	2509      	movs	r5, #9
 800b76a:	e7f6      	b.n	800b75a <__s2b+0x66>
 800b76c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b770:	4601      	mov	r1, r0
 800b772:	3b30      	subs	r3, #48	; 0x30
 800b774:	220a      	movs	r2, #10
 800b776:	4630      	mov	r0, r6
 800b778:	f7ff ff72 	bl	800b660 <__multadd>
 800b77c:	e7ee      	b.n	800b75c <__s2b+0x68>
 800b77e:	bf00      	nop
 800b780:	0800d1c4 	.word	0x0800d1c4
 800b784:	0800d254 	.word	0x0800d254

0800b788 <__hi0bits>:
 800b788:	0c03      	lsrs	r3, r0, #16
 800b78a:	041b      	lsls	r3, r3, #16
 800b78c:	b9d3      	cbnz	r3, 800b7c4 <__hi0bits+0x3c>
 800b78e:	0400      	lsls	r0, r0, #16
 800b790:	2310      	movs	r3, #16
 800b792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b796:	bf04      	itt	eq
 800b798:	0200      	lsleq	r0, r0, #8
 800b79a:	3308      	addeq	r3, #8
 800b79c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7a0:	bf04      	itt	eq
 800b7a2:	0100      	lsleq	r0, r0, #4
 800b7a4:	3304      	addeq	r3, #4
 800b7a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7aa:	bf04      	itt	eq
 800b7ac:	0080      	lsleq	r0, r0, #2
 800b7ae:	3302      	addeq	r3, #2
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	db05      	blt.n	800b7c0 <__hi0bits+0x38>
 800b7b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7b8:	f103 0301 	add.w	r3, r3, #1
 800b7bc:	bf08      	it	eq
 800b7be:	2320      	moveq	r3, #32
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	4770      	bx	lr
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e7e4      	b.n	800b792 <__hi0bits+0xa>

0800b7c8 <__lo0bits>:
 800b7c8:	6803      	ldr	r3, [r0, #0]
 800b7ca:	f013 0207 	ands.w	r2, r3, #7
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	d00b      	beq.n	800b7ea <__lo0bits+0x22>
 800b7d2:	07da      	lsls	r2, r3, #31
 800b7d4:	d424      	bmi.n	800b820 <__lo0bits+0x58>
 800b7d6:	0798      	lsls	r0, r3, #30
 800b7d8:	bf49      	itett	mi
 800b7da:	085b      	lsrmi	r3, r3, #1
 800b7dc:	089b      	lsrpl	r3, r3, #2
 800b7de:	2001      	movmi	r0, #1
 800b7e0:	600b      	strmi	r3, [r1, #0]
 800b7e2:	bf5c      	itt	pl
 800b7e4:	600b      	strpl	r3, [r1, #0]
 800b7e6:	2002      	movpl	r0, #2
 800b7e8:	4770      	bx	lr
 800b7ea:	b298      	uxth	r0, r3
 800b7ec:	b9b0      	cbnz	r0, 800b81c <__lo0bits+0x54>
 800b7ee:	0c1b      	lsrs	r3, r3, #16
 800b7f0:	2010      	movs	r0, #16
 800b7f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b7f6:	bf04      	itt	eq
 800b7f8:	0a1b      	lsreq	r3, r3, #8
 800b7fa:	3008      	addeq	r0, #8
 800b7fc:	071a      	lsls	r2, r3, #28
 800b7fe:	bf04      	itt	eq
 800b800:	091b      	lsreq	r3, r3, #4
 800b802:	3004      	addeq	r0, #4
 800b804:	079a      	lsls	r2, r3, #30
 800b806:	bf04      	itt	eq
 800b808:	089b      	lsreq	r3, r3, #2
 800b80a:	3002      	addeq	r0, #2
 800b80c:	07da      	lsls	r2, r3, #31
 800b80e:	d403      	bmi.n	800b818 <__lo0bits+0x50>
 800b810:	085b      	lsrs	r3, r3, #1
 800b812:	f100 0001 	add.w	r0, r0, #1
 800b816:	d005      	beq.n	800b824 <__lo0bits+0x5c>
 800b818:	600b      	str	r3, [r1, #0]
 800b81a:	4770      	bx	lr
 800b81c:	4610      	mov	r0, r2
 800b81e:	e7e8      	b.n	800b7f2 <__lo0bits+0x2a>
 800b820:	2000      	movs	r0, #0
 800b822:	4770      	bx	lr
 800b824:	2020      	movs	r0, #32
 800b826:	4770      	bx	lr

0800b828 <__i2b>:
 800b828:	b510      	push	{r4, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	2101      	movs	r1, #1
 800b82e:	f7ff feb5 	bl	800b59c <_Balloc>
 800b832:	4602      	mov	r2, r0
 800b834:	b928      	cbnz	r0, 800b842 <__i2b+0x1a>
 800b836:	4b05      	ldr	r3, [pc, #20]	; (800b84c <__i2b+0x24>)
 800b838:	4805      	ldr	r0, [pc, #20]	; (800b850 <__i2b+0x28>)
 800b83a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b83e:	f000 fdb7 	bl	800c3b0 <__assert_func>
 800b842:	2301      	movs	r3, #1
 800b844:	6144      	str	r4, [r0, #20]
 800b846:	6103      	str	r3, [r0, #16]
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	bf00      	nop
 800b84c:	0800d1c4 	.word	0x0800d1c4
 800b850:	0800d254 	.word	0x0800d254

0800b854 <__multiply>:
 800b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	4614      	mov	r4, r2
 800b85a:	690a      	ldr	r2, [r1, #16]
 800b85c:	6923      	ldr	r3, [r4, #16]
 800b85e:	429a      	cmp	r2, r3
 800b860:	bfb8      	it	lt
 800b862:	460b      	movlt	r3, r1
 800b864:	460d      	mov	r5, r1
 800b866:	bfbc      	itt	lt
 800b868:	4625      	movlt	r5, r4
 800b86a:	461c      	movlt	r4, r3
 800b86c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b870:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b874:	68ab      	ldr	r3, [r5, #8]
 800b876:	6869      	ldr	r1, [r5, #4]
 800b878:	eb0a 0709 	add.w	r7, sl, r9
 800b87c:	42bb      	cmp	r3, r7
 800b87e:	b085      	sub	sp, #20
 800b880:	bfb8      	it	lt
 800b882:	3101      	addlt	r1, #1
 800b884:	f7ff fe8a 	bl	800b59c <_Balloc>
 800b888:	b930      	cbnz	r0, 800b898 <__multiply+0x44>
 800b88a:	4602      	mov	r2, r0
 800b88c:	4b42      	ldr	r3, [pc, #264]	; (800b998 <__multiply+0x144>)
 800b88e:	4843      	ldr	r0, [pc, #268]	; (800b99c <__multiply+0x148>)
 800b890:	f240 115d 	movw	r1, #349	; 0x15d
 800b894:	f000 fd8c 	bl	800c3b0 <__assert_func>
 800b898:	f100 0614 	add.w	r6, r0, #20
 800b89c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b8a0:	4633      	mov	r3, r6
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4543      	cmp	r3, r8
 800b8a6:	d31e      	bcc.n	800b8e6 <__multiply+0x92>
 800b8a8:	f105 0c14 	add.w	ip, r5, #20
 800b8ac:	f104 0314 	add.w	r3, r4, #20
 800b8b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b8b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b8b8:	9202      	str	r2, [sp, #8]
 800b8ba:	ebac 0205 	sub.w	r2, ip, r5
 800b8be:	3a15      	subs	r2, #21
 800b8c0:	f022 0203 	bic.w	r2, r2, #3
 800b8c4:	3204      	adds	r2, #4
 800b8c6:	f105 0115 	add.w	r1, r5, #21
 800b8ca:	458c      	cmp	ip, r1
 800b8cc:	bf38      	it	cc
 800b8ce:	2204      	movcc	r2, #4
 800b8d0:	9201      	str	r2, [sp, #4]
 800b8d2:	9a02      	ldr	r2, [sp, #8]
 800b8d4:	9303      	str	r3, [sp, #12]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d808      	bhi.n	800b8ec <__multiply+0x98>
 800b8da:	2f00      	cmp	r7, #0
 800b8dc:	dc55      	bgt.n	800b98a <__multiply+0x136>
 800b8de:	6107      	str	r7, [r0, #16]
 800b8e0:	b005      	add	sp, #20
 800b8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e6:	f843 2b04 	str.w	r2, [r3], #4
 800b8ea:	e7db      	b.n	800b8a4 <__multiply+0x50>
 800b8ec:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8f0:	f1ba 0f00 	cmp.w	sl, #0
 800b8f4:	d020      	beq.n	800b938 <__multiply+0xe4>
 800b8f6:	f105 0e14 	add.w	lr, r5, #20
 800b8fa:	46b1      	mov	r9, r6
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b902:	f8d9 b000 	ldr.w	fp, [r9]
 800b906:	b2a1      	uxth	r1, r4
 800b908:	fa1f fb8b 	uxth.w	fp, fp
 800b90c:	fb0a b101 	mla	r1, sl, r1, fp
 800b910:	4411      	add	r1, r2
 800b912:	f8d9 2000 	ldr.w	r2, [r9]
 800b916:	0c24      	lsrs	r4, r4, #16
 800b918:	0c12      	lsrs	r2, r2, #16
 800b91a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b91e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b922:	b289      	uxth	r1, r1
 800b924:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b928:	45f4      	cmp	ip, lr
 800b92a:	f849 1b04 	str.w	r1, [r9], #4
 800b92e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b932:	d8e4      	bhi.n	800b8fe <__multiply+0xaa>
 800b934:	9901      	ldr	r1, [sp, #4]
 800b936:	5072      	str	r2, [r6, r1]
 800b938:	9a03      	ldr	r2, [sp, #12]
 800b93a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b93e:	3304      	adds	r3, #4
 800b940:	f1b9 0f00 	cmp.w	r9, #0
 800b944:	d01f      	beq.n	800b986 <__multiply+0x132>
 800b946:	6834      	ldr	r4, [r6, #0]
 800b948:	f105 0114 	add.w	r1, r5, #20
 800b94c:	46b6      	mov	lr, r6
 800b94e:	f04f 0a00 	mov.w	sl, #0
 800b952:	880a      	ldrh	r2, [r1, #0]
 800b954:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b958:	fb09 b202 	mla	r2, r9, r2, fp
 800b95c:	4492      	add	sl, r2
 800b95e:	b2a4      	uxth	r4, r4
 800b960:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b964:	f84e 4b04 	str.w	r4, [lr], #4
 800b968:	f851 4b04 	ldr.w	r4, [r1], #4
 800b96c:	f8be 2000 	ldrh.w	r2, [lr]
 800b970:	0c24      	lsrs	r4, r4, #16
 800b972:	fb09 2404 	mla	r4, r9, r4, r2
 800b976:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b97a:	458c      	cmp	ip, r1
 800b97c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b980:	d8e7      	bhi.n	800b952 <__multiply+0xfe>
 800b982:	9a01      	ldr	r2, [sp, #4]
 800b984:	50b4      	str	r4, [r6, r2]
 800b986:	3604      	adds	r6, #4
 800b988:	e7a3      	b.n	800b8d2 <__multiply+0x7e>
 800b98a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1a5      	bne.n	800b8de <__multiply+0x8a>
 800b992:	3f01      	subs	r7, #1
 800b994:	e7a1      	b.n	800b8da <__multiply+0x86>
 800b996:	bf00      	nop
 800b998:	0800d1c4 	.word	0x0800d1c4
 800b99c:	0800d254 	.word	0x0800d254

0800b9a0 <__pow5mult>:
 800b9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a4:	4615      	mov	r5, r2
 800b9a6:	f012 0203 	ands.w	r2, r2, #3
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	460f      	mov	r7, r1
 800b9ae:	d007      	beq.n	800b9c0 <__pow5mult+0x20>
 800b9b0:	4c25      	ldr	r4, [pc, #148]	; (800ba48 <__pow5mult+0xa8>)
 800b9b2:	3a01      	subs	r2, #1
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ba:	f7ff fe51 	bl	800b660 <__multadd>
 800b9be:	4607      	mov	r7, r0
 800b9c0:	10ad      	asrs	r5, r5, #2
 800b9c2:	d03d      	beq.n	800ba40 <__pow5mult+0xa0>
 800b9c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9c6:	b97c      	cbnz	r4, 800b9e8 <__pow5mult+0x48>
 800b9c8:	2010      	movs	r0, #16
 800b9ca:	f7ff fdbf 	bl	800b54c <malloc>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b9d2:	b928      	cbnz	r0, 800b9e0 <__pow5mult+0x40>
 800b9d4:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <__pow5mult+0xac>)
 800b9d6:	481e      	ldr	r0, [pc, #120]	; (800ba50 <__pow5mult+0xb0>)
 800b9d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9dc:	f000 fce8 	bl	800c3b0 <__assert_func>
 800b9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9e4:	6004      	str	r4, [r0, #0]
 800b9e6:	60c4      	str	r4, [r0, #12]
 800b9e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9f0:	b94c      	cbnz	r4, 800ba06 <__pow5mult+0x66>
 800b9f2:	f240 2171 	movw	r1, #625	; 0x271
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff ff16 	bl	800b828 <__i2b>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba02:	4604      	mov	r4, r0
 800ba04:	6003      	str	r3, [r0, #0]
 800ba06:	f04f 0900 	mov.w	r9, #0
 800ba0a:	07eb      	lsls	r3, r5, #31
 800ba0c:	d50a      	bpl.n	800ba24 <__pow5mult+0x84>
 800ba0e:	4639      	mov	r1, r7
 800ba10:	4622      	mov	r2, r4
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ff1e 	bl	800b854 <__multiply>
 800ba18:	4639      	mov	r1, r7
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff fdfd 	bl	800b61c <_Bfree>
 800ba22:	4647      	mov	r7, r8
 800ba24:	106d      	asrs	r5, r5, #1
 800ba26:	d00b      	beq.n	800ba40 <__pow5mult+0xa0>
 800ba28:	6820      	ldr	r0, [r4, #0]
 800ba2a:	b938      	cbnz	r0, 800ba3c <__pow5mult+0x9c>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	f7ff ff0f 	bl	800b854 <__multiply>
 800ba36:	6020      	str	r0, [r4, #0]
 800ba38:	f8c0 9000 	str.w	r9, [r0]
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	e7e4      	b.n	800ba0a <__pow5mult+0x6a>
 800ba40:	4638      	mov	r0, r7
 800ba42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba46:	bf00      	nop
 800ba48:	0800d3a8 	.word	0x0800d3a8
 800ba4c:	0800d14e 	.word	0x0800d14e
 800ba50:	0800d254 	.word	0x0800d254

0800ba54 <__lshift>:
 800ba54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba58:	460c      	mov	r4, r1
 800ba5a:	6849      	ldr	r1, [r1, #4]
 800ba5c:	6923      	ldr	r3, [r4, #16]
 800ba5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	4607      	mov	r7, r0
 800ba66:	4691      	mov	r9, r2
 800ba68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba6c:	f108 0601 	add.w	r6, r8, #1
 800ba70:	42b3      	cmp	r3, r6
 800ba72:	db0b      	blt.n	800ba8c <__lshift+0x38>
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7ff fd91 	bl	800b59c <_Balloc>
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	b948      	cbnz	r0, 800ba92 <__lshift+0x3e>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	4b28      	ldr	r3, [pc, #160]	; (800bb24 <__lshift+0xd0>)
 800ba82:	4829      	ldr	r0, [pc, #164]	; (800bb28 <__lshift+0xd4>)
 800ba84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba88:	f000 fc92 	bl	800c3b0 <__assert_func>
 800ba8c:	3101      	adds	r1, #1
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	e7ee      	b.n	800ba70 <__lshift+0x1c>
 800ba92:	2300      	movs	r3, #0
 800ba94:	f100 0114 	add.w	r1, r0, #20
 800ba98:	f100 0210 	add.w	r2, r0, #16
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	4553      	cmp	r3, sl
 800baa0:	db33      	blt.n	800bb0a <__lshift+0xb6>
 800baa2:	6920      	ldr	r0, [r4, #16]
 800baa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baa8:	f104 0314 	add.w	r3, r4, #20
 800baac:	f019 091f 	ands.w	r9, r9, #31
 800bab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bab8:	d02b      	beq.n	800bb12 <__lshift+0xbe>
 800baba:	f1c9 0e20 	rsb	lr, r9, #32
 800babe:	468a      	mov	sl, r1
 800bac0:	2200      	movs	r2, #0
 800bac2:	6818      	ldr	r0, [r3, #0]
 800bac4:	fa00 f009 	lsl.w	r0, r0, r9
 800bac8:	4302      	orrs	r2, r0
 800baca:	f84a 2b04 	str.w	r2, [sl], #4
 800bace:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad2:	459c      	cmp	ip, r3
 800bad4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bad8:	d8f3      	bhi.n	800bac2 <__lshift+0x6e>
 800bada:	ebac 0304 	sub.w	r3, ip, r4
 800bade:	3b15      	subs	r3, #21
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	3304      	adds	r3, #4
 800bae6:	f104 0015 	add.w	r0, r4, #21
 800baea:	4584      	cmp	ip, r0
 800baec:	bf38      	it	cc
 800baee:	2304      	movcc	r3, #4
 800baf0:	50ca      	str	r2, [r1, r3]
 800baf2:	b10a      	cbz	r2, 800baf8 <__lshift+0xa4>
 800baf4:	f108 0602 	add.w	r6, r8, #2
 800baf8:	3e01      	subs	r6, #1
 800bafa:	4638      	mov	r0, r7
 800bafc:	612e      	str	r6, [r5, #16]
 800bafe:	4621      	mov	r1, r4
 800bb00:	f7ff fd8c 	bl	800b61c <_Bfree>
 800bb04:	4628      	mov	r0, r5
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb0e:	3301      	adds	r3, #1
 800bb10:	e7c5      	b.n	800ba9e <__lshift+0x4a>
 800bb12:	3904      	subs	r1, #4
 800bb14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb18:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb1c:	459c      	cmp	ip, r3
 800bb1e:	d8f9      	bhi.n	800bb14 <__lshift+0xc0>
 800bb20:	e7ea      	b.n	800baf8 <__lshift+0xa4>
 800bb22:	bf00      	nop
 800bb24:	0800d1c4 	.word	0x0800d1c4
 800bb28:	0800d254 	.word	0x0800d254

0800bb2c <__mcmp>:
 800bb2c:	b530      	push	{r4, r5, lr}
 800bb2e:	6902      	ldr	r2, [r0, #16]
 800bb30:	690c      	ldr	r4, [r1, #16]
 800bb32:	1b12      	subs	r2, r2, r4
 800bb34:	d10e      	bne.n	800bb54 <__mcmp+0x28>
 800bb36:	f100 0314 	add.w	r3, r0, #20
 800bb3a:	3114      	adds	r1, #20
 800bb3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb4c:	42a5      	cmp	r5, r4
 800bb4e:	d003      	beq.n	800bb58 <__mcmp+0x2c>
 800bb50:	d305      	bcc.n	800bb5e <__mcmp+0x32>
 800bb52:	2201      	movs	r2, #1
 800bb54:	4610      	mov	r0, r2
 800bb56:	bd30      	pop	{r4, r5, pc}
 800bb58:	4283      	cmp	r3, r0
 800bb5a:	d3f3      	bcc.n	800bb44 <__mcmp+0x18>
 800bb5c:	e7fa      	b.n	800bb54 <__mcmp+0x28>
 800bb5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb62:	e7f7      	b.n	800bb54 <__mcmp+0x28>

0800bb64 <__mdiff>:
 800bb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4617      	mov	r7, r2
 800bb72:	f7ff ffdb 	bl	800bb2c <__mcmp>
 800bb76:	1e05      	subs	r5, r0, #0
 800bb78:	d110      	bne.n	800bb9c <__mdiff+0x38>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff fd0d 	bl	800b59c <_Balloc>
 800bb82:	b930      	cbnz	r0, 800bb92 <__mdiff+0x2e>
 800bb84:	4b39      	ldr	r3, [pc, #228]	; (800bc6c <__mdiff+0x108>)
 800bb86:	4602      	mov	r2, r0
 800bb88:	f240 2132 	movw	r1, #562	; 0x232
 800bb8c:	4838      	ldr	r0, [pc, #224]	; (800bc70 <__mdiff+0x10c>)
 800bb8e:	f000 fc0f 	bl	800c3b0 <__assert_func>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9c:	bfa4      	itt	ge
 800bb9e:	463b      	movge	r3, r7
 800bba0:	4627      	movge	r7, r4
 800bba2:	4630      	mov	r0, r6
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	bfa6      	itte	ge
 800bba8:	461c      	movge	r4, r3
 800bbaa:	2500      	movge	r5, #0
 800bbac:	2501      	movlt	r5, #1
 800bbae:	f7ff fcf5 	bl	800b59c <_Balloc>
 800bbb2:	b920      	cbnz	r0, 800bbbe <__mdiff+0x5a>
 800bbb4:	4b2d      	ldr	r3, [pc, #180]	; (800bc6c <__mdiff+0x108>)
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbbc:	e7e6      	b.n	800bb8c <__mdiff+0x28>
 800bbbe:	693e      	ldr	r6, [r7, #16]
 800bbc0:	60c5      	str	r5, [r0, #12]
 800bbc2:	6925      	ldr	r5, [r4, #16]
 800bbc4:	f107 0114 	add.w	r1, r7, #20
 800bbc8:	f104 0914 	add.w	r9, r4, #20
 800bbcc:	f100 0e14 	add.w	lr, r0, #20
 800bbd0:	f107 0210 	add.w	r2, r7, #16
 800bbd4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bbd8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bbdc:	46f2      	mov	sl, lr
 800bbde:	2700      	movs	r7, #0
 800bbe0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbe4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbe8:	fa1f f883 	uxth.w	r8, r3
 800bbec:	fa17 f78b 	uxtah	r7, r7, fp
 800bbf0:	0c1b      	lsrs	r3, r3, #16
 800bbf2:	eba7 0808 	sub.w	r8, r7, r8
 800bbf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbfe:	fa1f f888 	uxth.w	r8, r8
 800bc02:	141f      	asrs	r7, r3, #16
 800bc04:	454d      	cmp	r5, r9
 800bc06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc0a:	f84a 3b04 	str.w	r3, [sl], #4
 800bc0e:	d8e7      	bhi.n	800bbe0 <__mdiff+0x7c>
 800bc10:	1b2b      	subs	r3, r5, r4
 800bc12:	3b15      	subs	r3, #21
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	3304      	adds	r3, #4
 800bc1a:	3415      	adds	r4, #21
 800bc1c:	42a5      	cmp	r5, r4
 800bc1e:	bf38      	it	cc
 800bc20:	2304      	movcc	r3, #4
 800bc22:	4419      	add	r1, r3
 800bc24:	4473      	add	r3, lr
 800bc26:	469e      	mov	lr, r3
 800bc28:	460d      	mov	r5, r1
 800bc2a:	4565      	cmp	r5, ip
 800bc2c:	d30e      	bcc.n	800bc4c <__mdiff+0xe8>
 800bc2e:	f10c 0203 	add.w	r2, ip, #3
 800bc32:	1a52      	subs	r2, r2, r1
 800bc34:	f022 0203 	bic.w	r2, r2, #3
 800bc38:	3903      	subs	r1, #3
 800bc3a:	458c      	cmp	ip, r1
 800bc3c:	bf38      	it	cc
 800bc3e:	2200      	movcc	r2, #0
 800bc40:	441a      	add	r2, r3
 800bc42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc46:	b17b      	cbz	r3, 800bc68 <__mdiff+0x104>
 800bc48:	6106      	str	r6, [r0, #16]
 800bc4a:	e7a5      	b.n	800bb98 <__mdiff+0x34>
 800bc4c:	f855 8b04 	ldr.w	r8, [r5], #4
 800bc50:	fa17 f488 	uxtah	r4, r7, r8
 800bc54:	1422      	asrs	r2, r4, #16
 800bc56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bc5a:	b2a4      	uxth	r4, r4
 800bc5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bc60:	f84e 4b04 	str.w	r4, [lr], #4
 800bc64:	1417      	asrs	r7, r2, #16
 800bc66:	e7e0      	b.n	800bc2a <__mdiff+0xc6>
 800bc68:	3e01      	subs	r6, #1
 800bc6a:	e7ea      	b.n	800bc42 <__mdiff+0xde>
 800bc6c:	0800d1c4 	.word	0x0800d1c4
 800bc70:	0800d254 	.word	0x0800d254

0800bc74 <__ulp>:
 800bc74:	b082      	sub	sp, #8
 800bc76:	ed8d 0b00 	vstr	d0, [sp]
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	4912      	ldr	r1, [pc, #72]	; (800bcc8 <__ulp+0x54>)
 800bc7e:	4019      	ands	r1, r3
 800bc80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc84:	2900      	cmp	r1, #0
 800bc86:	dd05      	ble.n	800bc94 <__ulp+0x20>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	ec43 2b10 	vmov	d0, r2, r3
 800bc90:	b002      	add	sp, #8
 800bc92:	4770      	bx	lr
 800bc94:	4249      	negs	r1, r1
 800bc96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc9e:	f04f 0200 	mov.w	r2, #0
 800bca2:	f04f 0300 	mov.w	r3, #0
 800bca6:	da04      	bge.n	800bcb2 <__ulp+0x3e>
 800bca8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bcac:	fa41 f300 	asr.w	r3, r1, r0
 800bcb0:	e7ec      	b.n	800bc8c <__ulp+0x18>
 800bcb2:	f1a0 0114 	sub.w	r1, r0, #20
 800bcb6:	291e      	cmp	r1, #30
 800bcb8:	bfda      	itte	le
 800bcba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bcbe:	fa20 f101 	lsrle.w	r1, r0, r1
 800bcc2:	2101      	movgt	r1, #1
 800bcc4:	460a      	mov	r2, r1
 800bcc6:	e7e1      	b.n	800bc8c <__ulp+0x18>
 800bcc8:	7ff00000 	.word	0x7ff00000

0800bccc <__b2d>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	6905      	ldr	r5, [r0, #16]
 800bcd0:	f100 0714 	add.w	r7, r0, #20
 800bcd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bcd8:	1f2e      	subs	r6, r5, #4
 800bcda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7ff fd52 	bl	800b788 <__hi0bits>
 800bce4:	f1c0 0320 	rsb	r3, r0, #32
 800bce8:	280a      	cmp	r0, #10
 800bcea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd68 <__b2d+0x9c>
 800bcee:	600b      	str	r3, [r1, #0]
 800bcf0:	dc14      	bgt.n	800bd1c <__b2d+0x50>
 800bcf2:	f1c0 0e0b 	rsb	lr, r0, #11
 800bcf6:	fa24 f10e 	lsr.w	r1, r4, lr
 800bcfa:	42b7      	cmp	r7, r6
 800bcfc:	ea41 030c 	orr.w	r3, r1, ip
 800bd00:	bf34      	ite	cc
 800bd02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd06:	2100      	movcs	r1, #0
 800bd08:	3015      	adds	r0, #21
 800bd0a:	fa04 f000 	lsl.w	r0, r4, r0
 800bd0e:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd12:	ea40 0201 	orr.w	r2, r0, r1
 800bd16:	ec43 2b10 	vmov	d0, r2, r3
 800bd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd1c:	42b7      	cmp	r7, r6
 800bd1e:	bf3a      	itte	cc
 800bd20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd24:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd28:	2100      	movcs	r1, #0
 800bd2a:	380b      	subs	r0, #11
 800bd2c:	d017      	beq.n	800bd5e <__b2d+0x92>
 800bd2e:	f1c0 0c20 	rsb	ip, r0, #32
 800bd32:	fa04 f500 	lsl.w	r5, r4, r0
 800bd36:	42be      	cmp	r6, r7
 800bd38:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd3c:	ea45 0504 	orr.w	r5, r5, r4
 800bd40:	bf8c      	ite	hi
 800bd42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd46:	2400      	movls	r4, #0
 800bd48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd4c:	fa01 f000 	lsl.w	r0, r1, r0
 800bd50:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd58:	ea40 0204 	orr.w	r2, r0, r4
 800bd5c:	e7db      	b.n	800bd16 <__b2d+0x4a>
 800bd5e:	ea44 030c 	orr.w	r3, r4, ip
 800bd62:	460a      	mov	r2, r1
 800bd64:	e7d7      	b.n	800bd16 <__b2d+0x4a>
 800bd66:	bf00      	nop
 800bd68:	3ff00000 	.word	0x3ff00000

0800bd6c <__d2b>:
 800bd6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd70:	4689      	mov	r9, r1
 800bd72:	2101      	movs	r1, #1
 800bd74:	ec57 6b10 	vmov	r6, r7, d0
 800bd78:	4690      	mov	r8, r2
 800bd7a:	f7ff fc0f 	bl	800b59c <_Balloc>
 800bd7e:	4604      	mov	r4, r0
 800bd80:	b930      	cbnz	r0, 800bd90 <__d2b+0x24>
 800bd82:	4602      	mov	r2, r0
 800bd84:	4b25      	ldr	r3, [pc, #148]	; (800be1c <__d2b+0xb0>)
 800bd86:	4826      	ldr	r0, [pc, #152]	; (800be20 <__d2b+0xb4>)
 800bd88:	f240 310a 	movw	r1, #778	; 0x30a
 800bd8c:	f000 fb10 	bl	800c3b0 <__assert_func>
 800bd90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd98:	bb35      	cbnz	r5, 800bde8 <__d2b+0x7c>
 800bd9a:	2e00      	cmp	r6, #0
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	d028      	beq.n	800bdf2 <__d2b+0x86>
 800bda0:	4668      	mov	r0, sp
 800bda2:	9600      	str	r6, [sp, #0]
 800bda4:	f7ff fd10 	bl	800b7c8 <__lo0bits>
 800bda8:	9900      	ldr	r1, [sp, #0]
 800bdaa:	b300      	cbz	r0, 800bdee <__d2b+0x82>
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	f1c0 0320 	rsb	r3, r0, #32
 800bdb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb6:	430b      	orrs	r3, r1
 800bdb8:	40c2      	lsrs	r2, r0
 800bdba:	6163      	str	r3, [r4, #20]
 800bdbc:	9201      	str	r2, [sp, #4]
 800bdbe:	9b01      	ldr	r3, [sp, #4]
 800bdc0:	61a3      	str	r3, [r4, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bf14      	ite	ne
 800bdc6:	2202      	movne	r2, #2
 800bdc8:	2201      	moveq	r2, #1
 800bdca:	6122      	str	r2, [r4, #16]
 800bdcc:	b1d5      	cbz	r5, 800be04 <__d2b+0x98>
 800bdce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdd2:	4405      	add	r5, r0
 800bdd4:	f8c9 5000 	str.w	r5, [r9]
 800bdd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bddc:	f8c8 0000 	str.w	r0, [r8]
 800bde0:	4620      	mov	r0, r4
 800bde2:	b003      	add	sp, #12
 800bde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdec:	e7d5      	b.n	800bd9a <__d2b+0x2e>
 800bdee:	6161      	str	r1, [r4, #20]
 800bdf0:	e7e5      	b.n	800bdbe <__d2b+0x52>
 800bdf2:	a801      	add	r0, sp, #4
 800bdf4:	f7ff fce8 	bl	800b7c8 <__lo0bits>
 800bdf8:	9b01      	ldr	r3, [sp, #4]
 800bdfa:	6163      	str	r3, [r4, #20]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	6122      	str	r2, [r4, #16]
 800be00:	3020      	adds	r0, #32
 800be02:	e7e3      	b.n	800bdcc <__d2b+0x60>
 800be04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be0c:	f8c9 0000 	str.w	r0, [r9]
 800be10:	6918      	ldr	r0, [r3, #16]
 800be12:	f7ff fcb9 	bl	800b788 <__hi0bits>
 800be16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be1a:	e7df      	b.n	800bddc <__d2b+0x70>
 800be1c:	0800d1c4 	.word	0x0800d1c4
 800be20:	0800d254 	.word	0x0800d254

0800be24 <__ratio>:
 800be24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	468a      	mov	sl, r1
 800be2a:	4669      	mov	r1, sp
 800be2c:	4683      	mov	fp, r0
 800be2e:	f7ff ff4d 	bl	800bccc <__b2d>
 800be32:	a901      	add	r1, sp, #4
 800be34:	4650      	mov	r0, sl
 800be36:	ec59 8b10 	vmov	r8, r9, d0
 800be3a:	ee10 6a10 	vmov	r6, s0
 800be3e:	f7ff ff45 	bl	800bccc <__b2d>
 800be42:	f8db 3010 	ldr.w	r3, [fp, #16]
 800be46:	f8da 2010 	ldr.w	r2, [sl, #16]
 800be4a:	eba3 0c02 	sub.w	ip, r3, r2
 800be4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be58:	ec55 4b10 	vmov	r4, r5, d0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	ee10 0a10 	vmov	r0, s0
 800be62:	bfce      	itee	gt
 800be64:	464a      	movgt	r2, r9
 800be66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be6a:	462a      	movle	r2, r5
 800be6c:	464f      	mov	r7, r9
 800be6e:	4629      	mov	r1, r5
 800be70:	bfcc      	ite	gt
 800be72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be76:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800be7a:	ec47 6b17 	vmov	d7, r6, r7
 800be7e:	ec41 0b16 	vmov	d6, r0, r1
 800be82:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800be86:	b003      	add	sp, #12
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be8c <__copybits>:
 800be8c:	3901      	subs	r1, #1
 800be8e:	b570      	push	{r4, r5, r6, lr}
 800be90:	1149      	asrs	r1, r1, #5
 800be92:	6914      	ldr	r4, [r2, #16]
 800be94:	3101      	adds	r1, #1
 800be96:	f102 0314 	add.w	r3, r2, #20
 800be9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bea2:	1f05      	subs	r5, r0, #4
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	d30c      	bcc.n	800bec2 <__copybits+0x36>
 800bea8:	1aa3      	subs	r3, r4, r2
 800beaa:	3b11      	subs	r3, #17
 800beac:	f023 0303 	bic.w	r3, r3, #3
 800beb0:	3211      	adds	r2, #17
 800beb2:	42a2      	cmp	r2, r4
 800beb4:	bf88      	it	hi
 800beb6:	2300      	movhi	r3, #0
 800beb8:	4418      	add	r0, r3
 800beba:	2300      	movs	r3, #0
 800bebc:	4288      	cmp	r0, r1
 800bebe:	d305      	bcc.n	800becc <__copybits+0x40>
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	f853 6b04 	ldr.w	r6, [r3], #4
 800bec6:	f845 6f04 	str.w	r6, [r5, #4]!
 800beca:	e7eb      	b.n	800bea4 <__copybits+0x18>
 800becc:	f840 3b04 	str.w	r3, [r0], #4
 800bed0:	e7f4      	b.n	800bebc <__copybits+0x30>

0800bed2 <__any_on>:
 800bed2:	f100 0214 	add.w	r2, r0, #20
 800bed6:	6900      	ldr	r0, [r0, #16]
 800bed8:	114b      	asrs	r3, r1, #5
 800beda:	4298      	cmp	r0, r3
 800bedc:	b510      	push	{r4, lr}
 800bede:	db11      	blt.n	800bf04 <__any_on+0x32>
 800bee0:	dd0a      	ble.n	800bef8 <__any_on+0x26>
 800bee2:	f011 011f 	ands.w	r1, r1, #31
 800bee6:	d007      	beq.n	800bef8 <__any_on+0x26>
 800bee8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beec:	fa24 f001 	lsr.w	r0, r4, r1
 800bef0:	fa00 f101 	lsl.w	r1, r0, r1
 800bef4:	428c      	cmp	r4, r1
 800bef6:	d10b      	bne.n	800bf10 <__any_on+0x3e>
 800bef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800befc:	4293      	cmp	r3, r2
 800befe:	d803      	bhi.n	800bf08 <__any_on+0x36>
 800bf00:	2000      	movs	r0, #0
 800bf02:	bd10      	pop	{r4, pc}
 800bf04:	4603      	mov	r3, r0
 800bf06:	e7f7      	b.n	800bef8 <__any_on+0x26>
 800bf08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf0c:	2900      	cmp	r1, #0
 800bf0e:	d0f5      	beq.n	800befc <__any_on+0x2a>
 800bf10:	2001      	movs	r0, #1
 800bf12:	e7f6      	b.n	800bf02 <__any_on+0x30>

0800bf14 <_calloc_r>:
 800bf14:	b513      	push	{r0, r1, r4, lr}
 800bf16:	434a      	muls	r2, r1
 800bf18:	4611      	mov	r1, r2
 800bf1a:	9201      	str	r2, [sp, #4]
 800bf1c:	f000 f85a 	bl	800bfd4 <_malloc_r>
 800bf20:	4604      	mov	r4, r0
 800bf22:	b118      	cbz	r0, 800bf2c <_calloc_r+0x18>
 800bf24:	9a01      	ldr	r2, [sp, #4]
 800bf26:	2100      	movs	r1, #0
 800bf28:	f7fc fc9a 	bl	8008860 <memset>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	b002      	add	sp, #8
 800bf30:	bd10      	pop	{r4, pc}
	...

0800bf34 <_free_r>:
 800bf34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf36:	2900      	cmp	r1, #0
 800bf38:	d048      	beq.n	800bfcc <_free_r+0x98>
 800bf3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3e:	9001      	str	r0, [sp, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f1a1 0404 	sub.w	r4, r1, #4
 800bf46:	bfb8      	it	lt
 800bf48:	18e4      	addlt	r4, r4, r3
 800bf4a:	f000 fa7b 	bl	800c444 <__malloc_lock>
 800bf4e:	4a20      	ldr	r2, [pc, #128]	; (800bfd0 <_free_r+0x9c>)
 800bf50:	9801      	ldr	r0, [sp, #4]
 800bf52:	6813      	ldr	r3, [r2, #0]
 800bf54:	4615      	mov	r5, r2
 800bf56:	b933      	cbnz	r3, 800bf66 <_free_r+0x32>
 800bf58:	6063      	str	r3, [r4, #4]
 800bf5a:	6014      	str	r4, [r2, #0]
 800bf5c:	b003      	add	sp, #12
 800bf5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf62:	f000 ba75 	b.w	800c450 <__malloc_unlock>
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	d90b      	bls.n	800bf82 <_free_r+0x4e>
 800bf6a:	6821      	ldr	r1, [r4, #0]
 800bf6c:	1862      	adds	r2, r4, r1
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	bf04      	itt	eq
 800bf72:	681a      	ldreq	r2, [r3, #0]
 800bf74:	685b      	ldreq	r3, [r3, #4]
 800bf76:	6063      	str	r3, [r4, #4]
 800bf78:	bf04      	itt	eq
 800bf7a:	1852      	addeq	r2, r2, r1
 800bf7c:	6022      	streq	r2, [r4, #0]
 800bf7e:	602c      	str	r4, [r5, #0]
 800bf80:	e7ec      	b.n	800bf5c <_free_r+0x28>
 800bf82:	461a      	mov	r2, r3
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	b10b      	cbz	r3, 800bf8c <_free_r+0x58>
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d9fa      	bls.n	800bf82 <_free_r+0x4e>
 800bf8c:	6811      	ldr	r1, [r2, #0]
 800bf8e:	1855      	adds	r5, r2, r1
 800bf90:	42a5      	cmp	r5, r4
 800bf92:	d10b      	bne.n	800bfac <_free_r+0x78>
 800bf94:	6824      	ldr	r4, [r4, #0]
 800bf96:	4421      	add	r1, r4
 800bf98:	1854      	adds	r4, r2, r1
 800bf9a:	42a3      	cmp	r3, r4
 800bf9c:	6011      	str	r1, [r2, #0]
 800bf9e:	d1dd      	bne.n	800bf5c <_free_r+0x28>
 800bfa0:	681c      	ldr	r4, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	6053      	str	r3, [r2, #4]
 800bfa6:	4421      	add	r1, r4
 800bfa8:	6011      	str	r1, [r2, #0]
 800bfaa:	e7d7      	b.n	800bf5c <_free_r+0x28>
 800bfac:	d902      	bls.n	800bfb4 <_free_r+0x80>
 800bfae:	230c      	movs	r3, #12
 800bfb0:	6003      	str	r3, [r0, #0]
 800bfb2:	e7d3      	b.n	800bf5c <_free_r+0x28>
 800bfb4:	6825      	ldr	r5, [r4, #0]
 800bfb6:	1961      	adds	r1, r4, r5
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	bf04      	itt	eq
 800bfbc:	6819      	ldreq	r1, [r3, #0]
 800bfbe:	685b      	ldreq	r3, [r3, #4]
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	bf04      	itt	eq
 800bfc4:	1949      	addeq	r1, r1, r5
 800bfc6:	6021      	streq	r1, [r4, #0]
 800bfc8:	6054      	str	r4, [r2, #4]
 800bfca:	e7c7      	b.n	800bf5c <_free_r+0x28>
 800bfcc:	b003      	add	sp, #12
 800bfce:	bd30      	pop	{r4, r5, pc}
 800bfd0:	24000208 	.word	0x24000208

0800bfd4 <_malloc_r>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	1ccd      	adds	r5, r1, #3
 800bfd8:	f025 0503 	bic.w	r5, r5, #3
 800bfdc:	3508      	adds	r5, #8
 800bfde:	2d0c      	cmp	r5, #12
 800bfe0:	bf38      	it	cc
 800bfe2:	250c      	movcc	r5, #12
 800bfe4:	2d00      	cmp	r5, #0
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	db01      	blt.n	800bfee <_malloc_r+0x1a>
 800bfea:	42a9      	cmp	r1, r5
 800bfec:	d903      	bls.n	800bff6 <_malloc_r+0x22>
 800bfee:	230c      	movs	r3, #12
 800bff0:	6033      	str	r3, [r6, #0]
 800bff2:	2000      	movs	r0, #0
 800bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bff6:	f000 fa25 	bl	800c444 <__malloc_lock>
 800bffa:	4921      	ldr	r1, [pc, #132]	; (800c080 <_malloc_r+0xac>)
 800bffc:	680a      	ldr	r2, [r1, #0]
 800bffe:	4614      	mov	r4, r2
 800c000:	b99c      	cbnz	r4, 800c02a <_malloc_r+0x56>
 800c002:	4f20      	ldr	r7, [pc, #128]	; (800c084 <_malloc_r+0xb0>)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	b923      	cbnz	r3, 800c012 <_malloc_r+0x3e>
 800c008:	4621      	mov	r1, r4
 800c00a:	4630      	mov	r0, r6
 800c00c:	f000 f9a0 	bl	800c350 <_sbrk_r>
 800c010:	6038      	str	r0, [r7, #0]
 800c012:	4629      	mov	r1, r5
 800c014:	4630      	mov	r0, r6
 800c016:	f000 f99b 	bl	800c350 <_sbrk_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d123      	bne.n	800c066 <_malloc_r+0x92>
 800c01e:	230c      	movs	r3, #12
 800c020:	6033      	str	r3, [r6, #0]
 800c022:	4630      	mov	r0, r6
 800c024:	f000 fa14 	bl	800c450 <__malloc_unlock>
 800c028:	e7e3      	b.n	800bff2 <_malloc_r+0x1e>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	1b5b      	subs	r3, r3, r5
 800c02e:	d417      	bmi.n	800c060 <_malloc_r+0x8c>
 800c030:	2b0b      	cmp	r3, #11
 800c032:	d903      	bls.n	800c03c <_malloc_r+0x68>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	441c      	add	r4, r3
 800c038:	6025      	str	r5, [r4, #0]
 800c03a:	e004      	b.n	800c046 <_malloc_r+0x72>
 800c03c:	6863      	ldr	r3, [r4, #4]
 800c03e:	42a2      	cmp	r2, r4
 800c040:	bf0c      	ite	eq
 800c042:	600b      	streq	r3, [r1, #0]
 800c044:	6053      	strne	r3, [r2, #4]
 800c046:	4630      	mov	r0, r6
 800c048:	f000 fa02 	bl	800c450 <__malloc_unlock>
 800c04c:	f104 000b 	add.w	r0, r4, #11
 800c050:	1d23      	adds	r3, r4, #4
 800c052:	f020 0007 	bic.w	r0, r0, #7
 800c056:	1ac2      	subs	r2, r0, r3
 800c058:	d0cc      	beq.n	800bff4 <_malloc_r+0x20>
 800c05a:	1a1b      	subs	r3, r3, r0
 800c05c:	50a3      	str	r3, [r4, r2]
 800c05e:	e7c9      	b.n	800bff4 <_malloc_r+0x20>
 800c060:	4622      	mov	r2, r4
 800c062:	6864      	ldr	r4, [r4, #4]
 800c064:	e7cc      	b.n	800c000 <_malloc_r+0x2c>
 800c066:	1cc4      	adds	r4, r0, #3
 800c068:	f024 0403 	bic.w	r4, r4, #3
 800c06c:	42a0      	cmp	r0, r4
 800c06e:	d0e3      	beq.n	800c038 <_malloc_r+0x64>
 800c070:	1a21      	subs	r1, r4, r0
 800c072:	4630      	mov	r0, r6
 800c074:	f000 f96c 	bl	800c350 <_sbrk_r>
 800c078:	3001      	adds	r0, #1
 800c07a:	d1dd      	bne.n	800c038 <_malloc_r+0x64>
 800c07c:	e7cf      	b.n	800c01e <_malloc_r+0x4a>
 800c07e:	bf00      	nop
 800c080:	24000208 	.word	0x24000208
 800c084:	2400020c 	.word	0x2400020c

0800c088 <__ssputs_r>:
 800c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	688e      	ldr	r6, [r1, #8]
 800c08e:	429e      	cmp	r6, r3
 800c090:	4682      	mov	sl, r0
 800c092:	460c      	mov	r4, r1
 800c094:	4690      	mov	r8, r2
 800c096:	461f      	mov	r7, r3
 800c098:	d838      	bhi.n	800c10c <__ssputs_r+0x84>
 800c09a:	898a      	ldrh	r2, [r1, #12]
 800c09c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0a0:	d032      	beq.n	800c108 <__ssputs_r+0x80>
 800c0a2:	6825      	ldr	r5, [r4, #0]
 800c0a4:	6909      	ldr	r1, [r1, #16]
 800c0a6:	eba5 0901 	sub.w	r9, r5, r1
 800c0aa:	6965      	ldr	r5, [r4, #20]
 800c0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	444b      	add	r3, r9
 800c0b8:	106d      	asrs	r5, r5, #1
 800c0ba:	429d      	cmp	r5, r3
 800c0bc:	bf38      	it	cc
 800c0be:	461d      	movcc	r5, r3
 800c0c0:	0553      	lsls	r3, r2, #21
 800c0c2:	d531      	bpl.n	800c128 <__ssputs_r+0xa0>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7ff ff85 	bl	800bfd4 <_malloc_r>
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	b950      	cbnz	r0, 800c0e4 <__ssputs_r+0x5c>
 800c0ce:	230c      	movs	r3, #12
 800c0d0:	f8ca 3000 	str.w	r3, [sl]
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	6921      	ldr	r1, [r4, #16]
 800c0e6:	464a      	mov	r2, r9
 800c0e8:	f7ff fa4a 	bl	800b580 <memcpy>
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f6:	81a3      	strh	r3, [r4, #12]
 800c0f8:	6126      	str	r6, [r4, #16]
 800c0fa:	6165      	str	r5, [r4, #20]
 800c0fc:	444e      	add	r6, r9
 800c0fe:	eba5 0509 	sub.w	r5, r5, r9
 800c102:	6026      	str	r6, [r4, #0]
 800c104:	60a5      	str	r5, [r4, #8]
 800c106:	463e      	mov	r6, r7
 800c108:	42be      	cmp	r6, r7
 800c10a:	d900      	bls.n	800c10e <__ssputs_r+0x86>
 800c10c:	463e      	mov	r6, r7
 800c10e:	4632      	mov	r2, r6
 800c110:	6820      	ldr	r0, [r4, #0]
 800c112:	4641      	mov	r1, r8
 800c114:	f000 f97c 	bl	800c410 <memmove>
 800c118:	68a3      	ldr	r3, [r4, #8]
 800c11a:	6822      	ldr	r2, [r4, #0]
 800c11c:	1b9b      	subs	r3, r3, r6
 800c11e:	4432      	add	r2, r6
 800c120:	60a3      	str	r3, [r4, #8]
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	2000      	movs	r0, #0
 800c126:	e7db      	b.n	800c0e0 <__ssputs_r+0x58>
 800c128:	462a      	mov	r2, r5
 800c12a:	f000 f997 	bl	800c45c <_realloc_r>
 800c12e:	4606      	mov	r6, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d1e1      	bne.n	800c0f8 <__ssputs_r+0x70>
 800c134:	6921      	ldr	r1, [r4, #16]
 800c136:	4650      	mov	r0, sl
 800c138:	f7ff fefc 	bl	800bf34 <_free_r>
 800c13c:	e7c7      	b.n	800c0ce <__ssputs_r+0x46>
	...

0800c140 <_svfiprintf_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	4698      	mov	r8, r3
 800c146:	898b      	ldrh	r3, [r1, #12]
 800c148:	061b      	lsls	r3, r3, #24
 800c14a:	b09d      	sub	sp, #116	; 0x74
 800c14c:	4607      	mov	r7, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	4614      	mov	r4, r2
 800c152:	d50e      	bpl.n	800c172 <_svfiprintf_r+0x32>
 800c154:	690b      	ldr	r3, [r1, #16]
 800c156:	b963      	cbnz	r3, 800c172 <_svfiprintf_r+0x32>
 800c158:	2140      	movs	r1, #64	; 0x40
 800c15a:	f7ff ff3b 	bl	800bfd4 <_malloc_r>
 800c15e:	6028      	str	r0, [r5, #0]
 800c160:	6128      	str	r0, [r5, #16]
 800c162:	b920      	cbnz	r0, 800c16e <_svfiprintf_r+0x2e>
 800c164:	230c      	movs	r3, #12
 800c166:	603b      	str	r3, [r7, #0]
 800c168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c16c:	e0d1      	b.n	800c312 <_svfiprintf_r+0x1d2>
 800c16e:	2340      	movs	r3, #64	; 0x40
 800c170:	616b      	str	r3, [r5, #20]
 800c172:	2300      	movs	r3, #0
 800c174:	9309      	str	r3, [sp, #36]	; 0x24
 800c176:	2320      	movs	r3, #32
 800c178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c17c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c180:	2330      	movs	r3, #48	; 0x30
 800c182:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c32c <_svfiprintf_r+0x1ec>
 800c186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c18a:	f04f 0901 	mov.w	r9, #1
 800c18e:	4623      	mov	r3, r4
 800c190:	469a      	mov	sl, r3
 800c192:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c196:	b10a      	cbz	r2, 800c19c <_svfiprintf_r+0x5c>
 800c198:	2a25      	cmp	r2, #37	; 0x25
 800c19a:	d1f9      	bne.n	800c190 <_svfiprintf_r+0x50>
 800c19c:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a0:	d00b      	beq.n	800c1ba <_svfiprintf_r+0x7a>
 800c1a2:	465b      	mov	r3, fp
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff ff6d 	bl	800c088 <__ssputs_r>
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	f000 80aa 	beq.w	800c308 <_svfiprintf_r+0x1c8>
 800c1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1b6:	445a      	add	r2, fp
 800c1b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 80a2 	beq.w	800c308 <_svfiprintf_r+0x1c8>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ce:	f10a 0a01 	add.w	sl, sl, #1
 800c1d2:	9304      	str	r3, [sp, #16]
 800c1d4:	9307      	str	r3, [sp, #28]
 800c1d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1da:	931a      	str	r3, [sp, #104]	; 0x68
 800c1dc:	4654      	mov	r4, sl
 800c1de:	2205      	movs	r2, #5
 800c1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e4:	4851      	ldr	r0, [pc, #324]	; (800c32c <_svfiprintf_r+0x1ec>)
 800c1e6:	f7f4 f883 	bl	80002f0 <memchr>
 800c1ea:	9a04      	ldr	r2, [sp, #16]
 800c1ec:	b9d8      	cbnz	r0, 800c226 <_svfiprintf_r+0xe6>
 800c1ee:	06d0      	lsls	r0, r2, #27
 800c1f0:	bf44      	itt	mi
 800c1f2:	2320      	movmi	r3, #32
 800c1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1f8:	0711      	lsls	r1, r2, #28
 800c1fa:	bf44      	itt	mi
 800c1fc:	232b      	movmi	r3, #43	; 0x2b
 800c1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c202:	f89a 3000 	ldrb.w	r3, [sl]
 800c206:	2b2a      	cmp	r3, #42	; 0x2a
 800c208:	d015      	beq.n	800c236 <_svfiprintf_r+0xf6>
 800c20a:	9a07      	ldr	r2, [sp, #28]
 800c20c:	4654      	mov	r4, sl
 800c20e:	2000      	movs	r0, #0
 800c210:	f04f 0c0a 	mov.w	ip, #10
 800c214:	4621      	mov	r1, r4
 800c216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c21a:	3b30      	subs	r3, #48	; 0x30
 800c21c:	2b09      	cmp	r3, #9
 800c21e:	d94e      	bls.n	800c2be <_svfiprintf_r+0x17e>
 800c220:	b1b0      	cbz	r0, 800c250 <_svfiprintf_r+0x110>
 800c222:	9207      	str	r2, [sp, #28]
 800c224:	e014      	b.n	800c250 <_svfiprintf_r+0x110>
 800c226:	eba0 0308 	sub.w	r3, r0, r8
 800c22a:	fa09 f303 	lsl.w	r3, r9, r3
 800c22e:	4313      	orrs	r3, r2
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	46a2      	mov	sl, r4
 800c234:	e7d2      	b.n	800c1dc <_svfiprintf_r+0x9c>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	1d19      	adds	r1, r3, #4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	9103      	str	r1, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	bfbb      	ittet	lt
 800c242:	425b      	neglt	r3, r3
 800c244:	f042 0202 	orrlt.w	r2, r2, #2
 800c248:	9307      	strge	r3, [sp, #28]
 800c24a:	9307      	strlt	r3, [sp, #28]
 800c24c:	bfb8      	it	lt
 800c24e:	9204      	strlt	r2, [sp, #16]
 800c250:	7823      	ldrb	r3, [r4, #0]
 800c252:	2b2e      	cmp	r3, #46	; 0x2e
 800c254:	d10c      	bne.n	800c270 <_svfiprintf_r+0x130>
 800c256:	7863      	ldrb	r3, [r4, #1]
 800c258:	2b2a      	cmp	r3, #42	; 0x2a
 800c25a:	d135      	bne.n	800c2c8 <_svfiprintf_r+0x188>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	1d1a      	adds	r2, r3, #4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	9203      	str	r2, [sp, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	bfb8      	it	lt
 800c268:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c26c:	3402      	adds	r4, #2
 800c26e:	9305      	str	r3, [sp, #20]
 800c270:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c33c <_svfiprintf_r+0x1fc>
 800c274:	7821      	ldrb	r1, [r4, #0]
 800c276:	2203      	movs	r2, #3
 800c278:	4650      	mov	r0, sl
 800c27a:	f7f4 f839 	bl	80002f0 <memchr>
 800c27e:	b140      	cbz	r0, 800c292 <_svfiprintf_r+0x152>
 800c280:	2340      	movs	r3, #64	; 0x40
 800c282:	eba0 000a 	sub.w	r0, r0, sl
 800c286:	fa03 f000 	lsl.w	r0, r3, r0
 800c28a:	9b04      	ldr	r3, [sp, #16]
 800c28c:	4303      	orrs	r3, r0
 800c28e:	3401      	adds	r4, #1
 800c290:	9304      	str	r3, [sp, #16]
 800c292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c296:	4826      	ldr	r0, [pc, #152]	; (800c330 <_svfiprintf_r+0x1f0>)
 800c298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c29c:	2206      	movs	r2, #6
 800c29e:	f7f4 f827 	bl	80002f0 <memchr>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d038      	beq.n	800c318 <_svfiprintf_r+0x1d8>
 800c2a6:	4b23      	ldr	r3, [pc, #140]	; (800c334 <_svfiprintf_r+0x1f4>)
 800c2a8:	bb1b      	cbnz	r3, 800c2f2 <_svfiprintf_r+0x1b2>
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	3307      	adds	r3, #7
 800c2ae:	f023 0307 	bic.w	r3, r3, #7
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	9303      	str	r3, [sp, #12]
 800c2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b8:	4433      	add	r3, r6
 800c2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c2bc:	e767      	b.n	800c18e <_svfiprintf_r+0x4e>
 800c2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	e7a5      	b.n	800c214 <_svfiprintf_r+0xd4>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	3401      	adds	r4, #1
 800c2cc:	9305      	str	r3, [sp, #20]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	f04f 0c0a 	mov.w	ip, #10
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2da:	3a30      	subs	r2, #48	; 0x30
 800c2dc:	2a09      	cmp	r2, #9
 800c2de:	d903      	bls.n	800c2e8 <_svfiprintf_r+0x1a8>
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d0c5      	beq.n	800c270 <_svfiprintf_r+0x130>
 800c2e4:	9105      	str	r1, [sp, #20]
 800c2e6:	e7c3      	b.n	800c270 <_svfiprintf_r+0x130>
 800c2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e7f0      	b.n	800c2d4 <_svfiprintf_r+0x194>
 800c2f2:	ab03      	add	r3, sp, #12
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	462a      	mov	r2, r5
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <_svfiprintf_r+0x1f8>)
 800c2fa:	a904      	add	r1, sp, #16
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7fc fb47 	bl	8008990 <_printf_float>
 800c302:	1c42      	adds	r2, r0, #1
 800c304:	4606      	mov	r6, r0
 800c306:	d1d6      	bne.n	800c2b6 <_svfiprintf_r+0x176>
 800c308:	89ab      	ldrh	r3, [r5, #12]
 800c30a:	065b      	lsls	r3, r3, #25
 800c30c:	f53f af2c 	bmi.w	800c168 <_svfiprintf_r+0x28>
 800c310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c312:	b01d      	add	sp, #116	; 0x74
 800c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c318:	ab03      	add	r3, sp, #12
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	462a      	mov	r2, r5
 800c31e:	4b06      	ldr	r3, [pc, #24]	; (800c338 <_svfiprintf_r+0x1f8>)
 800c320:	a904      	add	r1, sp, #16
 800c322:	4638      	mov	r0, r7
 800c324:	f7fc fdc0 	bl	8008ea8 <_printf_i>
 800c328:	e7eb      	b.n	800c302 <_svfiprintf_r+0x1c2>
 800c32a:	bf00      	nop
 800c32c:	0800d3b4 	.word	0x0800d3b4
 800c330:	0800d3be 	.word	0x0800d3be
 800c334:	08008991 	.word	0x08008991
 800c338:	0800c089 	.word	0x0800c089
 800c33c:	0800d3ba 	.word	0x0800d3ba

0800c340 <nan>:
 800c340:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c348 <nan+0x8>
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	00000000 	.word	0x00000000
 800c34c:	7ff80000 	.word	0x7ff80000

0800c350 <_sbrk_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_sbrk_r+0x1c>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	f7f5 fbd4 	bl	8001b08 <_sbrk>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_sbrk_r+0x1a>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_sbrk_r+0x1a>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	24000460 	.word	0x24000460

0800c370 <strncmp>:
 800c370:	b510      	push	{r4, lr}
 800c372:	b16a      	cbz	r2, 800c390 <strncmp+0x20>
 800c374:	3901      	subs	r1, #1
 800c376:	1884      	adds	r4, r0, r2
 800c378:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c37c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c380:	4293      	cmp	r3, r2
 800c382:	d103      	bne.n	800c38c <strncmp+0x1c>
 800c384:	42a0      	cmp	r0, r4
 800c386:	d001      	beq.n	800c38c <strncmp+0x1c>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f5      	bne.n	800c378 <strncmp+0x8>
 800c38c:	1a98      	subs	r0, r3, r2
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	4610      	mov	r0, r2
 800c392:	e7fc      	b.n	800c38e <strncmp+0x1e>

0800c394 <__ascii_wctomb>:
 800c394:	b149      	cbz	r1, 800c3aa <__ascii_wctomb+0x16>
 800c396:	2aff      	cmp	r2, #255	; 0xff
 800c398:	bf85      	ittet	hi
 800c39a:	238a      	movhi	r3, #138	; 0x8a
 800c39c:	6003      	strhi	r3, [r0, #0]
 800c39e:	700a      	strbls	r2, [r1, #0]
 800c3a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c3a4:	bf98      	it	ls
 800c3a6:	2001      	movls	r0, #1
 800c3a8:	4770      	bx	lr
 800c3aa:	4608      	mov	r0, r1
 800c3ac:	4770      	bx	lr
	...

0800c3b0 <__assert_func>:
 800c3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3b2:	4614      	mov	r4, r2
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <__assert_func+0x2c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	68d8      	ldr	r0, [r3, #12]
 800c3be:	b14c      	cbz	r4, 800c3d4 <__assert_func+0x24>
 800c3c0:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <__assert_func+0x30>)
 800c3c2:	9100      	str	r1, [sp, #0]
 800c3c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3c8:	4906      	ldr	r1, [pc, #24]	; (800c3e4 <__assert_func+0x34>)
 800c3ca:	462b      	mov	r3, r5
 800c3cc:	f000 f80e 	bl	800c3ec <fiprintf>
 800c3d0:	f000 fa84 	bl	800c8dc <abort>
 800c3d4:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <__assert_func+0x38>)
 800c3d6:	461c      	mov	r4, r3
 800c3d8:	e7f3      	b.n	800c3c2 <__assert_func+0x12>
 800c3da:	bf00      	nop
 800c3dc:	24000010 	.word	0x24000010
 800c3e0:	0800d3c5 	.word	0x0800d3c5
 800c3e4:	0800d3d2 	.word	0x0800d3d2
 800c3e8:	0800d400 	.word	0x0800d400

0800c3ec <fiprintf>:
 800c3ec:	b40e      	push	{r1, r2, r3}
 800c3ee:	b503      	push	{r0, r1, lr}
 800c3f0:	4601      	mov	r1, r0
 800c3f2:	ab03      	add	r3, sp, #12
 800c3f4:	4805      	ldr	r0, [pc, #20]	; (800c40c <fiprintf+0x20>)
 800c3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3fa:	6800      	ldr	r0, [r0, #0]
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	f000 f87d 	bl	800c4fc <_vfiprintf_r>
 800c402:	b002      	add	sp, #8
 800c404:	f85d eb04 	ldr.w	lr, [sp], #4
 800c408:	b003      	add	sp, #12
 800c40a:	4770      	bx	lr
 800c40c:	24000010 	.word	0x24000010

0800c410 <memmove>:
 800c410:	4288      	cmp	r0, r1
 800c412:	b510      	push	{r4, lr}
 800c414:	eb01 0402 	add.w	r4, r1, r2
 800c418:	d902      	bls.n	800c420 <memmove+0x10>
 800c41a:	4284      	cmp	r4, r0
 800c41c:	4623      	mov	r3, r4
 800c41e:	d807      	bhi.n	800c430 <memmove+0x20>
 800c420:	1e43      	subs	r3, r0, #1
 800c422:	42a1      	cmp	r1, r4
 800c424:	d008      	beq.n	800c438 <memmove+0x28>
 800c426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c42a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c42e:	e7f8      	b.n	800c422 <memmove+0x12>
 800c430:	4402      	add	r2, r0
 800c432:	4601      	mov	r1, r0
 800c434:	428a      	cmp	r2, r1
 800c436:	d100      	bne.n	800c43a <memmove+0x2a>
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c43e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c442:	e7f7      	b.n	800c434 <memmove+0x24>

0800c444 <__malloc_lock>:
 800c444:	4801      	ldr	r0, [pc, #4]	; (800c44c <__malloc_lock+0x8>)
 800c446:	f000 bc09 	b.w	800cc5c <__retarget_lock_acquire_recursive>
 800c44a:	bf00      	nop
 800c44c:	24000468 	.word	0x24000468

0800c450 <__malloc_unlock>:
 800c450:	4801      	ldr	r0, [pc, #4]	; (800c458 <__malloc_unlock+0x8>)
 800c452:	f000 bc04 	b.w	800cc5e <__retarget_lock_release_recursive>
 800c456:	bf00      	nop
 800c458:	24000468 	.word	0x24000468

0800c45c <_realloc_r>:
 800c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45e:	4607      	mov	r7, r0
 800c460:	4614      	mov	r4, r2
 800c462:	460e      	mov	r6, r1
 800c464:	b921      	cbnz	r1, 800c470 <_realloc_r+0x14>
 800c466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c46a:	4611      	mov	r1, r2
 800c46c:	f7ff bdb2 	b.w	800bfd4 <_malloc_r>
 800c470:	b922      	cbnz	r2, 800c47c <_realloc_r+0x20>
 800c472:	f7ff fd5f 	bl	800bf34 <_free_r>
 800c476:	4625      	mov	r5, r4
 800c478:	4628      	mov	r0, r5
 800c47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c47c:	f000 fc54 	bl	800cd28 <_malloc_usable_size_r>
 800c480:	42a0      	cmp	r0, r4
 800c482:	d20f      	bcs.n	800c4a4 <_realloc_r+0x48>
 800c484:	4621      	mov	r1, r4
 800c486:	4638      	mov	r0, r7
 800c488:	f7ff fda4 	bl	800bfd4 <_malloc_r>
 800c48c:	4605      	mov	r5, r0
 800c48e:	2800      	cmp	r0, #0
 800c490:	d0f2      	beq.n	800c478 <_realloc_r+0x1c>
 800c492:	4631      	mov	r1, r6
 800c494:	4622      	mov	r2, r4
 800c496:	f7ff f873 	bl	800b580 <memcpy>
 800c49a:	4631      	mov	r1, r6
 800c49c:	4638      	mov	r0, r7
 800c49e:	f7ff fd49 	bl	800bf34 <_free_r>
 800c4a2:	e7e9      	b.n	800c478 <_realloc_r+0x1c>
 800c4a4:	4635      	mov	r5, r6
 800c4a6:	e7e7      	b.n	800c478 <_realloc_r+0x1c>

0800c4a8 <__sfputc_r>:
 800c4a8:	6893      	ldr	r3, [r2, #8]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	b410      	push	{r4}
 800c4b0:	6093      	str	r3, [r2, #8]
 800c4b2:	da08      	bge.n	800c4c6 <__sfputc_r+0x1e>
 800c4b4:	6994      	ldr	r4, [r2, #24]
 800c4b6:	42a3      	cmp	r3, r4
 800c4b8:	db01      	blt.n	800c4be <__sfputc_r+0x16>
 800c4ba:	290a      	cmp	r1, #10
 800c4bc:	d103      	bne.n	800c4c6 <__sfputc_r+0x1e>
 800c4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c2:	f000 b94b 	b.w	800c75c <__swbuf_r>
 800c4c6:	6813      	ldr	r3, [r2, #0]
 800c4c8:	1c58      	adds	r0, r3, #1
 800c4ca:	6010      	str	r0, [r2, #0]
 800c4cc:	7019      	strb	r1, [r3, #0]
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <__sfputs_r>:
 800c4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d8:	4606      	mov	r6, r0
 800c4da:	460f      	mov	r7, r1
 800c4dc:	4614      	mov	r4, r2
 800c4de:	18d5      	adds	r5, r2, r3
 800c4e0:	42ac      	cmp	r4, r5
 800c4e2:	d101      	bne.n	800c4e8 <__sfputs_r+0x12>
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e007      	b.n	800c4f8 <__sfputs_r+0x22>
 800c4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ec:	463a      	mov	r2, r7
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7ff ffda 	bl	800c4a8 <__sfputc_r>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d1f3      	bne.n	800c4e0 <__sfputs_r+0xa>
 800c4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4fc <_vfiprintf_r>:
 800c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c500:	460d      	mov	r5, r1
 800c502:	b09d      	sub	sp, #116	; 0x74
 800c504:	4614      	mov	r4, r2
 800c506:	4698      	mov	r8, r3
 800c508:	4606      	mov	r6, r0
 800c50a:	b118      	cbz	r0, 800c514 <_vfiprintf_r+0x18>
 800c50c:	6983      	ldr	r3, [r0, #24]
 800c50e:	b90b      	cbnz	r3, 800c514 <_vfiprintf_r+0x18>
 800c510:	f000 fb06 	bl	800cb20 <__sinit>
 800c514:	4b89      	ldr	r3, [pc, #548]	; (800c73c <_vfiprintf_r+0x240>)
 800c516:	429d      	cmp	r5, r3
 800c518:	d11b      	bne.n	800c552 <_vfiprintf_r+0x56>
 800c51a:	6875      	ldr	r5, [r6, #4]
 800c51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c51e:	07d9      	lsls	r1, r3, #31
 800c520:	d405      	bmi.n	800c52e <_vfiprintf_r+0x32>
 800c522:	89ab      	ldrh	r3, [r5, #12]
 800c524:	059a      	lsls	r2, r3, #22
 800c526:	d402      	bmi.n	800c52e <_vfiprintf_r+0x32>
 800c528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c52a:	f000 fb97 	bl	800cc5c <__retarget_lock_acquire_recursive>
 800c52e:	89ab      	ldrh	r3, [r5, #12]
 800c530:	071b      	lsls	r3, r3, #28
 800c532:	d501      	bpl.n	800c538 <_vfiprintf_r+0x3c>
 800c534:	692b      	ldr	r3, [r5, #16]
 800c536:	b9eb      	cbnz	r3, 800c574 <_vfiprintf_r+0x78>
 800c538:	4629      	mov	r1, r5
 800c53a:	4630      	mov	r0, r6
 800c53c:	f000 f960 	bl	800c800 <__swsetup_r>
 800c540:	b1c0      	cbz	r0, 800c574 <_vfiprintf_r+0x78>
 800c542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c544:	07dc      	lsls	r4, r3, #31
 800c546:	d50e      	bpl.n	800c566 <_vfiprintf_r+0x6a>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c54c:	b01d      	add	sp, #116	; 0x74
 800c54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c552:	4b7b      	ldr	r3, [pc, #492]	; (800c740 <_vfiprintf_r+0x244>)
 800c554:	429d      	cmp	r5, r3
 800c556:	d101      	bne.n	800c55c <_vfiprintf_r+0x60>
 800c558:	68b5      	ldr	r5, [r6, #8]
 800c55a:	e7df      	b.n	800c51c <_vfiprintf_r+0x20>
 800c55c:	4b79      	ldr	r3, [pc, #484]	; (800c744 <_vfiprintf_r+0x248>)
 800c55e:	429d      	cmp	r5, r3
 800c560:	bf08      	it	eq
 800c562:	68f5      	ldreq	r5, [r6, #12]
 800c564:	e7da      	b.n	800c51c <_vfiprintf_r+0x20>
 800c566:	89ab      	ldrh	r3, [r5, #12]
 800c568:	0598      	lsls	r0, r3, #22
 800c56a:	d4ed      	bmi.n	800c548 <_vfiprintf_r+0x4c>
 800c56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c56e:	f000 fb76 	bl	800cc5e <__retarget_lock_release_recursive>
 800c572:	e7e9      	b.n	800c548 <_vfiprintf_r+0x4c>
 800c574:	2300      	movs	r3, #0
 800c576:	9309      	str	r3, [sp, #36]	; 0x24
 800c578:	2320      	movs	r3, #32
 800c57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c582:	2330      	movs	r3, #48	; 0x30
 800c584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c748 <_vfiprintf_r+0x24c>
 800c588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58c:	f04f 0901 	mov.w	r9, #1
 800c590:	4623      	mov	r3, r4
 800c592:	469a      	mov	sl, r3
 800c594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c598:	b10a      	cbz	r2, 800c59e <_vfiprintf_r+0xa2>
 800c59a:	2a25      	cmp	r2, #37	; 0x25
 800c59c:	d1f9      	bne.n	800c592 <_vfiprintf_r+0x96>
 800c59e:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a2:	d00b      	beq.n	800c5bc <_vfiprintf_r+0xc0>
 800c5a4:	465b      	mov	r3, fp
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7ff ff93 	bl	800c4d6 <__sfputs_r>
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	f000 80aa 	beq.w	800c70a <_vfiprintf_r+0x20e>
 800c5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b8:	445a      	add	r2, fp
 800c5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 80a2 	beq.w	800c70a <_vfiprintf_r+0x20e>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5d0:	f10a 0a01 	add.w	sl, sl, #1
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	9307      	str	r3, [sp, #28]
 800c5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800c5de:	4654      	mov	r4, sl
 800c5e0:	2205      	movs	r2, #5
 800c5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e6:	4858      	ldr	r0, [pc, #352]	; (800c748 <_vfiprintf_r+0x24c>)
 800c5e8:	f7f3 fe82 	bl	80002f0 <memchr>
 800c5ec:	9a04      	ldr	r2, [sp, #16]
 800c5ee:	b9d8      	cbnz	r0, 800c628 <_vfiprintf_r+0x12c>
 800c5f0:	06d1      	lsls	r1, r2, #27
 800c5f2:	bf44      	itt	mi
 800c5f4:	2320      	movmi	r3, #32
 800c5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5fa:	0713      	lsls	r3, r2, #28
 800c5fc:	bf44      	itt	mi
 800c5fe:	232b      	movmi	r3, #43	; 0x2b
 800c600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c604:	f89a 3000 	ldrb.w	r3, [sl]
 800c608:	2b2a      	cmp	r3, #42	; 0x2a
 800c60a:	d015      	beq.n	800c638 <_vfiprintf_r+0x13c>
 800c60c:	9a07      	ldr	r2, [sp, #28]
 800c60e:	4654      	mov	r4, sl
 800c610:	2000      	movs	r0, #0
 800c612:	f04f 0c0a 	mov.w	ip, #10
 800c616:	4621      	mov	r1, r4
 800c618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c61c:	3b30      	subs	r3, #48	; 0x30
 800c61e:	2b09      	cmp	r3, #9
 800c620:	d94e      	bls.n	800c6c0 <_vfiprintf_r+0x1c4>
 800c622:	b1b0      	cbz	r0, 800c652 <_vfiprintf_r+0x156>
 800c624:	9207      	str	r2, [sp, #28]
 800c626:	e014      	b.n	800c652 <_vfiprintf_r+0x156>
 800c628:	eba0 0308 	sub.w	r3, r0, r8
 800c62c:	fa09 f303 	lsl.w	r3, r9, r3
 800c630:	4313      	orrs	r3, r2
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	46a2      	mov	sl, r4
 800c636:	e7d2      	b.n	800c5de <_vfiprintf_r+0xe2>
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	1d19      	adds	r1, r3, #4
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	9103      	str	r1, [sp, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	bfbb      	ittet	lt
 800c644:	425b      	neglt	r3, r3
 800c646:	f042 0202 	orrlt.w	r2, r2, #2
 800c64a:	9307      	strge	r3, [sp, #28]
 800c64c:	9307      	strlt	r3, [sp, #28]
 800c64e:	bfb8      	it	lt
 800c650:	9204      	strlt	r2, [sp, #16]
 800c652:	7823      	ldrb	r3, [r4, #0]
 800c654:	2b2e      	cmp	r3, #46	; 0x2e
 800c656:	d10c      	bne.n	800c672 <_vfiprintf_r+0x176>
 800c658:	7863      	ldrb	r3, [r4, #1]
 800c65a:	2b2a      	cmp	r3, #42	; 0x2a
 800c65c:	d135      	bne.n	800c6ca <_vfiprintf_r+0x1ce>
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	1d1a      	adds	r2, r3, #4
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	9203      	str	r2, [sp, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	bfb8      	it	lt
 800c66a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c66e:	3402      	adds	r4, #2
 800c670:	9305      	str	r3, [sp, #20]
 800c672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c758 <_vfiprintf_r+0x25c>
 800c676:	7821      	ldrb	r1, [r4, #0]
 800c678:	2203      	movs	r2, #3
 800c67a:	4650      	mov	r0, sl
 800c67c:	f7f3 fe38 	bl	80002f0 <memchr>
 800c680:	b140      	cbz	r0, 800c694 <_vfiprintf_r+0x198>
 800c682:	2340      	movs	r3, #64	; 0x40
 800c684:	eba0 000a 	sub.w	r0, r0, sl
 800c688:	fa03 f000 	lsl.w	r0, r3, r0
 800c68c:	9b04      	ldr	r3, [sp, #16]
 800c68e:	4303      	orrs	r3, r0
 800c690:	3401      	adds	r4, #1
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c698:	482c      	ldr	r0, [pc, #176]	; (800c74c <_vfiprintf_r+0x250>)
 800c69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69e:	2206      	movs	r2, #6
 800c6a0:	f7f3 fe26 	bl	80002f0 <memchr>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d03f      	beq.n	800c728 <_vfiprintf_r+0x22c>
 800c6a8:	4b29      	ldr	r3, [pc, #164]	; (800c750 <_vfiprintf_r+0x254>)
 800c6aa:	bb1b      	cbnz	r3, 800c6f4 <_vfiprintf_r+0x1f8>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	3307      	adds	r3, #7
 800c6b0:	f023 0307 	bic.w	r3, r3, #7
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	9303      	str	r3, [sp, #12]
 800c6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ba:	443b      	add	r3, r7
 800c6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6be:	e767      	b.n	800c590 <_vfiprintf_r+0x94>
 800c6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	e7a5      	b.n	800c616 <_vfiprintf_r+0x11a>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f04f 0c0a 	mov.w	ip, #10
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6dc:	3a30      	subs	r2, #48	; 0x30
 800c6de:	2a09      	cmp	r2, #9
 800c6e0:	d903      	bls.n	800c6ea <_vfiprintf_r+0x1ee>
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0c5      	beq.n	800c672 <_vfiprintf_r+0x176>
 800c6e6:	9105      	str	r1, [sp, #20]
 800c6e8:	e7c3      	b.n	800c672 <_vfiprintf_r+0x176>
 800c6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e7f0      	b.n	800c6d6 <_vfiprintf_r+0x1da>
 800c6f4:	ab03      	add	r3, sp, #12
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	462a      	mov	r2, r5
 800c6fa:	4b16      	ldr	r3, [pc, #88]	; (800c754 <_vfiprintf_r+0x258>)
 800c6fc:	a904      	add	r1, sp, #16
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7fc f946 	bl	8008990 <_printf_float>
 800c704:	4607      	mov	r7, r0
 800c706:	1c78      	adds	r0, r7, #1
 800c708:	d1d6      	bne.n	800c6b8 <_vfiprintf_r+0x1bc>
 800c70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70c:	07d9      	lsls	r1, r3, #31
 800c70e:	d405      	bmi.n	800c71c <_vfiprintf_r+0x220>
 800c710:	89ab      	ldrh	r3, [r5, #12]
 800c712:	059a      	lsls	r2, r3, #22
 800c714:	d402      	bmi.n	800c71c <_vfiprintf_r+0x220>
 800c716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c718:	f000 faa1 	bl	800cc5e <__retarget_lock_release_recursive>
 800c71c:	89ab      	ldrh	r3, [r5, #12]
 800c71e:	065b      	lsls	r3, r3, #25
 800c720:	f53f af12 	bmi.w	800c548 <_vfiprintf_r+0x4c>
 800c724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c726:	e711      	b.n	800c54c <_vfiprintf_r+0x50>
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	462a      	mov	r2, r5
 800c72e:	4b09      	ldr	r3, [pc, #36]	; (800c754 <_vfiprintf_r+0x258>)
 800c730:	a904      	add	r1, sp, #16
 800c732:	4630      	mov	r0, r6
 800c734:	f7fc fbb8 	bl	8008ea8 <_printf_i>
 800c738:	e7e4      	b.n	800c704 <_vfiprintf_r+0x208>
 800c73a:	bf00      	nop
 800c73c:	0800d424 	.word	0x0800d424
 800c740:	0800d444 	.word	0x0800d444
 800c744:	0800d404 	.word	0x0800d404
 800c748:	0800d3b4 	.word	0x0800d3b4
 800c74c:	0800d3be 	.word	0x0800d3be
 800c750:	08008991 	.word	0x08008991
 800c754:	0800c4d7 	.word	0x0800c4d7
 800c758:	0800d3ba 	.word	0x0800d3ba

0800c75c <__swbuf_r>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	460e      	mov	r6, r1
 800c760:	4614      	mov	r4, r2
 800c762:	4605      	mov	r5, r0
 800c764:	b118      	cbz	r0, 800c76e <__swbuf_r+0x12>
 800c766:	6983      	ldr	r3, [r0, #24]
 800c768:	b90b      	cbnz	r3, 800c76e <__swbuf_r+0x12>
 800c76a:	f000 f9d9 	bl	800cb20 <__sinit>
 800c76e:	4b21      	ldr	r3, [pc, #132]	; (800c7f4 <__swbuf_r+0x98>)
 800c770:	429c      	cmp	r4, r3
 800c772:	d12b      	bne.n	800c7cc <__swbuf_r+0x70>
 800c774:	686c      	ldr	r4, [r5, #4]
 800c776:	69a3      	ldr	r3, [r4, #24]
 800c778:	60a3      	str	r3, [r4, #8]
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	071a      	lsls	r2, r3, #28
 800c77e:	d52f      	bpl.n	800c7e0 <__swbuf_r+0x84>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	b36b      	cbz	r3, 800c7e0 <__swbuf_r+0x84>
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	6820      	ldr	r0, [r4, #0]
 800c788:	1ac0      	subs	r0, r0, r3
 800c78a:	6963      	ldr	r3, [r4, #20]
 800c78c:	b2f6      	uxtb	r6, r6
 800c78e:	4283      	cmp	r3, r0
 800c790:	4637      	mov	r7, r6
 800c792:	dc04      	bgt.n	800c79e <__swbuf_r+0x42>
 800c794:	4621      	mov	r1, r4
 800c796:	4628      	mov	r0, r5
 800c798:	f000 f92e 	bl	800c9f8 <_fflush_r>
 800c79c:	bb30      	cbnz	r0, 800c7ec <__swbuf_r+0x90>
 800c79e:	68a3      	ldr	r3, [r4, #8]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	60a3      	str	r3, [r4, #8]
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	6022      	str	r2, [r4, #0]
 800c7aa:	701e      	strb	r6, [r3, #0]
 800c7ac:	6963      	ldr	r3, [r4, #20]
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	4283      	cmp	r3, r0
 800c7b2:	d004      	beq.n	800c7be <__swbuf_r+0x62>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	07db      	lsls	r3, r3, #31
 800c7b8:	d506      	bpl.n	800c7c8 <__swbuf_r+0x6c>
 800c7ba:	2e0a      	cmp	r6, #10
 800c7bc:	d104      	bne.n	800c7c8 <__swbuf_r+0x6c>
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	f000 f919 	bl	800c9f8 <_fflush_r>
 800c7c6:	b988      	cbnz	r0, 800c7ec <__swbuf_r+0x90>
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7cc:	4b0a      	ldr	r3, [pc, #40]	; (800c7f8 <__swbuf_r+0x9c>)
 800c7ce:	429c      	cmp	r4, r3
 800c7d0:	d101      	bne.n	800c7d6 <__swbuf_r+0x7a>
 800c7d2:	68ac      	ldr	r4, [r5, #8]
 800c7d4:	e7cf      	b.n	800c776 <__swbuf_r+0x1a>
 800c7d6:	4b09      	ldr	r3, [pc, #36]	; (800c7fc <__swbuf_r+0xa0>)
 800c7d8:	429c      	cmp	r4, r3
 800c7da:	bf08      	it	eq
 800c7dc:	68ec      	ldreq	r4, [r5, #12]
 800c7de:	e7ca      	b.n	800c776 <__swbuf_r+0x1a>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f000 f80c 	bl	800c800 <__swsetup_r>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d0cb      	beq.n	800c784 <__swbuf_r+0x28>
 800c7ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c7f0:	e7ea      	b.n	800c7c8 <__swbuf_r+0x6c>
 800c7f2:	bf00      	nop
 800c7f4:	0800d424 	.word	0x0800d424
 800c7f8:	0800d444 	.word	0x0800d444
 800c7fc:	0800d404 	.word	0x0800d404

0800c800 <__swsetup_r>:
 800c800:	4b32      	ldr	r3, [pc, #200]	; (800c8cc <__swsetup_r+0xcc>)
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	681d      	ldr	r5, [r3, #0]
 800c806:	4606      	mov	r6, r0
 800c808:	460c      	mov	r4, r1
 800c80a:	b125      	cbz	r5, 800c816 <__swsetup_r+0x16>
 800c80c:	69ab      	ldr	r3, [r5, #24]
 800c80e:	b913      	cbnz	r3, 800c816 <__swsetup_r+0x16>
 800c810:	4628      	mov	r0, r5
 800c812:	f000 f985 	bl	800cb20 <__sinit>
 800c816:	4b2e      	ldr	r3, [pc, #184]	; (800c8d0 <__swsetup_r+0xd0>)
 800c818:	429c      	cmp	r4, r3
 800c81a:	d10f      	bne.n	800c83c <__swsetup_r+0x3c>
 800c81c:	686c      	ldr	r4, [r5, #4]
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c824:	0719      	lsls	r1, r3, #28
 800c826:	d42c      	bmi.n	800c882 <__swsetup_r+0x82>
 800c828:	06dd      	lsls	r5, r3, #27
 800c82a:	d411      	bmi.n	800c850 <__swsetup_r+0x50>
 800c82c:	2309      	movs	r3, #9
 800c82e:	6033      	str	r3, [r6, #0]
 800c830:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c834:	81a3      	strh	r3, [r4, #12]
 800c836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c83a:	e03e      	b.n	800c8ba <__swsetup_r+0xba>
 800c83c:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <__swsetup_r+0xd4>)
 800c83e:	429c      	cmp	r4, r3
 800c840:	d101      	bne.n	800c846 <__swsetup_r+0x46>
 800c842:	68ac      	ldr	r4, [r5, #8]
 800c844:	e7eb      	b.n	800c81e <__swsetup_r+0x1e>
 800c846:	4b24      	ldr	r3, [pc, #144]	; (800c8d8 <__swsetup_r+0xd8>)
 800c848:	429c      	cmp	r4, r3
 800c84a:	bf08      	it	eq
 800c84c:	68ec      	ldreq	r4, [r5, #12]
 800c84e:	e7e6      	b.n	800c81e <__swsetup_r+0x1e>
 800c850:	0758      	lsls	r0, r3, #29
 800c852:	d512      	bpl.n	800c87a <__swsetup_r+0x7a>
 800c854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c856:	b141      	cbz	r1, 800c86a <__swsetup_r+0x6a>
 800c858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c85c:	4299      	cmp	r1, r3
 800c85e:	d002      	beq.n	800c866 <__swsetup_r+0x66>
 800c860:	4630      	mov	r0, r6
 800c862:	f7ff fb67 	bl	800bf34 <_free_r>
 800c866:	2300      	movs	r3, #0
 800c868:	6363      	str	r3, [r4, #52]	; 0x34
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c870:	81a3      	strh	r3, [r4, #12]
 800c872:	2300      	movs	r3, #0
 800c874:	6063      	str	r3, [r4, #4]
 800c876:	6923      	ldr	r3, [r4, #16]
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f043 0308 	orr.w	r3, r3, #8
 800c880:	81a3      	strh	r3, [r4, #12]
 800c882:	6923      	ldr	r3, [r4, #16]
 800c884:	b94b      	cbnz	r3, 800c89a <__swsetup_r+0x9a>
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c890:	d003      	beq.n	800c89a <__swsetup_r+0x9a>
 800c892:	4621      	mov	r1, r4
 800c894:	4630      	mov	r0, r6
 800c896:	f000 fa07 	bl	800cca8 <__smakebuf_r>
 800c89a:	89a0      	ldrh	r0, [r4, #12]
 800c89c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8a0:	f010 0301 	ands.w	r3, r0, #1
 800c8a4:	d00a      	beq.n	800c8bc <__swsetup_r+0xbc>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60a3      	str	r3, [r4, #8]
 800c8aa:	6963      	ldr	r3, [r4, #20]
 800c8ac:	425b      	negs	r3, r3
 800c8ae:	61a3      	str	r3, [r4, #24]
 800c8b0:	6923      	ldr	r3, [r4, #16]
 800c8b2:	b943      	cbnz	r3, 800c8c6 <__swsetup_r+0xc6>
 800c8b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8b8:	d1ba      	bne.n	800c830 <__swsetup_r+0x30>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	0781      	lsls	r1, r0, #30
 800c8be:	bf58      	it	pl
 800c8c0:	6963      	ldrpl	r3, [r4, #20]
 800c8c2:	60a3      	str	r3, [r4, #8]
 800c8c4:	e7f4      	b.n	800c8b0 <__swsetup_r+0xb0>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e7f7      	b.n	800c8ba <__swsetup_r+0xba>
 800c8ca:	bf00      	nop
 800c8cc:	24000010 	.word	0x24000010
 800c8d0:	0800d424 	.word	0x0800d424
 800c8d4:	0800d444 	.word	0x0800d444
 800c8d8:	0800d404 	.word	0x0800d404

0800c8dc <abort>:
 800c8dc:	b508      	push	{r3, lr}
 800c8de:	2006      	movs	r0, #6
 800c8e0:	f000 fa52 	bl	800cd88 <raise>
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	f7f5 f897 	bl	8001a18 <_exit>
	...

0800c8ec <__sflush_r>:
 800c8ec:	898a      	ldrh	r2, [r1, #12]
 800c8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	0710      	lsls	r0, r2, #28
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	d458      	bmi.n	800c9ac <__sflush_r+0xc0>
 800c8fa:	684b      	ldr	r3, [r1, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	dc05      	bgt.n	800c90c <__sflush_r+0x20>
 800c900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c902:	2b00      	cmp	r3, #0
 800c904:	dc02      	bgt.n	800c90c <__sflush_r+0x20>
 800c906:	2000      	movs	r0, #0
 800c908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c90e:	2e00      	cmp	r6, #0
 800c910:	d0f9      	beq.n	800c906 <__sflush_r+0x1a>
 800c912:	2300      	movs	r3, #0
 800c914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c918:	682f      	ldr	r7, [r5, #0]
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	d032      	beq.n	800c984 <__sflush_r+0x98>
 800c91e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	075a      	lsls	r2, r3, #29
 800c924:	d505      	bpl.n	800c932 <__sflush_r+0x46>
 800c926:	6863      	ldr	r3, [r4, #4]
 800c928:	1ac0      	subs	r0, r0, r3
 800c92a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c92c:	b10b      	cbz	r3, 800c932 <__sflush_r+0x46>
 800c92e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c930:	1ac0      	subs	r0, r0, r3
 800c932:	2300      	movs	r3, #0
 800c934:	4602      	mov	r2, r0
 800c936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c938:	6a21      	ldr	r1, [r4, #32]
 800c93a:	4628      	mov	r0, r5
 800c93c:	47b0      	blx	r6
 800c93e:	1c43      	adds	r3, r0, #1
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	d106      	bne.n	800c952 <__sflush_r+0x66>
 800c944:	6829      	ldr	r1, [r5, #0]
 800c946:	291d      	cmp	r1, #29
 800c948:	d82c      	bhi.n	800c9a4 <__sflush_r+0xb8>
 800c94a:	4a2a      	ldr	r2, [pc, #168]	; (800c9f4 <__sflush_r+0x108>)
 800c94c:	40ca      	lsrs	r2, r1
 800c94e:	07d6      	lsls	r6, r2, #31
 800c950:	d528      	bpl.n	800c9a4 <__sflush_r+0xb8>
 800c952:	2200      	movs	r2, #0
 800c954:	6062      	str	r2, [r4, #4]
 800c956:	04d9      	lsls	r1, r3, #19
 800c958:	6922      	ldr	r2, [r4, #16]
 800c95a:	6022      	str	r2, [r4, #0]
 800c95c:	d504      	bpl.n	800c968 <__sflush_r+0x7c>
 800c95e:	1c42      	adds	r2, r0, #1
 800c960:	d101      	bne.n	800c966 <__sflush_r+0x7a>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	b903      	cbnz	r3, 800c968 <__sflush_r+0x7c>
 800c966:	6560      	str	r0, [r4, #84]	; 0x54
 800c968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c96a:	602f      	str	r7, [r5, #0]
 800c96c:	2900      	cmp	r1, #0
 800c96e:	d0ca      	beq.n	800c906 <__sflush_r+0x1a>
 800c970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c974:	4299      	cmp	r1, r3
 800c976:	d002      	beq.n	800c97e <__sflush_r+0x92>
 800c978:	4628      	mov	r0, r5
 800c97a:	f7ff fadb 	bl	800bf34 <_free_r>
 800c97e:	2000      	movs	r0, #0
 800c980:	6360      	str	r0, [r4, #52]	; 0x34
 800c982:	e7c1      	b.n	800c908 <__sflush_r+0x1c>
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	2301      	movs	r3, #1
 800c988:	4628      	mov	r0, r5
 800c98a:	47b0      	blx	r6
 800c98c:	1c41      	adds	r1, r0, #1
 800c98e:	d1c7      	bne.n	800c920 <__sflush_r+0x34>
 800c990:	682b      	ldr	r3, [r5, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0c4      	beq.n	800c920 <__sflush_r+0x34>
 800c996:	2b1d      	cmp	r3, #29
 800c998:	d001      	beq.n	800c99e <__sflush_r+0xb2>
 800c99a:	2b16      	cmp	r3, #22
 800c99c:	d101      	bne.n	800c9a2 <__sflush_r+0xb6>
 800c99e:	602f      	str	r7, [r5, #0]
 800c9a0:	e7b1      	b.n	800c906 <__sflush_r+0x1a>
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a8:	81a3      	strh	r3, [r4, #12]
 800c9aa:	e7ad      	b.n	800c908 <__sflush_r+0x1c>
 800c9ac:	690f      	ldr	r7, [r1, #16]
 800c9ae:	2f00      	cmp	r7, #0
 800c9b0:	d0a9      	beq.n	800c906 <__sflush_r+0x1a>
 800c9b2:	0793      	lsls	r3, r2, #30
 800c9b4:	680e      	ldr	r6, [r1, #0]
 800c9b6:	bf08      	it	eq
 800c9b8:	694b      	ldreq	r3, [r1, #20]
 800c9ba:	600f      	str	r7, [r1, #0]
 800c9bc:	bf18      	it	ne
 800c9be:	2300      	movne	r3, #0
 800c9c0:	eba6 0807 	sub.w	r8, r6, r7
 800c9c4:	608b      	str	r3, [r1, #8]
 800c9c6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ca:	dd9c      	ble.n	800c906 <__sflush_r+0x1a>
 800c9cc:	6a21      	ldr	r1, [r4, #32]
 800c9ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9d0:	4643      	mov	r3, r8
 800c9d2:	463a      	mov	r2, r7
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b0      	blx	r6
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	dc06      	bgt.n	800c9ea <__sflush_r+0xfe>
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9e8:	e78e      	b.n	800c908 <__sflush_r+0x1c>
 800c9ea:	4407      	add	r7, r0
 800c9ec:	eba8 0800 	sub.w	r8, r8, r0
 800c9f0:	e7e9      	b.n	800c9c6 <__sflush_r+0xda>
 800c9f2:	bf00      	nop
 800c9f4:	20400001 	.word	0x20400001

0800c9f8 <_fflush_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	690b      	ldr	r3, [r1, #16]
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	b913      	cbnz	r3, 800ca08 <_fflush_r+0x10>
 800ca02:	2500      	movs	r5, #0
 800ca04:	4628      	mov	r0, r5
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	b118      	cbz	r0, 800ca12 <_fflush_r+0x1a>
 800ca0a:	6983      	ldr	r3, [r0, #24]
 800ca0c:	b90b      	cbnz	r3, 800ca12 <_fflush_r+0x1a>
 800ca0e:	f000 f887 	bl	800cb20 <__sinit>
 800ca12:	4b14      	ldr	r3, [pc, #80]	; (800ca64 <_fflush_r+0x6c>)
 800ca14:	429c      	cmp	r4, r3
 800ca16:	d11b      	bne.n	800ca50 <_fflush_r+0x58>
 800ca18:	686c      	ldr	r4, [r5, #4]
 800ca1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0ef      	beq.n	800ca02 <_fflush_r+0xa>
 800ca22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca24:	07d0      	lsls	r0, r2, #31
 800ca26:	d404      	bmi.n	800ca32 <_fflush_r+0x3a>
 800ca28:	0599      	lsls	r1, r3, #22
 800ca2a:	d402      	bmi.n	800ca32 <_fflush_r+0x3a>
 800ca2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca2e:	f000 f915 	bl	800cc5c <__retarget_lock_acquire_recursive>
 800ca32:	4628      	mov	r0, r5
 800ca34:	4621      	mov	r1, r4
 800ca36:	f7ff ff59 	bl	800c8ec <__sflush_r>
 800ca3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca3c:	07da      	lsls	r2, r3, #31
 800ca3e:	4605      	mov	r5, r0
 800ca40:	d4e0      	bmi.n	800ca04 <_fflush_r+0xc>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	059b      	lsls	r3, r3, #22
 800ca46:	d4dd      	bmi.n	800ca04 <_fflush_r+0xc>
 800ca48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca4a:	f000 f908 	bl	800cc5e <__retarget_lock_release_recursive>
 800ca4e:	e7d9      	b.n	800ca04 <_fflush_r+0xc>
 800ca50:	4b05      	ldr	r3, [pc, #20]	; (800ca68 <_fflush_r+0x70>)
 800ca52:	429c      	cmp	r4, r3
 800ca54:	d101      	bne.n	800ca5a <_fflush_r+0x62>
 800ca56:	68ac      	ldr	r4, [r5, #8]
 800ca58:	e7df      	b.n	800ca1a <_fflush_r+0x22>
 800ca5a:	4b04      	ldr	r3, [pc, #16]	; (800ca6c <_fflush_r+0x74>)
 800ca5c:	429c      	cmp	r4, r3
 800ca5e:	bf08      	it	eq
 800ca60:	68ec      	ldreq	r4, [r5, #12]
 800ca62:	e7da      	b.n	800ca1a <_fflush_r+0x22>
 800ca64:	0800d424 	.word	0x0800d424
 800ca68:	0800d444 	.word	0x0800d444
 800ca6c:	0800d404 	.word	0x0800d404

0800ca70 <std>:
 800ca70:	2300      	movs	r3, #0
 800ca72:	b510      	push	{r4, lr}
 800ca74:	4604      	mov	r4, r0
 800ca76:	e9c0 3300 	strd	r3, r3, [r0]
 800ca7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca7e:	6083      	str	r3, [r0, #8]
 800ca80:	8181      	strh	r1, [r0, #12]
 800ca82:	6643      	str	r3, [r0, #100]	; 0x64
 800ca84:	81c2      	strh	r2, [r0, #14]
 800ca86:	6183      	str	r3, [r0, #24]
 800ca88:	4619      	mov	r1, r3
 800ca8a:	2208      	movs	r2, #8
 800ca8c:	305c      	adds	r0, #92	; 0x5c
 800ca8e:	f7fb fee7 	bl	8008860 <memset>
 800ca92:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <std+0x38>)
 800ca94:	6263      	str	r3, [r4, #36]	; 0x24
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <std+0x3c>)
 800ca98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca9a:	4b05      	ldr	r3, [pc, #20]	; (800cab0 <std+0x40>)
 800ca9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca9e:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <std+0x44>)
 800caa0:	6224      	str	r4, [r4, #32]
 800caa2:	6323      	str	r3, [r4, #48]	; 0x30
 800caa4:	bd10      	pop	{r4, pc}
 800caa6:	bf00      	nop
 800caa8:	0800cdc1 	.word	0x0800cdc1
 800caac:	0800cde3 	.word	0x0800cde3
 800cab0:	0800ce1b 	.word	0x0800ce1b
 800cab4:	0800ce3f 	.word	0x0800ce3f

0800cab8 <_cleanup_r>:
 800cab8:	4901      	ldr	r1, [pc, #4]	; (800cac0 <_cleanup_r+0x8>)
 800caba:	f000 b8af 	b.w	800cc1c <_fwalk_reent>
 800cabe:	bf00      	nop
 800cac0:	0800c9f9 	.word	0x0800c9f9

0800cac4 <__sfmoreglue>:
 800cac4:	b570      	push	{r4, r5, r6, lr}
 800cac6:	1e4a      	subs	r2, r1, #1
 800cac8:	2568      	movs	r5, #104	; 0x68
 800caca:	4355      	muls	r5, r2
 800cacc:	460e      	mov	r6, r1
 800cace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cad2:	f7ff fa7f 	bl	800bfd4 <_malloc_r>
 800cad6:	4604      	mov	r4, r0
 800cad8:	b140      	cbz	r0, 800caec <__sfmoreglue+0x28>
 800cada:	2100      	movs	r1, #0
 800cadc:	e9c0 1600 	strd	r1, r6, [r0]
 800cae0:	300c      	adds	r0, #12
 800cae2:	60a0      	str	r0, [r4, #8]
 800cae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cae8:	f7fb feba 	bl	8008860 <memset>
 800caec:	4620      	mov	r0, r4
 800caee:	bd70      	pop	{r4, r5, r6, pc}

0800caf0 <__sfp_lock_acquire>:
 800caf0:	4801      	ldr	r0, [pc, #4]	; (800caf8 <__sfp_lock_acquire+0x8>)
 800caf2:	f000 b8b3 	b.w	800cc5c <__retarget_lock_acquire_recursive>
 800caf6:	bf00      	nop
 800caf8:	2400046c 	.word	0x2400046c

0800cafc <__sfp_lock_release>:
 800cafc:	4801      	ldr	r0, [pc, #4]	; (800cb04 <__sfp_lock_release+0x8>)
 800cafe:	f000 b8ae 	b.w	800cc5e <__retarget_lock_release_recursive>
 800cb02:	bf00      	nop
 800cb04:	2400046c 	.word	0x2400046c

0800cb08 <__sinit_lock_acquire>:
 800cb08:	4801      	ldr	r0, [pc, #4]	; (800cb10 <__sinit_lock_acquire+0x8>)
 800cb0a:	f000 b8a7 	b.w	800cc5c <__retarget_lock_acquire_recursive>
 800cb0e:	bf00      	nop
 800cb10:	24000467 	.word	0x24000467

0800cb14 <__sinit_lock_release>:
 800cb14:	4801      	ldr	r0, [pc, #4]	; (800cb1c <__sinit_lock_release+0x8>)
 800cb16:	f000 b8a2 	b.w	800cc5e <__retarget_lock_release_recursive>
 800cb1a:	bf00      	nop
 800cb1c:	24000467 	.word	0x24000467

0800cb20 <__sinit>:
 800cb20:	b510      	push	{r4, lr}
 800cb22:	4604      	mov	r4, r0
 800cb24:	f7ff fff0 	bl	800cb08 <__sinit_lock_acquire>
 800cb28:	69a3      	ldr	r3, [r4, #24]
 800cb2a:	b11b      	cbz	r3, 800cb34 <__sinit+0x14>
 800cb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb30:	f7ff bff0 	b.w	800cb14 <__sinit_lock_release>
 800cb34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb38:	6523      	str	r3, [r4, #80]	; 0x50
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <__sinit+0x68>)
 800cb3c:	4a13      	ldr	r2, [pc, #76]	; (800cb8c <__sinit+0x6c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	bf04      	itt	eq
 800cb46:	2301      	moveq	r3, #1
 800cb48:	61a3      	streq	r3, [r4, #24]
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f820 	bl	800cb90 <__sfp>
 800cb50:	6060      	str	r0, [r4, #4]
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 f81c 	bl	800cb90 <__sfp>
 800cb58:	60a0      	str	r0, [r4, #8]
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 f818 	bl	800cb90 <__sfp>
 800cb60:	2200      	movs	r2, #0
 800cb62:	60e0      	str	r0, [r4, #12]
 800cb64:	2104      	movs	r1, #4
 800cb66:	6860      	ldr	r0, [r4, #4]
 800cb68:	f7ff ff82 	bl	800ca70 <std>
 800cb6c:	68a0      	ldr	r0, [r4, #8]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	2109      	movs	r1, #9
 800cb72:	f7ff ff7d 	bl	800ca70 <std>
 800cb76:	68e0      	ldr	r0, [r4, #12]
 800cb78:	2202      	movs	r2, #2
 800cb7a:	2112      	movs	r1, #18
 800cb7c:	f7ff ff78 	bl	800ca70 <std>
 800cb80:	2301      	movs	r3, #1
 800cb82:	61a3      	str	r3, [r4, #24]
 800cb84:	e7d2      	b.n	800cb2c <__sinit+0xc>
 800cb86:	bf00      	nop
 800cb88:	0800cfac 	.word	0x0800cfac
 800cb8c:	0800cab9 	.word	0x0800cab9

0800cb90 <__sfp>:
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	4607      	mov	r7, r0
 800cb94:	f7ff ffac 	bl	800caf0 <__sfp_lock_acquire>
 800cb98:	4b1e      	ldr	r3, [pc, #120]	; (800cc14 <__sfp+0x84>)
 800cb9a:	681e      	ldr	r6, [r3, #0]
 800cb9c:	69b3      	ldr	r3, [r6, #24]
 800cb9e:	b913      	cbnz	r3, 800cba6 <__sfp+0x16>
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ffbd 	bl	800cb20 <__sinit>
 800cba6:	3648      	adds	r6, #72	; 0x48
 800cba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	d503      	bpl.n	800cbb8 <__sfp+0x28>
 800cbb0:	6833      	ldr	r3, [r6, #0]
 800cbb2:	b30b      	cbz	r3, 800cbf8 <__sfp+0x68>
 800cbb4:	6836      	ldr	r6, [r6, #0]
 800cbb6:	e7f7      	b.n	800cba8 <__sfp+0x18>
 800cbb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbbc:	b9d5      	cbnz	r5, 800cbf4 <__sfp+0x64>
 800cbbe:	4b16      	ldr	r3, [pc, #88]	; (800cc18 <__sfp+0x88>)
 800cbc0:	60e3      	str	r3, [r4, #12]
 800cbc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbc6:	6665      	str	r5, [r4, #100]	; 0x64
 800cbc8:	f000 f847 	bl	800cc5a <__retarget_lock_init_recursive>
 800cbcc:	f7ff ff96 	bl	800cafc <__sfp_lock_release>
 800cbd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbd8:	6025      	str	r5, [r4, #0]
 800cbda:	61a5      	str	r5, [r4, #24]
 800cbdc:	2208      	movs	r2, #8
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbe4:	f7fb fe3c 	bl	8008860 <memset>
 800cbe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbf4:	3468      	adds	r4, #104	; 0x68
 800cbf6:	e7d9      	b.n	800cbac <__sfp+0x1c>
 800cbf8:	2104      	movs	r1, #4
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	f7ff ff62 	bl	800cac4 <__sfmoreglue>
 800cc00:	4604      	mov	r4, r0
 800cc02:	6030      	str	r0, [r6, #0]
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d1d5      	bne.n	800cbb4 <__sfp+0x24>
 800cc08:	f7ff ff78 	bl	800cafc <__sfp_lock_release>
 800cc0c:	230c      	movs	r3, #12
 800cc0e:	603b      	str	r3, [r7, #0]
 800cc10:	e7ee      	b.n	800cbf0 <__sfp+0x60>
 800cc12:	bf00      	nop
 800cc14:	0800cfac 	.word	0x0800cfac
 800cc18:	ffff0001 	.word	0xffff0001

0800cc1c <_fwalk_reent>:
 800cc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc20:	4606      	mov	r6, r0
 800cc22:	4688      	mov	r8, r1
 800cc24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc28:	2700      	movs	r7, #0
 800cc2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc2e:	f1b9 0901 	subs.w	r9, r9, #1
 800cc32:	d505      	bpl.n	800cc40 <_fwalk_reent+0x24>
 800cc34:	6824      	ldr	r4, [r4, #0]
 800cc36:	2c00      	cmp	r4, #0
 800cc38:	d1f7      	bne.n	800cc2a <_fwalk_reent+0xe>
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc40:	89ab      	ldrh	r3, [r5, #12]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d907      	bls.n	800cc56 <_fwalk_reent+0x3a>
 800cc46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	d003      	beq.n	800cc56 <_fwalk_reent+0x3a>
 800cc4e:	4629      	mov	r1, r5
 800cc50:	4630      	mov	r0, r6
 800cc52:	47c0      	blx	r8
 800cc54:	4307      	orrs	r7, r0
 800cc56:	3568      	adds	r5, #104	; 0x68
 800cc58:	e7e9      	b.n	800cc2e <_fwalk_reent+0x12>

0800cc5a <__retarget_lock_init_recursive>:
 800cc5a:	4770      	bx	lr

0800cc5c <__retarget_lock_acquire_recursive>:
 800cc5c:	4770      	bx	lr

0800cc5e <__retarget_lock_release_recursive>:
 800cc5e:	4770      	bx	lr

0800cc60 <__swhatbuf_r>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	460e      	mov	r6, r1
 800cc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc68:	2900      	cmp	r1, #0
 800cc6a:	b096      	sub	sp, #88	; 0x58
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	461d      	mov	r5, r3
 800cc70:	da07      	bge.n	800cc82 <__swhatbuf_r+0x22>
 800cc72:	2300      	movs	r3, #0
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	89b3      	ldrh	r3, [r6, #12]
 800cc78:	061a      	lsls	r2, r3, #24
 800cc7a:	d410      	bmi.n	800cc9e <__swhatbuf_r+0x3e>
 800cc7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc80:	e00e      	b.n	800cca0 <__swhatbuf_r+0x40>
 800cc82:	466a      	mov	r2, sp
 800cc84:	f000 f902 	bl	800ce8c <_fstat_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	dbf2      	blt.n	800cc72 <__swhatbuf_r+0x12>
 800cc8c:	9a01      	ldr	r2, [sp, #4]
 800cc8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc96:	425a      	negs	r2, r3
 800cc98:	415a      	adcs	r2, r3
 800cc9a:	602a      	str	r2, [r5, #0]
 800cc9c:	e7ee      	b.n	800cc7c <__swhatbuf_r+0x1c>
 800cc9e:	2340      	movs	r3, #64	; 0x40
 800cca0:	2000      	movs	r0, #0
 800cca2:	6023      	str	r3, [r4, #0]
 800cca4:	b016      	add	sp, #88	; 0x58
 800cca6:	bd70      	pop	{r4, r5, r6, pc}

0800cca8 <__smakebuf_r>:
 800cca8:	898b      	ldrh	r3, [r1, #12]
 800ccaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccac:	079d      	lsls	r5, r3, #30
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	d507      	bpl.n	800ccc4 <__smakebuf_r+0x1c>
 800ccb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	6123      	str	r3, [r4, #16]
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	6163      	str	r3, [r4, #20]
 800ccc0:	b002      	add	sp, #8
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	ab01      	add	r3, sp, #4
 800ccc6:	466a      	mov	r2, sp
 800ccc8:	f7ff ffca 	bl	800cc60 <__swhatbuf_r>
 800cccc:	9900      	ldr	r1, [sp, #0]
 800ccce:	4605      	mov	r5, r0
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff f97f 	bl	800bfd4 <_malloc_r>
 800ccd6:	b948      	cbnz	r0, 800ccec <__smakebuf_r+0x44>
 800ccd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccdc:	059a      	lsls	r2, r3, #22
 800ccde:	d4ef      	bmi.n	800ccc0 <__smakebuf_r+0x18>
 800cce0:	f023 0303 	bic.w	r3, r3, #3
 800cce4:	f043 0302 	orr.w	r3, r3, #2
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e7e3      	b.n	800ccb4 <__smakebuf_r+0xc>
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <__smakebuf_r+0x7c>)
 800ccee:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	6163      	str	r3, [r4, #20]
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	6120      	str	r0, [r4, #16]
 800cd02:	b15b      	cbz	r3, 800cd1c <__smakebuf_r+0x74>
 800cd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f000 f8d1 	bl	800ceb0 <_isatty_r>
 800cd0e:	b128      	cbz	r0, 800cd1c <__smakebuf_r+0x74>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f023 0303 	bic.w	r3, r3, #3
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	89a0      	ldrh	r0, [r4, #12]
 800cd1e:	4305      	orrs	r5, r0
 800cd20:	81a5      	strh	r5, [r4, #12]
 800cd22:	e7cd      	b.n	800ccc0 <__smakebuf_r+0x18>
 800cd24:	0800cab9 	.word	0x0800cab9

0800cd28 <_malloc_usable_size_r>:
 800cd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2c:	1f18      	subs	r0, r3, #4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	bfbc      	itt	lt
 800cd32:	580b      	ldrlt	r3, [r1, r0]
 800cd34:	18c0      	addlt	r0, r0, r3
 800cd36:	4770      	bx	lr

0800cd38 <_raise_r>:
 800cd38:	291f      	cmp	r1, #31
 800cd3a:	b538      	push	{r3, r4, r5, lr}
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	d904      	bls.n	800cd4c <_raise_r+0x14>
 800cd42:	2316      	movs	r3, #22
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd4e:	b112      	cbz	r2, 800cd56 <_raise_r+0x1e>
 800cd50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd54:	b94b      	cbnz	r3, 800cd6a <_raise_r+0x32>
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 f830 	bl	800cdbc <_getpid_r>
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	4601      	mov	r1, r0
 800cd60:	4620      	mov	r0, r4
 800cd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd66:	f000 b817 	b.w	800cd98 <_kill_r>
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d00a      	beq.n	800cd84 <_raise_r+0x4c>
 800cd6e:	1c59      	adds	r1, r3, #1
 800cd70:	d103      	bne.n	800cd7a <_raise_r+0x42>
 800cd72:	2316      	movs	r3, #22
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7e7      	b.n	800cd4a <_raise_r+0x12>
 800cd7a:	2400      	movs	r4, #0
 800cd7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd80:	4628      	mov	r0, r5
 800cd82:	4798      	blx	r3
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7e0      	b.n	800cd4a <_raise_r+0x12>

0800cd88 <raise>:
 800cd88:	4b02      	ldr	r3, [pc, #8]	; (800cd94 <raise+0xc>)
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	f7ff bfd3 	b.w	800cd38 <_raise_r>
 800cd92:	bf00      	nop
 800cd94:	24000010 	.word	0x24000010

0800cd98 <_kill_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	; (800cdb8 <_kill_r+0x20>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	4611      	mov	r1, r2
 800cda4:	602b      	str	r3, [r5, #0]
 800cda6:	f7f4 fe27 	bl	80019f8 <_kill>
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d102      	bne.n	800cdb4 <_kill_r+0x1c>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	b103      	cbz	r3, 800cdb4 <_kill_r+0x1c>
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	bd38      	pop	{r3, r4, r5, pc}
 800cdb6:	bf00      	nop
 800cdb8:	24000460 	.word	0x24000460

0800cdbc <_getpid_r>:
 800cdbc:	f7f4 be14 	b.w	80019e8 <_getpid>

0800cdc0 <__sread>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	460c      	mov	r4, r1
 800cdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc8:	f000 f894 	bl	800cef4 <_read_r>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	bfab      	itete	ge
 800cdd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cdd4:	181b      	addge	r3, r3, r0
 800cdd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdda:	bfac      	ite	ge
 800cddc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdde:	81a3      	strhlt	r3, [r4, #12]
 800cde0:	bd10      	pop	{r4, pc}

0800cde2 <__swrite>:
 800cde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde6:	461f      	mov	r7, r3
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	05db      	lsls	r3, r3, #23
 800cdec:	4605      	mov	r5, r0
 800cdee:	460c      	mov	r4, r1
 800cdf0:	4616      	mov	r6, r2
 800cdf2:	d505      	bpl.n	800ce00 <__swrite+0x1e>
 800cdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f000 f868 	bl	800ced0 <_lseek_r>
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	463b      	mov	r3, r7
 800ce10:	4628      	mov	r0, r5
 800ce12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	f000 b817 	b.w	800ce48 <_write_r>

0800ce1a <__sseek>:
 800ce1a:	b510      	push	{r4, lr}
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce22:	f000 f855 	bl	800ced0 <_lseek_r>
 800ce26:	1c43      	adds	r3, r0, #1
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	bf15      	itete	ne
 800ce2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce36:	81a3      	strheq	r3, [r4, #12]
 800ce38:	bf18      	it	ne
 800ce3a:	81a3      	strhne	r3, [r4, #12]
 800ce3c:	bd10      	pop	{r4, pc}

0800ce3e <__sclose>:
 800ce3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce42:	f000 b813 	b.w	800ce6c <_close_r>
	...

0800ce48 <_write_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d07      	ldr	r5, [pc, #28]	; (800ce68 <_write_r+0x20>)
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	4608      	mov	r0, r1
 800ce50:	4611      	mov	r1, r2
 800ce52:	2200      	movs	r2, #0
 800ce54:	602a      	str	r2, [r5, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	f7f4 fe05 	bl	8001a66 <_write>
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	d102      	bne.n	800ce66 <_write_r+0x1e>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	b103      	cbz	r3, 800ce66 <_write_r+0x1e>
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	24000460 	.word	0x24000460

0800ce6c <_close_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d06      	ldr	r5, [pc, #24]	; (800ce88 <_close_r+0x1c>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	602b      	str	r3, [r5, #0]
 800ce78:	f7f4 fe11 	bl	8001a9e <_close>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d102      	bne.n	800ce86 <_close_r+0x1a>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <_close_r+0x1a>
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	24000460 	.word	0x24000460

0800ce8c <_fstat_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d07      	ldr	r5, [pc, #28]	; (800ceac <_fstat_r+0x20>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	4611      	mov	r1, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	f7f4 fe0c 	bl	8001ab6 <_fstat>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d102      	bne.n	800cea8 <_fstat_r+0x1c>
 800cea2:	682b      	ldr	r3, [r5, #0]
 800cea4:	b103      	cbz	r3, 800cea8 <_fstat_r+0x1c>
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	bf00      	nop
 800ceac:	24000460 	.word	0x24000460

0800ceb0 <_isatty_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4d06      	ldr	r5, [pc, #24]	; (800cecc <_isatty_r+0x1c>)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	4608      	mov	r0, r1
 800ceba:	602b      	str	r3, [r5, #0]
 800cebc:	f7f4 fe0b 	bl	8001ad6 <_isatty>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d102      	bne.n	800ceca <_isatty_r+0x1a>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	b103      	cbz	r3, 800ceca <_isatty_r+0x1a>
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	24000460 	.word	0x24000460

0800ced0 <_lseek_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4d07      	ldr	r5, [pc, #28]	; (800cef0 <_lseek_r+0x20>)
 800ced4:	4604      	mov	r4, r0
 800ced6:	4608      	mov	r0, r1
 800ced8:	4611      	mov	r1, r2
 800ceda:	2200      	movs	r2, #0
 800cedc:	602a      	str	r2, [r5, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	f7f4 fe04 	bl	8001aec <_lseek>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_lseek_r+0x1e>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_lseek_r+0x1e>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	24000460 	.word	0x24000460

0800cef4 <_read_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d07      	ldr	r5, [pc, #28]	; (800cf14 <_read_r+0x20>)
 800cef8:	4604      	mov	r4, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	4611      	mov	r1, r2
 800cefe:	2200      	movs	r2, #0
 800cf00:	602a      	str	r2, [r5, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f7f4 fd92 	bl	8001a2c <_read>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_read_r+0x1e>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_read_r+0x1e>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	24000460 	.word	0x24000460

0800cf18 <_init>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	bf00      	nop
 800cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1e:	bc08      	pop	{r3}
 800cf20:	469e      	mov	lr, r3
 800cf22:	4770      	bx	lr

0800cf24 <_fini>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr
