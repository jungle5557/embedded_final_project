
0528_final_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d190  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800d430  0800d430  0001d430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d97c  0800d97c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d97c  0800d97c  0001d97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d984  0800d984  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d984  0800d984  0001d984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d988  0800d988  0001d988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800d98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  240001e8  0800db74  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240004d8  0800db74  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002764c  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003931  00000000  00000000  00047862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0004b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0004c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d0e1  00000000  00000000  0004dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a648  00000000  00000000  0008ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019a591  00000000  00000000  000a5329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023f8ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007174  00000000  00000000  0023f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d418 	.word	0x0800d418

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800d418 	.word	0x0800d418

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemInit+0x104>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <SystemInit+0x104>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemInit+0x104>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemInit+0x104>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d807      	bhi.n	8000aac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <SystemInit+0x108>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <SystemInit+0x108>)
 8000aa6:	f043 0307 	orr.w	r3, r3, #7
 8000aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <SystemInit+0x10c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x10c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemInit+0x10c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0x10c>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <SystemInit+0x10c>)
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x110>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemInit+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemInit+0x108>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 030f 	bic.w	r3, r3, #15
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <SystemInit+0x108>)
 8000ae0:	f043 0307 	orr.w	r3, r3, #7
 8000ae4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemInit+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemInit+0x10c>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemInit+0x114>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemInit+0x10c>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemInit+0x118>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemInit+0x10c>)
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemInit+0x11c>)
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemInit+0x10c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <SystemInit+0x10c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <SystemInit+0x11c>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemInit+0x10c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SystemInit+0x10c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemInit+0x11c>)
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <SystemInit+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x10c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x10c>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x120>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x120>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x124>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0x128>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b52:	d202      	bcs.n	8000b5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x130>)
 8000b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x104>)
 8000b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	52002000 	.word	0x52002000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b84:	02020200 	.word	0x02020200
 8000b88:	01ff0000 	.word	0x01ff0000
 8000b8c:	01010280 	.word	0x01010280
 8000b90:	580000c0 	.word	0x580000c0
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <map>:
uint8_t fan_status;
uint8_t light_status;
uint8_t water_status;

float map(float val, float I_Min, float I_Max, float O_Min, float O_Max)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	ed87 0a05 	vstr	s0, [r7, #20]
 8000bae:	edc7 0a04 	vstr	s1, [r7, #16]
 8000bb2:	ed87 1a03 	vstr	s2, [r7, #12]
 8000bb6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000bba:	ed87 2a01 	vstr	s4, [r7, #4]
	return (((val-I_Min)*((O_Max-O_Min)/(I_Max-I_Min)))+O_Min);
 8000bbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bca:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bd2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8000bd6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000be2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <delay>:
void delay (uint16_t time)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <delay+0x30>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8000c12:	bf00      	nop
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <delay+0x30>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d3f9      	bcc.n	8000c14 <delay+0x14>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2400046c 	.word	0x2400046c

08000c34 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f002 fe0a 	bl	800387c <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f002 fdec 	bl	800387c <HAL_GPIO_Init>
}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <DHT22_Start>:
#define DHT22_PORT GPIOG
#define DHT22_PIN GPIO_PIN_14


void DHT22_Start (void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <DHT22_Start+0x44>)
 8000cb6:	f7ff ffbd 	bl	8000c34 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <DHT22_Start+0x44>)
 8000cc2:	f002 ffa3 	bl	8003c0c <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 8000cc6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000cca:	f7ff ff99 	bl	8000c00 <delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <DHT22_Start+0x44>)
 8000cd6:	f002 ff99 	bl	8003c0c <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 8000cda:	2014      	movs	r0, #20
 8000cdc:	f7ff ff90 	bl	8000c00 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DHT22_Start+0x44>)
 8000ce6:	f7ff ffc3 	bl	8000c70 <Set_Pin_Input>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	58021800 	.word	0x58021800

08000cf4 <DHT22_Check_Response>:


uint8_t DHT22_Check_Response (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4817      	ldr	r0, [pc, #92]	; (8000d5c <DHT22_Check_Response+0x68>)
 8000d00:	f7ff ffb6 	bl	8000c70 <Set_Pin_Input>
	uint8_t Response = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000d08:	2028      	movs	r0, #40	; 0x28
 8000d0a:	f7ff ff79 	bl	8000c00 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d12:	4812      	ldr	r0, [pc, #72]	; (8000d5c <DHT22_Check_Response+0x68>)
 8000d14:	f002 ff62 	bl	8003bdc <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10f      	bne.n	8000d3e <DHT22_Check_Response+0x4a>
	{
		delay (80);   // wait for 80us
 8000d1e:	2050      	movs	r0, #80	; 0x50
 8000d20:	f7ff ff6e 	bl	8000c00 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <DHT22_Check_Response+0x68>)
 8000d2a:	f002 ff57 	bl	8003bdc <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <DHT22_Check_Response+0x46>
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <DHT22_Check_Response+0x4a>
		else Response = -1;
 8000d3a:	23ff      	movs	r3, #255	; 0xff
 8000d3c:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8000d3e:	bf00      	nop
 8000d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <DHT22_Check_Response+0x68>)
 8000d46:	f002 ff49 	bl	8003bdc <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f7      	bne.n	8000d40 <DHT22_Check_Response+0x4c>
	return Response;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58021800 	.word	0x58021800

08000d60 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	e03a      	b.n	8000de2 <DHT22_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8000d6c:	bf00      	nop
 8000d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d72:	4820      	ldr	r0, [pc, #128]	; (8000df4 <DHT22_Read+0x94>)
 8000d74:	f002 ff32 	bl	8003bdc <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f7      	beq.n	8000d6e <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000d7e:	2028      	movs	r0, #40	; 0x28
 8000d80:	f7ff ff3e 	bl	8000c00 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d88:	481a      	ldr	r0, [pc, #104]	; (8000df4 <DHT22_Read+0x94>)
 8000d8a:	f002 ff27 	bl	8003bdc <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10e      	bne.n	8000db2 <DHT22_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4013      	ands	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	e00b      	b.n	8000dca <DHT22_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	f1c3 0307 	rsb	r3, r3, #7
 8000db8:	2201      	movs	r2, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8000dca:	bf00      	nop
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <DHT22_Read+0x94>)
 8000dd2:	f002 ff03 	bl	8003bdc <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f7      	bne.n	8000dcc <DHT22_Read+0x6c>
	for (j=0;j<8;j++)
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	3301      	adds	r3, #1
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b07      	cmp	r3, #7
 8000de6:	d9c1      	bls.n	8000d6c <DHT22_Read+0xc>
	}

	return i;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	58021800 	.word	0x58021800

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b0d3      	sub	sp, #332	; 0x14c
 8000dfc:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e06:	bf00      	nop
 8000e08:	4b9f      	ldr	r3, [pc, #636]	; (8001088 <main+0x290>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <main+0x2a>
 8000e14:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dcf2      	bgt.n	8000e08 <main+0x10>
  if ( timeout < 0 )
 8000e22:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da01      	bge.n	8000e2e <main+0x36>
  {
  Error_Handler();
 8000e2a:	f000 feab 	bl	8001b84 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f001 f931 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f9e3 	bl	80011fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e36:	4b94      	ldr	r3, [pc, #592]	; (8001088 <main+0x290>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a92      	ldr	r2, [pc, #584]	; (8001088 <main+0x290>)
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b90      	ldr	r3, [pc, #576]	; (8001088 <main+0x290>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000e54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f002 ff2d 	bl	8003cb8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f002 ff43 	bl	8003cec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e6e:	bf00      	nop
 8000e70:	4b85      	ldr	r3, [pc, #532]	; (8001088 <main+0x290>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <main+0x92>
 8000e7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e80:	1e5a      	subs	r2, r3, #1
 8000e82:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dcf2      	bgt.n	8000e70 <main+0x78>
if ( timeout < 0 )
 8000e8a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da01      	bge.n	8000e96 <main+0x9e>
{
Error_Handler();
 8000e92:	f000 fe77 	bl	8001b84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fbbd 	bl	8001614 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e9a:	f000 fa23 	bl	80012e4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000e9e:	f000 fb37 	bl	8001510 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000ea2:	f000 fae5 	bl	8001470 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000ea6:	f000 fb69 	bl	800157c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000eaa:	f000 fa93 	bl	80013d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start(&htim6);
  HAL_TIM_Base_Start(&htim2);
 8000eae:	4877      	ldr	r0, [pc, #476]	; (800108c <main+0x294>)
 8000eb0:	f006 f920 	bl	80070f4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000eb4:	4876      	ldr	r0, [pc, #472]	; (8001090 <main+0x298>)
 8000eb6:	f006 f98d 	bl	80071d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart3,"#### Start Init####\r\n",21,100);
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	2215      	movs	r2, #21
 8000ebe:	4975      	ldr	r1, [pc, #468]	; (8001094 <main+0x29c>)
 8000ec0:	4875      	ldr	r0, [pc, #468]	; (8001098 <main+0x2a0>)
 8000ec2:	f006 fe73 	bl	8007bac <HAL_UART_Transmit>

  while (1)
  {
	  // YL69 + relay
	  char adc_buffer[100];
	  HAL_ADC_Start(&hadc1);
 8000ec6:	4875      	ldr	r0, [pc, #468]	; (800109c <main+0x2a4>)
 8000ec8:	f001 fd08 	bl	80028dc <HAL_ADC_Start>
	  readvalue = HAL_ADC_GetValue(&hadc1);
 8000ecc:	4873      	ldr	r0, [pc, #460]	; (800109c <main+0x2a4>)
 8000ece:	f001 fdcf 	bl	8002a70 <HAL_ADC_GetValue>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <main+0x2a8>)
 8000ed6:	6013      	str	r3, [r2, #0]
	  readvalue = map(readvalue,130,255,100,0);
 8000ed8:	4b71      	ldr	r3, [pc, #452]	; (80010a0 <main+0x2a8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	ed9f 2a6f 	vldr	s4, [pc, #444]	; 80010a4 <main+0x2ac>
 8000ee8:	eddf 1a6f 	vldr	s3, [pc, #444]	; 80010a8 <main+0x2b0>
 8000eec:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 80010ac <main+0x2b4>
 8000ef0:	eddf 0a6f 	vldr	s1, [pc, #444]	; 80010b0 <main+0x2b8>
 8000ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef8:	f7ff fe54 	bl	8000ba4 <map>
 8000efc:	eef0 7a40 	vmov.f32	s15, s0
 8000f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f04:	ee17 2a90 	vmov	r2, s15
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <main+0x2a8>)
 8000f0a:	601a      	str	r2, [r3, #0]
	  sprintf(adc_buffer,"Moisture:%d\r\n",readvalue);
 8000f0c:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <main+0x2a8>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4967      	ldr	r1, [pc, #412]	; (80010b4 <main+0x2bc>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f008 fd76 	bl	8009a08 <siprintf>
	  HAL_UART_Transmit(&huart3,adc_buffer,strlen(adc_buffer),1000);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f9dd 	bl	80002e0 <strlen>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f107 010c 	add.w	r1, r7, #12
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	4859      	ldr	r0, [pc, #356]	; (8001098 <main+0x2a0>)
 8000f34:	f006 fe3a 	bl	8007bac <HAL_UART_Transmit>

	  if (readvalue<=moisture_threshold)
 8000f38:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <main+0x2a8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a5e      	ldr	r2, [pc, #376]	; (80010b8 <main+0x2c0>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d808      	bhi.n	8000f56 <main+0x15e>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	485c      	ldr	r0, [pc, #368]	; (80010bc <main+0x2c4>)
 8000f4a:	f002 fe5f 	bl	8003c0c <HAL_GPIO_WritePin>
		  water_status = 1;
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <main+0x2c8>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e007      	b.n	8000f66 <main+0x16e>
	  } else {
		  water_status = 0;
 8000f56:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <main+0x2c8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4856      	ldr	r0, [pc, #344]	; (80010bc <main+0x2c4>)
 8000f62:	f002 fe53 	bl	8003c0c <HAL_GPIO_WritePin>
	  }

	  //DHT22
	  char dht_buffer[100];
	  DHT22_Start();
 8000f66:	f7ff fea1 	bl	8000cac <DHT22_Start>
	  Presence = DHT22_Check_Response();
 8000f6a:	f7ff fec3 	bl	8000cf4 <DHT22_Check_Response>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b54      	ldr	r3, [pc, #336]	; (80010c4 <main+0x2cc>)
 8000f74:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT22_Read();
 8000f76:	f7ff fef3 	bl	8000d60 <DHT22_Read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <main+0x2d0>)
 8000f80:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT22_Read();
 8000f82:	f7ff feed 	bl	8000d60 <DHT22_Read>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b50      	ldr	r3, [pc, #320]	; (80010cc <main+0x2d4>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 8000f8e:	f7ff fee7 	bl	8000d60 <DHT22_Read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <main+0x2d8>)
 8000f98:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8000f9a:	f7ff fee1 	bl	8000d60 <DHT22_Read>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <main+0x2dc>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 8000fa6:	f7ff fedb 	bl	8000d60 <DHT22_Read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <main+0x2e0>)
 8000fb0:	801a      	strh	r2, [r3, #0]

	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <main+0x2d8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <main+0x2dc>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <main+0x2e4>)
 8000fc8:	801a      	strh	r2, [r3, #0]
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 8000fca:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <main+0x2d0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <main+0x2d4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <main+0x2e8>)
 8000fe0:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) (TEMP/10.0);
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <main+0x2e4>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fee:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000ff2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <main+0x2ec>)
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) (RH/10.0);
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <main+0x2e8>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800100c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001010:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001014:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <main+0x2f0>)
 800101a:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(dht_buffer,"temp:%.2f,humidity:%.2f\r\n",Temperature,Humidity);
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <main+0x2ec>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <main+0x2f0>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001032:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001036:	ed8d 7b00 	vstr	d7, [sp]
 800103a:	ec53 2b16 	vmov	r2, r3, d6
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <main+0x2f4>)
 8001040:	f008 fce2 	bl	8009a08 <siprintf>
	  HAL_UART_Transmit(&huart3,dht_buffer,strlen(dht_buffer),1000);
 8001044:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f949 	bl	80002e0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <main+0x2a0>)
 800105c:	f006 fda6 	bl	8007bac <HAL_UART_Transmit>

	  if (Temperature>=30)
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <main+0x2ec>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800106a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	db3f      	blt.n	80010f4 <main+0x2fc>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,1);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <main+0x2c4>)
 800107c:	f002 fdc6 	bl	8003c0c <HAL_GPIO_WritePin>
		  fan_status = 1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <main+0x2f8>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e03e      	b.n	8001106 <main+0x30e>
 8001088:	58024400 	.word	0x58024400
 800108c:	2400046c 	.word	0x2400046c
 8001090:	240002b8 	.word	0x240002b8
 8001094:	0800d430 	.word	0x0800d430
 8001098:	24000224 	.word	0x24000224
 800109c:	24000308 	.word	0x24000308
 80010a0:	24000464 	.word	0x24000464
 80010a4:	00000000 	.word	0x00000000
 80010a8:	42c80000 	.word	0x42c80000
 80010ac:	437f0000 	.word	0x437f0000
 80010b0:	43020000 	.word	0x43020000
 80010b4:	0800d448 	.word	0x0800d448
 80010b8:	24000008 	.word	0x24000008
 80010bc:	58020400 	.word	0x58020400
 80010c0:	240004c2 	.word	0x240004c2
 80010c4:	2400020c 	.word	0x2400020c
 80010c8:	240002b5 	.word	0x240002b5
 80010cc:	24000390 	.word	0x24000390
 80010d0:	2400036d 	.word	0x2400036d
 80010d4:	240004c3 	.word	0x240004c3
 80010d8:	240004b8 	.word	0x240004b8
 80010dc:	24000304 	.word	0x24000304
 80010e0:	240002b6 	.word	0x240002b6
 80010e4:	24000204 	.word	0x24000204
 80010e8:	24000208 	.word	0x24000208
 80010ec:	0800d458 	.word	0x0800d458
 80010f0:	240002b4 	.word	0x240002b4
	  } else {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fa:	4836      	ldr	r0, [pc, #216]	; (80011d4 <main+0x3dc>)
 80010fc:	f002 fd86 	bl	8003c0c <HAL_GPIO_WritePin>
		  fan_status = 0;
 8001100:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <main+0x3e0>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_HSEM_Take(9, 0) == HAL_OK){
 8001106:	2100      	movs	r1, #0
 8001108:	2009      	movs	r0, #9
 800110a:	f002 fdb3 	bl	8003c74 <HAL_HSEM_Take>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d15a      	bne.n	80011ca <main+0x3d2>
		  char test_buffer[100];
		  shared_ptr->tc = Temperature;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <main+0x3e4>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <main+0x3e8>)
 800111c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001120:	edc7 7a01 	vstr	s15, [r7, #4]
 8001124:	793a      	ldrb	r2, [r7, #4]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	70da      	strb	r2, [r3, #3]
		  shared_ptr->rd = Humidity;
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <main+0x3ec>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <main+0x3e8>)
 8001132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001136:	edc7 7a01 	vstr	s15, [r7, #4]
 800113a:	793a      	ldrb	r2, [r7, #4]
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	711a      	strb	r2, [r3, #4]
		  shared_ptr->r = dat_v[2]%256;
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <main+0x3f0>)
 8001142:	889a      	ldrh	r2, [r3, #4]
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <main+0x3e8>)
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	715a      	strb	r2, [r3, #5]
		  shared_ptr->g = dat_v[0]%256;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <main+0x3f0>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <main+0x3e8>)
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	719a      	strb	r2, [r3, #6]
		  shared_ptr->b = dat_v[1]%256;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <main+0x3f0>)
 8001156:	885a      	ldrh	r2, [r3, #2]
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <main+0x3e8>)
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	71da      	strb	r2, [r3, #7]
		  shared_ptr->soil = readvalue;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <main+0x3f4>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <main+0x3e8>)
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	721a      	strb	r2, [r3, #8]
		  shared_ptr->fan_on = fan_status;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <main+0x3e8>)
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <main+0x3e0>)
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	701a      	strb	r2, [r3, #0]
		  shared_ptr->light_on = 0;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <main+0x3e8>)
 8001172:	2200      	movs	r2, #0
 8001174:	705a      	strb	r2, [r3, #1]
		  shared_ptr->water_on = water_status;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <main+0x3e8>)
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <main+0x3f8>)
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	709a      	strb	r2, [r3, #2]
		  sprintf(test_buffer,"Write r: %d, g: %d b: %d\r\n",dat_v[2]%256,dat_v[0]%256,dat_v[1]%256,readvalue);
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <main+0x3f0>)
 8001180:	889b      	ldrh	r3, [r3, #4]
 8001182:	b2d9      	uxtb	r1, r3
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <main+0x3f0>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b2dc      	uxtb	r4, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0x3f0>)
 800118c:	885b      	ldrh	r3, [r3, #2]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4a16      	ldr	r2, [pc, #88]	; (80011ec <main+0x3f4>)
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	4623      	mov	r3, r4
 800119e:	460a      	mov	r2, r1
 80011a0:	4914      	ldr	r1, [pc, #80]	; (80011f4 <main+0x3fc>)
 80011a2:	f008 fc31 	bl	8009a08 <siprintf>
		  HAL_UART_Transmit(&huart3,test_buffer,strlen(test_buffer),1000);
 80011a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f898 	bl	80002e0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <main+0x400>)
 80011be:	f006 fcf5 	bl	8007bac <HAL_UART_Transmit>
		  HAL_HSEM_Release(9, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2009      	movs	r0, #9
 80011c6:	f002 fd91 	bl	8003cec <HAL_HSEM_Release>
	  }

	  HAL_Delay(3000);
 80011ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011ce:	f000 fff3 	bl	80021b8 <HAL_Delay>
  {
 80011d2:	e678      	b.n	8000ec6 <main+0xce>
 80011d4:	58020400 	.word	0x58020400
 80011d8:	240002b4 	.word	0x240002b4
 80011dc:	24000204 	.word	0x24000204
 80011e0:	38001000 	.word	0x38001000
 80011e4:	24000208 	.word	0x24000208
 80011e8:	24000370 	.word	0x24000370
 80011ec:	24000464 	.word	0x24000464
 80011f0:	240004c2 	.word	0x240004c2
 80011f4:	0800d474 	.word	0x0800d474
 80011f8:	24000224 	.word	0x24000224

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09c      	sub	sp, #112	; 0x70
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	224c      	movs	r2, #76	; 0x4c
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fda6 	bl	8008d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2220      	movs	r2, #32
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fda0 	bl	8008d5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800121c:	2004      	movs	r0, #4
 800121e:	f002 fd79 	bl	8003d14 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <SystemClock_Config+0xdc>)
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122a:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <SystemClock_Config+0xdc>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <SystemClock_Config+0xdc>)
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <SystemClock_Config+0xe0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001244:	4a25      	ldr	r2, [pc, #148]	; (80012dc <SystemClock_Config+0xe0>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <SystemClock_Config+0xe0>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001258:	bf00      	nop
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <SystemClock_Config+0xe0>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001266:	d1f8      	bne.n	800125a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <SystemClock_Config+0xe4>)
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <SystemClock_Config+0xe4>)
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001278:	2301      	movs	r3, #1
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fd9b 	bl	8003dc8 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001298:	f000 fc74 	bl	8001b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	233f      	movs	r3, #63	; 0x3f
 800129e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f9ad 	bl	8004620 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012cc:	f000 fc5a 	bl	8001b84 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3770      	adds	r7, #112	; 0x70
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	58000400 	.word	0x58000400
 80012dc:	58024800 	.word	0x58024800
 80012e0:	58024400 	.word	0x58024400

080012e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <MX_ADC1_Init+0xe4>)
 800130a:	4a30      	ldr	r2, [pc, #192]	; (80013cc <MX_ADC1_Init+0xe8>)
 800130c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001316:	2210      	movs	r2, #16
 8001318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_ADC1_Init+0xe4>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001322:	2204      	movs	r2, #4
 8001324:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001328:	2200      	movs	r2, #0
 800132a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <MX_ADC1_Init+0xe4>)
 800132e:	2200      	movs	r2, #0
 8001330:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001334:	2201      	movs	r2, #1
 8001336:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <MX_ADC1_Init+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_ADC1_Init+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_ADC1_Init+0xe4>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001366:	f001 f919 	bl	800259c <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001370:	f000 fc08 	bl	8001b84 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <MX_ADC1_Init+0xe4>)
 8001380:	f002 f88e 	bl	80034a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800138a:	f000 fbfb 	bl	8001b84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_ADC1_Init+0xec>)
 8001390:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001392:	2306      	movs	r3, #6
 8001394:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a0:	2304      	movs	r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_ADC1_Init+0xe4>)
 80013b2:	f001 fb6b 	bl	8002a8c <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80013bc:	f000 fbe2 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	24000308 	.word	0x24000308
 80013cc:	40022000 	.word	0x40022000
 80013d0:	3ef08000 	.word	0x3ef08000

080013d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM2_Init+0x98>)
 80013f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_TIM2_Init+0x98>)
 80013fc:	223f      	movs	r2, #63	; 0x3f
 80013fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM2_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0x98>)
 8001408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800140c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_TIM2_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM2_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_TIM2_Init+0x98>)
 800141c:	f005 fe12 	bl	8007044 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001426:	f000 fbad 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_TIM2_Init+0x98>)
 8001438:	f006 f864 	bl	8007504 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001442:	f000 fb9f 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_TIM2_Init+0x98>)
 8001454:	f006 faae 	bl	80079b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800145e:	f000 fb91 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400046c 	.word	0x2400046c

08001470 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_TIM3_Init+0x98>)
 8001490:	4a1e      	ldr	r2, [pc, #120]	; (800150c <MX_TIM3_Init+0x9c>)
 8001492:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_TIM3_Init+0x98>)
 8001496:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800149a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_TIM3_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_TIM3_Init+0x98>)
 80014a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_TIM3_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_TIM3_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014b6:	4814      	ldr	r0, [pc, #80]	; (8001508 <MX_TIM3_Init+0x98>)
 80014b8:	f005 fdc4 	bl	8007044 <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80014c2:	f000 fb5f 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_TIM3_Init+0x98>)
 80014d4:	f006 f816 	bl	8007504 <HAL_TIM_ConfigClockSource>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014de:	f000 fb51 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_TIM3_Init+0x98>)
 80014f0:	f006 fa60 	bl	80079b4 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80014fa:	f000 fb43 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240002b8 	.word	0x240002b8
 800150c:	40000400 	.word	0x40000400

08001510 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_TIM6_Init+0x64>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_TIM6_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_TIM6_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_TIM6_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_TIM6_Init+0x64>)
 8001534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001538:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_TIM6_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_TIM6_Init+0x64>)
 8001542:	f005 fd7f 	bl	8007044 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800154c:	f000 fb1a 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_TIM6_Init+0x64>)
 800155e:	f006 fa29 	bl	80079b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 fb0c 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	24000394 	.word	0x24000394
 8001578:	40001000 	.word	0x40001000

0800157c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <MX_USART3_UART_Init+0x94>)
 8001584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_USART3_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_USART3_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015c6:	f006 faa1 	bl	8007b0c <HAL_UART_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015d0:	f000 fad8 	bl	8001b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015d8:	f007 facc 	bl	8008b74 <HAL_UARTEx_SetTxFifoThreshold>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015e2:	f000 facf 	bl	8001b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015ea:	f007 fb01 	bl	8008bf0 <HAL_UARTEx_SetRxFifoThreshold>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f000 fac6 	bl	8001b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_USART3_UART_Init+0x90>)
 80015fa:	f007 fa82 	bl	8008b02 <HAL_UARTEx_DisableFifoMode>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001604:	f000 fabe 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	24000224 	.word	0x24000224
 8001610:	40004800 	.word	0x40004800

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4ba3      	ldr	r3, [pc, #652]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	4aa1      	ldr	r2, [pc, #644]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163a:	4b9f      	ldr	r3, [pc, #636]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001648:	4b9b      	ldr	r3, [pc, #620]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	4a9a      	ldr	r2, [pc, #616]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001658:	4b97      	ldr	r3, [pc, #604]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	4a92      	ldr	r2, [pc, #584]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001676:	4b90      	ldr	r3, [pc, #576]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	4a8b      	ldr	r2, [pc, #556]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	4b85      	ldr	r3, [pc, #532]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	4a83      	ldr	r2, [pc, #524]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b2:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c0:	4b7d      	ldr	r3, [pc, #500]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	4a7c      	ldr	r2, [pc, #496]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d0:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	4a74      	ldr	r2, [pc, #464]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ee:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <MX_GPIO_Init+0x2a4>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	486e      	ldr	r0, [pc, #440]	; (80018bc <MX_GPIO_Init+0x2a8>)
 8001702:	f002 fa83 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2110      	movs	r1, #16
 800170a:	486d      	ldr	r0, [pc, #436]	; (80018c0 <MX_GPIO_Init+0x2ac>)
 800170c:	f002 fa7e 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001716:	486b      	ldr	r0, [pc, #428]	; (80018c4 <MX_GPIO_Init+0x2b0>)
 8001718:	f002 fa78 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001722:	4869      	ldr	r0, [pc, #420]	; (80018c8 <MX_GPIO_Init+0x2b4>)
 8001724:	f002 fa72 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	4867      	ldr	r0, [pc, #412]	; (80018cc <MX_GPIO_Init+0x2b8>)
 800172e:	f002 fa6d 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001732:	2301      	movs	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	485c      	ldr	r0, [pc, #368]	; (80018bc <MX_GPIO_Init+0x2a8>)
 800174a:	f002 f897 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800174e:	2332      	movs	r3, #50	; 0x32
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175e:	230b      	movs	r3, #11
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4854      	ldr	r0, [pc, #336]	; (80018bc <MX_GPIO_Init+0x2a8>)
 800176a:	f002 f887 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001772:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	2301      	movs	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	484f      	ldr	r0, [pc, #316]	; (80018c0 <MX_GPIO_Init+0x2ac>)
 8001784:	f002 f87a 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001788:	2386      	movs	r3, #134	; 0x86
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001798:	230b      	movs	r3, #11
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4847      	ldr	r0, [pc, #284]	; (80018c0 <MX_GPIO_Init+0x2ac>)
 80017a4:	f002 f86a 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017a8:	2310      	movs	r3, #16
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4840      	ldr	r0, [pc, #256]	; (80018c0 <MX_GPIO_Init+0x2ac>)
 80017c0:	f002 f85c 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017d6:	230b      	movs	r3, #11
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	4839      	ldr	r0, [pc, #228]	; (80018c8 <MX_GPIO_Init+0x2b4>)
 80017e2:	f002 f84b 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017e6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017f8:	230a      	movs	r3, #10
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	482f      	ldr	r0, [pc, #188]	; (80018c0 <MX_GPIO_Init+0x2ac>)
 8001804:	f002 f83a 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001808:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800181a:	230b      	movs	r3, #11
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4827      	ldr	r0, [pc, #156]	; (80018c4 <MX_GPIO_Init+0x2b0>)
 8001826:	f002 f829 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800182a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4820      	ldr	r0, [pc, #128]	; (80018c4 <MX_GPIO_Init+0x2b0>)
 8001844:	f002 f81a 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800184c:	2311      	movs	r3, #17
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	481a      	ldr	r0, [pc, #104]	; (80018c8 <MX_GPIO_Init+0x2b4>)
 8001860:	f002 f80c 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <MX_GPIO_Init+0x2b4>)
 800187e:	f001 fffd 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_GPIO_Init+0x2b8>)
 800189a:	f001 ffef 	bl	800387c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2102      	movs	r1, #2
 80018a2:	2006      	movs	r0, #6
 80018a4:	f001 ffb5 	bl	8003812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018a8:	2006      	movs	r0, #6
 80018aa:	f001 ffcc 	bl	8003846 <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3730      	adds	r7, #48	; 0x30
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020800 	.word	0x58020800
 80018c0:	58020000 	.word	0x58020000
 80018c4:	58021800 	.word	0x58021800
 80018c8:	58020400 	.word	0x58020400
 80018cc:	58021000 	.word	0x58021000

080018d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b94      	ldr	r3, [pc, #592]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8116 	bne.w	8001b12 <HAL_TIM_PeriodElapsedCallback+0x242>
	{
		i++;
 80018e6:	4b93      	ldr	r3, [pc, #588]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018f0:	701a      	strb	r2, [r3, #0]
		if(i>=3)
 80018f2:	4b90      	ldr	r3, [pc, #576]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d902      	bls.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x30>
			i=0;
 80018fa:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
		if(i==0) //set the filter to red
 8001900:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d134      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	488a      	ldr	r0, [pc, #552]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800190e:	f002 f97d 	bl	8003c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	4889      	ldr	r0, [pc, #548]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001918:	f002 f978 	bl	8003c0c <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0|GPIO_PIN_4,GPIO_PIN_RESET);
			//read blue value
			dat_v[2]=dat;
 800191c:	4b88      	ldr	r3, [pc, #544]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001922:	809a      	strh	r2, [r3, #4]
			dat=0;
 8001924:	4b86      	ldr	r3, [pc, #536]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001926:	2200      	movs	r2, #0
 8001928:	801a      	strh	r2, [r3, #0]
			if(adj_en)
 800192a:	4b87      	ldr	r3, [pc, #540]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x90>
			{
				dat_v[2]=(uint16_t)((double)dat_v[2]*adj_v[2]/10.0);
 8001932:	4b84      	ldr	r3, [pc, #528]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800193e:	4b83      	ldr	r3, [pc, #524]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001940:	ed93 7b04 	vldr	d7, [r3, #16]
 8001944:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001948:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800194c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001950:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001954:	ee17 3a90 	vmov	r3, s15
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b7a      	ldr	r3, [pc, #488]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800195c:	809a      	strh	r2, [r3, #4]
 800195e:	e075      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x17c>
				// HAL_UART_Transmit(&huart3,(uint8_t*) "Blue\r\n",sizeof("Blue\r\n") - 1, HAL_MAX_DELAY);
				//printf("Blue=%d-%d\r\n",dat_v[2]/256,dat_v[2]%256);
			}
			else
			{
				adj_temp[2]+=dat_v[2];
 8001960:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001962:	889a      	ldrh	r2, [r3, #4]
 8001964:	4b77      	ldr	r3, [pc, #476]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001966:	889b      	ldrh	r3, [r3, #4]
 8001968:	4413      	add	r3, r2
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800196e:	809a      	strh	r2, [r3, #4]
 8001970:	e06c      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x17c>
			}
		}
		else if(i==1) //set the filter to green
 8001972:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d134      	bne.n	80019e4 <HAL_TIM_PeriodElapsedCallback+0x114>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2110      	movs	r1, #16
 800197e:	486e      	ldr	r0, [pc, #440]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001980:	f002 f944 	bl	8003c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	2101      	movs	r1, #1
 8001988:	486c      	ldr	r0, [pc, #432]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800198a:	f002 f93f 	bl	8003c0c <HAL_GPIO_WritePin>
			//read red value
			dat_v[0]=dat;
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	4b6c      	ldr	r3, [pc, #432]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001994:	801a      	strh	r2, [r3, #0]
			dat=0;
 8001996:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001998:	2200      	movs	r2, #0
 800199a:	801a      	strh	r2, [r3, #0]
			if(adj_en)
 800199c:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d016      	beq.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x102>
			{
				dat_v[0]=(uint16_t)((double)dat_v[0]*adj_v[0]/10.0);
 80019a4:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019b2:	ed93 7b00 	vldr	d7, [r3]
 80019b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019ba:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80019be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019c6:	ee17 3a90 	vmov	r3, s15
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e03c      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x17c>
//				sprintf(buffer_2, "Red=%d-%d\r\n",dat_v[0]/256,dat_v[0]%256);
//				HAL_UART_Transmit(&huart3, (uint8_t *)buffer_2, strlen(buffer_2), HAL_MAX_DELAY);
			}
			else
			{
				adj_temp[0]+=dat_v[0];
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80019d4:	881a      	ldrh	r2, [r3, #0]
 80019d6:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e033      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x17c>
			}
		}
		else  //set the filter to blue
		{

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2110      	movs	r1, #16
 80019e8:	4853      	ldr	r0, [pc, #332]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80019ea:	f002 f90f 	bl	8003c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2101      	movs	r1, #1
 80019f2:	4852      	ldr	r0, [pc, #328]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019f4:	f002 f90a 	bl	8003c0c <HAL_GPIO_WritePin>

			//read green value
			dat_v[1]=dat;
 80019f8:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80019fe:	805a      	strh	r2, [r3, #2]
			dat=0;
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	801a      	strh	r2, [r3, #0]
			if(adj_en)
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x16c>
			{
				dat_v[1]=(uint16_t)((double)dat_v[1]*adj_v[1]/10.0);
 8001a0e:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a10:	885b      	ldrh	r3, [r3, #2]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a24:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001a28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a30:	ee17 3a90 	vmov	r3, s15
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a38:	805a      	strh	r2, [r3, #2]
 8001a3a:	e007      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x17c>
				//HAL_UART_Transmit(&huart3,(uint8_t*) "Green\r\n",sizeof("Green\r\n") - 1, HAL_MAX_DELAY);
				//printf("Green=%d-%d\r\n",dat_v[1]/256,dat_v[1]%256);
			}
			else
			{
				adj_temp[1]+=dat_v[1];
 8001a3c:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a3e:	885a      	ldrh	r2, [r3, #2]
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a42:	885b      	ldrh	r3, [r3, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a4a:	805a      	strh	r2, [r3, #2]
			}
		}
		if(!adj_en)
 8001a4c:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d15e      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x242>
		{
			if(adj_num>=5)
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d954      	bls.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0x236>
			{
				adj_v[0]=(double)adj_temp[0]/100.0;
 8001a5c:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001a68:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8001b20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001a6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a72:	ed83 7b00 	vstr	d7, [r3]
				adj_v[0]=255.0/adj_v[0]*10.0;
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a78:	ed93 6b00 	vldr	d6, [r3]
 8001a7c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001b28 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001a80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a84:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a8e:	ed83 7b00 	vstr	d7, [r3]
				adj_v[1]=(double)adj_temp[1]/100.0;
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a94:	885b      	ldrh	r3, [r3, #2]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001a9e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001b20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001aa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001aa8:	ed83 7b02 	vstr	d7, [r3, #8]
				adj_v[1]=255.0/adj_v[1]*10.0;
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001aae:	ed93 6b02 	vldr	d6, [r3, #8]
 8001ab2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001b28 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001ab6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001aba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001abe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ac4:	ed83 7b02 	vstr	d7, [r3, #8]
				adj_v[2]=(double)adj_temp[2]/100.0;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001aca:	889b      	ldrh	r3, [r3, #4]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001ad4:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001b20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001ad8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ade:	ed83 7b04 	vstr	d7, [r3, #16]
				adj_v[2]=255.0/adj_v[2]*10.0;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ae4:	ed93 6b04 	vldr	d6, [r3, #16]
 8001ae8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001b28 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001aec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001af0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001af4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001afa:	ed83 7b04 	vstr	d7, [r3, #16]
				adj_en=1;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
			{
				adj_num++;
			}
		}
	}
}
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x242>
				adj_num++;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b10:	801a      	strh	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40590000 	.word	0x40590000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	406fe000 	.word	0x406fe000
 8001b30:	240002b8 	.word	0x240002b8
 8001b34:	2400036c 	.word	0x2400036c
 8001b38:	58020000 	.word	0x58020000
 8001b3c:	58020800 	.word	0x58020800
 8001b40:	24000220 	.word	0x24000220
 8001b44:	24000370 	.word	0x24000370
 8001b48:	24000222 	.word	0x24000222
 8001b4c:	24000378 	.word	0x24000378
 8001b50:	240004bc 	.word	0x240004bc
 8001b54:	24000468 	.word	0x24000468

08001b58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    /* Toggle LED1 */
    dat++;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b72:	801a      	strh	r2, [r3, #0]
  }
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	24000220 	.word	0x24000220

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <Error_Handler+0x8>
	...

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_MspInit+0x30>)
 8001b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9c:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_MspInit+0x30>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_MspInit+0x30>)
 8001ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0b8      	sub	sp, #224	; 0xe0
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	22bc      	movs	r2, #188	; 0xbc
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 f8b9 	bl	8008d5c <memset>
  if(hadc->Instance==ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_ADC_MspInit+0xd4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d14d      	bne.n	8001c90 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bf8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001bfe:	2309      	movs	r3, #9
 8001c00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001c02:	2304      	movs	r3, #4
 8001c04:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001c12:	2320      	movs	r3, #32
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001c16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 f886 	bl	8004d38 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001c32:	f7ff ffa7 	bl	8001b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c3c:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c72:	2308      	movs	r3, #8
 8001c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_ADC_MspInit+0xdc>)
 8001c8c:	f001 fdf6 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	37e0      	adds	r7, #224	; 0xe0
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020000 	.word	0x58020000

08001ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d117      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	201c      	movs	r0, #28
 8001cda:	f001 fd9a 	bl	8003812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cde:	201c      	movs	r0, #28
 8001ce0:	f001 fdb1 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ce4:	e030      	b.n	8001d48 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_TIM_Base_MspInit+0xb0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d117      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf6:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201d      	movs	r0, #29
 8001d14:	f001 fd7d 	bl	8003812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d18:	201d      	movs	r0, #29
 8001d1a:	f001 fd94 	bl	8003846 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	e013      	b.n	8001d48 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM6)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_TIM_Base_MspInit+0xb4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_TIM_Base_MspInit+0xac>)
 8001d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58024400 	.word	0x58024400
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40001000 	.word	0x40001000

08001d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0b8      	sub	sp, #224	; 0xe0
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	22bc      	movs	r2, #188	; 0xbc
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f006 ffed 	bl	8008d5c <memset>
  if(huart->Instance==USART3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_UART_MspInit+0xc0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d142      	bne.n	8001e12 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 ffcc 	bl	8004d38 <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001da6:	f7ff feed 	bl	8001b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_UART_MspInit+0xc4>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_UART_MspInit+0xc4>)
 8001db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_UART_MspInit+0xc4>)
 8001dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_UART_MspInit+0xc4>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_UART_MspInit+0xc4>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_UART_MspInit+0xc4>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e00:	2307      	movs	r3, #7
 8001e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_UART_MspInit+0xc8>)
 8001e0e:	f001 fd35 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	37e0      	adds	r7, #224	; 0xe0
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40004800 	.word	0x40004800
 8001e20:	58024400 	.word	0x58024400
 8001e24:	58020c00 	.word	0x58020c00

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 f980 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f001 fedc 	bl	8003c3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TIM2_IRQHandler+0x10>)
 8001e92:	f005 fa17 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2400046c 	.word	0x2400046c

08001ea0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM3_IRQHandler+0x10>)
 8001ea6:	f005 fa0d 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	240002b8 	.word	0x240002b8

08001eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	return 1;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_kill>:

int _kill(int pid, int sig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ece:	f006 ff1b 	bl	8008d08 <__errno>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2216      	movs	r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_exit>:

void _exit (int status)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ffe7 	bl	8001ec4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ef6:	e7fe      	b.n	8001ef6 <_exit+0x12>

08001ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e00a      	b.n	8001f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f0a:	f3af 8000 	nop.w
 8001f0e:	4601      	mov	r1, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbf0      	blt.n	8001f0a <_read+0x12>
	}

return len;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e009      	b.n	8001f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf1      	blt.n	8001f44 <_write+0x12>
	}
	return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_close>:

int _close(int file)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f92:	605a      	str	r2, [r3, #4]
	return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_isatty>:

int _isatty(int file)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	return 1;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <_sbrk+0x5c>)
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <_sbrk+0x60>)
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <_sbrk+0x64>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <_sbrk+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d207      	bcs.n	8002014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002004:	f006 fe80 	bl	8008d08 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	e009      	b.n	8002028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <_sbrk+0x64>)
 8002024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	24080000 	.word	0x24080000
 8002034:	00000400 	.word	0x00000400
 8002038:	24000210 	.word	0x24000210
 800203c:	240004d8 	.word	0x240004d8

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002044:	f7fe fd14 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	; (8002080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	; (800208c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f006 fe51 	bl	8008d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7fe fec1 	bl	8000df8 <main>
  bx  lr
 8002076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002078:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800207c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002080:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002084:	0800d98c 	.word	0x0800d98c
  ldr r2, =_sbss
 8002088:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 800208c:	240004d8 	.word	0x240004d8

08002090 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC3_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209a:	2003      	movs	r0, #3
 800209c:	f001 fbae 	bl	80037fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020a0:	f002 fc74 	bl	800498c <HAL_RCC_GetSysClockFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_Init+0x68>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	4913      	ldr	r1, [pc, #76]	; (8002100 <HAL_Init+0x6c>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_Init+0x68>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_Init+0x6c>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_Init+0x70>)
 80020d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_Init+0x74>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f814 	bl	800210c <HAL_InitTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e002      	b.n	80020f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020ee:	f7ff fd4f 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	58024400 	.word	0x58024400
 8002100:	0800d490 	.word	0x0800d490
 8002104:	24000004 	.word	0x24000004
 8002108:	24000000 	.word	0x24000000

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_InitTick+0x60>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e021      	b.n	8002164 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_InitTick+0x64>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_InitTick+0x60>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fb93 	bl	8003862 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002154:	f001 fb5d 	bl	8003812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x68>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	24000010 	.word	0x24000010
 8002170:	24000000 	.word	0x24000000
 8002174:	2400000c 	.word	0x2400000c

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	24000010 	.word	0x24000010
 800219c:	240004c4 	.word	0x240004c4

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	240004c4 	.word	0x240004c4

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	24000010 	.word	0x24000010

08002200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetREVID+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0c1b      	lsrs	r3, r3, #16
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	5c001000 	.word	0x5c001000

08002218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3360      	adds	r3, #96	; 0x60
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	611a      	str	r2, [r3, #16]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b087      	sub	sp, #28
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	431a      	orrs	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
  }
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3330      	adds	r3, #48	; 0x30
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	4413      	add	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	211f      	movs	r1, #31
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 011f 	and.w	r1, r3, #31
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	431a      	orrs	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3314      	adds	r3, #20
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0e5b      	lsrs	r3, r3, #25
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0d1b      	lsrs	r3, r3, #20
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2107      	movs	r1, #7
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	0d1b      	lsrs	r3, r3, #20
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	431a      	orrs	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0318 	and.w	r3, r3, #24
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <LL_ADC_SetChannelSingleDiff+0x44>)
 80023fc:	40d9      	lsrs	r1, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	400b      	ands	r3, r1
 8002402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	000fffff 	.word	0x000fffff

08002420 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 031f 	and.w	r3, r3, #31
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <LL_ADC_DisableDeepPowerDown+0x20>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6093      	str	r3, [r2, #8]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	5fffffc0 	.word	0x5fffffc0

08002460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <LL_ADC_EnableInternalRegulator+0x24>)
 8002496:	4013      	ands	r3, r2
 8002498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	6fffffc0 	.word	0x6fffffc0

080024b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c4:	d101      	bne.n	80024ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_ADC_Enable+0x24>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	7fffffc0 	.word	0x7fffffc0

08002500 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <LL_ADC_IsEnabled+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_ADC_IsEnabled+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <LL_ADC_REG_StartConversion+0x24>)
 8002536:	4013      	ands	r3, r2
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	7fffffc0 	.word	0x7fffffc0

08002550 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d101      	bne.n	8002568 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d101      	bne.n	800258e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e18e      	b.n	80028d4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fafd 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff3f 	bl	8002460 <LL_ADC_IsDeepPowerDownEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff25 	bl	800243c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff5a 	bl	80024b0 <LL_ADC_IsInternalRegulatorEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d114      	bne.n	800262c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff3e 	bl	8002488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260c:	4b9a      	ldr	r3, [pc, #616]	; (8002878 <HAL_ADC_Init+0x2dc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	4a9a      	ldr	r2, [pc, #616]	; (800287c <HAL_ADC_Init+0x2e0>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	3301      	adds	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800261e:	e002      	b.n	8002626 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff3d 	bl	80024b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff77 	bl	8002550 <LL_ADC_REG_IsConversionOngoing>
 8002662:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 8128 	bne.w	80028c2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 8124 	bne.w	80028c2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002682:	f043 0202 	orr.w	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff36 	bl	8002500 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d136      	bne.n	8002708 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a78      	ldr	r2, [pc, #480]	; (8002880 <HAL_ADC_Init+0x2e4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_ADC_Init+0x112>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a76      	ldr	r2, [pc, #472]	; (8002884 <HAL_ADC_Init+0x2e8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10e      	bne.n	80026cc <HAL_ADC_Init+0x130>
 80026ae:	4874      	ldr	r0, [pc, #464]	; (8002880 <HAL_ADC_Init+0x2e4>)
 80026b0:	f7ff ff26 	bl	8002500 <LL_ADC_IsEnabled>
 80026b4:	4604      	mov	r4, r0
 80026b6:	4873      	ldr	r0, [pc, #460]	; (8002884 <HAL_ADC_Init+0x2e8>)
 80026b8:	f7ff ff22 	bl	8002500 <LL_ADC_IsEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	4323      	orrs	r3, r4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e008      	b.n	80026de <HAL_ADC_Init+0x142>
 80026cc:	486e      	ldr	r0, [pc, #440]	; (8002888 <HAL_ADC_Init+0x2ec>)
 80026ce:	f7ff ff17 	bl	8002500 <LL_ADC_IsEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a66      	ldr	r2, [pc, #408]	; (8002880 <HAL_ADC_Init+0x2e4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_ADC_Init+0x15a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a64      	ldr	r2, [pc, #400]	; (8002884 <HAL_ADC_Init+0x2e8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Init+0x15e>
 80026f6:	4a65      	ldr	r2, [pc, #404]	; (800288c <HAL_ADC_Init+0x2f0>)
 80026f8:	e000      	b.n	80026fc <HAL_ADC_Init+0x160>
 80026fa:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_ADC_Init+0x2f4>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f7ff fd88 	bl	8002218 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002708:	f7ff fd7a 	bl	8002200 <HAL_GetREVID>
 800270c:	4603      	mov	r3, r0
 800270e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002712:	4293      	cmp	r3, r2
 8002714:	d914      	bls.n	8002740 <HAL_ADC_Init+0x1a4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b10      	cmp	r3, #16
 800271c:	d110      	bne.n	8002740 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7d5b      	ldrb	r3, [r3, #21]
 8002722:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002728:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800272e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7f1b      	ldrb	r3, [r3, #28]
 8002734:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002736:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002738:	f043 030c 	orr.w	r3, r3, #12
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e00d      	b.n	800275c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7d5b      	ldrb	r3, [r3, #21]
 8002744:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800274a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002750:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7f1b      	ldrb	r3, [r3, #28]
 8002756:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7f1b      	ldrb	r3, [r3, #28]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	3b01      	subs	r3, #1
 800276a:	045b      	lsls	r3, r3, #17
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_ADC_Init+0x2f8>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	69b9      	ldr	r1, [r7, #24]
 800279e:	430b      	orrs	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fed2 	bl	8002550 <LL_ADC_REG_IsConversionOngoing>
 80027ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fedf 	bl	8002576 <LL_ADC_INJ_IsConversionOngoing>
 80027b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d14a      	bne.n	8002856 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d147      	bne.n	8002856 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7d1b      	ldrb	r3, [r3, #20]
 80027ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <HAL_ADC_Init+0x2fc>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d11b      	bne.n	800282a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_ADC_Init+0x300>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002806:	3a01      	subs	r2, #1
 8002808:	0411      	lsls	r1, r2, #16
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800281a:	430a      	orrs	r2, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	e007      	b.n	800283a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fcf5 	bl	8003240 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d120      	bne.n	80028a0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f023 010f 	bic.w	r1, r3, #15
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
 8002876:	e01b      	b.n	80028b0 <HAL_ADC_Init+0x314>
 8002878:	24000000 	.word	0x24000000
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	40022000 	.word	0x40022000
 8002884:	40022100 	.word	0x40022100
 8002888:	58026000 	.word	0x58026000
 800288c:	40022300 	.word	0x40022300
 8002890:	58026300 	.word	0x58026300
 8002894:	fff0c003 	.word	0xfff0c003
 8002898:	ffffbffc 	.word	0xffffbffc
 800289c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020f 	bic.w	r2, r2, #15
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f023 0303 	bic.w	r3, r3, #3
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
 80028c0:	e007      	b.n	80028d2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3724      	adds	r7, #36	; 0x24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5c      	ldr	r2, [pc, #368]	; (8002a5c <HAL_ADC_Start+0x180>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_ADC_Start+0x1c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <HAL_ADC_Start+0x184>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_Start+0x20>
 80028f8:	4b5a      	ldr	r3, [pc, #360]	; (8002a64 <HAL_ADC_Start+0x188>)
 80028fa:	e000      	b.n	80028fe <HAL_ADC_Start+0x22>
 80028fc:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <HAL_ADC_Start+0x18c>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fd8e 	bl	8002420 <LL_ADC_GetMultimode>
 8002904:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fe20 	bl	8002550 <LL_ADC_REG_IsConversionOngoing>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 809a 	bne.w	8002a4c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADC_Start+0x4a>
 8002922:	2302      	movs	r3, #2
 8002924:	e095      	b.n	8002a52 <HAL_ADC_Start+0x176>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fbfc 	bl	800312c <ADC_Enable>
 8002934:	4603      	mov	r3, r0
 8002936:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8081 	bne.w	8002a42 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_ADC_Start+0x190>)
 8002946:	4013      	ands	r3, r2
 8002948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a42      	ldr	r2, [pc, #264]	; (8002a60 <HAL_ADC_Start+0x184>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d002      	beq.n	8002960 <HAL_ADC_Start+0x84>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e000      	b.n	8002962 <HAL_ADC_Start+0x86>
 8002960:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_ADC_Start+0x180>)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4293      	cmp	r3, r2
 8002968:	d002      	beq.n	8002970 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d106      	bne.n	8002998 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f023 0206 	bic.w	r2, r3, #6
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	659a      	str	r2, [r3, #88]	; 0x58
 8002996:	e002      	b.n	800299e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	221c      	movs	r2, #28
 80029a4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_ADC_Start+0x184>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d002      	beq.n	80029be <HAL_ADC_Start+0xe2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e000      	b.n	80029c0 <HAL_ADC_Start+0xe4>
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_ADC_Start+0x180>)
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d008      	beq.n	80029da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d002      	beq.n	80029da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d114      	bne.n	8002a04 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd93 	bl	8002528 <LL_ADC_REG_StartConversion>
 8002a02:	e025      	b.n	8002a50 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_ADC_Start+0x184>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d002      	beq.n	8002a20 <HAL_ADC_Start+0x144>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_Start+0x146>
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_ADC_Start+0x180>)
 8002a22:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00f      	beq.n	8002a50 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a40:	e006      	b.n	8002a50 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a4a:	e001      	b.n	8002a50 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40022100 	.word	0x40022100
 8002a64:	40022300 	.word	0x40022300
 8002a68:	58026300 	.word	0x58026300
 8002a6c:	fffff0fe 	.word	0xfffff0fe

08002a70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b0a1      	sub	sp, #132	; 0x84
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a9d      	ldr	r2, [pc, #628]	; (8002d1c <HAL_ADC_ConfigChannel+0x290>)
 8002aa6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x2a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e321      	b.n	80030fa <HAL_ADC_ConfigChannel+0x66e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd44 	bl	8002550 <LL_ADC_REG_IsConversionOngoing>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8306 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x62>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	e016      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x90>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002afe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2201      	movs	r2, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	69d1      	ldr	r1, [r2, #28]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	430b      	orrs	r3, r1
 8002b28:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7ff fbf6 	bl	8002328 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fd05 	bl	8002550 <LL_ADC_REG_IsConversionOngoing>
 8002b46:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd12 	bl	8002576 <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80b3 	bne.w	8002cc2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 80af 	bne.w	8002cc2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f7ff fc05 	bl	8002380 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_ADC_ConfigChannel+0x294>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x110>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	e01d      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x14c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x136>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	e00a      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x14c>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d027      	beq.n	8002c32 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6919      	ldr	r1, [r3, #16]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf0:	f7ff fb46 	bl	8002280 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6919      	ldr	r1, [r3, #16]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	7e5b      	ldrb	r3, [r3, #25]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d102      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x17e>
 8002c04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c08:	e000      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x180>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f7ff fb70 	bl	80022f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6919      	ldr	r1, [r3, #16]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	7e1b      	ldrb	r3, [r3, #24]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x19c>
 8002c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c26:	e000      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x19e>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f7ff fb48 	bl	80022c0 <LL_ADC_SetDataRightShift>
 8002c30:	e047      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d107      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c54:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	069b      	lsls	r3, r3, #26
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d107      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c78:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c9c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cc0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fc1a 	bl	8002500 <LL_ADC_IsEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 820d 	bne.w	80030ee <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f7ff fb79 	bl	80023d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_ADC_ConfigChannel+0x290>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	f040 8133 	bne.w	8002f58 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d110      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x298>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0e9b      	lsrs	r3, r3, #26
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2b09      	cmp	r3, #9
 8002d10:	bf94      	ite	ls
 8002d12:	2301      	movls	r3, #1
 8002d14:	2300      	movhi	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e01e      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x2cc>
 8002d1a:	bf00      	nop
 8002d1c:	47ff0000 	.word	0x47ff0000
 8002d20:	5c001000 	.word	0x5c001000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e003      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2b09      	cmp	r3, #9
 8002d50:	bf94      	ite	ls
 8002d52:	2301      	movls	r3, #1
 8002d54:	2300      	movhi	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d079      	beq.n	8002e50 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d107      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x2ec>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	069b      	lsls	r3, r3, #26
 8002d72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d76:	e015      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x318>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d88:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x338>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	3301      	adds	r3, #1
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	e017      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x368>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	ea42 0103 	orr.w	r1, r2, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x38e>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	051b      	lsls	r3, r3, #20
 8002e18:	e018      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x3c0>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e003      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	e07e      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x3e0>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	3301      	adds	r3, #1
 8002e64:	069b      	lsls	r3, r3, #26
 8002e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6a:	e015      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x40c>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	069b      	lsls	r3, r3, #26
 8002e94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x42c>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	e017      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x45c>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	ea42 0103 	orr.w	r1, r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x488>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b1e      	subs	r3, #30
 8002f0c:	051b      	lsls	r3, r3, #20
 8002f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f12:	e01b      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x4c0>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	60fb      	str	r3, [r7, #12]
  return result;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e003      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 021f 	and.w	r2, r3, #31
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	3b1e      	subs	r3, #30
 8002f46:	051b      	lsls	r3, r3, #20
 8002f48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7ff fa14 	bl	8002380 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f280 80c6 	bge.w	80030ee <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_ADC_ConfigChannel+0x678>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x4ea>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a65      	ldr	r2, [pc, #404]	; (8003108 <HAL_ADC_ConfigChannel+0x67c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x4ee>
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_ADC_ConfigChannel+0x680>)
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x4f0>
 8002f7a:	4b65      	ldr	r3, [pc, #404]	; (8003110 <HAL_ADC_ConfigChannel+0x684>)
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f971 	bl	8002264 <LL_ADC_GetCommonPathInternalCh>
 8002f82:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5e      	ldr	r2, [pc, #376]	; (8003104 <HAL_ADC_ConfigChannel+0x678>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_ADC_ConfigChannel+0x50c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5d      	ldr	r2, [pc, #372]	; (8003108 <HAL_ADC_ConfigChannel+0x67c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10e      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x52a>
 8002f98:	485a      	ldr	r0, [pc, #360]	; (8003104 <HAL_ADC_ConfigChannel+0x678>)
 8002f9a:	f7ff fab1 	bl	8002500 <LL_ADC_IsEnabled>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4859      	ldr	r0, [pc, #356]	; (8003108 <HAL_ADC_ConfigChannel+0x67c>)
 8002fa2:	f7ff faad 	bl	8002500 <LL_ADC_IsEnabled>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4323      	orrs	r3, r4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e008      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x53c>
 8002fb6:	4857      	ldr	r0, [pc, #348]	; (8003114 <HAL_ADC_ConfigChannel+0x688>)
 8002fb8:	f7ff faa2 	bl	8002500 <LL_ADC_IsEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d07d      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a51      	ldr	r2, [pc, #324]	; (8003118 <HAL_ADC_ConfigChannel+0x68c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d130      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x5ac>
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d12b      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4b      	ldr	r2, [pc, #300]	; (8003114 <HAL_ADC_ConfigChannel+0x688>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f040 8081 	bne.w	80030ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a44      	ldr	r2, [pc, #272]	; (8003104 <HAL_ADC_ConfigChannel+0x678>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x574>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a43      	ldr	r2, [pc, #268]	; (8003108 <HAL_ADC_ConfigChannel+0x67c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x578>
 8003000:	4a42      	ldr	r2, [pc, #264]	; (800310c <HAL_ADC_ConfigChannel+0x680>)
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x57a>
 8003004:	4a42      	ldr	r2, [pc, #264]	; (8003110 <HAL_ADC_ConfigChannel+0x684>)
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7ff f915 	bl	800223e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003014:	4b41      	ldr	r3, [pc, #260]	; (800311c <HAL_ADC_ConfigChannel+0x690>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	4a41      	ldr	r2, [pc, #260]	; (8003120 <HAL_ADC_ConfigChannel+0x694>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003028:	e002      	b.n	8003030 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f9      	bne.n	800302a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003036:	e05a      	b.n	80030ee <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a39      	ldr	r2, [pc, #228]	; (8003124 <HAL_ADC_ConfigChannel+0x698>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11e      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x5f4>
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d119      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a30      	ldr	r2, [pc, #192]	; (8003114 <HAL_ADC_ConfigChannel+0x688>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d14b      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_ADC_ConfigChannel+0x678>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_ADC_ConfigChannel+0x5de>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_ADC_ConfigChannel+0x67c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x5e2>
 800306a:	4a28      	ldr	r2, [pc, #160]	; (800310c <HAL_ADC_ConfigChannel+0x680>)
 800306c:	e000      	b.n	8003070 <HAL_ADC_ConfigChannel+0x5e4>
 800306e:	4a28      	ldr	r2, [pc, #160]	; (8003110 <HAL_ADC_ConfigChannel+0x684>)
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7ff f8e0 	bl	800223e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800307e:	e036      	b.n	80030ee <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_ADC_ConfigChannel+0x69c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d131      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x662>
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d12c      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <HAL_ADC_ConfigChannel+0x688>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d127      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_ADC_ConfigChannel+0x678>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x626>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a16      	ldr	r2, [pc, #88]	; (8003108 <HAL_ADC_ConfigChannel+0x67c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x62a>
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_ADC_ConfigChannel+0x680>)
 80030b4:	e000      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x62c>
 80030b6:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_ADC_ConfigChannel+0x684>)
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f7ff f8bc 	bl	800223e <LL_ADC_SetCommonPathInternalCh>
 80030c6:	e012      	b.n	80030ee <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030da:	e008      	b.n	80030ee <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3784      	adds	r7, #132	; 0x84
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	bf00      	nop
 8003104:	40022000 	.word	0x40022000
 8003108:	40022100 	.word	0x40022100
 800310c:	40022300 	.word	0x40022300
 8003110:	58026300 	.word	0x58026300
 8003114:	58026000 	.word	0x58026000
 8003118:	cb840000 	.word	0xcb840000
 800311c:	24000000 	.word	0x24000000
 8003120:	053e2d63 	.word	0x053e2d63
 8003124:	c7520000 	.word	0xc7520000
 8003128:	cfb80000 	.word	0xcfb80000

0800312c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f9e1 	bl	8002500 <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d16e      	bne.n	8003222 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <ADC_Enable+0x100>)
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e05a      	b.n	8003224 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f9b0 	bl	80024d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003178:	f7ff f812 	bl	80021a0 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <ADC_Enable+0x104>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <ADC_Enable+0x66>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a29      	ldr	r2, [pc, #164]	; (8003234 <ADC_Enable+0x108>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <ADC_Enable+0x6a>
 8003192:	4b29      	ldr	r3, [pc, #164]	; (8003238 <ADC_Enable+0x10c>)
 8003194:	e000      	b.n	8003198 <ADC_Enable+0x6c>
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <ADC_Enable+0x110>)
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff f941 	bl	8002420 <LL_ADC_GetMultimode>
 800319e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a23      	ldr	r2, [pc, #140]	; (8003234 <ADC_Enable+0x108>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d002      	beq.n	80031b0 <ADC_Enable+0x84>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e000      	b.n	80031b2 <ADC_Enable+0x86>
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <ADC_Enable+0x104>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02c      	beq.n	8003214 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d130      	bne.n	8003222 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c0:	e028      	b.n	8003214 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f99a 	bl	8002500 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f97e 	bl	80024d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031dc:	f7fe ffe0 	bl	80021a0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d914      	bls.n	8003214 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00d      	beq.n	8003214 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0210 	orr.w	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d1cf      	bne.n	80031c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	8000003f 	.word	0x8000003f
 8003230:	40022000 	.word	0x40022000
 8003234:	40022100 	.word	0x40022100
 8003238:	40022300 	.word	0x40022300
 800323c:	58026300 	.word	0x58026300

08003240 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a79      	ldr	r2, [pc, #484]	; (8003434 <ADC_ConfigureBoostMode+0x1f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <ADC_ConfigureBoostMode+0x1c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a78      	ldr	r2, [pc, #480]	; (8003438 <ADC_ConfigureBoostMode+0x1f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d109      	bne.n	8003270 <ADC_ConfigureBoostMode+0x30>
 800325c:	4b77      	ldr	r3, [pc, #476]	; (800343c <ADC_ConfigureBoostMode+0x1fc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e008      	b.n	8003282 <ADC_ConfigureBoostMode+0x42>
 8003270:	4b73      	ldr	r3, [pc, #460]	; (8003440 <ADC_ConfigureBoostMode+0x200>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01c      	beq.n	80032c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003286:	f001 fcfb 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 800328a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003294:	d010      	beq.n	80032b8 <ADC_ConfigureBoostMode+0x78>
 8003296:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800329a:	d871      	bhi.n	8003380 <ADC_ConfigureBoostMode+0x140>
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d002      	beq.n	80032a8 <ADC_ConfigureBoostMode+0x68>
 80032a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a6:	d16b      	bne.n	8003380 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	60fb      	str	r3, [r7, #12]
        break;
 80032b6:	e066      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	60fb      	str	r3, [r7, #12]
        break;
 80032be:	e062      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80032c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032c4:	f002 fc78 	bl	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032d2:	d051      	beq.n	8003378 <ADC_ConfigureBoostMode+0x138>
 80032d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032d8:	d854      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 80032da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032de:	d047      	beq.n	8003370 <ADC_ConfigureBoostMode+0x130>
 80032e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032e4:	d84e      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 80032e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032ea:	d03d      	beq.n	8003368 <ADC_ConfigureBoostMode+0x128>
 80032ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032f0:	d848      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 80032f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f6:	d033      	beq.n	8003360 <ADC_ConfigureBoostMode+0x120>
 80032f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032fc:	d842      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 80032fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003302:	d029      	beq.n	8003358 <ADC_ConfigureBoostMode+0x118>
 8003304:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003308:	d83c      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 800330a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800330e:	d01a      	beq.n	8003346 <ADC_ConfigureBoostMode+0x106>
 8003310:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003314:	d836      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 8003316:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800331a:	d014      	beq.n	8003346 <ADC_ConfigureBoostMode+0x106>
 800331c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003320:	d830      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 8003322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003326:	d00e      	beq.n	8003346 <ADC_ConfigureBoostMode+0x106>
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332c:	d82a      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 800332e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003332:	d008      	beq.n	8003346 <ADC_ConfigureBoostMode+0x106>
 8003334:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003338:	d824      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x144>
 800333a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800333e:	d002      	beq.n	8003346 <ADC_ConfigureBoostMode+0x106>
 8003340:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003344:	d11e      	bne.n	8003384 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	e016      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
        break;
 800335e:	e012      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	60fb      	str	r3, [r7, #12]
        break;
 8003366:	e00e      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	60fb      	str	r3, [r7, #12]
        break;
 800336e:	e00a      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	09db      	lsrs	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
        break;
 8003376:	e006      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	60fb      	str	r3, [r7, #12]
        break;
 800337e:	e002      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003384:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003386:	f7fe ff3b 	bl	8002200 <HAL_GetREVID>
 800338a:	4603      	mov	r3, r0
 800338c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003390:	4293      	cmp	r3, r2
 8003392:	d815      	bhi.n	80033c0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <ADC_ConfigureBoostMode+0x204>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d908      	bls.n	80033ae <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80033ac:	e03e      	b.n	800342c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	e035      	b.n	800342c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <ADC_ConfigureBoostMode+0x208>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d808      	bhi.n	80033e0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033dc:	609a      	str	r2, [r3, #8]
}
 80033de:	e025      	b.n	800342c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a1a      	ldr	r2, [pc, #104]	; (800344c <ADC_ConfigureBoostMode+0x20c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d80a      	bhi.n	80033fe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	e016      	b.n	800342c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <ADC_ConfigureBoostMode+0x210>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d80a      	bhi.n	800341c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	e007      	b.n	800342c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40022000 	.word	0x40022000
 8003438:	40022100 	.word	0x40022100
 800343c:	40022300 	.word	0x40022300
 8003440:	58026300 	.word	0x58026300
 8003444:	01312d00 	.word	0x01312d00
 8003448:	005f5e10 	.word	0x005f5e10
 800344c:	00bebc20 	.word	0x00bebc20
 8003450:	017d7840 	.word	0x017d7840

08003454 <LL_ADC_IsEnabled>:
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <LL_ADC_IsEnabled+0x18>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_IsEnabled+0x1a>
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_REG_IsConversionOngoing>:
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d101      	bne.n	8003492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b09f      	sub	sp, #124	; 0x7c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0be      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5c      	ldr	r2, [pc, #368]	; (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034d8:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e001      	b.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e09d      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ffb9 	bl	800347a <LL_ADC_REG_IsConversionOngoing>
 8003508:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ffb3 	bl	800347a <LL_ADC_REG_IsConversionOngoing>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d17f      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800351a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351c:	2b00      	cmp	r3, #0
 800351e:	d17c      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a47      	ldr	r2, [pc, #284]	; (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a46      	ldr	r2, [pc, #280]	; (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003538:	4b45      	ldr	r3, [pc, #276]	; (8003650 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800353a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d039      	beq.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	431a      	orrs	r2, r3
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3a      	ldr	r2, [pc, #232]	; (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800356a:	4836      	ldr	r0, [pc, #216]	; (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800356c:	f7ff ff72 	bl	8003454 <LL_ADC_IsEnabled>
 8003570:	4604      	mov	r4, r0
 8003572:	4835      	ldr	r0, [pc, #212]	; (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003574:	f7ff ff6e 	bl	8003454 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	4323      	orrs	r3, r4
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e008      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003588:	4832      	ldr	r0, [pc, #200]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800358a:	f7ff ff63 	bl	8003454 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d047      	beq.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800359e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	6811      	ldr	r1, [r2, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	6892      	ldr	r2, [r2, #8]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b6:	e03a      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80035b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10e      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80035d8:	481a      	ldr	r0, [pc, #104]	; (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035da:	f7ff ff3b 	bl	8003454 <LL_ADC_IsEnabled>
 80035de:	4604      	mov	r4, r0
 80035e0:	4819      	ldr	r0, [pc, #100]	; (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035e2:	f7ff ff37 	bl	8003454 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4323      	orrs	r3, r4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e008      	b.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80035f6:	4817      	ldr	r0, [pc, #92]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035f8:	f7ff ff2c 	bl	8003454 <LL_ADC_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003612:	4013      	ands	r3, r2
 8003614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003616:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003618:	e009      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800362c:	e000      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800362e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003638:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800363c:	4618      	mov	r0, r3
 800363e:	377c      	adds	r7, #124	; 0x7c
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300
 8003654:	58026000 	.word	0x58026000
 8003658:	fffff0e0 	.word	0xfffff0e0

0800365c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <__NVIC_SetPriorityGrouping+0x40>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003678:	4013      	ands	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x40>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	05fa0000 	.word	0x05fa0000

080036a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <__NVIC_GetPriorityGrouping+0x18>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	f003 0307 	and.w	r3, r3, #7
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db0b      	blt.n	80036ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	4907      	ldr	r1, [pc, #28]	; (80036f8 <__NVIC_EnableIRQ+0x38>)
 80036da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2001      	movs	r0, #1
 80036e2:	fa00 f202 	lsl.w	r2, r0, r2
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000e100 	.word	0xe000e100

080036fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db0a      	blt.n	8003726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	490c      	ldr	r1, [pc, #48]	; (8003748 <__NVIC_SetPriority+0x4c>)
 8003716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	440b      	add	r3, r1
 8003720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003724:	e00a      	b.n	800373c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4908      	ldr	r1, [pc, #32]	; (800374c <__NVIC_SetPriority+0x50>)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3b04      	subs	r3, #4
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	440b      	add	r3, r1
 800373a:	761a      	strb	r2, [r3, #24]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000e100 	.word	0xe000e100
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f1c3 0307 	rsb	r3, r3, #7
 800376a:	2b04      	cmp	r3, #4
 800376c:	bf28      	it	cs
 800376e:	2304      	movcs	r3, #4
 8003770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3304      	adds	r3, #4
 8003776:	2b06      	cmp	r3, #6
 8003778:	d902      	bls.n	8003780 <NVIC_EncodePriority+0x30>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3b03      	subs	r3, #3
 800377e:	e000      	b.n	8003782 <NVIC_EncodePriority+0x32>
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	43d9      	mvns	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	4313      	orrs	r3, r2
         );
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c8:	d301      	bcc.n	80037ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00f      	b.n	80037ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <SysTick_Config+0x40>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d6:	210f      	movs	r1, #15
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037dc:	f7ff ff8e 	bl	80036fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SysTick_Config+0x40>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SysTick_Config+0x40>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff29 	bl	800365c <__NVIC_SetPriorityGrouping>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003820:	f7ff ff40 	bl	80036a4 <__NVIC_GetPriorityGrouping>
 8003824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff90 	bl	8003750 <NVIC_EncodePriority>
 8003830:	4602      	mov	r2, r0
 8003832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff5f 	bl	80036fc <__NVIC_SetPriority>
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff33 	bl	80036c0 <__NVIC_EnableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffa4 	bl	80037b8 <SysTick_Config>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_GPIO_Init+0x234>)
 800388c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800388e:	e194      	b.n	8003bba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8186 	beq.w	8003bb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d005      	beq.n	80038c0 <HAL_GPIO_Init+0x44>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d130      	bne.n	8003922 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038f6:	2201      	movs	r2, #1
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 0201 	and.w	r2, r3, #1
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b03      	cmp	r3, #3
 800392c:	d017      	beq.n	800395e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d123      	bne.n	80039b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	220f      	movs	r2, #15
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80e0 	beq.w	8003bb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_GPIO_Init+0x238>)
 80039f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039fa:	4a2e      	ldr	r2, [pc, #184]	; (8003ab4 <HAL_GPIO_Init+0x238>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_GPIO_Init+0x238>)
 8003a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a12:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <HAL_GPIO_Init+0x23c>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <HAL_GPIO_Init+0x240>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d052      	beq.n	8003ae4 <HAL_GPIO_Init+0x268>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_GPIO_Init+0x244>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_GPIO_Init+0x22e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_GPIO_Init+0x248>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_GPIO_Init+0x22a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_GPIO_Init+0x24c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d025      	beq.n	8003aa2 <HAL_GPIO_Init+0x226>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_GPIO_Init+0x250>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_Init+0x222>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_GPIO_Init+0x254>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_Init+0x21e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_GPIO_Init+0x258>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x21a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <HAL_GPIO_Init+0x25c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x216>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_GPIO_Init+0x260>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x212>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_GPIO_Init+0x264>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x20e>
 8003a86:	2309      	movs	r3, #9
 8003a88:	e02d      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	e02b      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	e029      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e027      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e025      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a9a:	2305      	movs	r3, #5
 8003a9c:	e023      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e021      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e01f      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e01d      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e01b      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aae:	bf00      	nop
 8003ab0:	58000080 	.word	0x58000080
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	58000400 	.word	0x58000400
 8003abc:	58020000 	.word	0x58020000
 8003ac0:	58020400 	.word	0x58020400
 8003ac4:	58020800 	.word	0x58020800
 8003ac8:	58020c00 	.word	0x58020c00
 8003acc:	58021000 	.word	0x58021000
 8003ad0:	58021400 	.word	0x58021400
 8003ad4:	58021800 	.word	0x58021800
 8003ad8:	58021c00 	.word	0x58021c00
 8003adc:	58022000 	.word	0x58022000
 8003ae0:	58022400 	.word	0x58022400
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f002 0203 	and.w	r2, r2, #3
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	4093      	lsls	r3, r2
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af6:	4938      	ldr	r1, [pc, #224]	; (8003bd8 <HAL_GPIO_Init+0x35c>)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f47f ae63 	bne.w	8003890 <HAL_GPIO_Init+0x14>
  }
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	3724      	adds	r7, #36	; 0x24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	58000400 	.word	0x58000400

08003bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e001      	b.n	8003bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c28:	e003      	b.n	8003c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	041a      	lsls	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	619a      	str	r2, [r3, #24]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fd ff77 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8003c7e:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <HAL_HSEM_Take+0x3c>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_HSEM_Take+0x40>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8003c8c:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <HAL_HSEM_Take+0x3c>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <HAL_HSEM_Take+0x40>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d101      	bne.n	8003ca2 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	58026400 	.word	0x58026400
 8003cb4:	80000300 	.word	0x80000300

08003cb8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_HSEM_FastTake+0x2c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3320      	adds	r3, #32
 8003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cca:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <HAL_HSEM_FastTake+0x30>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d101      	bne.n	8003cd4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58026400 	.word	0x58026400
 8003ce8:	80000300 	.word	0x80000300

08003cec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003cf6:	4906      	ldr	r1, [pc, #24]	; (8003d10 <HAL_HSEM_Release+0x24>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	58026400 	.word	0x58026400

08003d14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d00a      	beq.n	8003d3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e040      	b.n	8003dbc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e03e      	b.n	8003dbc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d3e:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d46:	491f      	ldr	r1, [pc, #124]	; (8003dc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d4e:	f7fe fa27 	bl	80021a0 <HAL_GetTick>
 8003d52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d54:	e009      	b.n	8003d6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d56:	f7fe fa23 	bl	80021a0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d64:	d901      	bls.n	8003d6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e028      	b.n	8003dbc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d6a:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d76:	d1ee      	bne.n	8003d56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b1e      	cmp	r3, #30
 8003d7c:	d008      	beq.n	8003d90 <HAL_PWREx_ConfigSupply+0x7c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b2e      	cmp	r3, #46	; 0x2e
 8003d82:	d005      	beq.n	8003d90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b1d      	cmp	r3, #29
 8003d88:	d002      	beq.n	8003d90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b2d      	cmp	r3, #45	; 0x2d
 8003d8e:	d114      	bne.n	8003dba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d90:	f7fe fa06 	bl	80021a0 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d96:	e009      	b.n	8003dac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d98:	f7fe fa02 	bl	80021a0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da6:	d901      	bls.n	8003dac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e007      	b.n	8003dbc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d1ee      	bne.n	8003d98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	58024800 	.word	0x58024800

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f000 bc1c 	b.w	8004614 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8087 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dea:	4b9e      	ldr	r3, [pc, #632]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003df4:	4b9b      	ldr	r3, [pc, #620]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d007      	beq.n	8003e10 <HAL_RCC_OscConfig+0x48>
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	d110      	bne.n	8003e28 <HAL_RCC_OscConfig+0x60>
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	4b94      	ldr	r3, [pc, #592]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d06c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x12e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d168      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e3f5      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x78>
 8003e32:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a8b      	ldr	r2, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e02e      	b.n	8003e9e <HAL_RCC_OscConfig+0xd6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x9a>
 8003e48:	4b86      	ldr	r3, [pc, #536]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a85      	ldr	r2, [pc, #532]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b83      	ldr	r3, [pc, #524]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a82      	ldr	r2, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e01d      	b.n	8003e9e <HAL_RCC_OscConfig+0xd6>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0xbe>
 8003e6c:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a79      	ldr	r2, [pc, #484]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e00b      	b.n	8003e9e <HAL_RCC_OscConfig+0xd6>
 8003e86:	4b77      	ldr	r3, [pc, #476]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a76      	ldr	r2, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b74      	ldr	r3, [pc, #464]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a73      	ldr	r2, [pc, #460]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fe f97b 	bl	80021a0 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eae:	f7fe f977 	bl	80021a0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e3a9      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ec0:	4b68      	ldr	r3, [pc, #416]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0xe6>
 8003ecc:	e014      	b.n	8003ef8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fe f967 	bl	80021a0 <HAL_GetTick>
 8003ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed6:	f7fe f963 	bl	80021a0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b64      	cmp	r3, #100	; 0x64
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e395      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x10e>
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80ca 	beq.w	800409a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f06:	4b57      	ldr	r3, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f10:	4b54      	ldr	r3, [pc, #336]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_RCC_OscConfig+0x164>
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	2b18      	cmp	r3, #24
 8003f20:	d156      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x208>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d151      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_OscConfig+0x17c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e367      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f44:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 0219 	bic.w	r2, r3, #25
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4944      	ldr	r1, [pc, #272]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f56:	f7fe f923 	bl	80021a0 <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fe f91f 	bl	80021a0 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e351      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f70:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	f7fe f940 	bl	8002200 <HAL_GetREVID>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d817      	bhi.n	8003fba <HAL_RCC_OscConfig+0x1f2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1dc>
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f9a:	4a32      	ldr	r2, [pc, #200]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa2:	e07a      	b.n	800409a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	031b      	lsls	r3, r3, #12
 8003fb2:	492c      	ldr	r1, [pc, #176]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	e06f      	b.n	800409a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fba:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	061b      	lsls	r3, r3, #24
 8003fc8:	4926      	ldr	r1, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fce:	e064      	b.n	800409a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d047      	beq.n	8004068 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0219 	bic.w	r2, r3, #25
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	491f      	ldr	r1, [pc, #124]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fe f8d9 	bl	80021a0 <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fe f8d5 	bl	80021a0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e307      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	f7fe f8f6 	bl	8002200 <HAL_GetREVID>
 8004014:	4603      	mov	r3, r0
 8004016:	f241 0203 	movw	r2, #4099	; 0x1003
 800401a:	4293      	cmp	r3, r2
 800401c:	d817      	bhi.n	800404e <HAL_RCC_OscConfig+0x286>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d108      	bne.n	8004038 <HAL_RCC_OscConfig+0x270>
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800402e:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8004030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004034:	6053      	str	r3, [r2, #4]
 8004036:	e030      	b.n	800409a <HAL_RCC_OscConfig+0x2d2>
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	031b      	lsls	r3, r3, #12
 8004046:	4907      	ldr	r1, [pc, #28]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
 800404c:	e025      	b.n	800409a <HAL_RCC_OscConfig+0x2d2>
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	4901      	ldr	r1, [pc, #4]	; (8004064 <HAL_RCC_OscConfig+0x29c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
 8004062:	e01a      	b.n	800409a <HAL_RCC_OscConfig+0x2d2>
 8004064:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004068:	4b9e      	ldr	r3, [pc, #632]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a9d      	ldr	r2, [pc, #628]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe f894 	bl	80021a0 <HAL_GetTick>
 8004078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe f890 	bl	80021a0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e2c2      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800408e:	4b95      	ldr	r3, [pc, #596]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80a9 	beq.w	80041fa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a8:	4b8e      	ldr	r3, [pc, #568]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040b2:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d007      	beq.n	80040ce <HAL_RCC_OscConfig+0x306>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b18      	cmp	r3, #24
 80040c2:	d13a      	bne.n	800413a <HAL_RCC_OscConfig+0x372>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d135      	bne.n	800413a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ce:	4b85      	ldr	r3, [pc, #532]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x31e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e296      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040e6:	f7fe f88b 	bl	8002200 <HAL_GetREVID>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d817      	bhi.n	8004124 <HAL_RCC_OscConfig+0x35c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d108      	bne.n	800410e <HAL_RCC_OscConfig+0x346>
 80040fc:	4b79      	ldr	r3, [pc, #484]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004104:	4a77      	ldr	r2, [pc, #476]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800410c:	e075      	b.n	80041fa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800410e:	4b75      	ldr	r3, [pc, #468]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	069b      	lsls	r3, r3, #26
 800411c:	4971      	ldr	r1, [pc, #452]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004122:	e06a      	b.n	80041fa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004124:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	496c      	ldr	r1, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004138:	e05f      	b.n	80041fa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d042      	beq.n	80041c8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004142:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a67      	ldr	r2, [pc, #412]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe f827 	bl	80021a0 <HAL_GetTick>
 8004152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004156:	f7fe f823 	bl	80021a0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e255      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004168:	4b5e      	ldr	r3, [pc, #376]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004174:	f7fe f844 	bl	8002200 <HAL_GetREVID>
 8004178:	4603      	mov	r3, r0
 800417a:	f241 0203 	movw	r2, #4099	; 0x1003
 800417e:	4293      	cmp	r3, r2
 8004180:	d817      	bhi.n	80041b2 <HAL_RCC_OscConfig+0x3ea>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	2b20      	cmp	r3, #32
 8004188:	d108      	bne.n	800419c <HAL_RCC_OscConfig+0x3d4>
 800418a:	4b56      	ldr	r3, [pc, #344]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004192:	4a54      	ldr	r2, [pc, #336]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004198:	6053      	str	r3, [r2, #4]
 800419a:	e02e      	b.n	80041fa <HAL_RCC_OscConfig+0x432>
 800419c:	4b51      	ldr	r3, [pc, #324]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	069b      	lsls	r3, r3, #26
 80041aa:	494e      	ldr	r1, [pc, #312]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	e023      	b.n	80041fa <HAL_RCC_OscConfig+0x432>
 80041b2:	4b4c      	ldr	r3, [pc, #304]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	4948      	ldr	r1, [pc, #288]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60cb      	str	r3, [r1, #12]
 80041c6:	e018      	b.n	80041fa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041c8:	4b46      	ldr	r3, [pc, #280]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a45      	ldr	r2, [pc, #276]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80041ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd ffe4 	bl	80021a0 <HAL_GetTick>
 80041d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041dc:	f7fd ffe0 	bl	80021a0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e212      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d036      	beq.n	8004274 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d019      	beq.n	8004242 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004212:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fd ffc1 	bl	80021a0 <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004222:	f7fd ffbd 	bl	80021a0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1ef      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x45a>
 8004240:	e018      	b.n	8004274 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd ffa7 	bl	80021a0 <HAL_GetTick>
 8004252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004256:	f7fd ffa3 	bl	80021a0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e1d5      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800426a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d039      	beq.n	80042f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d019      	beq.n	80042bc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 800428e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004294:	f7fd ff84 	bl	80021a0 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800429c:	f7fd ff80 	bl	80021a0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1b2      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x4d4>
 80042ba:	e01b      	b.n	80042f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <HAL_RCC_OscConfig+0x51c>)
 80042c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042c8:	f7fd ff6a 	bl	80021a0 <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042d0:	f7fd ff66 	bl	80021a0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d904      	bls.n	80042e8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e198      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042e8:	4ba3      	ldr	r3, [pc, #652]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ed      	bne.n	80042d0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8081 	beq.w	8004404 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004302:	4b9e      	ldr	r3, [pc, #632]	; (800457c <HAL_RCC_OscConfig+0x7b4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a9d      	ldr	r2, [pc, #628]	; (800457c <HAL_RCC_OscConfig+0x7b4>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800430e:	f7fd ff47 	bl	80021a0 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fd ff43 	bl	80021a0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e175      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004328:	4b94      	ldr	r3, [pc, #592]	; (800457c <HAL_RCC_OscConfig+0x7b4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x582>
 800433c:	4b8e      	ldr	r3, [pc, #568]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	4a8d      	ldr	r2, [pc, #564]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6713      	str	r3, [r2, #112]	; 0x70
 8004348:	e02d      	b.n	80043a6 <HAL_RCC_OscConfig+0x5de>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x5a4>
 8004352:	4b89      	ldr	r3, [pc, #548]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a88      	ldr	r2, [pc, #544]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
 800435e:	4b86      	ldr	r3, [pc, #536]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a85      	ldr	r2, [pc, #532]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x5de>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x5c6>
 8004374:	4b80      	ldr	r3, [pc, #512]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a7f      	ldr	r2, [pc, #508]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b7d      	ldr	r3, [pc, #500]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a7c      	ldr	r2, [pc, #496]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x5de>
 800438e:	4b7a      	ldr	r3, [pc, #488]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a79      	ldr	r2, [pc, #484]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b77      	ldr	r3, [pc, #476]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a76      	ldr	r2, [pc, #472]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fd fef7 	bl	80021a0 <HAL_GetTick>
 80043b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd fef3 	bl	80021a0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e123      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x5ee>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fd fee1 	bl	80021a0 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd fedd 	bl	80021a0 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e10d      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043f8:	4b5f      	ldr	r3, [pc, #380]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8102 	beq.w	8004612 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800440e:	4b5a      	ldr	r3, [pc, #360]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004416:	2b18      	cmp	r3, #24
 8004418:	f000 80bd 	beq.w	8004596 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b02      	cmp	r3, #2
 8004422:	f040 8095 	bne.w	8004550 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b54      	ldr	r3, [pc, #336]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a53      	ldr	r2, [pc, #332]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800442c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd feb5 	bl	80021a0 <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443a:	f7fd feb1 	bl	80021a0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0e3      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800444c:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f0      	bne.n	800443a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004458:	4b47      	ldr	r3, [pc, #284]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800445a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800445c:	4b48      	ldr	r3, [pc, #288]	; (8004580 <HAL_RCC_OscConfig+0x7b8>)
 800445e:	4013      	ands	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	430a      	orrs	r2, r1
 800446c:	4942      	ldr	r1, [pc, #264]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	628b      	str	r3, [r1, #40]	; 0x28
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	3b01      	subs	r3, #1
 8004478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	3b01      	subs	r3, #1
 8004482:	025b      	lsls	r3, r3, #9
 8004484:	b29b      	uxth	r3, r3
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	3b01      	subs	r3, #1
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	3b01      	subs	r3, #1
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044a2:	4935      	ldr	r1, [pc, #212]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044b4:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCC_OscConfig+0x7bc>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c0:	00d2      	lsls	r2, r2, #3
 80044c2:	492d      	ldr	r1, [pc, #180]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044c8:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f023 020c 	bic.w	r2, r3, #12
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	4928      	ldr	r1, [pc, #160]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f023 0202 	bic.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	4924      	ldr	r1, [pc, #144]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044ec:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a21      	ldr	r2, [pc, #132]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004504:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800450a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd fe3a 	bl	80021a0 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd fe36 	bl	80021a0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e068      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x768>
 800454e:	e060      	b.n	8004612 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fe20 	bl	80021a0 <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004562:	e011      	b.n	8004588 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fe1c 	bl	80021a0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d90a      	bls.n	8004588 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04e      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	58024800 	.word	0x58024800
 8004580:	fffffc0c 	.word	0xfffffc0c
 8004584:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCC_OscConfig+0x854>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e7      	bne.n	8004564 <HAL_RCC_OscConfig+0x79c>
 8004594:	e03d      	b.n	8004612 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x854>)
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x854>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d031      	beq.n	800460e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 0203 	and.w	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d12a      	bne.n	800460e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d122      	bne.n	800460e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d11a      	bne.n	800460e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d111      	bne.n	800460e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d108      	bne.n	800460e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0e1b      	lsrs	r3, r3, #24
 8004600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3730      	adds	r7, #48	; 0x30
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	58024400 	.word	0x58024400

08004620 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e19c      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b8a      	ldr	r3, [pc, #552]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d910      	bls.n	8004664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b87      	ldr	r3, [pc, #540]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 020f 	bic.w	r2, r3, #15
 800464a:	4985      	ldr	r1, [pc, #532]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b83      	ldr	r3, [pc, #524]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e184      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467c:	429a      	cmp	r2, r3
 800467e:	d908      	bls.n	8004692 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004680:	4b78      	ldr	r3, [pc, #480]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4975      	ldr	r1, [pc, #468]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800468e:	4313      	orrs	r3, r2
 8004690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	4b70      	ldr	r3, [pc, #448]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d908      	bls.n	80046c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046ae:	4b6d      	ldr	r3, [pc, #436]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	496a      	ldr	r1, [pc, #424]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d010      	beq.n	80046ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	4b64      	ldr	r3, [pc, #400]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046d8:	429a      	cmp	r2, r3
 80046da:	d908      	bls.n	80046ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046dc:	4b61      	ldr	r3, [pc, #388]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	495e      	ldr	r1, [pc, #376]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d010      	beq.n	800471c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004706:	429a      	cmp	r2, r3
 8004708:	d908      	bls.n	800471c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800470a:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4953      	ldr	r1, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004718:	4313      	orrs	r3, r2
 800471a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d010      	beq.n	800474a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	4b4d      	ldr	r3, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	429a      	cmp	r2, r3
 8004736:	d908      	bls.n	800474a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004738:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f023 020f 	bic.w	r2, r3, #15
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4947      	ldr	r1, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d055      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004756:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4940      	ldr	r1, [pc, #256]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004764:	4313      	orrs	r3, r2
 8004766:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004770:	4b3c      	ldr	r3, [pc, #240]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d121      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0f6      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0ea      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a0:	4b30      	ldr	r3, [pc, #192]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0de      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b0:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0d6      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f023 0207 	bic.w	r2, r3, #7
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4925      	ldr	r1, [pc, #148]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d2:	f7fd fce5 	bl	80021a0 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7fd fce1 	bl	80021a0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0be      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1eb      	bne.n	80047da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	429a      	cmp	r2, r3
 800481c:	d208      	bcs.n	8004830 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f023 020f 	bic.w	r2, r3, #15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x244>)
 800482c:	4313      	orrs	r3, r2
 800482e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d214      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 020f 	bic.w	r2, r3, #15
 8004846:	4906      	ldr	r1, [pc, #24]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <HAL_RCC_ClockConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e086      	b.n	800496e <HAL_RCC_ClockConfig+0x34e>
 8004860:	52002000 	.word	0x52002000
 8004864:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004880:	429a      	cmp	r2, r3
 8004882:	d208      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004884:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4939      	ldr	r1, [pc, #228]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004892:	4313      	orrs	r3, r2
 8004894:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d208      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	492e      	ldr	r1, [pc, #184]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d010      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048dc:	429a      	cmp	r2, r3
 80048de:	d208      	bcs.n	80048f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69da      	ldr	r2, [r3, #28]
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800490a:	429a      	cmp	r2, r3
 800490c:	d208      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4917      	ldr	r1, [pc, #92]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 800491c:	4313      	orrs	r3, r2
 800491e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004920:	f000 f834 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	4912      	ldr	r1, [pc, #72]	; (800497c <HAL_RCC_ClockConfig+0x35c>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
 800493c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCC_ClockConfig+0x358>)
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	4a0d      	ldr	r2, [pc, #52]	; (800497c <HAL_RCC_ClockConfig+0x35c>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <HAL_RCC_ClockConfig+0x360>)
 8004956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x364>)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x368>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd fbd2 	bl	800210c <HAL_InitTick>
 8004968:	4603      	mov	r3, r0
 800496a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	0800d490 	.word	0x0800d490
 8004980:	24000004 	.word	0x24000004
 8004984:	24000000 	.word	0x24000000
 8004988:	2400000c 	.word	0x2400000c

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004992:	4bb3      	ldr	r3, [pc, #716]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800499a:	2b18      	cmp	r3, #24
 800499c:	f200 8155 	bhi.w	8004c4a <HAL_RCC_GetSysClockFreq+0x2be>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004c4b 	.word	0x08004c4b
 80049b0:	08004c4b 	.word	0x08004c4b
 80049b4:	08004c4b 	.word	0x08004c4b
 80049b8:	08004c4b 	.word	0x08004c4b
 80049bc:	08004c4b 	.word	0x08004c4b
 80049c0:	08004c4b 	.word	0x08004c4b
 80049c4:	08004c4b 	.word	0x08004c4b
 80049c8:	08004a33 	.word	0x08004a33
 80049cc:	08004c4b 	.word	0x08004c4b
 80049d0:	08004c4b 	.word	0x08004c4b
 80049d4:	08004c4b 	.word	0x08004c4b
 80049d8:	08004c4b 	.word	0x08004c4b
 80049dc:	08004c4b 	.word	0x08004c4b
 80049e0:	08004c4b 	.word	0x08004c4b
 80049e4:	08004c4b 	.word	0x08004c4b
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004c4b 	.word	0x08004c4b
 80049f0:	08004c4b 	.word	0x08004c4b
 80049f4:	08004c4b 	.word	0x08004c4b
 80049f8:	08004c4b 	.word	0x08004c4b
 80049fc:	08004c4b 	.word	0x08004c4b
 8004a00:	08004c4b 	.word	0x08004c4b
 8004a04:	08004c4b 	.word	0x08004c4b
 8004a08:	08004a3f 	.word	0x08004a3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0c:	4b94      	ldr	r3, [pc, #592]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a18:	4b91      	ldr	r3, [pc, #580]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	4a90      	ldr	r2, [pc, #576]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a2a:	e111      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a2c:	4b8d      	ldr	r3, [pc, #564]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a2e:	61bb      	str	r3, [r7, #24]
    break;
 8004a30:	e10e      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a32:	4b8d      	ldr	r3, [pc, #564]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a34:	61bb      	str	r3, [r7, #24]
    break;
 8004a36:	e10b      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a38:	4b8c      	ldr	r3, [pc, #560]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a3a:	61bb      	str	r3, [r7, #24]
    break;
 8004a3c:	e108      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a3e:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a48:	4b85      	ldr	r3, [pc, #532]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a54:	4b82      	ldr	r3, [pc, #520]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a5e:	4b80      	ldr	r3, [pc, #512]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	fb02 f303 	mul.w	r3, r2, r3
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80e1 	beq.w	8004c44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	f000 8083 	beq.w	8004b90 <HAL_RCC_GetSysClockFreq+0x204>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f200 80a1 	bhi.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x248>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x114>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d056      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a9e:	e099      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02d      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aac:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	08db      	lsrs	r3, r3, #3
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	4a6b      	ldr	r2, [pc, #428]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b06:	e087      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b51      	ldr	r3, [pc, #324]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e065      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	e043      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd2:	e021      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	0a5b      	lsrs	r3, r3, #9
 8004c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c22:	3301      	adds	r3, #1
 8004c24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3c:	ee17 3a90 	vmov	r3, s15
 8004c40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c42:	e005      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    break;
 8004c48:	e002      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c4c:	61bb      	str	r3, [r7, #24]
    break;
 8004c4e:	bf00      	nop
  }

  return sysclockfreq;
 8004c50:	69bb      	ldr	r3, [r7, #24]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	003d0900 	.word	0x003d0900
 8004c6c:	017d7840 	.word	0x017d7840
 8004c70:	46000000 	.word	0x46000000
 8004c74:	4c742400 	.word	0x4c742400
 8004c78:	4a742400 	.word	0x4a742400
 8004c7c:	4bbebc20 	.word	0x4bbebc20

08004c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c86:	f7ff fe81 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490f      	ldr	r1, [pc, #60]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cbe:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	58024400 	.word	0x58024400
 8004cd4:	0800d490 	.word	0x0800d490
 8004cd8:	24000004 	.word	0x24000004
 8004cdc:	24000000 	.word	0x24000000

08004ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ce4:	f7ff ffcc 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4904      	ldr	r1, [pc, #16]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	58024400 	.word	0x58024400
 8004d08:	0800d490 	.word	0x0800d490

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d10:	f7ff ffb6 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4904      	ldr	r1, [pc, #16]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	58024400 	.word	0x58024400
 8004d34:	0800d490 	.word	0x0800d490

08004d38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d40:	2300      	movs	r3, #0
 8004d42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d44:	2300      	movs	r3, #0
 8004d46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d03f      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d5c:	d02a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d62:	d824      	bhi.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d68:	d018      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6e:	d81e      	bhi.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d78:	d007      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d7a:	e018      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7c:	4bab      	ldr	r3, [pc, #684]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	4aaa      	ldr	r2, [pc, #680]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d88:	e015      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fff3 	bl	8006d7c <RCCEx_PLL2_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d9a:	e00c      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3324      	adds	r3, #36	; 0x24
 8004da0:	2102      	movs	r1, #2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f002 f89c 	bl	8006ee0 <RCCEx_PLL3_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
      break;
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dbc:	4b9b      	ldr	r3, [pc, #620]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc8:	4998      	ldr	r1, [pc, #608]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03d      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d826      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e05 	.word	0x08004e05
 8004df4:	08004e13 	.word	0x08004e13
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e3d 	.word	0x08004e3d
 8004e00:	08004e3d 	.word	0x08004e3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e04:	4b89      	ldr	r3, [pc, #548]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4a88      	ldr	r2, [pc, #544]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e10:	e015      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 ffaf 	bl	8006d7c <RCCEx_PLL2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e22:	e00c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f002 f858 	bl	8006ee0 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e44:	4b79      	ldr	r3, [pc, #484]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	f023 0207 	bic.w	r2, r3, #7
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	4976      	ldr	r1, [pc, #472]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	650b      	str	r3, [r1, #80]	; 0x50
 8004e56:	e001      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d042      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e70:	d02b      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e76:	d825      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004e78:	2bc0      	cmp	r3, #192	; 0xc0
 8004e7a:	d028      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e7c:	2bc0      	cmp	r3, #192	; 0xc0
 8004e7e:	d821      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d81d      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d007      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004e90:	e018      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e92:	4b66      	ldr	r3, [pc, #408]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	4a65      	ldr	r2, [pc, #404]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e9e:	e017      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 ff68 	bl	8006d7c <RCCEx_PLL2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004eb0:	e00e      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3324      	adds	r3, #36	; 0x24
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f002 f811 	bl	8006ee0 <RCCEx_PLL3_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ed6:	4b55      	ldr	r3, [pc, #340]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4952      	ldr	r1, [pc, #328]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ee8:	e001      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d049      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f04:	d030      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f0a:	d82a      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f10:	d02c      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004f12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f16:	d824      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1c:	d018      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f22:	d81e      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f2c:	d007      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f2e:	e018      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4a3d      	ldr	r2, [pc, #244]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f3c:	e017      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 ff19 	bl	8006d7c <RCCEx_PLL2_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f4e:	e00e      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3324      	adds	r3, #36	; 0x24
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 ffc2 	bl	8006ee0 <RCCEx_PLL3_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f60:	e005      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f74:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f82:	492a      	ldr	r1, [pc, #168]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	658b      	str	r3, [r1, #88]	; 0x58
 8004f88:	e001      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04c      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d030      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004faa:	d82a      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fb0:	d02c      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004fb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fb6:	d824      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fbc:	d018      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fc2:	d81e      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fcc:	d007      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004fce:	e018      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd0:	4b16      	ldr	r3, [pc, #88]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	4a15      	ldr	r2, [pc, #84]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fdc:	e017      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 fec9 	bl	8006d7c <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fee:	e00e      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 ff72 	bl	8006ee0 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
      break;
 8005006:	e002      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005022:	4902      	ldr	r1, [pc, #8]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	658b      	str	r3, [r1, #88]	; 0x58
 8005028:	e004      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d032      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d01c      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d817      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d00c      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d813      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d016      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005058:	2b10      	cmp	r3, #16
 800505a:	d10f      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505c:	4baf      	ldr	r3, [pc, #700]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	4aae      	ldr	r2, [pc, #696]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005068:	e00e      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2102      	movs	r1, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fe83 	bl	8006d7c <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800507a:	e005      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
      break;
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800508e:	4ba3      	ldr	r3, [pc, #652]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509a:	49a0      	ldr	r1, [pc, #640]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800509c:	4313      	orrs	r3, r2
 800509e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050a0:	e001      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
 80050a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d047      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ba:	d030      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80050bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c0:	d82a      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80050c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050c6:	d02c      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80050c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050cc:	d824      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d2:	d018      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80050d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d8:	d81e      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	d007      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80050e4:	e018      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e6:	4b8d      	ldr	r3, [pc, #564]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	4a8c      	ldr	r2, [pc, #560]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050f2:	e017      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 fe3e 	bl	8006d7c <RCCEx_PLL2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005104:	e00e      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3324      	adds	r3, #36	; 0x24
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f001 fee7 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
      break;
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800512a:	4b7c      	ldr	r3, [pc, #496]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	4979      	ldr	r1, [pc, #484]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005138:	4313      	orrs	r3, r2
 800513a:	650b      	str	r3, [r1, #80]	; 0x50
 800513c:	e001      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d049      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005156:	d02e      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800515c:	d828      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800515e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005162:	d02a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005164:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005168:	d822      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800516a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800516e:	d026      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005170:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005174:	d81c      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517a:	d010      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800517c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005180:	d816      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01d      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d111      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	2101      	movs	r1, #1
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fdf2 	bl	8006d7c <RCCEx_PLL2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800519c:	e012      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	2101      	movs	r1, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fe9b 	bl	8006ee0 <RCCEx_PLL3_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051ae:	e009      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
      break;
 80051b4:	e006      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80051b6:	bf00      	nop
 80051b8:	e004      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80051c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80051ca:	4b54      	ldr	r3, [pc, #336]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	4951      	ldr	r1, [pc, #324]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	650b      	str	r3, [r1, #80]	; 0x50
 80051dc:	e001      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04b      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f8:	d02e      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80051fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051fe:	d828      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d02a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d822      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800520c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005210:	d026      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005216:	d81c      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521c:	d010      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005222:	d816      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01d      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800522c:	d111      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f001 fda1 	bl	8006d7c <RCCEx_PLL2_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800523e:	e012      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3324      	adds	r3, #36	; 0x24
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f001 fe4a 	bl	8006ee0 <RCCEx_PLL3_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005250:	e009      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
      break;
 8005256:	e006      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005258:	bf00      	nop
 800525a:	e004      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800525c:	bf00      	nop
 800525e:	e002      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800526c:	4b2b      	ldr	r3, [pc, #172]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800527a:	4928      	ldr	r1, [pc, #160]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800527c:	4313      	orrs	r3, r2
 800527e:	658b      	str	r3, [r1, #88]	; 0x58
 8005280:	e001      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d02f      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529a:	d00e      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x582>
 800529c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a0:	d814      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d015      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80052a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052aa:	d10f      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80052b8:	e00c      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 fd5b 	bl	8006d7c <RCCEx_PLL2_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80052ca:	e003      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	75fb      	strb	r3, [r7, #23]
      break;
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80052d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e6:	490d      	ldr	r1, [pc, #52]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	650b      	str	r3, [r1, #80]	; 0x50
 80052ec:	e001      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d033      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	2b03      	cmp	r3, #3
 8005304:	d81c      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005347 	.word	0x08005347
 8005310:	08005321 	.word	0x08005321
 8005314:	0800532f 	.word	0x0800532f
 8005318:	08005347 	.word	0x08005347
 800531c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005320:	4bb8      	ldr	r3, [pc, #736]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4ab7      	ldr	r2, [pc, #732]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800532c:	e00c      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	2102      	movs	r1, #2
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fd21 	bl	8006d7c <RCCEx_PLL2_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
      break;
 8005344:	e000      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800534e:	4bad      	ldr	r3, [pc, #692]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	49aa      	ldr	r1, [pc, #680]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800535c:	4313      	orrs	r3, r2
 800535e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005360:	e001      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8086 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005374:	4ba4      	ldr	r3, [pc, #656]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4aa3      	ldr	r2, [pc, #652]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005380:	f7fc ff0e 	bl	80021a0 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005386:	e009      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005388:	f7fc ff0a 	bl	80021a0 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	; 0x64
 8005394:	d902      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	75fb      	strb	r3, [r7, #23]
        break;
 800539a:	e005      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800539c:	4b9a      	ldr	r3, [pc, #616]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ef      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d166      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053ae:	4b95      	ldr	r3, [pc, #596]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053b8:	4053      	eors	r3, r2
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053c2:	4b90      	ldr	r3, [pc, #576]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053cc:	4b8d      	ldr	r3, [pc, #564]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	4a8c      	ldr	r2, [pc, #560]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d8:	4b8a      	ldr	r3, [pc, #552]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	4a89      	ldr	r2, [pc, #548]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80053e4:	4a87      	ldr	r2, [pc, #540]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f4:	d115      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fc fed3 	bl	80021a0 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053fc:	e00b      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fc fecf 	bl	80021a0 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	; 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d902      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	75fb      	strb	r3, [r7, #23]
            break;
 8005414:	e005      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005416:	4b7b      	ldr	r3, [pc, #492]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ed      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d126      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d10d      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005438:	4b72      	ldr	r3, [pc, #456]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005446:	0919      	lsrs	r1, r3, #4
 8005448:	4b70      	ldr	r3, [pc, #448]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800544a:	400b      	ands	r3, r1
 800544c:	496d      	ldr	r1, [pc, #436]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005454:	4b6b      	ldr	r3, [pc, #428]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	4a6a      	ldr	r2, [pc, #424]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800545a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800545e:	6113      	str	r3, [r2, #16]
 8005460:	4b68      	ldr	r3, [pc, #416]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800546a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546e:	4965      	ldr	r1, [pc, #404]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	670b      	str	r3, [r1, #112]	; 0x70
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	75bb      	strb	r3, [r7, #22]
 800547a:	e001      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d07e      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005490:	2b28      	cmp	r3, #40	; 0x28
 8005492:	d867      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	0800556b 	.word	0x0800556b
 80054a0:	08005565 	.word	0x08005565
 80054a4:	08005565 	.word	0x08005565
 80054a8:	08005565 	.word	0x08005565
 80054ac:	08005565 	.word	0x08005565
 80054b0:	08005565 	.word	0x08005565
 80054b4:	08005565 	.word	0x08005565
 80054b8:	08005565 	.word	0x08005565
 80054bc:	08005541 	.word	0x08005541
 80054c0:	08005565 	.word	0x08005565
 80054c4:	08005565 	.word	0x08005565
 80054c8:	08005565 	.word	0x08005565
 80054cc:	08005565 	.word	0x08005565
 80054d0:	08005565 	.word	0x08005565
 80054d4:	08005565 	.word	0x08005565
 80054d8:	08005565 	.word	0x08005565
 80054dc:	08005553 	.word	0x08005553
 80054e0:	08005565 	.word	0x08005565
 80054e4:	08005565 	.word	0x08005565
 80054e8:	08005565 	.word	0x08005565
 80054ec:	08005565 	.word	0x08005565
 80054f0:	08005565 	.word	0x08005565
 80054f4:	08005565 	.word	0x08005565
 80054f8:	08005565 	.word	0x08005565
 80054fc:	0800556b 	.word	0x0800556b
 8005500:	08005565 	.word	0x08005565
 8005504:	08005565 	.word	0x08005565
 8005508:	08005565 	.word	0x08005565
 800550c:	08005565 	.word	0x08005565
 8005510:	08005565 	.word	0x08005565
 8005514:	08005565 	.word	0x08005565
 8005518:	08005565 	.word	0x08005565
 800551c:	0800556b 	.word	0x0800556b
 8005520:	08005565 	.word	0x08005565
 8005524:	08005565 	.word	0x08005565
 8005528:	08005565 	.word	0x08005565
 800552c:	08005565 	.word	0x08005565
 8005530:	08005565 	.word	0x08005565
 8005534:	08005565 	.word	0x08005565
 8005538:	08005565 	.word	0x08005565
 800553c:	0800556b 	.word	0x0800556b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	2101      	movs	r1, #1
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fc18 	bl	8006d7c <RCCEx_PLL2_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005550:	e00c      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fcc1 	bl	8006ee0 <RCCEx_PLL3_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
      break;
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800556a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557e:	4921      	ldr	r1, [pc, #132]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	654b      	str	r3, [r1, #84]	; 0x54
 8005584:	e001      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d03e      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559a:	2b05      	cmp	r3, #5
 800559c:	d820      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055e7 	.word	0x080055e7
 80055a8:	080055bd 	.word	0x080055bd
 80055ac:	080055cf 	.word	0x080055cf
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	080055e7 	.word	0x080055e7
 80055b8:	080055e7 	.word	0x080055e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 fbda 	bl	8006d7c <RCCEx_PLL2_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80055cc:	e00c      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3324      	adds	r3, #36	; 0x24
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fc83 	bl	8006ee0 <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
      break;
 80055e4:	e000      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80055e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d110      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	f023 0207 	bic.w	r2, r3, #7
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fa:	4902      	ldr	r1, [pc, #8]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005602:	bf00      	nop
 8005604:	58024400 	.word	0x58024400
 8005608:	58024800 	.word	0x58024800
 800560c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
 8005612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d039      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	2b05      	cmp	r3, #5
 8005628:	d820      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005673 	.word	0x08005673
 8005634:	08005649 	.word	0x08005649
 8005638:	0800565b 	.word	0x0800565b
 800563c:	08005673 	.word	0x08005673
 8005640:	08005673 	.word	0x08005673
 8005644:	08005673 	.word	0x08005673
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fb94 	bl	8006d7c <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005658:	e00c      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fc3d 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800566a:	e003      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e000      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800567a:	4bb7      	ldr	r3, [pc, #732]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	f023 0207 	bic.w	r2, r3, #7
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005688:	49b3      	ldr	r1, [pc, #716]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800568a:	4313      	orrs	r3, r2
 800568c:	658b      	str	r3, [r1, #88]	; 0x58
 800568e:	e001      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d04b      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056aa:	d02e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80056ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056b0:	d828      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d02a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056bc:	d822      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80056be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056c2:	d026      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80056c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056c8:	d81c      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ce:	d010      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80056d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d4:	d816      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80056da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056de:	d111      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 fb48 	bl	8006d7c <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80056f0:	e012      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3324      	adds	r3, #36	; 0x24
 80056f6:	2102      	movs	r1, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fbf1 	bl	8006ee0 <RCCEx_PLL3_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005702:	e009      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	75fb      	strb	r3, [r7, #23]
      break;
 8005708:	e006      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800570a:	bf00      	nop
 800570c:	e004      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10a      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571e:	4b8e      	ldr	r3, [pc, #568]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572c:	498a      	ldr	r1, [pc, #552]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800572e:	4313      	orrs	r3, r2
 8005730:	654b      	str	r3, [r1, #84]	; 0x54
 8005732:	e001      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
 8005736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d04b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800574a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800574e:	d02e      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005750:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005754:	d828      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575a:	d02a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005760:	d822      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005766:	d026      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576c:	d81c      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800576e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005772:	d010      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005778:	d816      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01d      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d111      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3304      	adds	r3, #4
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f001 faf6 	bl	8006d7c <RCCEx_PLL2_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005794:	e012      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3324      	adds	r3, #36	; 0x24
 800579a:	2102      	movs	r1, #2
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fb9f 	bl	8006ee0 <RCCEx_PLL3_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057a6:	e009      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
      break;
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80057ae:	bf00      	nop
 80057b0:	e004      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80057ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c2:	4b65      	ldr	r3, [pc, #404]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d0:	4961      	ldr	r1, [pc, #388]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	658b      	str	r3, [r1, #88]	; 0x58
 80057d6:	e001      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d04b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057f2:	d02e      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80057f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057f8:	d828      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80057fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fe:	d02a      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005804:	d822      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005806:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800580a:	d026      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800580c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005810:	d81c      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005816:	d010      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581c:	d816      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01d      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d111      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f001 faa4 	bl	8006d7c <RCCEx_PLL2_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005838:	e012      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f001 fb4d 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800584a:	e009      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	75fb      	strb	r3, [r7, #23]
      break;
 8005850:	e006      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005852:	bf00      	nop
 8005854:	e004      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800585e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005866:	4b3c      	ldr	r3, [pc, #240]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005874:	4938      	ldr	r1, [pc, #224]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005876:	4313      	orrs	r3, r2
 8005878:	658b      	str	r3, [r1, #88]	; 0x58
 800587a:	e001      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d10a      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3324      	adds	r3, #36	; 0x24
 800589c:	2102      	movs	r1, #2
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fb1e 	bl	8006ee0 <RCCEx_PLL3_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058ae:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058bc:	4926      	ldr	r1, [pc, #152]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d8:	d10a      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3324      	adds	r3, #36	; 0x24
 80058de:	2102      	movs	r1, #2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fafd 	bl	8006ee0 <RCCEx_PLL3_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fe:	4916      	ldr	r1, [pc, #88]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005900:	4313      	orrs	r3, r2
 8005902:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d036      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591a:	d01f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800591c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005920:	d817      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592a:	d009      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800592c:	e011      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fa21 	bl	8006d7c <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800593e:	e00e      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	2102      	movs	r1, #2
 8005946:	4618      	mov	r0, r3
 8005948:	f001 faca 	bl	8006ee0 <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
      break;
 8005956:	e002      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005958:	58024400 	.word	0x58024400
      break;
 800595c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005964:	4b93      	ldr	r3, [pc, #588]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005972:	4990      	ldr	r1, [pc, #576]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	658b      	str	r3, [r1, #88]	; 0x58
 8005978:	e001      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d033      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005994:	d01c      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800599a:	d816      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800599c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a0:	d003      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80059a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a6:	d007      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80059a8:	e00f      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059aa:	4b82      	ldr	r3, [pc, #520]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	4a81      	ldr	r2, [pc, #516]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80059b6:	e00c      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fa8e 	bl	8006ee0 <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80059c8:	e003      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
      break;
 80059ce:	e000      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80059d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d8:	4b76      	ldr	r3, [pc, #472]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e6:	4973      	ldr	r1, [pc, #460]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	654b      	str	r3, [r1, #84]	; 0x54
 80059ec:	e001      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d029      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0a:	d007      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005a0c:	e00f      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0e:	4b69      	ldr	r3, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a68      	ldr	r2, [pc, #416]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	2102      	movs	r1, #2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 f9aa 	bl	8006d7c <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a2c:	e002      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	75fb      	strb	r3, [r7, #23]
      break;
 8005a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a3a:	4b5e      	ldr	r3, [pc, #376]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	495b      	ldr	r1, [pc, #364]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a4c:	e001      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3324      	adds	r3, #36	; 0x24
 8005a62:	2102      	movs	r1, #2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fa3b 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d030      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a88:	d017      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a8e:	d811      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a94:	d013      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	d80b      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d010      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa6:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	4a42      	ldr	r2, [pc, #264]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005ab2:	e007      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	e004      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005aba:	bf00      	nop
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad6:	4937      	ldr	r1, [pc, #220]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	654b      	str	r3, [r1, #84]	; 0x54
 8005adc:	e001      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005aee:	4b31      	ldr	r3, [pc, #196]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	492e      	ldr	r1, [pc, #184]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b0c:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b1a:	4926      	ldr	r1, [pc, #152]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b38:	491e      	ldr	r1, [pc, #120]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00d      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b54:	6113      	str	r3, [r2, #16]
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b60:	4914      	ldr	r1, [pc, #80]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da08      	bge.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7a:	490e      	ldr	r1, [pc, #56]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	4906      	ldr	r1, [pc, #24]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005ba0:	7dbb      	ldrb	r3, [r7, #22]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	58024400 	.word	0x58024400

08005bb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b090      	sub	sp, #64	; 0x40
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc6:	f040 8095 	bne.w	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005bca:	4bae      	ldr	r3, [pc, #696]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	f200 8088 	bhi.w	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005bf9 	.word	0x08005bf9
 8005be8:	08005c21 	.word	0x08005c21
 8005bec:	08005c49 	.word	0x08005c49
 8005bf0:	08005ce5 	.word	0x08005ce5
 8005bf4:	08005c71 	.word	0x08005c71

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bf8:	4ba2      	ldr	r3, [pc, #648]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c04:	d108      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ff64 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c14:	f000 bc95 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c1c:	f000 bc91 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c20:	4b98      	ldr	r3, [pc, #608]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c2c:	d108      	bne.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2e:	f107 0318 	add.w	r3, r7, #24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fca8 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c3c:	f000 bc81 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c44:	f000 bc7d 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c48:	4b8e      	ldr	r3, [pc, #568]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c54:	d108      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 030c 	add.w	r3, r7, #12
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fde8 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c64:	f000 bc6d 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c6c:	f000 bc69 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c70:	4b84      	ldr	r3, [pc, #528]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c78:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c7a:	4b82      	ldr	r3, [pc, #520]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c8c:	4b7d      	ldr	r3, [pc, #500]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	08db      	lsrs	r3, r3, #3
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	4a7c      	ldr	r2, [pc, #496]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c9e:	e01f      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ca0:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cac:	d106      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb4:	d102      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005cb6:	4b75      	ldr	r3, [pc, #468]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cba:	e011      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cbc:	4b71      	ldr	r3, [pc, #452]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cd2:	4b6f      	ldr	r3, [pc, #444]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd6:	e003      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005cdc:	f000 bc31 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ce0:	f000 bc2f 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ce4:	4b6b      	ldr	r3, [pc, #428]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ce8:	f000 bc2b 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cf0:	f000 bc27 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfa:	f040 8095 	bne.w	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005cfe:	4b61      	ldr	r3, [pc, #388]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d02:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005d06:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0e:	d04d      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d16:	f200 8084 	bhi.w	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d1e:	d07d      	beq.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	2bc0      	cmp	r3, #192	; 0xc0
 8005d24:	d87d      	bhi.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d02d      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d877      	bhi.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d012      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005d3e:	e070      	b.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fec0 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d5c:	e3f1      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d62:	e3ee      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d64:	4b47      	ldr	r3, [pc, #284]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d70:	d107      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d72:	f107 0318 	add.w	r3, r7, #24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fc06 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d80:	e3df      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d86:	e3dc      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d88:	4b3e      	ldr	r3, [pc, #248]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d94:	d107      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fd48 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005da4:	e3cd      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005daa:	e3ca      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dac:	4b35      	ldr	r3, [pc, #212]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005db6:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	08db      	lsrs	r3, r3, #3
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dda:	e01e      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de8:	d106      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df0:	d102      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005df2:	4b26      	ldr	r3, [pc, #152]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df6:	e010      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005df8:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e0c:	d102      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e12:	e002      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e18:	e393      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e1a:	e392      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e20:	e38f      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e26:	e38c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	f040 80a7 	bne.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005e32:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e36:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e42:	d05f      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e4a:	f200 8096 	bhi.w	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e54:	f000 808e 	beq.w	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e5e:	f200 808c 	bhi.w	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e68:	d03a      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e70:	f200 8083 	bhi.w	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e80:	d01c      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005e82:	e07a      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e84:	58024400 	.word	0x58024400
 8005e88:	03d09000 	.word	0x03d09000
 8005e8c:	003d0900 	.word	0x003d0900
 8005e90:	017d7840 	.word	0x017d7840
 8005e94:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e98:	4baa      	ldr	r3, [pc, #680]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fe14 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005eb4:	e345      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eba:	e342      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ebc:	4ba1      	ldr	r3, [pc, #644]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec8:	d107      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eca:	f107 0318 	add.w	r3, r7, #24
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fb5a 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ed8:	e333      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ede:	e330      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ee0:	4b98      	ldr	r3, [pc, #608]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eec:	d107      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fc9c 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005efc:	e321      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f02:	e31e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f04:	4b8f      	ldr	r3, [pc, #572]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f0e:	4b8d      	ldr	r3, [pc, #564]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d109      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f20:	4b88      	ldr	r3, [pc, #544]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	08db      	lsrs	r3, r3, #3
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	4a87      	ldr	r2, [pc, #540]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f32:	e01e      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f34:	4b83      	ldr	r3, [pc, #524]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f40:	d106      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f48:	d102      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f4a:	4b80      	ldr	r3, [pc, #512]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4e:	e010      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f50:	4b7c      	ldr	r3, [pc, #496]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5c:	d106      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f64:	d102      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f66:	4b7a      	ldr	r3, [pc, #488]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6a:	e002      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005f70:	e2e7      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005f72:	e2e6      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f74:	4b77      	ldr	r3, [pc, #476]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f78:	e2e3      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f7e:	e2e0      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	f040 809c 	bne.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005f8a:	4b6e      	ldr	r3, [pc, #440]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f9a:	d054      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fa2:	f200 808b 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fac:	f000 8083 	beq.w	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fb6:	f200 8081 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc0:	d02f      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc8:	d878      	bhi.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fd6:	d012      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005fd8:	e070      	b.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fda:	4b5a      	ldr	r3, [pc, #360]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fd73 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ff6:	e2a4      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ffc:	e2a1      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ffe:	4b51      	ldr	r3, [pc, #324]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800600a:	d107      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800600c:	f107 0318 	add.w	r3, r7, #24
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fab9 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800601a:	e292      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006020:	e28f      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006022:	4b48      	ldr	r3, [pc, #288]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800602a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800602e:	d107      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006030:	f107 030c 	add.w	r3, r7, #12
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fbfb 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800603e:	e280      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006044:	e27d      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006046:	4b3f      	ldr	r3, [pc, #252]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800604e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006050:	4b3c      	ldr	r3, [pc, #240]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b04      	cmp	r3, #4
 800605a:	d10c      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006062:	4b38      	ldr	r3, [pc, #224]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	4a36      	ldr	r2, [pc, #216]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006074:	e01e      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006076:	4b33      	ldr	r3, [pc, #204]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006082:	d106      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800608a:	d102      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800608c:	4b2f      	ldr	r3, [pc, #188]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006090:	e010      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006092:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800609e:	d106      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a6:	d102      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80060a8:	4b29      	ldr	r3, [pc, #164]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ac:	e002      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060b2:	e246      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80060b4:	e245      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ba:	e242      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060c0:	e23f      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	f040 80a8 	bne.w	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80060cc:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060dc:	d060      	beq.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e4:	f200 8097 	bhi.w	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ee:	f000 808f 	beq.w	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060f8:	f200 808d 	bhi.w	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006102:	d03b      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610a:	f200 8084 	bhi.w	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	d01d      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800611c:	e07b      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800612a:	d107      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800612c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fcd1 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800613a:	e202      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006140:	e1ff      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
 8006148:	03d09000 	.word	0x03d09000
 800614c:	003d0900 	.word	0x003d0900
 8006150:	017d7840 	.word	0x017d7840
 8006154:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006158:	4ba3      	ldr	r3, [pc, #652]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006164:	d107      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006166:	f107 0318 	add.w	r3, r7, #24
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fa0c 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006174:	e1e5      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800617a:	e1e2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800617c:	4b9a      	ldr	r3, [pc, #616]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006188:	d107      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fb4e 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006198:	e1d3      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800619e:	e1d0      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061a0:	4b91      	ldr	r3, [pc, #580]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061aa:	4b8f      	ldr	r3, [pc, #572]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061bc:	4b8a      	ldr	r3, [pc, #552]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	4a89      	ldr	r2, [pc, #548]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ce:	e01e      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061d0:	4b85      	ldr	r3, [pc, #532]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061dc:	d106      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061e4:	d102      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80061e6:	4b82      	ldr	r3, [pc, #520]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80061e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ea:	e010      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061ec:	4b7e      	ldr	r3, [pc, #504]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f8:	d106      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006200:	d102      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006202:	4b7c      	ldr	r3, [pc, #496]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006206:	e002      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800620c:	e199      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800620e:	e198      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006210:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006214:	e195      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800621a:	e192      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006222:	d173      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006224:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006234:	d02f      	beq.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800623c:	d863      	bhi.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624a:	d012      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800624c:	e05b      	b.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800624e:	4b66      	ldr	r3, [pc, #408]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800625a:	d107      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800625c:	f107 0318 	add.w	r3, r7, #24
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f991 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800626a:	e16a      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006270:	e167      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006272:	4b5d      	ldr	r3, [pc, #372]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800627a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627e:	d107      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006280:	f107 030c 	add.w	r3, r7, #12
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fad3 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800628e:	e158      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006294:	e155      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006296:	4b54      	ldr	r3, [pc, #336]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800629e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062a0:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d10c      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062b2:	4b4d      	ldr	r3, [pc, #308]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	4a4b      	ldr	r2, [pc, #300]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062be:	fa22 f303 	lsr.w	r3, r2, r3
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c4:	e01e      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062c6:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d106      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062da:	d102      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80062dc:	4b44      	ldr	r3, [pc, #272]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e0:	e010      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062e2:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ee:	d106      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f6:	d102      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80062f8:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	e002      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006302:	e11e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006304:	e11d      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800630a:	e11a      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006312:	d133      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006314:	4b34      	ldr	r3, [pc, #208]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800632a:	d012      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800632c:	e023      	b.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800632e:	4b2e      	ldr	r3, [pc, #184]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800633a:	d107      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800633c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fbc9 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800634a:	e0fa      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006350:	e0f7      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006352:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635e:	d107      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006360:	f107 0318 	add.w	r3, r7, #24
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f90f 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800636e:	e0e8      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006374:	e0e5      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800637a:	e0e2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006382:	f040 808f 	bne.w	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800638e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006396:	d075      	beq.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800639e:	d87e      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d060      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ae:	d876      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063b6:	d045      	beq.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063be:	d86e      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c6:	d02b      	beq.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ce:	d866      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063dc:	d00e      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80063de:	e05e      	b.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063e0:	f000 f8bc 	bl	800655c <HAL_RCCEx_GetD3PCLK1Freq>
 80063e4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80063e6:	e0ac      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80063e8:	58024400 	.word	0x58024400
 80063ec:	03d09000 	.word	0x03d09000
 80063f0:	003d0900 	.word	0x003d0900
 80063f4:	017d7840 	.word	0x017d7840
 80063f8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063fc:	4b53      	ldr	r3, [pc, #332]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006408:	d107      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640a:	f107 0318 	add.w	r3, r7, #24
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f8ba 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006418:	e093      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800641e:	e090      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006420:	4b4a      	ldr	r3, [pc, #296]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642c:	d107      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f9fc 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800643c:	e081      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006442:	e07e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006444:	4b41      	ldr	r3, [pc, #260]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d109      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006450:	4b3e      	ldr	r3, [pc, #248]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	08db      	lsrs	r3, r3, #3
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	4a3d      	ldr	r2, [pc, #244]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006462:	e06e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006468:	e06b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800646a:	4b38      	ldr	r3, [pc, #224]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d102      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006478:	4b36      	ldr	r3, [pc, #216]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800647c:	e061      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006482:	e05e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006484:	4b31      	ldr	r3, [pc, #196]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006490:	d102      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006492:	4b31      	ldr	r3, [pc, #196]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006496:	e054      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800649c:	e051      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a2:	e04e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064aa:	d148      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80064ac:	4b27      	ldr	r3, [pc, #156]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064bc:	d02a      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c4:	d838      	bhi.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064d2:	d00d      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80064d4:	e030      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e2:	d102      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80064e4:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80064e8:	e02b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ee:	e028      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f0:	4b16      	ldr	r3, [pc, #88]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064fc:	d107      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fae8 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800650c:	e019      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006512:	e016      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006520:	d107      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006522:	f107 0318 	add.w	r3, r7, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f82e 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006530:	e007      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006536:	e004      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800653c:	e001      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006544:	4618      	mov	r0, r3
 8006546:	3740      	adds	r7, #64	; 0x40
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	58024400 	.word	0x58024400
 8006550:	03d09000 	.word	0x03d09000
 8006554:	003d0900 	.word	0x003d0900
 8006558:	017d7840 	.word	0x017d7840

0800655c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006560:	f7fe fb8e 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b06      	ldr	r3, [pc, #24]	; (8006580 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4904      	ldr	r1, [pc, #16]	; (8006584 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	58024400 	.word	0x58024400
 8006584:	0800d490 	.word	0x0800d490

08006588 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006588:	b480      	push	{r7}
 800658a:	b089      	sub	sp, #36	; 0x24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006590:	4ba1      	ldr	r3, [pc, #644]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800659a:	4b9f      	ldr	r3, [pc, #636]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	0b1b      	lsrs	r3, r3, #12
 80065a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065a6:	4b9c      	ldr	r3, [pc, #624]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	091b      	lsrs	r3, r3, #4
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80065b2:	4b99      	ldr	r3, [pc, #612]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	08db      	lsrs	r3, r3, #3
 80065b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8111 	beq.w	80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	f000 8083 	beq.w	80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f200 80a1 	bhi.w	8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d056      	beq.n	80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065f2:	e099      	b.n	8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065f4:	4b88      	ldr	r3, [pc, #544]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02d      	beq.n	800665c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006600:	4b85      	ldr	r3, [pc, #532]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	08db      	lsrs	r3, r3, #3
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	4a84      	ldr	r2, [pc, #528]	; (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	ee07 3a90 	vmov	s15, r3
 8006618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662a:	4b7b      	ldr	r3, [pc, #492]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663a:	ed97 6a03 	vldr	s12, [r7, #12]
 800663e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800664e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006656:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800665a:	e087      	b.n	800676c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800666a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666e:	4b6a      	ldr	r3, [pc, #424]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006682:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800669e:	e065      	b.n	800676c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b2:	4b59      	ldr	r3, [pc, #356]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e2:	e043      	b.n	800676c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f6:	4b48      	ldr	r3, [pc, #288]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006706:	ed97 6a03 	vldr	s12, [r7, #12]
 800670a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800670e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800671a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006726:	e021      	b.n	800676c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006732:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673a:	4b37      	ldr	r3, [pc, #220]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674a:	ed97 6a03 	vldr	s12, [r7, #12]
 800674e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800675e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800676a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800676c:	4b2a      	ldr	r3, [pc, #168]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	0a5b      	lsrs	r3, r3, #9
 8006772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006786:	edd7 6a07 	vldr	s13, [r7, #28]
 800678a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006792:	ee17 2a90 	vmov	r2, s15
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800679a:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	0c1b      	lsrs	r3, r3, #16
 80067a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c0:	ee17 2a90 	vmov	r2, s15
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80067c8:	4b13      	ldr	r3, [pc, #76]	; (8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	0e1b      	lsrs	r3, r3, #24
 80067ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ee:	ee17 2a90 	vmov	r2, s15
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067f6:	e008      	b.n	800680a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
}
 800680a:	bf00      	nop
 800680c:	3724      	adds	r7, #36	; 0x24
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	58024400 	.word	0x58024400
 800681c:	03d09000 	.word	0x03d09000
 8006820:	46000000 	.word	0x46000000
 8006824:	4c742400 	.word	0x4c742400
 8006828:	4a742400 	.word	0x4a742400
 800682c:	4bbebc20 	.word	0x4bbebc20

08006830 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	; 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006838:	4ba1      	ldr	r3, [pc, #644]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006842:	4b9f      	ldr	r3, [pc, #636]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	0d1b      	lsrs	r3, r3, #20
 8006848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800684c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800684e:	4b9c      	ldr	r3, [pc, #624]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800685a:	4b99      	ldr	r3, [pc, #612]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685e:	08db      	lsrs	r3, r3, #3
 8006860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	fb02 f303 	mul.w	r3, r2, r3
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8111 	beq.w	8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b02      	cmp	r3, #2
 8006882:	f000 8083 	beq.w	800698c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b02      	cmp	r3, #2
 800688a:	f200 80a1 	bhi.w	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d056      	beq.n	8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800689a:	e099      	b.n	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800689c:	4b88      	ldr	r3, [pc, #544]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d02d      	beq.n	8006904 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a8:	4b85      	ldr	r3, [pc, #532]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	08db      	lsrs	r3, r3, #3
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	4a84      	ldr	r2, [pc, #528]	; (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068b4:	fa22 f303 	lsr.w	r3, r2, r3
 80068b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	ee07 3a90 	vmov	s15, r3
 80068c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d2:	4b7b      	ldr	r3, [pc, #492]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006902:	e087      	b.n	8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006916:	4b6a      	ldr	r3, [pc, #424]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006926:	ed97 6a03 	vldr	s12, [r7, #12]
 800692a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800692e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006946:	e065      	b.n	8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695a:	4b59      	ldr	r3, [pc, #356]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696a:	ed97 6a03 	vldr	s12, [r7, #12]
 800696e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800698a:	e043      	b.n	8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800699a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699e:	4b48      	ldr	r3, [pc, #288]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ce:	e021      	b.n	8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e2:	4b37      	ldr	r3, [pc, #220]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006a14:	4b2a      	ldr	r3, [pc, #168]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	0a5b      	lsrs	r3, r3, #9
 8006a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a3a:	ee17 2a90 	vmov	r2, s15
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006a42:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a68:	ee17 2a90 	vmov	r2, s15
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	0e1b      	lsrs	r3, r3, #24
 8006a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a96:	ee17 2a90 	vmov	r2, s15
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	609a      	str	r2, [r3, #8]
}
 8006ab2:	bf00      	nop
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	03d09000 	.word	0x03d09000
 8006ac8:	46000000 	.word	0x46000000
 8006acc:	4c742400 	.word	0x4c742400
 8006ad0:	4a742400 	.word	0x4a742400
 8006ad4:	4bbebc20 	.word	0x4bbebc20

08006ad8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b089      	sub	sp, #36	; 0x24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ae0:	4ba0      	ldr	r3, [pc, #640]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006aea:	4b9e      	ldr	r3, [pc, #632]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006af6:	4b9b      	ldr	r3, [pc, #620]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b00:	4b98      	ldr	r3, [pc, #608]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b04:	08db      	lsrs	r3, r3, #3
 8006b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	fb02 f303 	mul.w	r3, r2, r3
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8111 	beq.w	8006d46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	f000 8083 	beq.w	8006c32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	f200 80a1 	bhi.w	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d056      	beq.n	8006bee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b40:	e099      	b.n	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b42:	4b88      	ldr	r3, [pc, #544]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d02d      	beq.n	8006baa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b4e:	4b85      	ldr	r3, [pc, #532]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	4a83      	ldr	r2, [pc, #524]	; (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	ee07 3a90 	vmov	s15, r3
 8006b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b78:	4b7a      	ldr	r3, [pc, #488]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ba8:	e087      	b.n	8006cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbc:	4b69      	ldr	r3, [pc, #420]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bec:	e065      	b.n	8006cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c00:	4b58      	ldr	r3, [pc, #352]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c10:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c14:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c30:	e043      	b.n	8006cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006d78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c44:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c54:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c58:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c74:	e021      	b.n	8006cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c88:	4b36      	ldr	r3, [pc, #216]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006cba:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	0a5b      	lsrs	r3, r3, #9
 8006cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce0:	ee17 2a90 	vmov	r2, s15
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d0e:	ee17 2a90 	vmov	r2, s15
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	0e1b      	lsrs	r3, r3, #24
 8006d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3c:	ee17 2a90 	vmov	r2, s15
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d44:	e008      	b.n	8006d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	609a      	str	r2, [r3, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	3724      	adds	r7, #36	; 0x24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	58024400 	.word	0x58024400
 8006d68:	03d09000 	.word	0x03d09000
 8006d6c:	46000000 	.word	0x46000000
 8006d70:	4c742400 	.word	0x4c742400
 8006d74:	4a742400 	.word	0x4a742400
 8006d78:	4bbebc20 	.word	0x4bbebc20

08006d7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d8a:	4b53      	ldr	r3, [pc, #332]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d101      	bne.n	8006d9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e099      	b.n	8006ece <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d9a:	4b4f      	ldr	r3, [pc, #316]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a4e      	ldr	r2, [pc, #312]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da6:	f7fb f9fb 	bl	80021a0 <HAL_GetTick>
 8006daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dac:	e008      	b.n	8006dc0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dae:	f7fb f9f7 	bl	80021a0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e086      	b.n	8006ece <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dc0:	4b45      	ldr	r3, [pc, #276]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f0      	bne.n	8006dae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dcc:	4b42      	ldr	r3, [pc, #264]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	493f      	ldr	r1, [pc, #252]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	628b      	str	r3, [r1, #40]	; 0x28
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	025b      	lsls	r3, r3, #9
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e10:	4931      	ldr	r1, [pc, #196]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e16:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	492d      	ldr	r1, [pc, #180]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	f023 0220 	bic.w	r2, r3, #32
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4928      	ldr	r1, [pc, #160]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e3a:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e4a:	4b24      	ldr	r3, [pc, #144]	; (8006edc <RCCEx_PLL2_Config+0x160>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	69d2      	ldr	r2, [r2, #28]
 8006e52:	00d2      	lsls	r2, r2, #3
 8006e54:	4920      	ldr	r1, [pc, #128]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e5a:	4b1f      	ldr	r3, [pc, #124]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e60:	f043 0310 	orr.w	r3, r3, #16
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e78:	e00f      	b.n	8006e9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d106      	bne.n	8006e8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e80:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e8c:	e005      	b.n	8006e9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4a11      	ldr	r2, [pc, #68]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea6:	f7fb f97b 	bl	80021a0 <HAL_GetTick>
 8006eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eac:	e008      	b.n	8006ec0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006eae:	f7fb f977 	bl	80021a0 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e006      	b.n	8006ece <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	58024400 	.word	0x58024400
 8006edc:	ffff0007 	.word	0xffff0007

08006ee0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eee:	4b53      	ldr	r3, [pc, #332]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d101      	bne.n	8006efe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e099      	b.n	8007032 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006efe:	4b4f      	ldr	r3, [pc, #316]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a4e      	ldr	r2, [pc, #312]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0a:	f7fb f949 	bl	80021a0 <HAL_GetTick>
 8006f0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f10:	e008      	b.n	8006f24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f12:	f7fb f945 	bl	80021a0 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e086      	b.n	8007032 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f24:	4b45      	ldr	r3, [pc, #276]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f0      	bne.n	8006f12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	493f      	ldr	r1, [pc, #252]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	628b      	str	r3, [r1, #40]	; 0x28
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	025b      	lsls	r3, r3, #9
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f74:	4931      	ldr	r1, [pc, #196]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f7a:	4b30      	ldr	r3, [pc, #192]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	492d      	ldr	r1, [pc, #180]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4928      	ldr	r1, [pc, #160]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a26      	ldr	r2, [pc, #152]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006faa:	4b24      	ldr	r3, [pc, #144]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fae:	4b24      	ldr	r3, [pc, #144]	; (8007040 <RCCEx_PLL3_Config+0x160>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	69d2      	ldr	r2, [r2, #28]
 8006fb6:	00d2      	lsls	r2, r2, #3
 8006fb8:	4920      	ldr	r1, [pc, #128]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	4a1e      	ldr	r2, [pc, #120]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	4a19      	ldr	r2, [pc, #100]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fdc:	e00f      	b.n	8006ffe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d106      	bne.n	8006ff2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ff0:	e005      	b.n	8006ffe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	4a11      	ldr	r2, [pc, #68]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a0e      	ldr	r2, [pc, #56]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8007004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800700a:	f7fb f8c9 	bl	80021a0 <HAL_GetTick>
 800700e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007010:	e008      	b.n	8007024 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007012:	f7fb f8c5 	bl	80021a0 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e006      	b.n	8007032 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
 8007040:	ffff0007 	.word	0xffff0007

08007044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e049      	b.n	80070ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa fe1a 	bl	8001ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f000 fb5e 	bl	8007744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d001      	beq.n	800710c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e04c      	b.n	80071a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a26      	ldr	r2, [pc, #152]	; (80071b4 <HAL_TIM_Base_Start+0xc0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d01d      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <HAL_TIM_Base_Start+0xc4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_TIM_Base_Start+0xc8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <HAL_TIM_Base_Start+0xcc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1e      	ldr	r2, [pc, #120]	; (80071c4 <HAL_TIM_Base_Start+0xd0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1c      	ldr	r2, [pc, #112]	; (80071c8 <HAL_TIM_Base_Start+0xd4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIM_Base_Start+0x70>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1b      	ldr	r2, [pc, #108]	; (80071cc <HAL_TIM_Base_Start+0xd8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d115      	bne.n	8007190 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <HAL_TIM_Base_Start+0xdc>)
 800716c:	4013      	ands	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b06      	cmp	r3, #6
 8007174:	d015      	beq.n	80071a2 <HAL_TIM_Base_Start+0xae>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717c:	d011      	beq.n	80071a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0201 	orr.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718e:	e008      	b.n	80071a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	e000      	b.n	80071a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40000c00 	.word	0x40000c00
 80071c4:	40010400 	.word	0x40010400
 80071c8:	40001800 	.word	0x40001800
 80071cc:	40014000 	.word	0x40014000
 80071d0:	00010007 	.word	0x00010007

080071d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d001      	beq.n	80071ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e054      	b.n	8007296 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a26      	ldr	r2, [pc, #152]	; (80072a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d022      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007216:	d01d      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d018      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a21      	ldr	r2, [pc, #132]	; (80072ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d013      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00e      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x80>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1b      	ldr	r2, [pc, #108]	; (80072bc <HAL_TIM_Base_Start_IT+0xe8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d115      	bne.n	8007280 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <HAL_TIM_Base_Start_IT+0xec>)
 800725c:	4013      	ands	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b06      	cmp	r3, #6
 8007264:	d015      	beq.n	8007292 <HAL_TIM_Base_Start_IT+0xbe>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726c:	d011      	beq.n	8007292 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	e008      	b.n	8007292 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e000      	b.n	8007294 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40010400 	.word	0x40010400
 80072b8:	40001800 	.word	0x40001800
 80072bc:	40014000 	.word	0x40014000
 80072c0:	00010007 	.word	0x00010007

080072c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d122      	bne.n	8007320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d11b      	bne.n	8007320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0202 	mvn.w	r2, #2
 80072f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9fe 	bl	8007708 <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9f0 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fa01 	bl	800771c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b04      	cmp	r3, #4
 800732c:	d122      	bne.n	8007374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b04      	cmp	r3, #4
 800733a:	d11b      	bne.n	8007374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0204 	mvn.w	r2, #4
 8007344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9d4 	bl	8007708 <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9c6 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f9d7 	bl	800771c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b08      	cmp	r3, #8
 8007380:	d122      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b08      	cmp	r3, #8
 800738e:	d11b      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0208 	mvn.w	r2, #8
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2204      	movs	r2, #4
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f9aa 	bl	8007708 <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f99c 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f9ad 	bl	800771c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0210 	mvn.w	r2, #16
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2208      	movs	r2, #8
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f980 	bl	8007708 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f972 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f983 	bl	800771c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10e      	bne.n	8007448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d107      	bne.n	8007448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0201 	mvn.w	r2, #1
 8007440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fa fa44 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d10e      	bne.n	8007474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d107      	bne.n	8007474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800746c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb38 	bl	8007ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007482:	d10e      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d107      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fb2b 	bl	8007af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d10e      	bne.n	80074ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d107      	bne.n	80074ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f931 	bl	8007730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d10e      	bne.n	80074fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d107      	bne.n	80074fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f06f 0220 	mvn.w	r2, #32
 80074f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 faeb 	bl	8007ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_TIM_ConfigClockSource+0x1c>
 800751c:	2302      	movs	r3, #2
 800751e:	e0dc      	b.n	80076da <HAL_TIM_ConfigClockSource+0x1d6>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4b6a      	ldr	r3, [pc, #424]	; (80076e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800753c:	4013      	ands	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a64      	ldr	r2, [pc, #400]	; (80076e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	f000 80a9 	beq.w	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 800755c:	4a62      	ldr	r2, [pc, #392]	; (80076e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	f200 80ae 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007564:	4a61      	ldr	r2, [pc, #388]	; (80076ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	f000 80a1 	beq.w	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 800756c:	4a5f      	ldr	r2, [pc, #380]	; (80076ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	f200 80a6 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007574:	4a5e      	ldr	r2, [pc, #376]	; (80076f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007576:	4293      	cmp	r3, r2
 8007578:	f000 8099 	beq.w	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 800757c:	4a5c      	ldr	r2, [pc, #368]	; (80076f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800757e:	4293      	cmp	r3, r2
 8007580:	f200 809e 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007584:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007588:	f000 8091 	beq.w	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 800758c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007590:	f200 8096 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007598:	f000 8089 	beq.w	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 800759c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a0:	f200 808e 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d03e      	beq.n	8007628 <HAL_TIM_ConfigClockSource+0x124>
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ae:	f200 8087 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	f000 8086 	beq.w	80076c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d87f      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075c0:	2b70      	cmp	r3, #112	; 0x70
 80075c2:	d01a      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0xf6>
 80075c4:	2b70      	cmp	r3, #112	; 0x70
 80075c6:	d87b      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075c8:	2b60      	cmp	r3, #96	; 0x60
 80075ca:	d050      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x16a>
 80075cc:	2b60      	cmp	r3, #96	; 0x60
 80075ce:	d877      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075d0:	2b50      	cmp	r3, #80	; 0x50
 80075d2:	d03c      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x14a>
 80075d4:	2b50      	cmp	r3, #80	; 0x50
 80075d6:	d873      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d058      	beq.n	800768e <HAL_TIM_ConfigClockSource+0x18a>
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d86f      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d064      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 80075e4:	2b30      	cmp	r3, #48	; 0x30
 80075e6:	d86b      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d060      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d867      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d05c      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d05a      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x1aa>
 80075f8:	e062      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6899      	ldr	r1, [r3, #8]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f000 f9b3 	bl	8007974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800761c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	609a      	str	r2, [r3, #8]
      break;
 8007626:	e04f      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	6899      	ldr	r1, [r3, #8]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f000 f99c 	bl	8007974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800764a:	609a      	str	r2, [r3, #8]
      break;
 800764c:	e03c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6859      	ldr	r1, [r3, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	461a      	mov	r2, r3
 800765c:	f000 f90c 	bl	8007878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2150      	movs	r1, #80	; 0x50
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f966 	bl	8007938 <TIM_ITRx_SetConfig>
      break;
 800766c:	e02c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	6859      	ldr	r1, [r3, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	461a      	mov	r2, r3
 800767c:	f000 f92b 	bl	80078d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2160      	movs	r1, #96	; 0x60
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f956 	bl	8007938 <TIM_ITRx_SetConfig>
      break;
 800768c:	e01c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6859      	ldr	r1, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	461a      	mov	r2, r3
 800769c:	f000 f8ec 	bl	8007878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2140      	movs	r1, #64	; 0x40
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f946 	bl	8007938 <TIM_ITRx_SetConfig>
      break;
 80076ac:	e00c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f000 f93d 	bl	8007938 <TIM_ITRx_SetConfig>
      break;
 80076be:	e003      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e000      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80076c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	ffceff88 	.word	0xffceff88
 80076e8:	00100040 	.word	0x00100040
 80076ec:	00100030 	.word	0x00100030
 80076f0:	00100020 	.word	0x00100020

080076f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a40      	ldr	r2, [pc, #256]	; (8007858 <TIM_Base_SetConfig+0x114>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d013      	beq.n	8007784 <TIM_Base_SetConfig+0x40>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007762:	d00f      	beq.n	8007784 <TIM_Base_SetConfig+0x40>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a3d      	ldr	r2, [pc, #244]	; (800785c <TIM_Base_SetConfig+0x118>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00b      	beq.n	8007784 <TIM_Base_SetConfig+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a3c      	ldr	r2, [pc, #240]	; (8007860 <TIM_Base_SetConfig+0x11c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d007      	beq.n	8007784 <TIM_Base_SetConfig+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a3b      	ldr	r2, [pc, #236]	; (8007864 <TIM_Base_SetConfig+0x120>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3a      	ldr	r2, [pc, #232]	; (8007868 <TIM_Base_SetConfig+0x124>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d108      	bne.n	8007796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a2f      	ldr	r2, [pc, #188]	; (8007858 <TIM_Base_SetConfig+0x114>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d01f      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a4:	d01b      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a2c      	ldr	r2, [pc, #176]	; (800785c <TIM_Base_SetConfig+0x118>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d017      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2b      	ldr	r2, [pc, #172]	; (8007860 <TIM_Base_SetConfig+0x11c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2a      	ldr	r2, [pc, #168]	; (8007864 <TIM_Base_SetConfig+0x120>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00f      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a29      	ldr	r2, [pc, #164]	; (8007868 <TIM_Base_SetConfig+0x124>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00b      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a28      	ldr	r2, [pc, #160]	; (800786c <TIM_Base_SetConfig+0x128>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d007      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a27      	ldr	r2, [pc, #156]	; (8007870 <TIM_Base_SetConfig+0x12c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_Base_SetConfig+0x9a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a26      	ldr	r2, [pc, #152]	; (8007874 <TIM_Base_SetConfig+0x130>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d108      	bne.n	80077f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a10      	ldr	r2, [pc, #64]	; (8007858 <TIM_Base_SetConfig+0x114>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00f      	beq.n	800783c <TIM_Base_SetConfig+0xf8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a12      	ldr	r2, [pc, #72]	; (8007868 <TIM_Base_SetConfig+0x124>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00b      	beq.n	800783c <TIM_Base_SetConfig+0xf8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a11      	ldr	r2, [pc, #68]	; (800786c <TIM_Base_SetConfig+0x128>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_Base_SetConfig+0xf8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a10      	ldr	r2, [pc, #64]	; (8007870 <TIM_Base_SetConfig+0x12c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_Base_SetConfig+0xf8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a0f      	ldr	r2, [pc, #60]	; (8007874 <TIM_Base_SetConfig+0x130>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d103      	bne.n	8007844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	615a      	str	r2, [r3, #20]
}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40010000 	.word	0x40010000
 800785c:	40000400 	.word	0x40000400
 8007860:	40000800 	.word	0x40000800
 8007864:	40000c00 	.word	0x40000c00
 8007868:	40010400 	.word	0x40010400
 800786c:	40014000 	.word	0x40014000
 8007870:	40014400 	.word	0x40014400
 8007874:	40014800 	.word	0x40014800

08007878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 030a 	bic.w	r3, r3, #10
 80078b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f023 0210 	bic.w	r2, r3, #16
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	031b      	lsls	r3, r3, #12
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4b09      	ldr	r3, [pc, #36]	; (8007970 <TIM_ITRx_SetConfig+0x38>)
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	f043 0307 	orr.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	609a      	str	r2, [r3, #8]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	ffcfff8f 	.word	0xffcfff8f

08007974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800798e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	021a      	lsls	r2, r3, #8
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	431a      	orrs	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4313      	orrs	r3, r2
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	609a      	str	r2, [r3, #8]
}
 80079a8:	bf00      	nop
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e06d      	b.n	8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a30      	ldr	r2, [pc, #192]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a2f      	ldr	r2, [pc, #188]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d108      	bne.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a20      	ldr	r2, [pc, #128]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d022      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3e:	d01d      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d018      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d013      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00e      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d009      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a16      	ldr	r2, [pc, #88]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d004      	beq.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a15      	ldr	r2, [pc, #84]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d10c      	bne.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40001800 	.word	0x40001800
 8007acc:	40014000 	.word	0x40014000

08007ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e042      	b.n	8007ba4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fa f913 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2224      	movs	r2, #36	; 0x24
 8007b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8c2 	bl	8007cd8 <UART_SetConfig>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e022      	b.n	8007ba4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fe16 	bl	8008798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0201 	orr.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fe9d 	bl	80088dc <UART_CheckIdleState>
 8007ba2:	4603      	mov	r3, r0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	f040 8083 	bne.w	8007cce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_UART_Transmit+0x28>
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e07b      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_UART_Transmit+0x3a>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e074      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2221      	movs	r2, #33	; 0x21
 8007bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bfe:	f7fa facf 	bl	80021a0 <HAL_GetTick>
 8007c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	88fa      	ldrh	r2, [r7, #6]
 8007c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1c:	d108      	bne.n	8007c30 <HAL_UART_Transmit+0x84>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e003      	b.n	8007c38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007c40:	e02c      	b.n	8007c9c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fe90 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e039      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3302      	adds	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e007      	b.n	8007c8a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	3301      	adds	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1cc      	bne.n	8007c42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2140      	movs	r1, #64	; 0x40
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fe5d 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e006      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd8:	b5b0      	push	{r4, r5, r7, lr}
 8007cda:	b08e      	sub	sp, #56	; 0x38
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4bbf      	ldr	r3, [pc, #764]	; (8008004 <UART_SetConfig+0x32c>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4ab5      	ldr	r2, [pc, #724]	; (8008008 <UART_SetConfig+0x330>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d004      	beq.n	8007d42 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	4bb0      	ldr	r3, [pc, #704]	; (800800c <UART_SetConfig+0x334>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	f023 010f 	bic.w	r1, r3, #15
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4aa7      	ldr	r2, [pc, #668]	; (8008010 <UART_SetConfig+0x338>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d176      	bne.n	8007e64 <UART_SetConfig+0x18c>
 8007d76:	4ba7      	ldr	r3, [pc, #668]	; (8008014 <UART_SetConfig+0x33c>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d7e:	2b28      	cmp	r3, #40	; 0x28
 8007d80:	d86c      	bhi.n	8007e5c <UART_SetConfig+0x184>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <UART_SetConfig+0xb0>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007e2d 	.word	0x08007e2d
 8007d8c:	08007e5d 	.word	0x08007e5d
 8007d90:	08007e5d 	.word	0x08007e5d
 8007d94:	08007e5d 	.word	0x08007e5d
 8007d98:	08007e5d 	.word	0x08007e5d
 8007d9c:	08007e5d 	.word	0x08007e5d
 8007da0:	08007e5d 	.word	0x08007e5d
 8007da4:	08007e5d 	.word	0x08007e5d
 8007da8:	08007e35 	.word	0x08007e35
 8007dac:	08007e5d 	.word	0x08007e5d
 8007db0:	08007e5d 	.word	0x08007e5d
 8007db4:	08007e5d 	.word	0x08007e5d
 8007db8:	08007e5d 	.word	0x08007e5d
 8007dbc:	08007e5d 	.word	0x08007e5d
 8007dc0:	08007e5d 	.word	0x08007e5d
 8007dc4:	08007e5d 	.word	0x08007e5d
 8007dc8:	08007e3d 	.word	0x08007e3d
 8007dcc:	08007e5d 	.word	0x08007e5d
 8007dd0:	08007e5d 	.word	0x08007e5d
 8007dd4:	08007e5d 	.word	0x08007e5d
 8007dd8:	08007e5d 	.word	0x08007e5d
 8007ddc:	08007e5d 	.word	0x08007e5d
 8007de0:	08007e5d 	.word	0x08007e5d
 8007de4:	08007e5d 	.word	0x08007e5d
 8007de8:	08007e45 	.word	0x08007e45
 8007dec:	08007e5d 	.word	0x08007e5d
 8007df0:	08007e5d 	.word	0x08007e5d
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007e5d 	.word	0x08007e5d
 8007dfc:	08007e5d 	.word	0x08007e5d
 8007e00:	08007e5d 	.word	0x08007e5d
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e4d 	.word	0x08007e4d
 8007e0c:	08007e5d 	.word	0x08007e5d
 8007e10:	08007e5d 	.word	0x08007e5d
 8007e14:	08007e5d 	.word	0x08007e5d
 8007e18:	08007e5d 	.word	0x08007e5d
 8007e1c:	08007e5d 	.word	0x08007e5d
 8007e20:	08007e5d 	.word	0x08007e5d
 8007e24:	08007e5d 	.word	0x08007e5d
 8007e28:	08007e55 	.word	0x08007e55
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e32:	e222      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3a:	e21e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e42:	e21a      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4a:	e216      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e52:	e212      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5a:	e20e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e5c:	2380      	movs	r3, #128	; 0x80
 8007e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e62:	e20a      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6b      	ldr	r2, [pc, #428]	; (8008018 <UART_SetConfig+0x340>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d130      	bne.n	8007ed0 <UART_SetConfig+0x1f8>
 8007e6e:	4b69      	ldr	r3, [pc, #420]	; (8008014 <UART_SetConfig+0x33c>)
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d826      	bhi.n	8007ec8 <UART_SetConfig+0x1f0>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <UART_SetConfig+0x1a8>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007ea9 	.word	0x08007ea9
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9e:	e1ec      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	e1e8      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	e1e4      	b.n	800827a <UART_SetConfig+0x5a2>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb6:	e1e0      	b.n	800827a <UART_SetConfig+0x5a2>
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	e1dc      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec6:	e1d8      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ece:	e1d4      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a51      	ldr	r2, [pc, #324]	; (800801c <UART_SetConfig+0x344>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d130      	bne.n	8007f3c <UART_SetConfig+0x264>
 8007eda:	4b4e      	ldr	r3, [pc, #312]	; (8008014 <UART_SetConfig+0x33c>)
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d826      	bhi.n	8007f34 <UART_SetConfig+0x25c>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0x214>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f05 	.word	0x08007f05
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	08007f15 	.word	0x08007f15
 8007ef8:	08007f1d 	.word	0x08007f1d
 8007efc:	08007f25 	.word	0x08007f25
 8007f00:	08007f2d 	.word	0x08007f2d
 8007f04:	2300      	movs	r3, #0
 8007f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0a:	e1b6      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f12:	e1b2      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f14:	2308      	movs	r3, #8
 8007f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1a:	e1ae      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f22:	e1aa      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f24:	2320      	movs	r3, #32
 8007f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2a:	e1a6      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f2c:	2340      	movs	r3, #64	; 0x40
 8007f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f32:	e1a2      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3a:	e19e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a37      	ldr	r2, [pc, #220]	; (8008020 <UART_SetConfig+0x348>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d130      	bne.n	8007fa8 <UART_SetConfig+0x2d0>
 8007f46:	4b33      	ldr	r3, [pc, #204]	; (8008014 <UART_SetConfig+0x33c>)
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d826      	bhi.n	8007fa0 <UART_SetConfig+0x2c8>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x280>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f71 	.word	0x08007f71
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	08007f81 	.word	0x08007f81
 8007f64:	08007f89 	.word	0x08007f89
 8007f68:	08007f91 	.word	0x08007f91
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f76:	e180      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f78:	2304      	movs	r3, #4
 8007f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7e:	e17c      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f80:	2308      	movs	r3, #8
 8007f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f86:	e178      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f8e:	e174      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f90:	2320      	movs	r3, #32
 8007f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f96:	e170      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f9e:	e16c      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fa0:	2380      	movs	r3, #128	; 0x80
 8007fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa6:	e168      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <UART_SetConfig+0x34c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d142      	bne.n	8008038 <UART_SetConfig+0x360>
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <UART_SetConfig+0x33c>)
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b05      	cmp	r3, #5
 8007fbc:	d838      	bhi.n	8008030 <UART_SetConfig+0x358>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <UART_SetConfig+0x2ec>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fdd 	.word	0x08007fdd
 8007fc8:	08007fe5 	.word	0x08007fe5
 8007fcc:	08007fed 	.word	0x08007fed
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ffd 	.word	0x08007ffd
 8007fd8:	08008029 	.word	0x08008029
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe2:	e14a      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fea:	e146      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff2:	e142      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ffa:	e13e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008002:	e13a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008004:	cfff69f3 	.word	0xcfff69f3
 8008008:	58000c00 	.word	0x58000c00
 800800c:	11fff4ff 	.word	0x11fff4ff
 8008010:	40011000 	.word	0x40011000
 8008014:	58024400 	.word	0x58024400
 8008018:	40004400 	.word	0x40004400
 800801c:	40004800 	.word	0x40004800
 8008020:	40004c00 	.word	0x40004c00
 8008024:	40005000 	.word	0x40005000
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e124      	b.n	800827a <UART_SetConfig+0x5a2>
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e120      	b.n	800827a <UART_SetConfig+0x5a2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4acc      	ldr	r2, [pc, #816]	; (8008370 <UART_SetConfig+0x698>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d176      	bne.n	8008130 <UART_SetConfig+0x458>
 8008042:	4bcc      	ldr	r3, [pc, #816]	; (8008374 <UART_SetConfig+0x69c>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800804a:	2b28      	cmp	r3, #40	; 0x28
 800804c:	d86c      	bhi.n	8008128 <UART_SetConfig+0x450>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x37c>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	080080f9 	.word	0x080080f9
 8008058:	08008129 	.word	0x08008129
 800805c:	08008129 	.word	0x08008129
 8008060:	08008129 	.word	0x08008129
 8008064:	08008129 	.word	0x08008129
 8008068:	08008129 	.word	0x08008129
 800806c:	08008129 	.word	0x08008129
 8008070:	08008129 	.word	0x08008129
 8008074:	08008101 	.word	0x08008101
 8008078:	08008129 	.word	0x08008129
 800807c:	08008129 	.word	0x08008129
 8008080:	08008129 	.word	0x08008129
 8008084:	08008129 	.word	0x08008129
 8008088:	08008129 	.word	0x08008129
 800808c:	08008129 	.word	0x08008129
 8008090:	08008129 	.word	0x08008129
 8008094:	08008109 	.word	0x08008109
 8008098:	08008129 	.word	0x08008129
 800809c:	08008129 	.word	0x08008129
 80080a0:	08008129 	.word	0x08008129
 80080a4:	08008129 	.word	0x08008129
 80080a8:	08008129 	.word	0x08008129
 80080ac:	08008129 	.word	0x08008129
 80080b0:	08008129 	.word	0x08008129
 80080b4:	08008111 	.word	0x08008111
 80080b8:	08008129 	.word	0x08008129
 80080bc:	08008129 	.word	0x08008129
 80080c0:	08008129 	.word	0x08008129
 80080c4:	08008129 	.word	0x08008129
 80080c8:	08008129 	.word	0x08008129
 80080cc:	08008129 	.word	0x08008129
 80080d0:	08008129 	.word	0x08008129
 80080d4:	08008119 	.word	0x08008119
 80080d8:	08008129 	.word	0x08008129
 80080dc:	08008129 	.word	0x08008129
 80080e0:	08008129 	.word	0x08008129
 80080e4:	08008129 	.word	0x08008129
 80080e8:	08008129 	.word	0x08008129
 80080ec:	08008129 	.word	0x08008129
 80080f0:	08008129 	.word	0x08008129
 80080f4:	08008121 	.word	0x08008121
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fe:	e0bc      	b.n	800827a <UART_SetConfig+0x5a2>
 8008100:	2304      	movs	r3, #4
 8008102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008106:	e0b8      	b.n	800827a <UART_SetConfig+0x5a2>
 8008108:	2308      	movs	r3, #8
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810e:	e0b4      	b.n	800827a <UART_SetConfig+0x5a2>
 8008110:	2310      	movs	r3, #16
 8008112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008116:	e0b0      	b.n	800827a <UART_SetConfig+0x5a2>
 8008118:	2320      	movs	r3, #32
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e0ac      	b.n	800827a <UART_SetConfig+0x5a2>
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e0a8      	b.n	800827a <UART_SetConfig+0x5a2>
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812e:	e0a4      	b.n	800827a <UART_SetConfig+0x5a2>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a90      	ldr	r2, [pc, #576]	; (8008378 <UART_SetConfig+0x6a0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d130      	bne.n	800819c <UART_SetConfig+0x4c4>
 800813a:	4b8e      	ldr	r3, [pc, #568]	; (8008374 <UART_SetConfig+0x69c>)
 800813c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b05      	cmp	r3, #5
 8008144:	d826      	bhi.n	8008194 <UART_SetConfig+0x4bc>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0x474>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	08008165 	.word	0x08008165
 8008150:	0800816d 	.word	0x0800816d
 8008154:	08008175 	.word	0x08008175
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818d 	.word	0x0800818d
 8008164:	2300      	movs	r3, #0
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816a:	e086      	b.n	800827a <UART_SetConfig+0x5a2>
 800816c:	2304      	movs	r3, #4
 800816e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008172:	e082      	b.n	800827a <UART_SetConfig+0x5a2>
 8008174:	2308      	movs	r3, #8
 8008176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817a:	e07e      	b.n	800827a <UART_SetConfig+0x5a2>
 800817c:	2310      	movs	r3, #16
 800817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008182:	e07a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008184:	2320      	movs	r3, #32
 8008186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800818a:	e076      	b.n	800827a <UART_SetConfig+0x5a2>
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008192:	e072      	b.n	800827a <UART_SetConfig+0x5a2>
 8008194:	2380      	movs	r3, #128	; 0x80
 8008196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800819a:	e06e      	b.n	800827a <UART_SetConfig+0x5a2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a76      	ldr	r2, [pc, #472]	; (800837c <UART_SetConfig+0x6a4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d130      	bne.n	8008208 <UART_SetConfig+0x530>
 80081a6:	4b73      	ldr	r3, [pc, #460]	; (8008374 <UART_SetConfig+0x69c>)
 80081a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d826      	bhi.n	8008200 <UART_SetConfig+0x528>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <UART_SetConfig+0x4e0>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d1 	.word	0x080081d1
 80081bc:	080081d9 	.word	0x080081d9
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e050      	b.n	800827a <UART_SetConfig+0x5a2>
 80081d8:	2304      	movs	r3, #4
 80081da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081de:	e04c      	b.n	800827a <UART_SetConfig+0x5a2>
 80081e0:	2308      	movs	r3, #8
 80081e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e6:	e048      	b.n	800827a <UART_SetConfig+0x5a2>
 80081e8:	2310      	movs	r3, #16
 80081ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ee:	e044      	b.n	800827a <UART_SetConfig+0x5a2>
 80081f0:	2320      	movs	r3, #32
 80081f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081f6:	e040      	b.n	800827a <UART_SetConfig+0x5a2>
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081fe:	e03c      	b.n	800827a <UART_SetConfig+0x5a2>
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008206:	e038      	b.n	800827a <UART_SetConfig+0x5a2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a5c      	ldr	r2, [pc, #368]	; (8008380 <UART_SetConfig+0x6a8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d130      	bne.n	8008274 <UART_SetConfig+0x59c>
 8008212:	4b58      	ldr	r3, [pc, #352]	; (8008374 <UART_SetConfig+0x69c>)
 8008214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b05      	cmp	r3, #5
 800821c:	d826      	bhi.n	800826c <UART_SetConfig+0x594>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <UART_SetConfig+0x54c>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008245 	.word	0x08008245
 800822c:	0800824d 	.word	0x0800824d
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	2302      	movs	r3, #2
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008242:	e01a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008244:	2304      	movs	r3, #4
 8008246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824a:	e016      	b.n	800827a <UART_SetConfig+0x5a2>
 800824c:	2308      	movs	r3, #8
 800824e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008252:	e012      	b.n	800827a <UART_SetConfig+0x5a2>
 8008254:	2310      	movs	r3, #16
 8008256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800825a:	e00e      	b.n	800827a <UART_SetConfig+0x5a2>
 800825c:	2320      	movs	r3, #32
 800825e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008262:	e00a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008264:	2340      	movs	r3, #64	; 0x40
 8008266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800826a:	e006      	b.n	800827a <UART_SetConfig+0x5a2>
 800826c:	2380      	movs	r3, #128	; 0x80
 800826e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008272:	e002      	b.n	800827a <UART_SetConfig+0x5a2>
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a40      	ldr	r2, [pc, #256]	; (8008380 <UART_SetConfig+0x6a8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	f040 80ef 	bne.w	8008464 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800828a:	2b20      	cmp	r3, #32
 800828c:	dc46      	bgt.n	800831c <UART_SetConfig+0x644>
 800828e:	2b02      	cmp	r3, #2
 8008290:	f2c0 8081 	blt.w	8008396 <UART_SetConfig+0x6be>
 8008294:	3b02      	subs	r3, #2
 8008296:	2b1e      	cmp	r3, #30
 8008298:	d87d      	bhi.n	8008396 <UART_SetConfig+0x6be>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <UART_SetConfig+0x5c8>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	08008323 	.word	0x08008323
 80082a4:	08008397 	.word	0x08008397
 80082a8:	0800832b 	.word	0x0800832b
 80082ac:	08008397 	.word	0x08008397
 80082b0:	08008397 	.word	0x08008397
 80082b4:	08008397 	.word	0x08008397
 80082b8:	0800833b 	.word	0x0800833b
 80082bc:	08008397 	.word	0x08008397
 80082c0:	08008397 	.word	0x08008397
 80082c4:	08008397 	.word	0x08008397
 80082c8:	08008397 	.word	0x08008397
 80082cc:	08008397 	.word	0x08008397
 80082d0:	08008397 	.word	0x08008397
 80082d4:	08008397 	.word	0x08008397
 80082d8:	0800834b 	.word	0x0800834b
 80082dc:	08008397 	.word	0x08008397
 80082e0:	08008397 	.word	0x08008397
 80082e4:	08008397 	.word	0x08008397
 80082e8:	08008397 	.word	0x08008397
 80082ec:	08008397 	.word	0x08008397
 80082f0:	08008397 	.word	0x08008397
 80082f4:	08008397 	.word	0x08008397
 80082f8:	08008397 	.word	0x08008397
 80082fc:	08008397 	.word	0x08008397
 8008300:	08008397 	.word	0x08008397
 8008304:	08008397 	.word	0x08008397
 8008308:	08008397 	.word	0x08008397
 800830c:	08008397 	.word	0x08008397
 8008310:	08008397 	.word	0x08008397
 8008314:	08008397 	.word	0x08008397
 8008318:	08008389 	.word	0x08008389
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d036      	beq.n	800838e <UART_SetConfig+0x6b6>
 8008320:	e039      	b.n	8008396 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008322:	f7fe f91b 	bl	800655c <HAL_RCCEx_GetD3PCLK1Freq>
 8008326:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008328:	e03b      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832a:	f107 0314 	add.w	r3, r7, #20
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe f92a 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008338:	e033      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fa76 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008348:	e02b      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800834a:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <UART_SetConfig+0x69c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <UART_SetConfig+0x69c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	08db      	lsrs	r3, r3, #3
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	4a08      	ldr	r2, [pc, #32]	; (8008384 <UART_SetConfig+0x6ac>)
 8008362:	fa22 f303 	lsr.w	r3, r2, r3
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008368:	e01b      	b.n	80083a2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <UART_SetConfig+0x6ac>)
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800836e:	e018      	b.n	80083a2 <UART_SetConfig+0x6ca>
 8008370:	40011400 	.word	0x40011400
 8008374:	58024400 	.word	0x58024400
 8008378:	40007800 	.word	0x40007800
 800837c:	40007c00 	.word	0x40007c00
 8008380:	58000c00 	.word	0x58000c00
 8008384:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008388:	4bc4      	ldr	r3, [pc, #784]	; (800869c <UART_SetConfig+0x9c4>)
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800838c:	e009      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008394:	e005      	b.n	80083a2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 81da 	beq.w	800875e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	4abc      	ldr	r2, [pc, #752]	; (80086a0 <UART_SetConfig+0x9c8>)
 80083b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b4:	461a      	mov	r2, r3
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083bc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	6a3a      	ldr	r2, [r7, #32]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d305      	bcc.n	80083da <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083d4:	6a3a      	ldr	r2, [r7, #32]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80083e0:	e1bd      	b.n	800875e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	4618      	mov	r0, r3
 80083e6:	f04f 0100 	mov.w	r1, #0
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	4aac      	ldr	r2, [pc, #688]	; (80086a0 <UART_SetConfig+0x9c8>)
 80083f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	f7f8 f985 	bl	8000708 <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	020b      	lsls	r3, r1, #8
 8008410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008414:	0202      	lsls	r2, r0, #8
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	6849      	ldr	r1, [r1, #4]
 800841a:	0849      	lsrs	r1, r1, #1
 800841c:	4608      	mov	r0, r1
 800841e:	f04f 0100 	mov.w	r1, #0
 8008422:	1814      	adds	r4, r2, r0
 8008424:	eb43 0501 	adc.w	r5, r3, r1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	461a      	mov	r2, r3
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f8 f967 	bl	8000708 <__aeabi_uldivmod>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4613      	mov	r3, r2
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008448:	d308      	bcc.n	800845c <UART_SetConfig+0x784>
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008450:	d204      	bcs.n	800845c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e180      	b.n	800875e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008462:	e17c      	b.n	800875e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846c:	f040 80be 	bne.w	80085ec <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8008470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008474:	2b20      	cmp	r3, #32
 8008476:	dc49      	bgt.n	800850c <UART_SetConfig+0x834>
 8008478:	2b00      	cmp	r3, #0
 800847a:	db7c      	blt.n	8008576 <UART_SetConfig+0x89e>
 800847c:	2b20      	cmp	r3, #32
 800847e:	d87a      	bhi.n	8008576 <UART_SetConfig+0x89e>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0x7b0>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	08008513 	.word	0x08008513
 800848c:	0800851b 	.word	0x0800851b
 8008490:	08008577 	.word	0x08008577
 8008494:	08008577 	.word	0x08008577
 8008498:	08008523 	.word	0x08008523
 800849c:	08008577 	.word	0x08008577
 80084a0:	08008577 	.word	0x08008577
 80084a4:	08008577 	.word	0x08008577
 80084a8:	08008533 	.word	0x08008533
 80084ac:	08008577 	.word	0x08008577
 80084b0:	08008577 	.word	0x08008577
 80084b4:	08008577 	.word	0x08008577
 80084b8:	08008577 	.word	0x08008577
 80084bc:	08008577 	.word	0x08008577
 80084c0:	08008577 	.word	0x08008577
 80084c4:	08008577 	.word	0x08008577
 80084c8:	08008543 	.word	0x08008543
 80084cc:	08008577 	.word	0x08008577
 80084d0:	08008577 	.word	0x08008577
 80084d4:	08008577 	.word	0x08008577
 80084d8:	08008577 	.word	0x08008577
 80084dc:	08008577 	.word	0x08008577
 80084e0:	08008577 	.word	0x08008577
 80084e4:	08008577 	.word	0x08008577
 80084e8:	08008577 	.word	0x08008577
 80084ec:	08008577 	.word	0x08008577
 80084f0:	08008577 	.word	0x08008577
 80084f4:	08008577 	.word	0x08008577
 80084f8:	08008577 	.word	0x08008577
 80084fc:	08008577 	.word	0x08008577
 8008500:	08008577 	.word	0x08008577
 8008504:	08008577 	.word	0x08008577
 8008508:	08008569 	.word	0x08008569
 800850c:	2b40      	cmp	r3, #64	; 0x40
 800850e:	d02e      	beq.n	800856e <UART_SetConfig+0x896>
 8008510:	e031      	b.n	8008576 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008512:	f7fc fbe5 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 8008516:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008518:	e033      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800851a:	f7fc fbf7 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 800851e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008520:	e02f      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008522:	f107 0314 	add.w	r3, r7, #20
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe f82e 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008530:	e027      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe f97a 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008540:	e01f      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008542:	4b58      	ldr	r3, [pc, #352]	; (80086a4 <UART_SetConfig+0x9cc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800854e:	4b55      	ldr	r3, [pc, #340]	; (80086a4 <UART_SetConfig+0x9cc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	08db      	lsrs	r3, r3, #3
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	4a53      	ldr	r2, [pc, #332]	; (80086a8 <UART_SetConfig+0x9d0>)
 800855a:	fa22 f303 	lsr.w	r3, r2, r3
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008560:	e00f      	b.n	8008582 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008562:	4b51      	ldr	r3, [pc, #324]	; (80086a8 <UART_SetConfig+0x9d0>)
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008566:	e00c      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008568:	4b4c      	ldr	r3, [pc, #304]	; (800869c <UART_SetConfig+0x9c4>)
 800856a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800856c:	e009      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008574:	e005      	b.n	8008582 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80ea 	beq.w	800875e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	4a44      	ldr	r2, [pc, #272]	; (80086a0 <UART_SetConfig+0x9c8>)
 8008590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008594:	461a      	mov	r2, r3
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	fbb3 f3f2 	udiv	r3, r3, r2
 800859c:	005a      	lsls	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	441a      	add	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	d916      	bls.n	80085e4 <UART_SetConfig+0x90c>
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085bc:	d212      	bcs.n	80085e4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f023 030f 	bic.w	r3, r3, #15
 80085c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085d6:	4313      	orrs	r3, r2
 80085d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	e0bc      	b.n	800875e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085ea:	e0b8      	b.n	800875e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	dc4b      	bgt.n	800868c <UART_SetConfig+0x9b4>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f2c0 8087 	blt.w	8008708 <UART_SetConfig+0xa30>
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	f200 8084 	bhi.w	8008708 <UART_SetConfig+0xa30>
 8008600:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x930>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	08008693 	.word	0x08008693
 800860c:	080086ad 	.word	0x080086ad
 8008610:	08008709 	.word	0x08008709
 8008614:	08008709 	.word	0x08008709
 8008618:	080086b5 	.word	0x080086b5
 800861c:	08008709 	.word	0x08008709
 8008620:	08008709 	.word	0x08008709
 8008624:	08008709 	.word	0x08008709
 8008628:	080086c5 	.word	0x080086c5
 800862c:	08008709 	.word	0x08008709
 8008630:	08008709 	.word	0x08008709
 8008634:	08008709 	.word	0x08008709
 8008638:	08008709 	.word	0x08008709
 800863c:	08008709 	.word	0x08008709
 8008640:	08008709 	.word	0x08008709
 8008644:	08008709 	.word	0x08008709
 8008648:	080086d5 	.word	0x080086d5
 800864c:	08008709 	.word	0x08008709
 8008650:	08008709 	.word	0x08008709
 8008654:	08008709 	.word	0x08008709
 8008658:	08008709 	.word	0x08008709
 800865c:	08008709 	.word	0x08008709
 8008660:	08008709 	.word	0x08008709
 8008664:	08008709 	.word	0x08008709
 8008668:	08008709 	.word	0x08008709
 800866c:	08008709 	.word	0x08008709
 8008670:	08008709 	.word	0x08008709
 8008674:	08008709 	.word	0x08008709
 8008678:	08008709 	.word	0x08008709
 800867c:	08008709 	.word	0x08008709
 8008680:	08008709 	.word	0x08008709
 8008684:	08008709 	.word	0x08008709
 8008688:	080086fb 	.word	0x080086fb
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d037      	beq.n	8008700 <UART_SetConfig+0xa28>
 8008690:	e03a      	b.n	8008708 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008692:	f7fc fb25 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 8008696:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008698:	e03c      	b.n	8008714 <UART_SetConfig+0xa3c>
 800869a:	bf00      	nop
 800869c:	003d0900 	.word	0x003d0900
 80086a0:	0800d4a0 	.word	0x0800d4a0
 80086a4:	58024400 	.word	0x58024400
 80086a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ac:	f7fc fb2e 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 80086b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086b2:	e02f      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fd ff65 	bl	8006588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086c2:	e027      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe f8b1 	bl	8006830 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086d2:	e01f      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d4:	4b2c      	ldr	r3, [pc, #176]	; (8008788 <UART_SetConfig+0xab0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086e0:	4b29      	ldr	r3, [pc, #164]	; (8008788 <UART_SetConfig+0xab0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	4a28      	ldr	r2, [pc, #160]	; (800878c <UART_SetConfig+0xab4>)
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086f2:	e00f      	b.n	8008714 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80086f4:	4b25      	ldr	r3, [pc, #148]	; (800878c <UART_SetConfig+0xab4>)
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086f8:	e00c      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086fa:	4b25      	ldr	r3, [pc, #148]	; (8008790 <UART_SetConfig+0xab8>)
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086fe:	e009      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008706:	e005      	b.n	8008714 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008712:	bf00      	nop
    }

    if (pclk != 0U)
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d021      	beq.n	800875e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <UART_SetConfig+0xabc>)
 8008720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008724:	461a      	mov	r2, r3
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	fbb3 f2f2 	udiv	r2, r3, r2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	441a      	add	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	2b0f      	cmp	r3, #15
 8008742:	d909      	bls.n	8008758 <UART_SetConfig+0xa80>
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874a:	d205      	bcs.n	8008758 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	e002      	b.n	800875e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800877a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800877e:	4618      	mov	r0, r3
 8008780:	3738      	adds	r7, #56	; 0x38
 8008782:	46bd      	mov	sp, r7
 8008784:	bdb0      	pop	{r4, r5, r7, pc}
 8008786:	bf00      	nop
 8008788:	58024400 	.word	0x58024400
 800878c:	03d09000 	.word	0x03d09000
 8008790:	003d0900 	.word	0x003d0900
 8008794:	0800d4a0 	.word	0x0800d4a0

08008798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01a      	beq.n	80088ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008896:	d10a      	bne.n	80088ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	605a      	str	r2, [r3, #4]
  }
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088ec:	f7f9 fc58 	bl	80021a0 <HAL_GetTick>
 80088f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10e      	bne.n	800891e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f82f 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e025      	b.n	800896a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d10e      	bne.n	800894a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800892c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f819 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e00f      	b.n	800896a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b09c      	sub	sp, #112	; 0x70
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008982:	e0a9      	b.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898a:	f000 80a5 	beq.w	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898e:	f7f9 fc07 	bl	80021a0 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800899a:	429a      	cmp	r2, r3
 800899c:	d302      	bcc.n	80089a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800899e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d140      	bne.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089b8:	667b      	str	r3, [r7, #100]	; 0x64
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e6      	bne.n	80089a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	663b      	str	r3, [r7, #96]	; 0x60
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80089f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e5      	bne.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e069      	b.n	8008afa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d051      	beq.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a42:	d149      	bne.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e6      	bne.n	8008a4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aa0:	623a      	str	r2, [r7, #32]
 8008aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	69f9      	ldr	r1, [r7, #28]
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e5      	bne.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e010      	b.n	8008afa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69da      	ldr	r2, [r3, #28]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	f43f af46 	beq.w	8008984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3770      	adds	r7, #112	; 0x70
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e027      	b.n	8008b68 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2224      	movs	r2, #36	; 0x24
 8008b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0201 	bic.w	r2, r2, #1
 8008b3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e02d      	b.n	8008be8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2224      	movs	r2, #36	; 0x24
 8008b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0201 	bic.w	r2, r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f84f 	bl	8008c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e02d      	b.n	8008c64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2224      	movs	r2, #36	; 0x24
 8008c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f811 	bl	8008c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d108      	bne.n	8008c8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c8c:	e031      	b.n	8008cf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c8e:	2310      	movs	r3, #16
 8008c90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c92:	2310      	movs	r3, #16
 8008c94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	0e5b      	lsrs	r3, r3, #25
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	0f5b      	lsrs	r3, r3, #29
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	7b3a      	ldrb	r2, [r7, #12]
 8008cba:	4911      	ldr	r1, [pc, #68]	; (8008d00 <UARTEx_SetNbDataToProcess+0x94>)
 8008cbc:	5c8a      	ldrb	r2, [r1, r2]
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cc2:	7b3a      	ldrb	r2, [r7, #12]
 8008cc4:	490f      	ldr	r1, [pc, #60]	; (8008d04 <UARTEx_SetNbDataToProcess+0x98>)
 8008cc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	7b7a      	ldrb	r2, [r7, #13]
 8008cd8:	4909      	ldr	r1, [pc, #36]	; (8008d00 <UARTEx_SetNbDataToProcess+0x94>)
 8008cda:	5c8a      	ldrb	r2, [r1, r2]
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ce0:	7b7a      	ldrb	r2, [r7, #13]
 8008ce2:	4908      	ldr	r1, [pc, #32]	; (8008d04 <UARTEx_SetNbDataToProcess+0x98>)
 8008ce4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ce6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cf2:	bf00      	nop
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	0800d4b8 	.word	0x0800d4b8
 8008d04:	0800d4c0 	.word	0x0800d4c0

08008d08 <__errno>:
 8008d08:	4b01      	ldr	r3, [pc, #4]	; (8008d10 <__errno+0x8>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	24000014 	.word	0x24000014

08008d14 <__libc_init_array>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4d0d      	ldr	r5, [pc, #52]	; (8008d4c <__libc_init_array+0x38>)
 8008d18:	4c0d      	ldr	r4, [pc, #52]	; (8008d50 <__libc_init_array+0x3c>)
 8008d1a:	1b64      	subs	r4, r4, r5
 8008d1c:	10a4      	asrs	r4, r4, #2
 8008d1e:	2600      	movs	r6, #0
 8008d20:	42a6      	cmp	r6, r4
 8008d22:	d109      	bne.n	8008d38 <__libc_init_array+0x24>
 8008d24:	4d0b      	ldr	r5, [pc, #44]	; (8008d54 <__libc_init_array+0x40>)
 8008d26:	4c0c      	ldr	r4, [pc, #48]	; (8008d58 <__libc_init_array+0x44>)
 8008d28:	f004 fb76 	bl	800d418 <_init>
 8008d2c:	1b64      	subs	r4, r4, r5
 8008d2e:	10a4      	asrs	r4, r4, #2
 8008d30:	2600      	movs	r6, #0
 8008d32:	42a6      	cmp	r6, r4
 8008d34:	d105      	bne.n	8008d42 <__libc_init_array+0x2e>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d3c:	4798      	blx	r3
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7ee      	b.n	8008d20 <__libc_init_array+0xc>
 8008d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d46:	4798      	blx	r3
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7f2      	b.n	8008d32 <__libc_init_array+0x1e>
 8008d4c:	0800d984 	.word	0x0800d984
 8008d50:	0800d984 	.word	0x0800d984
 8008d54:	0800d984 	.word	0x0800d984
 8008d58:	0800d988 	.word	0x0800d988

08008d5c <memset>:
 8008d5c:	4402      	add	r2, r0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d100      	bne.n	8008d66 <memset+0xa>
 8008d64:	4770      	bx	lr
 8008d66:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6a:	e7f9      	b.n	8008d60 <memset+0x4>

08008d6c <__cvt>:
 8008d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6e:	ed2d 8b02 	vpush	{d8}
 8008d72:	eeb0 8b40 	vmov.f64	d8, d0
 8008d76:	b085      	sub	sp, #20
 8008d78:	4617      	mov	r7, r2
 8008d7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008d7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d7e:	ee18 2a90 	vmov	r2, s17
 8008d82:	f025 0520 	bic.w	r5, r5, #32
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	bfb6      	itet	lt
 8008d8a:	222d      	movlt	r2, #45	; 0x2d
 8008d8c:	2200      	movge	r2, #0
 8008d8e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008d92:	2d46      	cmp	r5, #70	; 0x46
 8008d94:	460c      	mov	r4, r1
 8008d96:	701a      	strb	r2, [r3, #0]
 8008d98:	d004      	beq.n	8008da4 <__cvt+0x38>
 8008d9a:	2d45      	cmp	r5, #69	; 0x45
 8008d9c:	d100      	bne.n	8008da0 <__cvt+0x34>
 8008d9e:	3401      	adds	r4, #1
 8008da0:	2102      	movs	r1, #2
 8008da2:	e000      	b.n	8008da6 <__cvt+0x3a>
 8008da4:	2103      	movs	r1, #3
 8008da6:	ab03      	add	r3, sp, #12
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	ab02      	add	r3, sp, #8
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	4622      	mov	r2, r4
 8008db0:	4633      	mov	r3, r6
 8008db2:	eeb0 0b48 	vmov.f64	d0, d8
 8008db6:	f001 fd53 	bl	800a860 <_dtoa_r>
 8008dba:	2d47      	cmp	r5, #71	; 0x47
 8008dbc:	d109      	bne.n	8008dd2 <__cvt+0x66>
 8008dbe:	07fb      	lsls	r3, r7, #31
 8008dc0:	d407      	bmi.n	8008dd2 <__cvt+0x66>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dc6:	1a1b      	subs	r3, r3, r0
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	b005      	add	sp, #20
 8008dcc:	ecbd 8b02 	vpop	{d8}
 8008dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd2:	2d46      	cmp	r5, #70	; 0x46
 8008dd4:	eb00 0204 	add.w	r2, r0, r4
 8008dd8:	d10c      	bne.n	8008df4 <__cvt+0x88>
 8008dda:	7803      	ldrb	r3, [r0, #0]
 8008ddc:	2b30      	cmp	r3, #48	; 0x30
 8008dde:	d107      	bne.n	8008df0 <__cvt+0x84>
 8008de0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	bf1c      	itt	ne
 8008dea:	f1c4 0401 	rsbne	r4, r4, #1
 8008dee:	6034      	strne	r4, [r6, #0]
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	441a      	add	r2, r3
 8008df4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	bf08      	it	eq
 8008dfe:	9203      	streq	r2, [sp, #12]
 8008e00:	2130      	movs	r1, #48	; 0x30
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d2dc      	bcs.n	8008dc2 <__cvt+0x56>
 8008e08:	1c5c      	adds	r4, r3, #1
 8008e0a:	9403      	str	r4, [sp, #12]
 8008e0c:	7019      	strb	r1, [r3, #0]
 8008e0e:	e7f8      	b.n	8008e02 <__cvt+0x96>

08008e10 <__exponent>:
 8008e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e12:	4603      	mov	r3, r0
 8008e14:	2900      	cmp	r1, #0
 8008e16:	bfb8      	it	lt
 8008e18:	4249      	neglt	r1, r1
 8008e1a:	f803 2b02 	strb.w	r2, [r3], #2
 8008e1e:	bfb4      	ite	lt
 8008e20:	222d      	movlt	r2, #45	; 0x2d
 8008e22:	222b      	movge	r2, #43	; 0x2b
 8008e24:	2909      	cmp	r1, #9
 8008e26:	7042      	strb	r2, [r0, #1]
 8008e28:	dd2a      	ble.n	8008e80 <__exponent+0x70>
 8008e2a:	f10d 0407 	add.w	r4, sp, #7
 8008e2e:	46a4      	mov	ip, r4
 8008e30:	270a      	movs	r7, #10
 8008e32:	46a6      	mov	lr, r4
 8008e34:	460a      	mov	r2, r1
 8008e36:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e3a:	fb07 1516 	mls	r5, r7, r6, r1
 8008e3e:	3530      	adds	r5, #48	; 0x30
 8008e40:	2a63      	cmp	r2, #99	; 0x63
 8008e42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008e46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	dcf1      	bgt.n	8008e32 <__exponent+0x22>
 8008e4e:	3130      	adds	r1, #48	; 0x30
 8008e50:	f1ae 0502 	sub.w	r5, lr, #2
 8008e54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e58:	1c44      	adds	r4, r0, #1
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	4561      	cmp	r1, ip
 8008e5e:	d30a      	bcc.n	8008e76 <__exponent+0x66>
 8008e60:	f10d 0209 	add.w	r2, sp, #9
 8008e64:	eba2 020e 	sub.w	r2, r2, lr
 8008e68:	4565      	cmp	r5, ip
 8008e6a:	bf88      	it	hi
 8008e6c:	2200      	movhi	r2, #0
 8008e6e:	4413      	add	r3, r2
 8008e70:	1a18      	subs	r0, r3, r0
 8008e72:	b003      	add	sp, #12
 8008e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e7e:	e7ed      	b.n	8008e5c <__exponent+0x4c>
 8008e80:	2330      	movs	r3, #48	; 0x30
 8008e82:	3130      	adds	r1, #48	; 0x30
 8008e84:	7083      	strb	r3, [r0, #2]
 8008e86:	70c1      	strb	r1, [r0, #3]
 8008e88:	1d03      	adds	r3, r0, #4
 8008e8a:	e7f1      	b.n	8008e70 <__exponent+0x60>
 8008e8c:	0000      	movs	r0, r0
	...

08008e90 <_printf_float>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	b08b      	sub	sp, #44	; 0x2c
 8008e96:	460c      	mov	r4, r1
 8008e98:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	461f      	mov	r7, r3
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	f002 fdcf 	bl	800ba44 <_localeconv_r>
 8008ea6:	f8d0 b000 	ldr.w	fp, [r0]
 8008eaa:	4658      	mov	r0, fp
 8008eac:	f7f7 fa18 	bl	80002e0 <strlen>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9308      	str	r3, [sp, #32]
 8008eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ebc:	6822      	ldr	r2, [r4, #0]
 8008ebe:	3307      	adds	r3, #7
 8008ec0:	f023 0307 	bic.w	r3, r3, #7
 8008ec4:	f103 0108 	add.w	r1, r3, #8
 8008ec8:	f8c8 1000 	str.w	r1, [r8]
 8008ecc:	4682      	mov	sl, r0
 8008ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ed2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008ed6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009138 <_printf_float+0x2a8>
 8008eda:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008ede:	eeb0 6bc0 	vabs.f64	d6, d0
 8008ee2:	eeb4 6b47 	vcmp.f64	d6, d7
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	dd24      	ble.n	8008f36 <_printf_float+0xa6>
 8008eec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef4:	d502      	bpl.n	8008efc <_printf_float+0x6c>
 8008ef6:	232d      	movs	r3, #45	; 0x2d
 8008ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efc:	4b90      	ldr	r3, [pc, #576]	; (8009140 <_printf_float+0x2b0>)
 8008efe:	4891      	ldr	r0, [pc, #580]	; (8009144 <_printf_float+0x2b4>)
 8008f00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f04:	bf94      	ite	ls
 8008f06:	4698      	movls	r8, r3
 8008f08:	4680      	movhi	r8, r0
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	f022 0204 	bic.w	r2, r2, #4
 8008f12:	2300      	movs	r3, #0
 8008f14:	6022      	str	r2, [r4, #0]
 8008f16:	9304      	str	r3, [sp, #16]
 8008f18:	9700      	str	r7, [sp, #0]
 8008f1a:	4633      	mov	r3, r6
 8008f1c:	aa09      	add	r2, sp, #36	; 0x24
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f9d3 	bl	80092cc <_printf_common>
 8008f26:	3001      	adds	r0, #1
 8008f28:	f040 808a 	bne.w	8009040 <_printf_float+0x1b0>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f30:	b00b      	add	sp, #44	; 0x2c
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	eeb4 0b40 	vcmp.f64	d0, d0
 8008f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3e:	d709      	bvc.n	8008f54 <_printf_float+0xc4>
 8008f40:	ee10 3a90 	vmov	r3, s1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bfbc      	itt	lt
 8008f48:	232d      	movlt	r3, #45	; 0x2d
 8008f4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f4e:	487e      	ldr	r0, [pc, #504]	; (8009148 <_printf_float+0x2b8>)
 8008f50:	4b7e      	ldr	r3, [pc, #504]	; (800914c <_printf_float+0x2bc>)
 8008f52:	e7d5      	b.n	8008f00 <_printf_float+0x70>
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f5a:	9104      	str	r1, [sp, #16]
 8008f5c:	1c59      	adds	r1, r3, #1
 8008f5e:	d13c      	bne.n	8008fda <_printf_float+0x14a>
 8008f60:	2306      	movs	r3, #6
 8008f62:	6063      	str	r3, [r4, #4]
 8008f64:	2300      	movs	r3, #0
 8008f66:	9303      	str	r3, [sp, #12]
 8008f68:	ab08      	add	r3, sp, #32
 8008f6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f72:	ab07      	add	r3, sp, #28
 8008f74:	6861      	ldr	r1, [r4, #4]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	f10d 031b 	add.w	r3, sp, #27
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f7ff fef4 	bl	8008d6c <__cvt>
 8008f84:	9b04      	ldr	r3, [sp, #16]
 8008f86:	9907      	ldr	r1, [sp, #28]
 8008f88:	2b47      	cmp	r3, #71	; 0x47
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	d108      	bne.n	8008fa0 <_printf_float+0x110>
 8008f8e:	1cc8      	adds	r0, r1, #3
 8008f90:	db02      	blt.n	8008f98 <_printf_float+0x108>
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	4299      	cmp	r1, r3
 8008f96:	dd41      	ble.n	800901c <_printf_float+0x18c>
 8008f98:	f1a9 0902 	sub.w	r9, r9, #2
 8008f9c:	fa5f f989 	uxtb.w	r9, r9
 8008fa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fa4:	d820      	bhi.n	8008fe8 <_printf_float+0x158>
 8008fa6:	3901      	subs	r1, #1
 8008fa8:	464a      	mov	r2, r9
 8008faa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fae:	9107      	str	r1, [sp, #28]
 8008fb0:	f7ff ff2e 	bl	8008e10 <__exponent>
 8008fb4:	9a08      	ldr	r2, [sp, #32]
 8008fb6:	9004      	str	r0, [sp, #16]
 8008fb8:	1813      	adds	r3, r2, r0
 8008fba:	2a01      	cmp	r2, #1
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	dc02      	bgt.n	8008fc6 <_printf_float+0x136>
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	07d2      	lsls	r2, r2, #31
 8008fc4:	d501      	bpl.n	8008fca <_printf_float+0x13a>
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0a2      	beq.n	8008f18 <_printf_float+0x88>
 8008fd2:	232d      	movs	r3, #45	; 0x2d
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd8:	e79e      	b.n	8008f18 <_printf_float+0x88>
 8008fda:	9904      	ldr	r1, [sp, #16]
 8008fdc:	2947      	cmp	r1, #71	; 0x47
 8008fde:	d1c1      	bne.n	8008f64 <_printf_float+0xd4>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1bf      	bne.n	8008f64 <_printf_float+0xd4>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7bc      	b.n	8008f62 <_printf_float+0xd2>
 8008fe8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008fec:	d118      	bne.n	8009020 <_printf_float+0x190>
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	6863      	ldr	r3, [r4, #4]
 8008ff2:	dd0b      	ble.n	800900c <_printf_float+0x17c>
 8008ff4:	6121      	str	r1, [r4, #16]
 8008ff6:	b913      	cbnz	r3, 8008ffe <_printf_float+0x16e>
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	07d0      	lsls	r0, r2, #31
 8008ffc:	d502      	bpl.n	8009004 <_printf_float+0x174>
 8008ffe:	3301      	adds	r3, #1
 8009000:	440b      	add	r3, r1
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	2300      	movs	r3, #0
 8009006:	65a1      	str	r1, [r4, #88]	; 0x58
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	e7de      	b.n	8008fca <_printf_float+0x13a>
 800900c:	b913      	cbnz	r3, 8009014 <_printf_float+0x184>
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	07d2      	lsls	r2, r2, #31
 8009012:	d501      	bpl.n	8009018 <_printf_float+0x188>
 8009014:	3302      	adds	r3, #2
 8009016:	e7f4      	b.n	8009002 <_printf_float+0x172>
 8009018:	2301      	movs	r3, #1
 800901a:	e7f2      	b.n	8009002 <_printf_float+0x172>
 800901c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009020:	9b08      	ldr	r3, [sp, #32]
 8009022:	4299      	cmp	r1, r3
 8009024:	db05      	blt.n	8009032 <_printf_float+0x1a2>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	6121      	str	r1, [r4, #16]
 800902a:	07d8      	lsls	r0, r3, #31
 800902c:	d5ea      	bpl.n	8009004 <_printf_float+0x174>
 800902e:	1c4b      	adds	r3, r1, #1
 8009030:	e7e7      	b.n	8009002 <_printf_float+0x172>
 8009032:	2900      	cmp	r1, #0
 8009034:	bfd4      	ite	le
 8009036:	f1c1 0202 	rsble	r2, r1, #2
 800903a:	2201      	movgt	r2, #1
 800903c:	4413      	add	r3, r2
 800903e:	e7e0      	b.n	8009002 <_printf_float+0x172>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	055a      	lsls	r2, r3, #21
 8009044:	d407      	bmi.n	8009056 <_printf_float+0x1c6>
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	4642      	mov	r2, r8
 800904a:	4631      	mov	r1, r6
 800904c:	4628      	mov	r0, r5
 800904e:	47b8      	blx	r7
 8009050:	3001      	adds	r0, #1
 8009052:	d12a      	bne.n	80090aa <_printf_float+0x21a>
 8009054:	e76a      	b.n	8008f2c <_printf_float+0x9c>
 8009056:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800905a:	f240 80e2 	bls.w	8009222 <_printf_float+0x392>
 800905e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	d133      	bne.n	80090d4 <_printf_float+0x244>
 800906c:	4a38      	ldr	r2, [pc, #224]	; (8009150 <_printf_float+0x2c0>)
 800906e:	2301      	movs	r3, #1
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	f43f af58 	beq.w	8008f2c <_printf_float+0x9c>
 800907c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009080:	429a      	cmp	r2, r3
 8009082:	db02      	blt.n	800908a <_printf_float+0x1fa>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	07d8      	lsls	r0, r3, #31
 8009088:	d50f      	bpl.n	80090aa <_printf_float+0x21a>
 800908a:	4653      	mov	r3, sl
 800908c:	465a      	mov	r2, fp
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	f43f af49 	beq.w	8008f2c <_printf_float+0x9c>
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	f104 091a 	add.w	r9, r4, #26
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4543      	cmp	r3, r8
 80090a8:	dc09      	bgt.n	80090be <_printf_float+0x22e>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	079b      	lsls	r3, r3, #30
 80090ae:	f100 8108 	bmi.w	80092c2 <_printf_float+0x432>
 80090b2:	68e0      	ldr	r0, [r4, #12]
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	4298      	cmp	r0, r3
 80090b8:	bfb8      	it	lt
 80090ba:	4618      	movlt	r0, r3
 80090bc:	e738      	b.n	8008f30 <_printf_float+0xa0>
 80090be:	2301      	movs	r3, #1
 80090c0:	464a      	mov	r2, r9
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f af2f 	beq.w	8008f2c <_printf_float+0x9c>
 80090ce:	f108 0801 	add.w	r8, r8, #1
 80090d2:	e7e6      	b.n	80090a2 <_printf_float+0x212>
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dc3c      	bgt.n	8009154 <_printf_float+0x2c4>
 80090da:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <_printf_float+0x2c0>)
 80090dc:	2301      	movs	r3, #1
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f af21 	beq.w	8008f2c <_printf_float+0x9c>
 80090ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	d102      	bne.n	80090f8 <_printf_float+0x268>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	07d9      	lsls	r1, r3, #31
 80090f6:	d5d8      	bpl.n	80090aa <_printf_float+0x21a>
 80090f8:	4653      	mov	r3, sl
 80090fa:	465a      	mov	r2, fp
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	f43f af12 	beq.w	8008f2c <_printf_float+0x9c>
 8009108:	f04f 0900 	mov.w	r9, #0
 800910c:	f104 0a1a 	add.w	sl, r4, #26
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	425b      	negs	r3, r3
 8009114:	454b      	cmp	r3, r9
 8009116:	dc01      	bgt.n	800911c <_printf_float+0x28c>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	e795      	b.n	8009048 <_printf_float+0x1b8>
 800911c:	2301      	movs	r3, #1
 800911e:	4652      	mov	r2, sl
 8009120:	4631      	mov	r1, r6
 8009122:	4628      	mov	r0, r5
 8009124:	47b8      	blx	r7
 8009126:	3001      	adds	r0, #1
 8009128:	f43f af00 	beq.w	8008f2c <_printf_float+0x9c>
 800912c:	f109 0901 	add.w	r9, r9, #1
 8009130:	e7ee      	b.n	8009110 <_printf_float+0x280>
 8009132:	bf00      	nop
 8009134:	f3af 8000 	nop.w
 8009138:	ffffffff 	.word	0xffffffff
 800913c:	7fefffff 	.word	0x7fefffff
 8009140:	0800d4cc 	.word	0x0800d4cc
 8009144:	0800d4d0 	.word	0x0800d4d0
 8009148:	0800d4d8 	.word	0x0800d4d8
 800914c:	0800d4d4 	.word	0x0800d4d4
 8009150:	0800d4dc 	.word	0x0800d4dc
 8009154:	9a08      	ldr	r2, [sp, #32]
 8009156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009158:	429a      	cmp	r2, r3
 800915a:	bfa8      	it	ge
 800915c:	461a      	movge	r2, r3
 800915e:	2a00      	cmp	r2, #0
 8009160:	4691      	mov	r9, r2
 8009162:	dc38      	bgt.n	80091d6 <_printf_float+0x346>
 8009164:	2300      	movs	r3, #0
 8009166:	9305      	str	r3, [sp, #20]
 8009168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800916c:	f104 021a 	add.w	r2, r4, #26
 8009170:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009172:	9905      	ldr	r1, [sp, #20]
 8009174:	9304      	str	r3, [sp, #16]
 8009176:	eba3 0309 	sub.w	r3, r3, r9
 800917a:	428b      	cmp	r3, r1
 800917c:	dc33      	bgt.n	80091e6 <_printf_float+0x356>
 800917e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009182:	429a      	cmp	r2, r3
 8009184:	db3c      	blt.n	8009200 <_printf_float+0x370>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	07da      	lsls	r2, r3, #31
 800918a:	d439      	bmi.n	8009200 <_printf_float+0x370>
 800918c:	9a08      	ldr	r2, [sp, #32]
 800918e:	9b04      	ldr	r3, [sp, #16]
 8009190:	9907      	ldr	r1, [sp, #28]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	eba2 0901 	sub.w	r9, r2, r1
 8009198:	4599      	cmp	r9, r3
 800919a:	bfa8      	it	ge
 800919c:	4699      	movge	r9, r3
 800919e:	f1b9 0f00 	cmp.w	r9, #0
 80091a2:	dc35      	bgt.n	8009210 <_printf_float+0x380>
 80091a4:	f04f 0800 	mov.w	r8, #0
 80091a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ac:	f104 0a1a 	add.w	sl, r4, #26
 80091b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	eba3 0309 	sub.w	r3, r3, r9
 80091ba:	4543      	cmp	r3, r8
 80091bc:	f77f af75 	ble.w	80090aa <_printf_float+0x21a>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4652      	mov	r2, sl
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f aeae 	beq.w	8008f2c <_printf_float+0x9c>
 80091d0:	f108 0801 	add.w	r8, r8, #1
 80091d4:	e7ec      	b.n	80091b0 <_printf_float+0x320>
 80091d6:	4613      	mov	r3, r2
 80091d8:	4631      	mov	r1, r6
 80091da:	4642      	mov	r2, r8
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	d1bf      	bne.n	8009164 <_printf_float+0x2d4>
 80091e4:	e6a2      	b.n	8008f2c <_printf_float+0x9c>
 80091e6:	2301      	movs	r3, #1
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	9204      	str	r2, [sp, #16]
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	f43f ae9b 	beq.w	8008f2c <_printf_float+0x9c>
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	9a04      	ldr	r2, [sp, #16]
 80091fa:	3301      	adds	r3, #1
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	e7b7      	b.n	8009170 <_printf_float+0x2e0>
 8009200:	4653      	mov	r3, sl
 8009202:	465a      	mov	r2, fp
 8009204:	4631      	mov	r1, r6
 8009206:	4628      	mov	r0, r5
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	d1be      	bne.n	800918c <_printf_float+0x2fc>
 800920e:	e68d      	b.n	8008f2c <_printf_float+0x9c>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	464b      	mov	r3, r9
 8009214:	4442      	add	r2, r8
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	d1c1      	bne.n	80091a4 <_printf_float+0x314>
 8009220:	e684      	b.n	8008f2c <_printf_float+0x9c>
 8009222:	9a08      	ldr	r2, [sp, #32]
 8009224:	2a01      	cmp	r2, #1
 8009226:	dc01      	bgt.n	800922c <_printf_float+0x39c>
 8009228:	07db      	lsls	r3, r3, #31
 800922a:	d537      	bpl.n	800929c <_printf_float+0x40c>
 800922c:	2301      	movs	r3, #1
 800922e:	4642      	mov	r2, r8
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	47b8      	blx	r7
 8009236:	3001      	adds	r0, #1
 8009238:	f43f ae78 	beq.w	8008f2c <_printf_float+0x9c>
 800923c:	4653      	mov	r3, sl
 800923e:	465a      	mov	r2, fp
 8009240:	4631      	mov	r1, r6
 8009242:	4628      	mov	r0, r5
 8009244:	47b8      	blx	r7
 8009246:	3001      	adds	r0, #1
 8009248:	f43f ae70 	beq.w	8008f2c <_printf_float+0x9c>
 800924c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009250:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009258:	d01b      	beq.n	8009292 <_printf_float+0x402>
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	f108 0201 	add.w	r2, r8, #1
 8009260:	3b01      	subs	r3, #1
 8009262:	4631      	mov	r1, r6
 8009264:	4628      	mov	r0, r5
 8009266:	47b8      	blx	r7
 8009268:	3001      	adds	r0, #1
 800926a:	d10e      	bne.n	800928a <_printf_float+0x3fa>
 800926c:	e65e      	b.n	8008f2c <_printf_float+0x9c>
 800926e:	2301      	movs	r3, #1
 8009270:	464a      	mov	r2, r9
 8009272:	4631      	mov	r1, r6
 8009274:	4628      	mov	r0, r5
 8009276:	47b8      	blx	r7
 8009278:	3001      	adds	r0, #1
 800927a:	f43f ae57 	beq.w	8008f2c <_printf_float+0x9c>
 800927e:	f108 0801 	add.w	r8, r8, #1
 8009282:	9b08      	ldr	r3, [sp, #32]
 8009284:	3b01      	subs	r3, #1
 8009286:	4543      	cmp	r3, r8
 8009288:	dcf1      	bgt.n	800926e <_printf_float+0x3de>
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009290:	e6db      	b.n	800904a <_printf_float+0x1ba>
 8009292:	f04f 0800 	mov.w	r8, #0
 8009296:	f104 091a 	add.w	r9, r4, #26
 800929a:	e7f2      	b.n	8009282 <_printf_float+0x3f2>
 800929c:	2301      	movs	r3, #1
 800929e:	4642      	mov	r2, r8
 80092a0:	e7df      	b.n	8009262 <_printf_float+0x3d2>
 80092a2:	2301      	movs	r3, #1
 80092a4:	464a      	mov	r2, r9
 80092a6:	4631      	mov	r1, r6
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b8      	blx	r7
 80092ac:	3001      	adds	r0, #1
 80092ae:	f43f ae3d 	beq.w	8008f2c <_printf_float+0x9c>
 80092b2:	f108 0801 	add.w	r8, r8, #1
 80092b6:	68e3      	ldr	r3, [r4, #12]
 80092b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ba:	1a5b      	subs	r3, r3, r1
 80092bc:	4543      	cmp	r3, r8
 80092be:	dcf0      	bgt.n	80092a2 <_printf_float+0x412>
 80092c0:	e6f7      	b.n	80090b2 <_printf_float+0x222>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	f104 0919 	add.w	r9, r4, #25
 80092ca:	e7f4      	b.n	80092b6 <_printf_float+0x426>

080092cc <_printf_common>:
 80092cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	4616      	mov	r6, r2
 80092d2:	4699      	mov	r9, r3
 80092d4:	688a      	ldr	r2, [r1, #8]
 80092d6:	690b      	ldr	r3, [r1, #16]
 80092d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092dc:	4293      	cmp	r3, r2
 80092de:	bfb8      	it	lt
 80092e0:	4613      	movlt	r3, r2
 80092e2:	6033      	str	r3, [r6, #0]
 80092e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092e8:	4607      	mov	r7, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	b10a      	cbz	r2, 80092f2 <_printf_common+0x26>
 80092ee:	3301      	adds	r3, #1
 80092f0:	6033      	str	r3, [r6, #0]
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	0699      	lsls	r1, r3, #26
 80092f6:	bf42      	ittt	mi
 80092f8:	6833      	ldrmi	r3, [r6, #0]
 80092fa:	3302      	addmi	r3, #2
 80092fc:	6033      	strmi	r3, [r6, #0]
 80092fe:	6825      	ldr	r5, [r4, #0]
 8009300:	f015 0506 	ands.w	r5, r5, #6
 8009304:	d106      	bne.n	8009314 <_printf_common+0x48>
 8009306:	f104 0a19 	add.w	sl, r4, #25
 800930a:	68e3      	ldr	r3, [r4, #12]
 800930c:	6832      	ldr	r2, [r6, #0]
 800930e:	1a9b      	subs	r3, r3, r2
 8009310:	42ab      	cmp	r3, r5
 8009312:	dc26      	bgt.n	8009362 <_printf_common+0x96>
 8009314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009318:	1e13      	subs	r3, r2, #0
 800931a:	6822      	ldr	r2, [r4, #0]
 800931c:	bf18      	it	ne
 800931e:	2301      	movne	r3, #1
 8009320:	0692      	lsls	r2, r2, #26
 8009322:	d42b      	bmi.n	800937c <_printf_common+0xb0>
 8009324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009328:	4649      	mov	r1, r9
 800932a:	4638      	mov	r0, r7
 800932c:	47c0      	blx	r8
 800932e:	3001      	adds	r0, #1
 8009330:	d01e      	beq.n	8009370 <_printf_common+0xa4>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	68e5      	ldr	r5, [r4, #12]
 8009336:	6832      	ldr	r2, [r6, #0]
 8009338:	f003 0306 	and.w	r3, r3, #6
 800933c:	2b04      	cmp	r3, #4
 800933e:	bf08      	it	eq
 8009340:	1aad      	subeq	r5, r5, r2
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	6922      	ldr	r2, [r4, #16]
 8009346:	bf0c      	ite	eq
 8009348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800934c:	2500      	movne	r5, #0
 800934e:	4293      	cmp	r3, r2
 8009350:	bfc4      	itt	gt
 8009352:	1a9b      	subgt	r3, r3, r2
 8009354:	18ed      	addgt	r5, r5, r3
 8009356:	2600      	movs	r6, #0
 8009358:	341a      	adds	r4, #26
 800935a:	42b5      	cmp	r5, r6
 800935c:	d11a      	bne.n	8009394 <_printf_common+0xc8>
 800935e:	2000      	movs	r0, #0
 8009360:	e008      	b.n	8009374 <_printf_common+0xa8>
 8009362:	2301      	movs	r3, #1
 8009364:	4652      	mov	r2, sl
 8009366:	4649      	mov	r1, r9
 8009368:	4638      	mov	r0, r7
 800936a:	47c0      	blx	r8
 800936c:	3001      	adds	r0, #1
 800936e:	d103      	bne.n	8009378 <_printf_common+0xac>
 8009370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009378:	3501      	adds	r5, #1
 800937a:	e7c6      	b.n	800930a <_printf_common+0x3e>
 800937c:	18e1      	adds	r1, r4, r3
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	2030      	movs	r0, #48	; 0x30
 8009382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009386:	4422      	add	r2, r4
 8009388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800938c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009390:	3302      	adds	r3, #2
 8009392:	e7c7      	b.n	8009324 <_printf_common+0x58>
 8009394:	2301      	movs	r3, #1
 8009396:	4622      	mov	r2, r4
 8009398:	4649      	mov	r1, r9
 800939a:	4638      	mov	r0, r7
 800939c:	47c0      	blx	r8
 800939e:	3001      	adds	r0, #1
 80093a0:	d0e6      	beq.n	8009370 <_printf_common+0xa4>
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7d9      	b.n	800935a <_printf_common+0x8e>
	...

080093a8 <_printf_i>:
 80093a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	460c      	mov	r4, r1
 80093ae:	4691      	mov	r9, r2
 80093b0:	7e27      	ldrb	r7, [r4, #24]
 80093b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093b4:	2f78      	cmp	r7, #120	; 0x78
 80093b6:	4680      	mov	r8, r0
 80093b8:	469a      	mov	sl, r3
 80093ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093be:	d807      	bhi.n	80093d0 <_printf_i+0x28>
 80093c0:	2f62      	cmp	r7, #98	; 0x62
 80093c2:	d80a      	bhi.n	80093da <_printf_i+0x32>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	f000 80d8 	beq.w	800957a <_printf_i+0x1d2>
 80093ca:	2f58      	cmp	r7, #88	; 0x58
 80093cc:	f000 80a3 	beq.w	8009516 <_printf_i+0x16e>
 80093d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093d8:	e03a      	b.n	8009450 <_printf_i+0xa8>
 80093da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093de:	2b15      	cmp	r3, #21
 80093e0:	d8f6      	bhi.n	80093d0 <_printf_i+0x28>
 80093e2:	a001      	add	r0, pc, #4	; (adr r0, 80093e8 <_printf_i+0x40>)
 80093e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009455 	.word	0x08009455
 80093f0:	080093d1 	.word	0x080093d1
 80093f4:	080093d1 	.word	0x080093d1
 80093f8:	080093d1 	.word	0x080093d1
 80093fc:	080093d1 	.word	0x080093d1
 8009400:	08009455 	.word	0x08009455
 8009404:	080093d1 	.word	0x080093d1
 8009408:	080093d1 	.word	0x080093d1
 800940c:	080093d1 	.word	0x080093d1
 8009410:	080093d1 	.word	0x080093d1
 8009414:	08009561 	.word	0x08009561
 8009418:	08009485 	.word	0x08009485
 800941c:	08009543 	.word	0x08009543
 8009420:	080093d1 	.word	0x080093d1
 8009424:	080093d1 	.word	0x080093d1
 8009428:	08009583 	.word	0x08009583
 800942c:	080093d1 	.word	0x080093d1
 8009430:	08009485 	.word	0x08009485
 8009434:	080093d1 	.word	0x080093d1
 8009438:	080093d1 	.word	0x080093d1
 800943c:	0800954b 	.word	0x0800954b
 8009440:	680b      	ldr	r3, [r1, #0]
 8009442:	1d1a      	adds	r2, r3, #4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	600a      	str	r2, [r1, #0]
 8009448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800944c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009450:	2301      	movs	r3, #1
 8009452:	e0a3      	b.n	800959c <_printf_i+0x1f4>
 8009454:	6825      	ldr	r5, [r4, #0]
 8009456:	6808      	ldr	r0, [r1, #0]
 8009458:	062e      	lsls	r6, r5, #24
 800945a:	f100 0304 	add.w	r3, r0, #4
 800945e:	d50a      	bpl.n	8009476 <_printf_i+0xce>
 8009460:	6805      	ldr	r5, [r0, #0]
 8009462:	600b      	str	r3, [r1, #0]
 8009464:	2d00      	cmp	r5, #0
 8009466:	da03      	bge.n	8009470 <_printf_i+0xc8>
 8009468:	232d      	movs	r3, #45	; 0x2d
 800946a:	426d      	negs	r5, r5
 800946c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009470:	485e      	ldr	r0, [pc, #376]	; (80095ec <_printf_i+0x244>)
 8009472:	230a      	movs	r3, #10
 8009474:	e019      	b.n	80094aa <_printf_i+0x102>
 8009476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800947a:	6805      	ldr	r5, [r0, #0]
 800947c:	600b      	str	r3, [r1, #0]
 800947e:	bf18      	it	ne
 8009480:	b22d      	sxthne	r5, r5
 8009482:	e7ef      	b.n	8009464 <_printf_i+0xbc>
 8009484:	680b      	ldr	r3, [r1, #0]
 8009486:	6825      	ldr	r5, [r4, #0]
 8009488:	1d18      	adds	r0, r3, #4
 800948a:	6008      	str	r0, [r1, #0]
 800948c:	0628      	lsls	r0, r5, #24
 800948e:	d501      	bpl.n	8009494 <_printf_i+0xec>
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	e002      	b.n	800949a <_printf_i+0xf2>
 8009494:	0669      	lsls	r1, r5, #25
 8009496:	d5fb      	bpl.n	8009490 <_printf_i+0xe8>
 8009498:	881d      	ldrh	r5, [r3, #0]
 800949a:	4854      	ldr	r0, [pc, #336]	; (80095ec <_printf_i+0x244>)
 800949c:	2f6f      	cmp	r7, #111	; 0x6f
 800949e:	bf0c      	ite	eq
 80094a0:	2308      	moveq	r3, #8
 80094a2:	230a      	movne	r3, #10
 80094a4:	2100      	movs	r1, #0
 80094a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094aa:	6866      	ldr	r6, [r4, #4]
 80094ac:	60a6      	str	r6, [r4, #8]
 80094ae:	2e00      	cmp	r6, #0
 80094b0:	bfa2      	ittt	ge
 80094b2:	6821      	ldrge	r1, [r4, #0]
 80094b4:	f021 0104 	bicge.w	r1, r1, #4
 80094b8:	6021      	strge	r1, [r4, #0]
 80094ba:	b90d      	cbnz	r5, 80094c0 <_printf_i+0x118>
 80094bc:	2e00      	cmp	r6, #0
 80094be:	d04d      	beq.n	800955c <_printf_i+0x1b4>
 80094c0:	4616      	mov	r6, r2
 80094c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80094c6:	fb03 5711 	mls	r7, r3, r1, r5
 80094ca:	5dc7      	ldrb	r7, [r0, r7]
 80094cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094d0:	462f      	mov	r7, r5
 80094d2:	42bb      	cmp	r3, r7
 80094d4:	460d      	mov	r5, r1
 80094d6:	d9f4      	bls.n	80094c2 <_printf_i+0x11a>
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d10b      	bne.n	80094f4 <_printf_i+0x14c>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	07df      	lsls	r7, r3, #31
 80094e0:	d508      	bpl.n	80094f4 <_printf_i+0x14c>
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	6861      	ldr	r1, [r4, #4]
 80094e6:	4299      	cmp	r1, r3
 80094e8:	bfde      	ittt	le
 80094ea:	2330      	movle	r3, #48	; 0x30
 80094ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80094f4:	1b92      	subs	r2, r2, r6
 80094f6:	6122      	str	r2, [r4, #16]
 80094f8:	f8cd a000 	str.w	sl, [sp]
 80094fc:	464b      	mov	r3, r9
 80094fe:	aa03      	add	r2, sp, #12
 8009500:	4621      	mov	r1, r4
 8009502:	4640      	mov	r0, r8
 8009504:	f7ff fee2 	bl	80092cc <_printf_common>
 8009508:	3001      	adds	r0, #1
 800950a:	d14c      	bne.n	80095a6 <_printf_i+0x1fe>
 800950c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009510:	b004      	add	sp, #16
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	4835      	ldr	r0, [pc, #212]	; (80095ec <_printf_i+0x244>)
 8009518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	680e      	ldr	r6, [r1, #0]
 8009520:	061f      	lsls	r7, r3, #24
 8009522:	f856 5b04 	ldr.w	r5, [r6], #4
 8009526:	600e      	str	r6, [r1, #0]
 8009528:	d514      	bpl.n	8009554 <_printf_i+0x1ac>
 800952a:	07d9      	lsls	r1, r3, #31
 800952c:	bf44      	itt	mi
 800952e:	f043 0320 	orrmi.w	r3, r3, #32
 8009532:	6023      	strmi	r3, [r4, #0]
 8009534:	b91d      	cbnz	r5, 800953e <_printf_i+0x196>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	f023 0320 	bic.w	r3, r3, #32
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	2310      	movs	r3, #16
 8009540:	e7b0      	b.n	80094a4 <_printf_i+0xfc>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f043 0320 	orr.w	r3, r3, #32
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	2378      	movs	r3, #120	; 0x78
 800954c:	4828      	ldr	r0, [pc, #160]	; (80095f0 <_printf_i+0x248>)
 800954e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009552:	e7e3      	b.n	800951c <_printf_i+0x174>
 8009554:	065e      	lsls	r6, r3, #25
 8009556:	bf48      	it	mi
 8009558:	b2ad      	uxthmi	r5, r5
 800955a:	e7e6      	b.n	800952a <_printf_i+0x182>
 800955c:	4616      	mov	r6, r2
 800955e:	e7bb      	b.n	80094d8 <_printf_i+0x130>
 8009560:	680b      	ldr	r3, [r1, #0]
 8009562:	6826      	ldr	r6, [r4, #0]
 8009564:	6960      	ldr	r0, [r4, #20]
 8009566:	1d1d      	adds	r5, r3, #4
 8009568:	600d      	str	r5, [r1, #0]
 800956a:	0635      	lsls	r5, r6, #24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	d501      	bpl.n	8009574 <_printf_i+0x1cc>
 8009570:	6018      	str	r0, [r3, #0]
 8009572:	e002      	b.n	800957a <_printf_i+0x1d2>
 8009574:	0671      	lsls	r1, r6, #25
 8009576:	d5fb      	bpl.n	8009570 <_printf_i+0x1c8>
 8009578:	8018      	strh	r0, [r3, #0]
 800957a:	2300      	movs	r3, #0
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	4616      	mov	r6, r2
 8009580:	e7ba      	b.n	80094f8 <_printf_i+0x150>
 8009582:	680b      	ldr	r3, [r1, #0]
 8009584:	1d1a      	adds	r2, r3, #4
 8009586:	600a      	str	r2, [r1, #0]
 8009588:	681e      	ldr	r6, [r3, #0]
 800958a:	6862      	ldr	r2, [r4, #4]
 800958c:	2100      	movs	r1, #0
 800958e:	4630      	mov	r0, r6
 8009590:	f7f6 feae 	bl	80002f0 <memchr>
 8009594:	b108      	cbz	r0, 800959a <_printf_i+0x1f2>
 8009596:	1b80      	subs	r0, r0, r6
 8009598:	6060      	str	r0, [r4, #4]
 800959a:	6863      	ldr	r3, [r4, #4]
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	2300      	movs	r3, #0
 80095a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a4:	e7a8      	b.n	80094f8 <_printf_i+0x150>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	4632      	mov	r2, r6
 80095aa:	4649      	mov	r1, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	47d0      	blx	sl
 80095b0:	3001      	adds	r0, #1
 80095b2:	d0ab      	beq.n	800950c <_printf_i+0x164>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	079b      	lsls	r3, r3, #30
 80095b8:	d413      	bmi.n	80095e2 <_printf_i+0x23a>
 80095ba:	68e0      	ldr	r0, [r4, #12]
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	4298      	cmp	r0, r3
 80095c0:	bfb8      	it	lt
 80095c2:	4618      	movlt	r0, r3
 80095c4:	e7a4      	b.n	8009510 <_printf_i+0x168>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4632      	mov	r2, r6
 80095ca:	4649      	mov	r1, r9
 80095cc:	4640      	mov	r0, r8
 80095ce:	47d0      	blx	sl
 80095d0:	3001      	adds	r0, #1
 80095d2:	d09b      	beq.n	800950c <_printf_i+0x164>
 80095d4:	3501      	adds	r5, #1
 80095d6:	68e3      	ldr	r3, [r4, #12]
 80095d8:	9903      	ldr	r1, [sp, #12]
 80095da:	1a5b      	subs	r3, r3, r1
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dcf2      	bgt.n	80095c6 <_printf_i+0x21e>
 80095e0:	e7eb      	b.n	80095ba <_printf_i+0x212>
 80095e2:	2500      	movs	r5, #0
 80095e4:	f104 0619 	add.w	r6, r4, #25
 80095e8:	e7f5      	b.n	80095d6 <_printf_i+0x22e>
 80095ea:	bf00      	nop
 80095ec:	0800d4de 	.word	0x0800d4de
 80095f0:	0800d4ef 	.word	0x0800d4ef

080095f4 <_scanf_float>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	b087      	sub	sp, #28
 80095fa:	4617      	mov	r7, r2
 80095fc:	9303      	str	r3, [sp, #12]
 80095fe:	688b      	ldr	r3, [r1, #8]
 8009600:	1e5a      	subs	r2, r3, #1
 8009602:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009606:	bf83      	ittte	hi
 8009608:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800960c:	195b      	addhi	r3, r3, r5
 800960e:	9302      	strhi	r3, [sp, #8]
 8009610:	2300      	movls	r3, #0
 8009612:	bf86      	itte	hi
 8009614:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009618:	608b      	strhi	r3, [r1, #8]
 800961a:	9302      	strls	r3, [sp, #8]
 800961c:	680b      	ldr	r3, [r1, #0]
 800961e:	468b      	mov	fp, r1
 8009620:	2500      	movs	r5, #0
 8009622:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009626:	f84b 3b1c 	str.w	r3, [fp], #28
 800962a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800962e:	4680      	mov	r8, r0
 8009630:	460c      	mov	r4, r1
 8009632:	465e      	mov	r6, fp
 8009634:	46aa      	mov	sl, r5
 8009636:	46a9      	mov	r9, r5
 8009638:	9501      	str	r5, [sp, #4]
 800963a:	68a2      	ldr	r2, [r4, #8]
 800963c:	b152      	cbz	r2, 8009654 <_scanf_float+0x60>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b4e      	cmp	r3, #78	; 0x4e
 8009644:	d864      	bhi.n	8009710 <_scanf_float+0x11c>
 8009646:	2b40      	cmp	r3, #64	; 0x40
 8009648:	d83c      	bhi.n	80096c4 <_scanf_float+0xd0>
 800964a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800964e:	b2c8      	uxtb	r0, r1
 8009650:	280e      	cmp	r0, #14
 8009652:	d93a      	bls.n	80096ca <_scanf_float+0xd6>
 8009654:	f1b9 0f00 	cmp.w	r9, #0
 8009658:	d003      	beq.n	8009662 <_scanf_float+0x6e>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009666:	f1ba 0f01 	cmp.w	sl, #1
 800966a:	f200 8113 	bhi.w	8009894 <_scanf_float+0x2a0>
 800966e:	455e      	cmp	r6, fp
 8009670:	f200 8105 	bhi.w	800987e <_scanf_float+0x28a>
 8009674:	2501      	movs	r5, #1
 8009676:	4628      	mov	r0, r5
 8009678:	b007      	add	sp, #28
 800967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009682:	2a0d      	cmp	r2, #13
 8009684:	d8e6      	bhi.n	8009654 <_scanf_float+0x60>
 8009686:	a101      	add	r1, pc, #4	; (adr r1, 800968c <_scanf_float+0x98>)
 8009688:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800968c:	080097cb 	.word	0x080097cb
 8009690:	08009655 	.word	0x08009655
 8009694:	08009655 	.word	0x08009655
 8009698:	08009655 	.word	0x08009655
 800969c:	0800982b 	.word	0x0800982b
 80096a0:	08009803 	.word	0x08009803
 80096a4:	08009655 	.word	0x08009655
 80096a8:	08009655 	.word	0x08009655
 80096ac:	080097d9 	.word	0x080097d9
 80096b0:	08009655 	.word	0x08009655
 80096b4:	08009655 	.word	0x08009655
 80096b8:	08009655 	.word	0x08009655
 80096bc:	08009655 	.word	0x08009655
 80096c0:	08009791 	.word	0x08009791
 80096c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80096c8:	e7db      	b.n	8009682 <_scanf_float+0x8e>
 80096ca:	290e      	cmp	r1, #14
 80096cc:	d8c2      	bhi.n	8009654 <_scanf_float+0x60>
 80096ce:	a001      	add	r0, pc, #4	; (adr r0, 80096d4 <_scanf_float+0xe0>)
 80096d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096d4:	08009783 	.word	0x08009783
 80096d8:	08009655 	.word	0x08009655
 80096dc:	08009783 	.word	0x08009783
 80096e0:	08009817 	.word	0x08009817
 80096e4:	08009655 	.word	0x08009655
 80096e8:	08009731 	.word	0x08009731
 80096ec:	0800976d 	.word	0x0800976d
 80096f0:	0800976d 	.word	0x0800976d
 80096f4:	0800976d 	.word	0x0800976d
 80096f8:	0800976d 	.word	0x0800976d
 80096fc:	0800976d 	.word	0x0800976d
 8009700:	0800976d 	.word	0x0800976d
 8009704:	0800976d 	.word	0x0800976d
 8009708:	0800976d 	.word	0x0800976d
 800970c:	0800976d 	.word	0x0800976d
 8009710:	2b6e      	cmp	r3, #110	; 0x6e
 8009712:	d809      	bhi.n	8009728 <_scanf_float+0x134>
 8009714:	2b60      	cmp	r3, #96	; 0x60
 8009716:	d8b2      	bhi.n	800967e <_scanf_float+0x8a>
 8009718:	2b54      	cmp	r3, #84	; 0x54
 800971a:	d077      	beq.n	800980c <_scanf_float+0x218>
 800971c:	2b59      	cmp	r3, #89	; 0x59
 800971e:	d199      	bne.n	8009654 <_scanf_float+0x60>
 8009720:	2d07      	cmp	r5, #7
 8009722:	d197      	bne.n	8009654 <_scanf_float+0x60>
 8009724:	2508      	movs	r5, #8
 8009726:	e029      	b.n	800977c <_scanf_float+0x188>
 8009728:	2b74      	cmp	r3, #116	; 0x74
 800972a:	d06f      	beq.n	800980c <_scanf_float+0x218>
 800972c:	2b79      	cmp	r3, #121	; 0x79
 800972e:	e7f6      	b.n	800971e <_scanf_float+0x12a>
 8009730:	6821      	ldr	r1, [r4, #0]
 8009732:	05c8      	lsls	r0, r1, #23
 8009734:	d51a      	bpl.n	800976c <_scanf_float+0x178>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800973c:	6021      	str	r1, [r4, #0]
 800973e:	f109 0901 	add.w	r9, r9, #1
 8009742:	b11b      	cbz	r3, 800974c <_scanf_float+0x158>
 8009744:	3b01      	subs	r3, #1
 8009746:	3201      	adds	r2, #1
 8009748:	9302      	str	r3, [sp, #8]
 800974a:	60a2      	str	r2, [r4, #8]
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	3b01      	subs	r3, #1
 8009750:	60a3      	str	r3, [r4, #8]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	3301      	adds	r3, #1
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3b01      	subs	r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	607b      	str	r3, [r7, #4]
 8009760:	f340 8084 	ble.w	800986c <_scanf_float+0x278>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3301      	adds	r3, #1
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	e766      	b.n	800963a <_scanf_float+0x46>
 800976c:	eb1a 0f05 	cmn.w	sl, r5
 8009770:	f47f af70 	bne.w	8009654 <_scanf_float+0x60>
 8009774:	6822      	ldr	r2, [r4, #0]
 8009776:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	f806 3b01 	strb.w	r3, [r6], #1
 8009780:	e7e4      	b.n	800974c <_scanf_float+0x158>
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	0610      	lsls	r0, r2, #24
 8009786:	f57f af65 	bpl.w	8009654 <_scanf_float+0x60>
 800978a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800978e:	e7f4      	b.n	800977a <_scanf_float+0x186>
 8009790:	f1ba 0f00 	cmp.w	sl, #0
 8009794:	d10e      	bne.n	80097b4 <_scanf_float+0x1c0>
 8009796:	f1b9 0f00 	cmp.w	r9, #0
 800979a:	d10e      	bne.n	80097ba <_scanf_float+0x1c6>
 800979c:	6822      	ldr	r2, [r4, #0]
 800979e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097a6:	d108      	bne.n	80097ba <_scanf_float+0x1c6>
 80097a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097ac:	6022      	str	r2, [r4, #0]
 80097ae:	f04f 0a01 	mov.w	sl, #1
 80097b2:	e7e3      	b.n	800977c <_scanf_float+0x188>
 80097b4:	f1ba 0f02 	cmp.w	sl, #2
 80097b8:	d055      	beq.n	8009866 <_scanf_float+0x272>
 80097ba:	2d01      	cmp	r5, #1
 80097bc:	d002      	beq.n	80097c4 <_scanf_float+0x1d0>
 80097be:	2d04      	cmp	r5, #4
 80097c0:	f47f af48 	bne.w	8009654 <_scanf_float+0x60>
 80097c4:	3501      	adds	r5, #1
 80097c6:	b2ed      	uxtb	r5, r5
 80097c8:	e7d8      	b.n	800977c <_scanf_float+0x188>
 80097ca:	f1ba 0f01 	cmp.w	sl, #1
 80097ce:	f47f af41 	bne.w	8009654 <_scanf_float+0x60>
 80097d2:	f04f 0a02 	mov.w	sl, #2
 80097d6:	e7d1      	b.n	800977c <_scanf_float+0x188>
 80097d8:	b97d      	cbnz	r5, 80097fa <_scanf_float+0x206>
 80097da:	f1b9 0f00 	cmp.w	r9, #0
 80097de:	f47f af3c 	bne.w	800965a <_scanf_float+0x66>
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097ec:	f47f af39 	bne.w	8009662 <_scanf_float+0x6e>
 80097f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	2501      	movs	r5, #1
 80097f8:	e7c0      	b.n	800977c <_scanf_float+0x188>
 80097fa:	2d03      	cmp	r5, #3
 80097fc:	d0e2      	beq.n	80097c4 <_scanf_float+0x1d0>
 80097fe:	2d05      	cmp	r5, #5
 8009800:	e7de      	b.n	80097c0 <_scanf_float+0x1cc>
 8009802:	2d02      	cmp	r5, #2
 8009804:	f47f af26 	bne.w	8009654 <_scanf_float+0x60>
 8009808:	2503      	movs	r5, #3
 800980a:	e7b7      	b.n	800977c <_scanf_float+0x188>
 800980c:	2d06      	cmp	r5, #6
 800980e:	f47f af21 	bne.w	8009654 <_scanf_float+0x60>
 8009812:	2507      	movs	r5, #7
 8009814:	e7b2      	b.n	800977c <_scanf_float+0x188>
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	0591      	lsls	r1, r2, #22
 800981a:	f57f af1b 	bpl.w	8009654 <_scanf_float+0x60>
 800981e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009822:	6022      	str	r2, [r4, #0]
 8009824:	f8cd 9004 	str.w	r9, [sp, #4]
 8009828:	e7a8      	b.n	800977c <_scanf_float+0x188>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009830:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009834:	d006      	beq.n	8009844 <_scanf_float+0x250>
 8009836:	0550      	lsls	r0, r2, #21
 8009838:	f57f af0c 	bpl.w	8009654 <_scanf_float+0x60>
 800983c:	f1b9 0f00 	cmp.w	r9, #0
 8009840:	f43f af0f 	beq.w	8009662 <_scanf_float+0x6e>
 8009844:	0591      	lsls	r1, r2, #22
 8009846:	bf58      	it	pl
 8009848:	9901      	ldrpl	r1, [sp, #4]
 800984a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800984e:	bf58      	it	pl
 8009850:	eba9 0101 	subpl.w	r1, r9, r1
 8009854:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009858:	bf58      	it	pl
 800985a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800985e:	6022      	str	r2, [r4, #0]
 8009860:	f04f 0900 	mov.w	r9, #0
 8009864:	e78a      	b.n	800977c <_scanf_float+0x188>
 8009866:	f04f 0a03 	mov.w	sl, #3
 800986a:	e787      	b.n	800977c <_scanf_float+0x188>
 800986c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009870:	4639      	mov	r1, r7
 8009872:	4640      	mov	r0, r8
 8009874:	4798      	blx	r3
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f aedf 	beq.w	800963a <_scanf_float+0x46>
 800987c:	e6ea      	b.n	8009654 <_scanf_float+0x60>
 800987e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009886:	463a      	mov	r2, r7
 8009888:	4640      	mov	r0, r8
 800988a:	4798      	blx	r3
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	3b01      	subs	r3, #1
 8009890:	6123      	str	r3, [r4, #16]
 8009892:	e6ec      	b.n	800966e <_scanf_float+0x7a>
 8009894:	1e6b      	subs	r3, r5, #1
 8009896:	2b06      	cmp	r3, #6
 8009898:	d825      	bhi.n	80098e6 <_scanf_float+0x2f2>
 800989a:	2d02      	cmp	r5, #2
 800989c:	d836      	bhi.n	800990c <_scanf_float+0x318>
 800989e:	455e      	cmp	r6, fp
 80098a0:	f67f aee8 	bls.w	8009674 <_scanf_float+0x80>
 80098a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098ac:	463a      	mov	r2, r7
 80098ae:	4640      	mov	r0, r8
 80098b0:	4798      	blx	r3
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	e7f1      	b.n	800989e <_scanf_float+0x2aa>
 80098ba:	9802      	ldr	r0, [sp, #8]
 80098bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80098c4:	9002      	str	r0, [sp, #8]
 80098c6:	463a      	mov	r2, r7
 80098c8:	4640      	mov	r0, r8
 80098ca:	4798      	blx	r3
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098d6:	fa5f fa8a 	uxtb.w	sl, sl
 80098da:	f1ba 0f02 	cmp.w	sl, #2
 80098de:	d1ec      	bne.n	80098ba <_scanf_float+0x2c6>
 80098e0:	3d03      	subs	r5, #3
 80098e2:	b2ed      	uxtb	r5, r5
 80098e4:	1b76      	subs	r6, r6, r5
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	05da      	lsls	r2, r3, #23
 80098ea:	d52f      	bpl.n	800994c <_scanf_float+0x358>
 80098ec:	055b      	lsls	r3, r3, #21
 80098ee:	d510      	bpl.n	8009912 <_scanf_float+0x31e>
 80098f0:	455e      	cmp	r6, fp
 80098f2:	f67f aebf 	bls.w	8009674 <_scanf_float+0x80>
 80098f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098fe:	463a      	mov	r2, r7
 8009900:	4640      	mov	r0, r8
 8009902:	4798      	blx	r3
 8009904:	6923      	ldr	r3, [r4, #16]
 8009906:	3b01      	subs	r3, #1
 8009908:	6123      	str	r3, [r4, #16]
 800990a:	e7f1      	b.n	80098f0 <_scanf_float+0x2fc>
 800990c:	46aa      	mov	sl, r5
 800990e:	9602      	str	r6, [sp, #8]
 8009910:	e7df      	b.n	80098d2 <_scanf_float+0x2de>
 8009912:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	2965      	cmp	r1, #101	; 0x65
 800991a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800991e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	d00c      	beq.n	8009940 <_scanf_float+0x34c>
 8009926:	2945      	cmp	r1, #69	; 0x45
 8009928:	d00a      	beq.n	8009940 <_scanf_float+0x34c>
 800992a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800992e:	463a      	mov	r2, r7
 8009930:	4640      	mov	r0, r8
 8009932:	4798      	blx	r3
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800993a:	3b01      	subs	r3, #1
 800993c:	1eb5      	subs	r5, r6, #2
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009944:	463a      	mov	r2, r7
 8009946:	4640      	mov	r0, r8
 8009948:	4798      	blx	r3
 800994a:	462e      	mov	r6, r5
 800994c:	6825      	ldr	r5, [r4, #0]
 800994e:	f015 0510 	ands.w	r5, r5, #16
 8009952:	d14d      	bne.n	80099f0 <_scanf_float+0x3fc>
 8009954:	7035      	strb	r5, [r6, #0]
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800995c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009960:	d11a      	bne.n	8009998 <_scanf_float+0x3a4>
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	454b      	cmp	r3, r9
 8009966:	eba3 0209 	sub.w	r2, r3, r9
 800996a:	d122      	bne.n	80099b2 <_scanf_float+0x3be>
 800996c:	2200      	movs	r2, #0
 800996e:	4659      	mov	r1, fp
 8009970:	4640      	mov	r0, r8
 8009972:	f000 fe5b 	bl	800a62c <_strtod_r>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	6821      	ldr	r1, [r4, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f011 0f02 	tst.w	r1, #2
 8009980:	f103 0204 	add.w	r2, r3, #4
 8009984:	d020      	beq.n	80099c8 <_scanf_float+0x3d4>
 8009986:	9903      	ldr	r1, [sp, #12]
 8009988:	600a      	str	r2, [r1, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	ed83 0b00 	vstr	d0, [r3]
 8009990:	68e3      	ldr	r3, [r4, #12]
 8009992:	3301      	adds	r3, #1
 8009994:	60e3      	str	r3, [r4, #12]
 8009996:	e66e      	b.n	8009676 <_scanf_float+0x82>
 8009998:	9b04      	ldr	r3, [sp, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0e6      	beq.n	800996c <_scanf_float+0x378>
 800999e:	9905      	ldr	r1, [sp, #20]
 80099a0:	230a      	movs	r3, #10
 80099a2:	462a      	mov	r2, r5
 80099a4:	3101      	adds	r1, #1
 80099a6:	4640      	mov	r0, r8
 80099a8:	f000 feca 	bl	800a740 <_strtol_r>
 80099ac:	9b04      	ldr	r3, [sp, #16]
 80099ae:	9e05      	ldr	r6, [sp, #20]
 80099b0:	1ac2      	subs	r2, r0, r3
 80099b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099b6:	429e      	cmp	r6, r3
 80099b8:	bf28      	it	cs
 80099ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80099be:	490d      	ldr	r1, [pc, #52]	; (80099f4 <_scanf_float+0x400>)
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 f821 	bl	8009a08 <siprintf>
 80099c6:	e7d1      	b.n	800996c <_scanf_float+0x378>
 80099c8:	f011 0f04 	tst.w	r1, #4
 80099cc:	9903      	ldr	r1, [sp, #12]
 80099ce:	600a      	str	r2, [r1, #0]
 80099d0:	d1db      	bne.n	800998a <_scanf_float+0x396>
 80099d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80099d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099da:	681e      	ldr	r6, [r3, #0]
 80099dc:	d705      	bvc.n	80099ea <_scanf_float+0x3f6>
 80099de:	4806      	ldr	r0, [pc, #24]	; (80099f8 <_scanf_float+0x404>)
 80099e0:	f000 f80c 	bl	80099fc <nanf>
 80099e4:	ed86 0a00 	vstr	s0, [r6]
 80099e8:	e7d2      	b.n	8009990 <_scanf_float+0x39c>
 80099ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80099ee:	e7f9      	b.n	80099e4 <_scanf_float+0x3f0>
 80099f0:	2500      	movs	r5, #0
 80099f2:	e640      	b.n	8009676 <_scanf_float+0x82>
 80099f4:	0800d500 	.word	0x0800d500
 80099f8:	0800d918 	.word	0x0800d918

080099fc <nanf>:
 80099fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a04 <nanf+0x8>
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	7fc00000 	.word	0x7fc00000

08009a08 <siprintf>:
 8009a08:	b40e      	push	{r1, r2, r3}
 8009a0a:	b500      	push	{lr}
 8009a0c:	b09c      	sub	sp, #112	; 0x70
 8009a0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009a10:	9002      	str	r0, [sp, #8]
 8009a12:	9006      	str	r0, [sp, #24]
 8009a14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a18:	4809      	ldr	r0, [pc, #36]	; (8009a40 <siprintf+0x38>)
 8009a1a:	9107      	str	r1, [sp, #28]
 8009a1c:	9104      	str	r1, [sp, #16]
 8009a1e:	4909      	ldr	r1, [pc, #36]	; (8009a44 <siprintf+0x3c>)
 8009a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a24:	9105      	str	r1, [sp, #20]
 8009a26:	6800      	ldr	r0, [r0, #0]
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	a902      	add	r1, sp, #8
 8009a2c:	f002 fe08 	bl	800c640 <_svfiprintf_r>
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	b01c      	add	sp, #112	; 0x70
 8009a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a3c:	b003      	add	sp, #12
 8009a3e:	4770      	bx	lr
 8009a40:	24000014 	.word	0x24000014
 8009a44:	ffff0208 	.word	0xffff0208

08009a48 <sulp>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	4616      	mov	r6, r2
 8009a50:	ec45 4b10 	vmov	d0, r4, r5
 8009a54:	f002 fb8e 	bl	800c174 <__ulp>
 8009a58:	b17e      	cbz	r6, 8009a7a <sulp+0x32>
 8009a5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dd09      	ble.n	8009a7a <sulp+0x32>
 8009a66:	051b      	lsls	r3, r3, #20
 8009a68:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009a72:	ec41 0b17 	vmov	d7, r0, r1
 8009a76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	0000      	movs	r0, r0
	...

08009a80 <_strtod_l>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	ed2d 8b0c 	vpush	{d8-d13}
 8009a88:	b09d      	sub	sp, #116	; 0x74
 8009a8a:	461f      	mov	r7, r3
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9318      	str	r3, [sp, #96]	; 0x60
 8009a90:	4ba6      	ldr	r3, [pc, #664]	; (8009d2c <_strtod_l+0x2ac>)
 8009a92:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	9308      	str	r3, [sp, #32]
 8009a98:	4604      	mov	r4, r0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	468a      	mov	sl, r1
 8009a9e:	f7f6 fc1f 	bl	80002e0 <strlen>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	f04f 0900 	mov.w	r9, #0
 8009aac:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	2a2b      	cmp	r2, #43	; 0x2b
 8009ab6:	d04d      	beq.n	8009b54 <_strtod_l+0xd4>
 8009ab8:	d83a      	bhi.n	8009b30 <_strtod_l+0xb0>
 8009aba:	2a0d      	cmp	r2, #13
 8009abc:	d833      	bhi.n	8009b26 <_strtod_l+0xa6>
 8009abe:	2a08      	cmp	r2, #8
 8009ac0:	d833      	bhi.n	8009b2a <_strtod_l+0xaa>
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	d03d      	beq.n	8009b42 <_strtod_l+0xc2>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009acc:	7833      	ldrb	r3, [r6, #0]
 8009ace:	2b30      	cmp	r3, #48	; 0x30
 8009ad0:	f040 80b6 	bne.w	8009c40 <_strtod_l+0x1c0>
 8009ad4:	7873      	ldrb	r3, [r6, #1]
 8009ad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ada:	2b58      	cmp	r3, #88	; 0x58
 8009adc:	d16d      	bne.n	8009bba <_strtod_l+0x13a>
 8009ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	ab18      	add	r3, sp, #96	; 0x60
 8009ae4:	9702      	str	r7, [sp, #8]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4a91      	ldr	r2, [pc, #580]	; (8009d30 <_strtod_l+0x2b0>)
 8009aea:	ab19      	add	r3, sp, #100	; 0x64
 8009aec:	a917      	add	r1, sp, #92	; 0x5c
 8009aee:	4620      	mov	r0, r4
 8009af0:	f001 fca0 	bl	800b434 <__gethex>
 8009af4:	f010 0507 	ands.w	r5, r0, #7
 8009af8:	4607      	mov	r7, r0
 8009afa:	d005      	beq.n	8009b08 <_strtod_l+0x88>
 8009afc:	2d06      	cmp	r5, #6
 8009afe:	d12b      	bne.n	8009b58 <_strtod_l+0xd8>
 8009b00:	3601      	adds	r6, #1
 8009b02:	2300      	movs	r3, #0
 8009b04:	9617      	str	r6, [sp, #92]	; 0x5c
 8009b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f040 856e 	bne.w	800a5ec <_strtod_l+0xb6c>
 8009b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b12:	b1e3      	cbz	r3, 8009b4e <_strtod_l+0xce>
 8009b14:	ec49 8b17 	vmov	d7, r8, r9
 8009b18:	eeb1 0b47 	vneg.f64	d0, d7
 8009b1c:	b01d      	add	sp, #116	; 0x74
 8009b1e:	ecbd 8b0c 	vpop	{d8-d13}
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b26:	2a20      	cmp	r2, #32
 8009b28:	d1cd      	bne.n	8009ac6 <_strtod_l+0x46>
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b2e:	e7bf      	b.n	8009ab0 <_strtod_l+0x30>
 8009b30:	2a2d      	cmp	r2, #45	; 0x2d
 8009b32:	d1c8      	bne.n	8009ac6 <_strtod_l+0x46>
 8009b34:	2201      	movs	r2, #1
 8009b36:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1c3      	bne.n	8009aca <_strtod_l+0x4a>
 8009b42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b44:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f040 854d 	bne.w	800a5e8 <_strtod_l+0xb68>
 8009b4e:	ec49 8b10 	vmov	d0, r8, r9
 8009b52:	e7e3      	b.n	8009b1c <_strtod_l+0x9c>
 8009b54:	2200      	movs	r2, #0
 8009b56:	e7ee      	b.n	8009b36 <_strtod_l+0xb6>
 8009b58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b5a:	b13a      	cbz	r2, 8009b6c <_strtod_l+0xec>
 8009b5c:	2135      	movs	r1, #53	; 0x35
 8009b5e:	a81a      	add	r0, sp, #104	; 0x68
 8009b60:	f002 fc14 	bl	800c38c <__copybits>
 8009b64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b66:	4620      	mov	r0, r4
 8009b68:	f001 ffd8 	bl	800bb1c <_Bfree>
 8009b6c:	3d01      	subs	r5, #1
 8009b6e:	2d05      	cmp	r5, #5
 8009b70:	d807      	bhi.n	8009b82 <_strtod_l+0x102>
 8009b72:	e8df f005 	tbb	[pc, r5]
 8009b76:	0b0e      	.short	0x0b0e
 8009b78:	030e1d18 	.word	0x030e1d18
 8009b7c:	f04f 0900 	mov.w	r9, #0
 8009b80:	46c8      	mov	r8, r9
 8009b82:	073b      	lsls	r3, r7, #28
 8009b84:	d5c0      	bpl.n	8009b08 <_strtod_l+0x88>
 8009b86:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009b8a:	e7bd      	b.n	8009b08 <_strtod_l+0x88>
 8009b8c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8009b90:	e7f7      	b.n	8009b82 <_strtod_l+0x102>
 8009b92:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8009b96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ba0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009ba4:	e7ed      	b.n	8009b82 <_strtod_l+0x102>
 8009ba6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8009d34 <_strtod_l+0x2b4>
 8009baa:	f04f 0800 	mov.w	r8, #0
 8009bae:	e7e8      	b.n	8009b82 <_strtod_l+0x102>
 8009bb0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009bb4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009bb8:	e7e3      	b.n	8009b82 <_strtod_l+0x102>
 8009bba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bc0:	785b      	ldrb	r3, [r3, #1]
 8009bc2:	2b30      	cmp	r3, #48	; 0x30
 8009bc4:	d0f9      	beq.n	8009bba <_strtod_l+0x13a>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d09e      	beq.n	8009b08 <_strtod_l+0x88>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	9306      	str	r3, [sp, #24]
 8009bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bd8:	461e      	mov	r6, r3
 8009bda:	220a      	movs	r2, #10
 8009bdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009bde:	f890 b000 	ldrb.w	fp, [r0]
 8009be2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8009be6:	b2d9      	uxtb	r1, r3
 8009be8:	2909      	cmp	r1, #9
 8009bea:	d92b      	bls.n	8009c44 <_strtod_l+0x1c4>
 8009bec:	9908      	ldr	r1, [sp, #32]
 8009bee:	462a      	mov	r2, r5
 8009bf0:	f002 fe3e 	bl	800c870 <strncmp>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d035      	beq.n	8009c64 <_strtod_l+0x1e4>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	465a      	mov	r2, fp
 8009bfc:	4633      	mov	r3, r6
 8009bfe:	4683      	mov	fp, r0
 8009c00:	4601      	mov	r1, r0
 8009c02:	2a65      	cmp	r2, #101	; 0x65
 8009c04:	d001      	beq.n	8009c0a <_strtod_l+0x18a>
 8009c06:	2a45      	cmp	r2, #69	; 0x45
 8009c08:	d118      	bne.n	8009c3c <_strtod_l+0x1bc>
 8009c0a:	b91b      	cbnz	r3, 8009c14 <_strtod_l+0x194>
 8009c0c:	9b06      	ldr	r3, [sp, #24]
 8009c0e:	4303      	orrs	r3, r0
 8009c10:	d097      	beq.n	8009b42 <_strtod_l+0xc2>
 8009c12:	2300      	movs	r3, #0
 8009c14:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009c18:	f10a 0201 	add.w	r2, sl, #1
 8009c1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c1e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009c22:	2a2b      	cmp	r2, #43	; 0x2b
 8009c24:	d077      	beq.n	8009d16 <_strtod_l+0x296>
 8009c26:	2a2d      	cmp	r2, #45	; 0x2d
 8009c28:	d07d      	beq.n	8009d26 <_strtod_l+0x2a6>
 8009c2a:	f04f 0e00 	mov.w	lr, #0
 8009c2e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009c32:	2d09      	cmp	r5, #9
 8009c34:	f240 8084 	bls.w	8009d40 <_strtod_l+0x2c0>
 8009c38:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009c3c:	2500      	movs	r5, #0
 8009c3e:	e09f      	b.n	8009d80 <_strtod_l+0x300>
 8009c40:	2300      	movs	r3, #0
 8009c42:	e7c3      	b.n	8009bcc <_strtod_l+0x14c>
 8009c44:	2e08      	cmp	r6, #8
 8009c46:	bfd5      	itete	le
 8009c48:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009c4a:	9904      	ldrgt	r1, [sp, #16]
 8009c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c50:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c54:	f100 0001 	add.w	r0, r0, #1
 8009c58:	bfd4      	ite	le
 8009c5a:	930a      	strle	r3, [sp, #40]	; 0x28
 8009c5c:	9304      	strgt	r3, [sp, #16]
 8009c5e:	3601      	adds	r6, #1
 8009c60:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c62:	e7bb      	b.n	8009bdc <_strtod_l+0x15c>
 8009c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c66:	195a      	adds	r2, r3, r5
 8009c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c6a:	5d5a      	ldrb	r2, [r3, r5]
 8009c6c:	b3ae      	cbz	r6, 8009cda <_strtod_l+0x25a>
 8009c6e:	4683      	mov	fp, r0
 8009c70:	4633      	mov	r3, r6
 8009c72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c76:	2909      	cmp	r1, #9
 8009c78:	d912      	bls.n	8009ca0 <_strtod_l+0x220>
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	e7c1      	b.n	8009c02 <_strtod_l+0x182>
 8009c7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c84:	785a      	ldrb	r2, [r3, #1]
 8009c86:	3001      	adds	r0, #1
 8009c88:	2a30      	cmp	r2, #48	; 0x30
 8009c8a:	d0f8      	beq.n	8009c7e <_strtod_l+0x1fe>
 8009c8c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	f200 84b0 	bhi.w	800a5f6 <_strtod_l+0xb76>
 8009c96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c98:	930c      	str	r3, [sp, #48]	; 0x30
 8009c9a:	4683      	mov	fp, r0
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	3a30      	subs	r2, #48	; 0x30
 8009ca2:	f100 0101 	add.w	r1, r0, #1
 8009ca6:	d012      	beq.n	8009cce <_strtod_l+0x24e>
 8009ca8:	448b      	add	fp, r1
 8009caa:	eb00 0c03 	add.w	ip, r0, r3
 8009cae:	4619      	mov	r1, r3
 8009cb0:	250a      	movs	r5, #10
 8009cb2:	4561      	cmp	r1, ip
 8009cb4:	d113      	bne.n	8009cde <_strtod_l+0x25e>
 8009cb6:	1819      	adds	r1, r3, r0
 8009cb8:	2908      	cmp	r1, #8
 8009cba:	f103 0301 	add.w	r3, r3, #1
 8009cbe:	4403      	add	r3, r0
 8009cc0:	dc1d      	bgt.n	8009cfe <_strtod_l+0x27e>
 8009cc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cc4:	210a      	movs	r1, #10
 8009cc6:	fb01 2200 	mla	r2, r1, r0, r2
 8009cca:	920a      	str	r2, [sp, #40]	; 0x28
 8009ccc:	2100      	movs	r1, #0
 8009cce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009cd0:	1c50      	adds	r0, r2, #1
 8009cd2:	9017      	str	r0, [sp, #92]	; 0x5c
 8009cd4:	7852      	ldrb	r2, [r2, #1]
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	e7cb      	b.n	8009c72 <_strtod_l+0x1f2>
 8009cda:	4630      	mov	r0, r6
 8009cdc:	e7d4      	b.n	8009c88 <_strtod_l+0x208>
 8009cde:	2908      	cmp	r1, #8
 8009ce0:	dc04      	bgt.n	8009cec <_strtod_l+0x26c>
 8009ce2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009ce4:	436f      	muls	r7, r5
 8009ce6:	970a      	str	r7, [sp, #40]	; 0x28
 8009ce8:	3101      	adds	r1, #1
 8009cea:	e7e2      	b.n	8009cb2 <_strtod_l+0x232>
 8009cec:	f101 0e01 	add.w	lr, r1, #1
 8009cf0:	f1be 0f10 	cmp.w	lr, #16
 8009cf4:	bfde      	ittt	le
 8009cf6:	9f04      	ldrle	r7, [sp, #16]
 8009cf8:	436f      	mulle	r7, r5
 8009cfa:	9704      	strle	r7, [sp, #16]
 8009cfc:	e7f4      	b.n	8009ce8 <_strtod_l+0x268>
 8009cfe:	2b10      	cmp	r3, #16
 8009d00:	bfdf      	itttt	le
 8009d02:	9804      	ldrle	r0, [sp, #16]
 8009d04:	210a      	movle	r1, #10
 8009d06:	fb01 2200 	mlale	r2, r1, r0, r2
 8009d0a:	9204      	strle	r2, [sp, #16]
 8009d0c:	e7de      	b.n	8009ccc <_strtod_l+0x24c>
 8009d0e:	f04f 0b00 	mov.w	fp, #0
 8009d12:	2101      	movs	r1, #1
 8009d14:	e77a      	b.n	8009c0c <_strtod_l+0x18c>
 8009d16:	f04f 0e00 	mov.w	lr, #0
 8009d1a:	f10a 0202 	add.w	r2, sl, #2
 8009d1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d20:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009d24:	e783      	b.n	8009c2e <_strtod_l+0x1ae>
 8009d26:	f04f 0e01 	mov.w	lr, #1
 8009d2a:	e7f6      	b.n	8009d1a <_strtod_l+0x29a>
 8009d2c:	0800d758 	.word	0x0800d758
 8009d30:	0800d508 	.word	0x0800d508
 8009d34:	7ff00000 	.word	0x7ff00000
 8009d38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d3a:	1c55      	adds	r5, r2, #1
 8009d3c:	9517      	str	r5, [sp, #92]	; 0x5c
 8009d3e:	7852      	ldrb	r2, [r2, #1]
 8009d40:	2a30      	cmp	r2, #48	; 0x30
 8009d42:	d0f9      	beq.n	8009d38 <_strtod_l+0x2b8>
 8009d44:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009d48:	2d08      	cmp	r5, #8
 8009d4a:	f63f af77 	bhi.w	8009c3c <_strtod_l+0x1bc>
 8009d4e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009d52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d54:	9208      	str	r2, [sp, #32]
 8009d56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d58:	1c55      	adds	r5, r2, #1
 8009d5a:	9517      	str	r5, [sp, #92]	; 0x5c
 8009d5c:	7852      	ldrb	r2, [r2, #1]
 8009d5e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009d62:	2f09      	cmp	r7, #9
 8009d64:	d937      	bls.n	8009dd6 <_strtod_l+0x356>
 8009d66:	9f08      	ldr	r7, [sp, #32]
 8009d68:	1bed      	subs	r5, r5, r7
 8009d6a:	2d08      	cmp	r5, #8
 8009d6c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009d70:	dc02      	bgt.n	8009d78 <_strtod_l+0x2f8>
 8009d72:	4565      	cmp	r5, ip
 8009d74:	bfa8      	it	ge
 8009d76:	4665      	movge	r5, ip
 8009d78:	f1be 0f00 	cmp.w	lr, #0
 8009d7c:	d000      	beq.n	8009d80 <_strtod_l+0x300>
 8009d7e:	426d      	negs	r5, r5
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d14f      	bne.n	8009e24 <_strtod_l+0x3a4>
 8009d84:	9b06      	ldr	r3, [sp, #24]
 8009d86:	4303      	orrs	r3, r0
 8009d88:	f47f aebe 	bne.w	8009b08 <_strtod_l+0x88>
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	f47f aed8 	bne.w	8009b42 <_strtod_l+0xc2>
 8009d92:	2a69      	cmp	r2, #105	; 0x69
 8009d94:	d027      	beq.n	8009de6 <_strtod_l+0x366>
 8009d96:	dc24      	bgt.n	8009de2 <_strtod_l+0x362>
 8009d98:	2a49      	cmp	r2, #73	; 0x49
 8009d9a:	d024      	beq.n	8009de6 <_strtod_l+0x366>
 8009d9c:	2a4e      	cmp	r2, #78	; 0x4e
 8009d9e:	f47f aed0 	bne.w	8009b42 <_strtod_l+0xc2>
 8009da2:	499b      	ldr	r1, [pc, #620]	; (800a010 <_strtod_l+0x590>)
 8009da4:	a817      	add	r0, sp, #92	; 0x5c
 8009da6:	f001 fd9d 	bl	800b8e4 <__match>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f43f aec9 	beq.w	8009b42 <_strtod_l+0xc2>
 8009db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b28      	cmp	r3, #40	; 0x28
 8009db6:	d12d      	bne.n	8009e14 <_strtod_l+0x394>
 8009db8:	4996      	ldr	r1, [pc, #600]	; (800a014 <_strtod_l+0x594>)
 8009dba:	aa1a      	add	r2, sp, #104	; 0x68
 8009dbc:	a817      	add	r0, sp, #92	; 0x5c
 8009dbe:	f001 fda5 	bl	800b90c <__hexnan>
 8009dc2:	2805      	cmp	r0, #5
 8009dc4:	d126      	bne.n	8009e14 <_strtod_l+0x394>
 8009dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009dcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009dd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009dd4:	e698      	b.n	8009b08 <_strtod_l+0x88>
 8009dd6:	250a      	movs	r5, #10
 8009dd8:	fb05 250c 	mla	r5, r5, ip, r2
 8009ddc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009de0:	e7b9      	b.n	8009d56 <_strtod_l+0x2d6>
 8009de2:	2a6e      	cmp	r2, #110	; 0x6e
 8009de4:	e7db      	b.n	8009d9e <_strtod_l+0x31e>
 8009de6:	498c      	ldr	r1, [pc, #560]	; (800a018 <_strtod_l+0x598>)
 8009de8:	a817      	add	r0, sp, #92	; 0x5c
 8009dea:	f001 fd7b 	bl	800b8e4 <__match>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f aea7 	beq.w	8009b42 <_strtod_l+0xc2>
 8009df4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009df6:	4989      	ldr	r1, [pc, #548]	; (800a01c <_strtod_l+0x59c>)
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	a817      	add	r0, sp, #92	; 0x5c
 8009dfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dfe:	f001 fd71 	bl	800b8e4 <__match>
 8009e02:	b910      	cbnz	r0, 8009e0a <_strtod_l+0x38a>
 8009e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e06:	3301      	adds	r3, #1
 8009e08:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e0a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800a030 <_strtod_l+0x5b0>
 8009e0e:	f04f 0800 	mov.w	r8, #0
 8009e12:	e679      	b.n	8009b08 <_strtod_l+0x88>
 8009e14:	4882      	ldr	r0, [pc, #520]	; (800a020 <_strtod_l+0x5a0>)
 8009e16:	f002 fd13 	bl	800c840 <nan>
 8009e1a:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009e1e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e22:	e671      	b.n	8009b08 <_strtod_l+0x88>
 8009e24:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009e28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e2c:	eba5 020b 	sub.w	r2, r5, fp
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	bf08      	it	eq
 8009e34:	461e      	moveq	r6, r3
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009e3c:	9206      	str	r2, [sp, #24]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	bfa8      	it	ge
 8009e42:	2210      	movge	r2, #16
 8009e44:	2b09      	cmp	r3, #9
 8009e46:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8009e4a:	dd0e      	ble.n	8009e6a <_strtod_l+0x3ea>
 8009e4c:	4975      	ldr	r1, [pc, #468]	; (800a024 <_strtod_l+0x5a4>)
 8009e4e:	eddd 7a04 	vldr	s15, [sp, #16]
 8009e52:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009e56:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8009e5a:	ed9d 5b08 	vldr	d5, [sp, #32]
 8009e5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e62:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009e66:	ec59 8b17 	vmov	r8, r9, d7
 8009e6a:	2b0f      	cmp	r3, #15
 8009e6c:	dc37      	bgt.n	8009ede <_strtod_l+0x45e>
 8009e6e:	9906      	ldr	r1, [sp, #24]
 8009e70:	2900      	cmp	r1, #0
 8009e72:	f43f ae49 	beq.w	8009b08 <_strtod_l+0x88>
 8009e76:	dd23      	ble.n	8009ec0 <_strtod_l+0x440>
 8009e78:	2916      	cmp	r1, #22
 8009e7a:	dc0b      	bgt.n	8009e94 <_strtod_l+0x414>
 8009e7c:	4b69      	ldr	r3, [pc, #420]	; (800a024 <_strtod_l+0x5a4>)
 8009e7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009e82:	ed93 7b00 	vldr	d7, [r3]
 8009e86:	ec49 8b16 	vmov	d6, r8, r9
 8009e8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e8e:	ec59 8b17 	vmov	r8, r9, d7
 8009e92:	e639      	b.n	8009b08 <_strtod_l+0x88>
 8009e94:	9806      	ldr	r0, [sp, #24]
 8009e96:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009e9a:	4281      	cmp	r1, r0
 8009e9c:	db1f      	blt.n	8009ede <_strtod_l+0x45e>
 8009e9e:	4a61      	ldr	r2, [pc, #388]	; (800a024 <_strtod_l+0x5a4>)
 8009ea0:	f1c3 030f 	rsb	r3, r3, #15
 8009ea4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009ea8:	ed91 7b00 	vldr	d7, [r1]
 8009eac:	ec49 8b16 	vmov	d6, r8, r9
 8009eb0:	1ac3      	subs	r3, r0, r3
 8009eb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009eb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009eba:	ed92 6b00 	vldr	d6, [r2]
 8009ebe:	e7e4      	b.n	8009e8a <_strtod_l+0x40a>
 8009ec0:	9906      	ldr	r1, [sp, #24]
 8009ec2:	3116      	adds	r1, #22
 8009ec4:	db0b      	blt.n	8009ede <_strtod_l+0x45e>
 8009ec6:	4b57      	ldr	r3, [pc, #348]	; (800a024 <_strtod_l+0x5a4>)
 8009ec8:	ebab 0505 	sub.w	r5, fp, r5
 8009ecc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009ed0:	ed95 7b00 	vldr	d7, [r5]
 8009ed4:	ec49 8b16 	vmov	d6, r8, r9
 8009ed8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009edc:	e7d7      	b.n	8009e8e <_strtod_l+0x40e>
 8009ede:	9906      	ldr	r1, [sp, #24]
 8009ee0:	1a9a      	subs	r2, r3, r2
 8009ee2:	440a      	add	r2, r1
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	dd74      	ble.n	8009fd2 <_strtod_l+0x552>
 8009ee8:	f012 000f 	ands.w	r0, r2, #15
 8009eec:	d00a      	beq.n	8009f04 <_strtod_l+0x484>
 8009eee:	494d      	ldr	r1, [pc, #308]	; (800a024 <_strtod_l+0x5a4>)
 8009ef0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009ef4:	ed91 7b00 	vldr	d7, [r1]
 8009ef8:	ec49 8b16 	vmov	d6, r8, r9
 8009efc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f00:	ec59 8b17 	vmov	r8, r9, d7
 8009f04:	f032 020f 	bics.w	r2, r2, #15
 8009f08:	d04f      	beq.n	8009faa <_strtod_l+0x52a>
 8009f0a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009f0e:	dd22      	ble.n	8009f56 <_strtod_l+0x4d6>
 8009f10:	2500      	movs	r5, #0
 8009f12:	462e      	mov	r6, r5
 8009f14:	950a      	str	r5, [sp, #40]	; 0x28
 8009f16:	462f      	mov	r7, r5
 8009f18:	2322      	movs	r3, #34	; 0x22
 8009f1a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800a030 <_strtod_l+0x5b0>
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	f04f 0800 	mov.w	r8, #0
 8009f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f43f adee 	beq.w	8009b08 <_strtod_l+0x88>
 8009f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f001 fdf4 	bl	800bb1c <_Bfree>
 8009f34:	4639      	mov	r1, r7
 8009f36:	4620      	mov	r0, r4
 8009f38:	f001 fdf0 	bl	800bb1c <_Bfree>
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f001 fdec 	bl	800bb1c <_Bfree>
 8009f44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f46:	4620      	mov	r0, r4
 8009f48:	f001 fde8 	bl	800bb1c <_Bfree>
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f001 fde4 	bl	800bb1c <_Bfree>
 8009f54:	e5d8      	b.n	8009b08 <_strtod_l+0x88>
 8009f56:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	4f32      	ldr	r7, [pc, #200]	; (800a028 <_strtod_l+0x5a8>)
 8009f5e:	1112      	asrs	r2, r2, #4
 8009f60:	4601      	mov	r1, r0
 8009f62:	2a01      	cmp	r2, #1
 8009f64:	dc24      	bgt.n	8009fb0 <_strtod_l+0x530>
 8009f66:	b108      	cbz	r0, 8009f6c <_strtod_l+0x4ec>
 8009f68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f6c:	4a2e      	ldr	r2, [pc, #184]	; (800a028 <_strtod_l+0x5a8>)
 8009f6e:	482f      	ldr	r0, [pc, #188]	; (800a02c <_strtod_l+0x5ac>)
 8009f70:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009f74:	ed91 7b00 	vldr	d7, [r1]
 8009f78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009f7c:	ec49 8b16 	vmov	d6, r8, r9
 8009f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009f88:	9905      	ldr	r1, [sp, #20]
 8009f8a:	4a29      	ldr	r2, [pc, #164]	; (800a030 <_strtod_l+0x5b0>)
 8009f8c:	400a      	ands	r2, r1
 8009f8e:	4282      	cmp	r2, r0
 8009f90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f94:	d8bc      	bhi.n	8009f10 <_strtod_l+0x490>
 8009f96:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009f9a:	4282      	cmp	r2, r0
 8009f9c:	bf86      	itte	hi
 8009f9e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a034 <_strtod_l+0x5b4>
 8009fa2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009fa6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009faa:	2200      	movs	r2, #0
 8009fac:	9204      	str	r2, [sp, #16]
 8009fae:	e07f      	b.n	800a0b0 <_strtod_l+0x630>
 8009fb0:	f012 0f01 	tst.w	r2, #1
 8009fb4:	d00a      	beq.n	8009fcc <_strtod_l+0x54c>
 8009fb6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8009fba:	ed90 7b00 	vldr	d7, [r0]
 8009fbe:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009fc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009fc6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009fca:	2001      	movs	r0, #1
 8009fcc:	3101      	adds	r1, #1
 8009fce:	1052      	asrs	r2, r2, #1
 8009fd0:	e7c7      	b.n	8009f62 <_strtod_l+0x4e2>
 8009fd2:	d0ea      	beq.n	8009faa <_strtod_l+0x52a>
 8009fd4:	4252      	negs	r2, r2
 8009fd6:	f012 000f 	ands.w	r0, r2, #15
 8009fda:	d00a      	beq.n	8009ff2 <_strtod_l+0x572>
 8009fdc:	4911      	ldr	r1, [pc, #68]	; (800a024 <_strtod_l+0x5a4>)
 8009fde:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009fe2:	ed91 7b00 	vldr	d7, [r1]
 8009fe6:	ec49 8b16 	vmov	d6, r8, r9
 8009fea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009fee:	ec59 8b17 	vmov	r8, r9, d7
 8009ff2:	1112      	asrs	r2, r2, #4
 8009ff4:	d0d9      	beq.n	8009faa <_strtod_l+0x52a>
 8009ff6:	2a1f      	cmp	r2, #31
 8009ff8:	dd1e      	ble.n	800a038 <_strtod_l+0x5b8>
 8009ffa:	2500      	movs	r5, #0
 8009ffc:	462e      	mov	r6, r5
 8009ffe:	950a      	str	r5, [sp, #40]	; 0x28
 800a000:	462f      	mov	r7, r5
 800a002:	2322      	movs	r3, #34	; 0x22
 800a004:	f04f 0800 	mov.w	r8, #0
 800a008:	f04f 0900 	mov.w	r9, #0
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	e789      	b.n	8009f24 <_strtod_l+0x4a4>
 800a010:	0800d4d9 	.word	0x0800d4d9
 800a014:	0800d51c 	.word	0x0800d51c
 800a018:	0800d4d1 	.word	0x0800d4d1
 800a01c:	0800d65c 	.word	0x0800d65c
 800a020:	0800d918 	.word	0x0800d918
 800a024:	0800d7f8 	.word	0x0800d7f8
 800a028:	0800d7d0 	.word	0x0800d7d0
 800a02c:	7ca00000 	.word	0x7ca00000
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	7fefffff 	.word	0x7fefffff
 800a038:	f012 0110 	ands.w	r1, r2, #16
 800a03c:	bf18      	it	ne
 800a03e:	216a      	movne	r1, #106	; 0x6a
 800a040:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800a044:	9104      	str	r1, [sp, #16]
 800a046:	49c0      	ldr	r1, [pc, #768]	; (800a348 <_strtod_l+0x8c8>)
 800a048:	2000      	movs	r0, #0
 800a04a:	07d7      	lsls	r7, r2, #31
 800a04c:	d508      	bpl.n	800a060 <_strtod_l+0x5e0>
 800a04e:	ed9d 6b08 	vldr	d6, [sp, #32]
 800a052:	ed91 7b00 	vldr	d7, [r1]
 800a056:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a05a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a05e:	2001      	movs	r0, #1
 800a060:	1052      	asrs	r2, r2, #1
 800a062:	f101 0108 	add.w	r1, r1, #8
 800a066:	d1f0      	bne.n	800a04a <_strtod_l+0x5ca>
 800a068:	b108      	cbz	r0, 800a06e <_strtod_l+0x5ee>
 800a06a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800a06e:	9a04      	ldr	r2, [sp, #16]
 800a070:	b1ba      	cbz	r2, 800a0a2 <_strtod_l+0x622>
 800a072:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a076:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	4649      	mov	r1, r9
 800a07e:	dd10      	ble.n	800a0a2 <_strtod_l+0x622>
 800a080:	2a1f      	cmp	r2, #31
 800a082:	f340 8132 	ble.w	800a2ea <_strtod_l+0x86a>
 800a086:	2a34      	cmp	r2, #52	; 0x34
 800a088:	bfde      	ittt	le
 800a08a:	3a20      	suble	r2, #32
 800a08c:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 800a090:	fa00 f202 	lslle.w	r2, r0, r2
 800a094:	f04f 0800 	mov.w	r8, #0
 800a098:	bfcc      	ite	gt
 800a09a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a09e:	ea02 0901 	andle.w	r9, r2, r1
 800a0a2:	ec49 8b17 	vmov	d7, r8, r9
 800a0a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ae:	d0a4      	beq.n	8009ffa <_strtod_l+0x57a>
 800a0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0b2:	9200      	str	r2, [sp, #0]
 800a0b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f001 fd9b 	bl	800bbf4 <__s2b>
 800a0be:	900a      	str	r0, [sp, #40]	; 0x28
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f43f af25 	beq.w	8009f10 <_strtod_l+0x490>
 800a0c6:	9b06      	ldr	r3, [sp, #24]
 800a0c8:	ebab 0505 	sub.w	r5, fp, r5
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bfb4      	ite	lt
 800a0d0:	462b      	movlt	r3, r5
 800a0d2:	2300      	movge	r3, #0
 800a0d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d6:	9b06      	ldr	r3, [sp, #24]
 800a0d8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800a330 <_strtod_l+0x8b0>
 800a0dc:	ed9f ab96 	vldr	d10, [pc, #600]	; 800a338 <_strtod_l+0x8b8>
 800a0e0:	ed9f bb97 	vldr	d11, [pc, #604]	; 800a340 <_strtod_l+0x8c0>
 800a0e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	9312      	str	r3, [sp, #72]	; 0x48
 800a0ec:	462e      	mov	r6, r5
 800a0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	6859      	ldr	r1, [r3, #4]
 800a0f4:	f001 fcd2 	bl	800ba9c <_Balloc>
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f af0c 	beq.w	8009f18 <_strtod_l+0x498>
 800a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	3202      	adds	r2, #2
 800a106:	f103 010c 	add.w	r1, r3, #12
 800a10a:	0092      	lsls	r2, r2, #2
 800a10c:	300c      	adds	r0, #12
 800a10e:	f001 fcb7 	bl	800ba80 <memcpy>
 800a112:	ec49 8b10 	vmov	d0, r8, r9
 800a116:	aa1a      	add	r2, sp, #104	; 0x68
 800a118:	a919      	add	r1, sp, #100	; 0x64
 800a11a:	4620      	mov	r0, r4
 800a11c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800a120:	f002 f8a4 	bl	800c26c <__d2b>
 800a124:	9018      	str	r0, [sp, #96]	; 0x60
 800a126:	2800      	cmp	r0, #0
 800a128:	f43f aef6 	beq.w	8009f18 <_strtod_l+0x498>
 800a12c:	2101      	movs	r1, #1
 800a12e:	4620      	mov	r0, r4
 800a130:	f001 fdfa 	bl	800bd28 <__i2b>
 800a134:	4606      	mov	r6, r0
 800a136:	2800      	cmp	r0, #0
 800a138:	f43f aeee 	beq.w	8009f18 <_strtod_l+0x498>
 800a13c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a13e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfab      	itete	ge
 800a144:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a148:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800a14c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800a150:	bfac      	ite	ge
 800a152:	eb03 0b02 	addge.w	fp, r3, r2
 800a156:	eba2 0a03 	sublt.w	sl, r2, r3
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	1a9b      	subs	r3, r3, r2
 800a15e:	440b      	add	r3, r1
 800a160:	4a7a      	ldr	r2, [pc, #488]	; (800a34c <_strtod_l+0x8cc>)
 800a162:	3b01      	subs	r3, #1
 800a164:	4293      	cmp	r3, r2
 800a166:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800a16a:	f280 80d1 	bge.w	800a310 <_strtod_l+0x890>
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	2a1f      	cmp	r2, #31
 800a172:	eba1 0102 	sub.w	r1, r1, r2
 800a176:	f04f 0001 	mov.w	r0, #1
 800a17a:	f300 80bd 	bgt.w	800a2f8 <_strtod_l+0x878>
 800a17e:	fa00 f302 	lsl.w	r3, r0, r2
 800a182:	930e      	str	r3, [sp, #56]	; 0x38
 800a184:	2300      	movs	r3, #0
 800a186:	930d      	str	r3, [sp, #52]	; 0x34
 800a188:	eb0b 0301 	add.w	r3, fp, r1
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	459b      	cmp	fp, r3
 800a190:	448a      	add	sl, r1
 800a192:	4492      	add	sl, r2
 800a194:	465a      	mov	r2, fp
 800a196:	bfa8      	it	ge
 800a198:	461a      	movge	r2, r3
 800a19a:	4552      	cmp	r2, sl
 800a19c:	bfa8      	it	ge
 800a19e:	4652      	movge	r2, sl
 800a1a0:	2a00      	cmp	r2, #0
 800a1a2:	bfc2      	ittt	gt
 800a1a4:	1a9b      	subgt	r3, r3, r2
 800a1a6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800a1aa:	ebab 0b02 	subgt.w	fp, fp, r2
 800a1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	dd18      	ble.n	800a1e6 <_strtod_l+0x766>
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800a1ba:	f001 fe71 	bl	800bea0 <__pow5mult>
 800a1be:	4606      	mov	r6, r0
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	f43f aea9 	beq.w	8009f18 <_strtod_l+0x498>
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f001 fdc2 	bl	800bd54 <__multiply>
 800a1d0:	9014      	str	r0, [sp, #80]	; 0x50
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f43f aea0 	beq.w	8009f18 <_strtod_l+0x498>
 800a1d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f001 fc9e 	bl	800bb1c <_Bfree>
 800a1e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1e4:	9218      	str	r2, [sp, #96]	; 0x60
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f300 8097 	bgt.w	800a31a <_strtod_l+0x89a>
 800a1ec:	9b06      	ldr	r3, [sp, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dd08      	ble.n	800a204 <_strtod_l+0x784>
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f001 fe52 	bl	800bea0 <__pow5mult>
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f ae8a 	beq.w	8009f18 <_strtod_l+0x498>
 800a204:	f1ba 0f00 	cmp.w	sl, #0
 800a208:	dd08      	ble.n	800a21c <_strtod_l+0x79c>
 800a20a:	4639      	mov	r1, r7
 800a20c:	4652      	mov	r2, sl
 800a20e:	4620      	mov	r0, r4
 800a210:	f001 fea0 	bl	800bf54 <__lshift>
 800a214:	4607      	mov	r7, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	f43f ae7e 	beq.w	8009f18 <_strtod_l+0x498>
 800a21c:	f1bb 0f00 	cmp.w	fp, #0
 800a220:	dd08      	ble.n	800a234 <_strtod_l+0x7b4>
 800a222:	4631      	mov	r1, r6
 800a224:	465a      	mov	r2, fp
 800a226:	4620      	mov	r0, r4
 800a228:	f001 fe94 	bl	800bf54 <__lshift>
 800a22c:	4606      	mov	r6, r0
 800a22e:	2800      	cmp	r0, #0
 800a230:	f43f ae72 	beq.w	8009f18 <_strtod_l+0x498>
 800a234:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a236:	463a      	mov	r2, r7
 800a238:	4620      	mov	r0, r4
 800a23a:	f001 ff13 	bl	800c064 <__mdiff>
 800a23e:	4605      	mov	r5, r0
 800a240:	2800      	cmp	r0, #0
 800a242:	f43f ae69 	beq.w	8009f18 <_strtod_l+0x498>
 800a246:	2300      	movs	r3, #0
 800a248:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a24c:	60c3      	str	r3, [r0, #12]
 800a24e:	4631      	mov	r1, r6
 800a250:	f001 feec 	bl	800c02c <__mcmp>
 800a254:	2800      	cmp	r0, #0
 800a256:	da7f      	bge.n	800a358 <_strtod_l+0x8d8>
 800a258:	ea5a 0308 	orrs.w	r3, sl, r8
 800a25c:	f040 80a5 	bne.w	800a3aa <_strtod_l+0x92a>
 800a260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a264:	2b00      	cmp	r3, #0
 800a266:	f040 80a0 	bne.w	800a3aa <_strtod_l+0x92a>
 800a26a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a26e:	0d1b      	lsrs	r3, r3, #20
 800a270:	051b      	lsls	r3, r3, #20
 800a272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a276:	f240 8098 	bls.w	800a3aa <_strtod_l+0x92a>
 800a27a:	696b      	ldr	r3, [r5, #20]
 800a27c:	b91b      	cbnz	r3, 800a286 <_strtod_l+0x806>
 800a27e:	692b      	ldr	r3, [r5, #16]
 800a280:	2b01      	cmp	r3, #1
 800a282:	f340 8092 	ble.w	800a3aa <_strtod_l+0x92a>
 800a286:	4629      	mov	r1, r5
 800a288:	2201      	movs	r2, #1
 800a28a:	4620      	mov	r0, r4
 800a28c:	f001 fe62 	bl	800bf54 <__lshift>
 800a290:	4631      	mov	r1, r6
 800a292:	4605      	mov	r5, r0
 800a294:	f001 feca 	bl	800c02c <__mcmp>
 800a298:	2800      	cmp	r0, #0
 800a29a:	f340 8086 	ble.w	800a3aa <_strtod_l+0x92a>
 800a29e:	9904      	ldr	r1, [sp, #16]
 800a2a0:	4a2b      	ldr	r2, [pc, #172]	; (800a350 <_strtod_l+0x8d0>)
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	f000 80a1 	beq.w	800a3ec <_strtod_l+0x96c>
 800a2aa:	ea02 0109 	and.w	r1, r2, r9
 800a2ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a2b2:	f300 809b 	bgt.w	800a3ec <_strtod_l+0x96c>
 800a2b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a2ba:	f77f aea2 	ble.w	800a002 <_strtod_l+0x582>
 800a2be:	4a25      	ldr	r2, [pc, #148]	; (800a354 <_strtod_l+0x8d4>)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a2c6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800a2ca:	ec49 8b17 	vmov	d7, r8, r9
 800a2ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a2d6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	bf08      	it	eq
 800a2de:	2322      	moveq	r3, #34	; 0x22
 800a2e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a2e4:	bf08      	it	eq
 800a2e6:	6023      	streq	r3, [r4, #0]
 800a2e8:	e620      	b.n	8009f2c <_strtod_l+0x4ac>
 800a2ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a2ee:	fa01 f202 	lsl.w	r2, r1, r2
 800a2f2:	ea02 0808 	and.w	r8, r2, r8
 800a2f6:	e6d4      	b.n	800a0a2 <_strtod_l+0x622>
 800a2f8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800a2fc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a300:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800a304:	33e2      	adds	r3, #226	; 0xe2
 800a306:	fa00 f303 	lsl.w	r3, r0, r3
 800a30a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800a30e:	e73b      	b.n	800a188 <_strtod_l+0x708>
 800a310:	2000      	movs	r0, #0
 800a312:	2301      	movs	r3, #1
 800a314:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800a318:	e736      	b.n	800a188 <_strtod_l+0x708>
 800a31a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a31c:	461a      	mov	r2, r3
 800a31e:	4620      	mov	r0, r4
 800a320:	f001 fe18 	bl	800bf54 <__lshift>
 800a324:	9018      	str	r0, [sp, #96]	; 0x60
 800a326:	2800      	cmp	r0, #0
 800a328:	f47f af60 	bne.w	800a1ec <_strtod_l+0x76c>
 800a32c:	e5f4      	b.n	8009f18 <_strtod_l+0x498>
 800a32e:	bf00      	nop
 800a330:	94a03595 	.word	0x94a03595
 800a334:	3fcfffff 	.word	0x3fcfffff
 800a338:	94a03595 	.word	0x94a03595
 800a33c:	3fdfffff 	.word	0x3fdfffff
 800a340:	35afe535 	.word	0x35afe535
 800a344:	3fe00000 	.word	0x3fe00000
 800a348:	0800d530 	.word	0x0800d530
 800a34c:	fffffc02 	.word	0xfffffc02
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	39500000 	.word	0x39500000
 800a358:	46cb      	mov	fp, r9
 800a35a:	d165      	bne.n	800a428 <_strtod_l+0x9a8>
 800a35c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a360:	f1ba 0f00 	cmp.w	sl, #0
 800a364:	d02a      	beq.n	800a3bc <_strtod_l+0x93c>
 800a366:	4aaa      	ldr	r2, [pc, #680]	; (800a610 <_strtod_l+0xb90>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d12b      	bne.n	800a3c4 <_strtod_l+0x944>
 800a36c:	9b04      	ldr	r3, [sp, #16]
 800a36e:	4641      	mov	r1, r8
 800a370:	b1fb      	cbz	r3, 800a3b2 <_strtod_l+0x932>
 800a372:	4aa8      	ldr	r2, [pc, #672]	; (800a614 <_strtod_l+0xb94>)
 800a374:	ea09 0202 	and.w	r2, r9, r2
 800a378:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a380:	d81a      	bhi.n	800a3b8 <_strtod_l+0x938>
 800a382:	0d12      	lsrs	r2, r2, #20
 800a384:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a388:	fa00 f303 	lsl.w	r3, r0, r3
 800a38c:	4299      	cmp	r1, r3
 800a38e:	d119      	bne.n	800a3c4 <_strtod_l+0x944>
 800a390:	4ba1      	ldr	r3, [pc, #644]	; (800a618 <_strtod_l+0xb98>)
 800a392:	459b      	cmp	fp, r3
 800a394:	d102      	bne.n	800a39c <_strtod_l+0x91c>
 800a396:	3101      	adds	r1, #1
 800a398:	f43f adbe 	beq.w	8009f18 <_strtod_l+0x498>
 800a39c:	4b9d      	ldr	r3, [pc, #628]	; (800a614 <_strtod_l+0xb94>)
 800a39e:	ea0b 0303 	and.w	r3, fp, r3
 800a3a2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	9b04      	ldr	r3, [sp, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d186      	bne.n	800a2be <_strtod_l+0x83e>
 800a3b0:	e5bc      	b.n	8009f2c <_strtod_l+0x4ac>
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3b6:	e7e9      	b.n	800a38c <_strtod_l+0x90c>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	e7e7      	b.n	800a38c <_strtod_l+0x90c>
 800a3bc:	ea53 0308 	orrs.w	r3, r3, r8
 800a3c0:	f43f af6d 	beq.w	800a29e <_strtod_l+0x81e>
 800a3c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3c6:	b1db      	cbz	r3, 800a400 <_strtod_l+0x980>
 800a3c8:	ea13 0f0b 	tst.w	r3, fp
 800a3cc:	d0ed      	beq.n	800a3aa <_strtod_l+0x92a>
 800a3ce:	9a04      	ldr	r2, [sp, #16]
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	4649      	mov	r1, r9
 800a3d4:	f1ba 0f00 	cmp.w	sl, #0
 800a3d8:	d016      	beq.n	800a408 <_strtod_l+0x988>
 800a3da:	f7ff fb35 	bl	8009a48 <sulp>
 800a3de:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a3e2:	ee37 7b00 	vadd.f64	d7, d7, d0
 800a3e6:	ec59 8b17 	vmov	r8, r9, d7
 800a3ea:	e7de      	b.n	800a3aa <_strtod_l+0x92a>
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a3f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a3f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a3fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a3fe:	e7d4      	b.n	800a3aa <_strtod_l+0x92a>
 800a400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a402:	ea13 0f08 	tst.w	r3, r8
 800a406:	e7e1      	b.n	800a3cc <_strtod_l+0x94c>
 800a408:	f7ff fb1e 	bl	8009a48 <sulp>
 800a40c:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a410:	ee37 7b40 	vsub.f64	d7, d7, d0
 800a414:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a418:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a424:	d1c1      	bne.n	800a3aa <_strtod_l+0x92a>
 800a426:	e5ec      	b.n	800a002 <_strtod_l+0x582>
 800a428:	4631      	mov	r1, r6
 800a42a:	4628      	mov	r0, r5
 800a42c:	f001 ff7a 	bl	800c324 <__ratio>
 800a430:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a434:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43c:	d867      	bhi.n	800a50e <_strtod_l+0xa8e>
 800a43e:	f1ba 0f00 	cmp.w	sl, #0
 800a442:	d044      	beq.n	800a4ce <_strtod_l+0xa4e>
 800a444:	4b75      	ldr	r3, [pc, #468]	; (800a61c <_strtod_l+0xb9c>)
 800a446:	2200      	movs	r2, #0
 800a448:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800a44c:	4971      	ldr	r1, [pc, #452]	; (800a614 <_strtod_l+0xb94>)
 800a44e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a628 <_strtod_l+0xba8>
 800a452:	ea0b 0001 	and.w	r0, fp, r1
 800a456:	4560      	cmp	r0, ip
 800a458:	900d      	str	r0, [sp, #52]	; 0x34
 800a45a:	f040 808b 	bne.w	800a574 <_strtod_l+0xaf4>
 800a45e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a462:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a466:	ec49 8b10 	vmov	d0, r8, r9
 800a46a:	ec43 2b1c 	vmov	d12, r2, r3
 800a46e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a472:	f001 fe7f 	bl	800c174 <__ulp>
 800a476:	ec49 8b1d 	vmov	d13, r8, r9
 800a47a:	eeac db00 	vfma.f64	d13, d12, d0
 800a47e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800a482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a484:	4963      	ldr	r1, [pc, #396]	; (800a614 <_strtod_l+0xb94>)
 800a486:	4a66      	ldr	r2, [pc, #408]	; (800a620 <_strtod_l+0xba0>)
 800a488:	4019      	ands	r1, r3
 800a48a:	4291      	cmp	r1, r2
 800a48c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800a490:	d947      	bls.n	800a522 <_strtod_l+0xaa2>
 800a492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a494:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a498:	4293      	cmp	r3, r2
 800a49a:	d103      	bne.n	800a4a4 <_strtod_l+0xa24>
 800a49c:	9b08      	ldr	r3, [sp, #32]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	f43f ad3a 	beq.w	8009f18 <_strtod_l+0x498>
 800a4a4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800a618 <_strtod_l+0xb98>
 800a4a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a4ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f001 fb34 	bl	800bb1c <_Bfree>
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f001 fb30 	bl	800bb1c <_Bfree>
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f001 fb2c 	bl	800bb1c <_Bfree>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f001 fb28 	bl	800bb1c <_Bfree>
 800a4cc:	e60f      	b.n	800a0ee <_strtod_l+0x66e>
 800a4ce:	f1b8 0f00 	cmp.w	r8, #0
 800a4d2:	d112      	bne.n	800a4fa <_strtod_l+0xa7a>
 800a4d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4d8:	b9b3      	cbnz	r3, 800a508 <_strtod_l+0xa88>
 800a4da:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a4de:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a4ea:	d401      	bmi.n	800a4f0 <_strtod_l+0xa70>
 800a4ec:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a4f0:	eeb1 7b48 	vneg.f64	d7, d8
 800a4f4:	ec53 2b17 	vmov	r2, r3, d7
 800a4f8:	e7a8      	b.n	800a44c <_strtod_l+0x9cc>
 800a4fa:	f1b8 0f01 	cmp.w	r8, #1
 800a4fe:	d103      	bne.n	800a508 <_strtod_l+0xa88>
 800a500:	f1b9 0f00 	cmp.w	r9, #0
 800a504:	f43f ad7d 	beq.w	800a002 <_strtod_l+0x582>
 800a508:	4b46      	ldr	r3, [pc, #280]	; (800a624 <_strtod_l+0xba4>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	e79c      	b.n	800a448 <_strtod_l+0x9c8>
 800a50e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a512:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a516:	f1ba 0f00 	cmp.w	sl, #0
 800a51a:	d0e9      	beq.n	800a4f0 <_strtod_l+0xa70>
 800a51c:	ec53 2b18 	vmov	r2, r3, d8
 800a520:	e794      	b.n	800a44c <_strtod_l+0x9cc>
 800a522:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1bf      	bne.n	800a4ac <_strtod_l+0xa2c>
 800a52c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a532:	0d1b      	lsrs	r3, r3, #20
 800a534:	051b      	lsls	r3, r3, #20
 800a536:	429a      	cmp	r2, r3
 800a538:	d1b8      	bne.n	800a4ac <_strtod_l+0xa2c>
 800a53a:	ec51 0b18 	vmov	r0, r1, d8
 800a53e:	f7f6 f8fb 	bl	8000738 <__aeabi_d2lz>
 800a542:	f7f6 f8b3 	bl	80006ac <__aeabi_l2d>
 800a546:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a54a:	ec41 0b17 	vmov	d7, r0, r1
 800a54e:	ea43 0308 	orr.w	r3, r3, r8
 800a552:	ea53 030a 	orrs.w	r3, r3, sl
 800a556:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a55a:	d03e      	beq.n	800a5da <_strtod_l+0xb5a>
 800a55c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800a560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a564:	f53f ace2 	bmi.w	8009f2c <_strtod_l+0x4ac>
 800a568:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	dd9c      	ble.n	800a4ac <_strtod_l+0xa2c>
 800a572:	e4db      	b.n	8009f2c <_strtod_l+0x4ac>
 800a574:	9904      	ldr	r1, [sp, #16]
 800a576:	b301      	cbz	r1, 800a5ba <_strtod_l+0xb3a>
 800a578:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a57a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a57e:	d81c      	bhi.n	800a5ba <_strtod_l+0xb3a>
 800a580:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a608 <_strtod_l+0xb88>
 800a584:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58c:	d811      	bhi.n	800a5b2 <_strtod_l+0xb32>
 800a58e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a592:	ee18 3a10 	vmov	r3, s16
 800a596:	2b01      	cmp	r3, #1
 800a598:	bf38      	it	cc
 800a59a:	2301      	movcc	r3, #1
 800a59c:	ee08 3a10 	vmov	s16, r3
 800a5a0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a5a4:	f1ba 0f00 	cmp.w	sl, #0
 800a5a8:	d114      	bne.n	800a5d4 <_strtod_l+0xb54>
 800a5aa:	eeb1 7b48 	vneg.f64	d7, d8
 800a5ae:	ec53 2b17 	vmov	r2, r3, d7
 800a5b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a5b4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800a5b8:	1a0b      	subs	r3, r1, r0
 800a5ba:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a5be:	ec43 2b1c 	vmov	d12, r2, r3
 800a5c2:	f001 fdd7 	bl	800c174 <__ulp>
 800a5c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a5ca:	eeac 7b00 	vfma.f64	d7, d12, d0
 800a5ce:	ec59 8b17 	vmov	r8, r9, d7
 800a5d2:	e7a8      	b.n	800a526 <_strtod_l+0xaa6>
 800a5d4:	ec53 2b18 	vmov	r2, r3, d8
 800a5d8:	e7eb      	b.n	800a5b2 <_strtod_l+0xb32>
 800a5da:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e2:	f57f af63 	bpl.w	800a4ac <_strtod_l+0xa2c>
 800a5e6:	e4a1      	b.n	8009f2c <_strtod_l+0x4ac>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	f7ff ba8d 	b.w	8009b10 <_strtod_l+0x90>
 800a5f6:	2a65      	cmp	r2, #101	; 0x65
 800a5f8:	f43f ab89 	beq.w	8009d0e <_strtod_l+0x28e>
 800a5fc:	2a45      	cmp	r2, #69	; 0x45
 800a5fe:	f43f ab86 	beq.w	8009d0e <_strtod_l+0x28e>
 800a602:	2101      	movs	r1, #1
 800a604:	f7ff bbbe 	b.w	8009d84 <_strtod_l+0x304>
 800a608:	ffc00000 	.word	0xffc00000
 800a60c:	41dfffff 	.word	0x41dfffff
 800a610:	000fffff 	.word	0x000fffff
 800a614:	7ff00000 	.word	0x7ff00000
 800a618:	7fefffff 	.word	0x7fefffff
 800a61c:	3ff00000 	.word	0x3ff00000
 800a620:	7c9fffff 	.word	0x7c9fffff
 800a624:	bff00000 	.word	0xbff00000
 800a628:	7fe00000 	.word	0x7fe00000

0800a62c <_strtod_r>:
 800a62c:	4b01      	ldr	r3, [pc, #4]	; (800a634 <_strtod_r+0x8>)
 800a62e:	f7ff ba27 	b.w	8009a80 <_strtod_l>
 800a632:	bf00      	nop
 800a634:	2400007c 	.word	0x2400007c

0800a638 <_strtol_l.isra.0>:
 800a638:	2b01      	cmp	r3, #1
 800a63a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a63e:	d001      	beq.n	800a644 <_strtol_l.isra.0+0xc>
 800a640:	2b24      	cmp	r3, #36	; 0x24
 800a642:	d906      	bls.n	800a652 <_strtol_l.isra.0+0x1a>
 800a644:	f7fe fb60 	bl	8008d08 <__errno>
 800a648:	2316      	movs	r3, #22
 800a64a:	6003      	str	r3, [r0, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a652:	4f3a      	ldr	r7, [pc, #232]	; (800a73c <_strtol_l.isra.0+0x104>)
 800a654:	468e      	mov	lr, r1
 800a656:	4676      	mov	r6, lr
 800a658:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a65c:	5de5      	ldrb	r5, [r4, r7]
 800a65e:	f015 0508 	ands.w	r5, r5, #8
 800a662:	d1f8      	bne.n	800a656 <_strtol_l.isra.0+0x1e>
 800a664:	2c2d      	cmp	r4, #45	; 0x2d
 800a666:	d134      	bne.n	800a6d2 <_strtol_l.isra.0+0x9a>
 800a668:	f89e 4000 	ldrb.w	r4, [lr]
 800a66c:	f04f 0801 	mov.w	r8, #1
 800a670:	f106 0e02 	add.w	lr, r6, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d05c      	beq.n	800a732 <_strtol_l.isra.0+0xfa>
 800a678:	2b10      	cmp	r3, #16
 800a67a:	d10c      	bne.n	800a696 <_strtol_l.isra.0+0x5e>
 800a67c:	2c30      	cmp	r4, #48	; 0x30
 800a67e:	d10a      	bne.n	800a696 <_strtol_l.isra.0+0x5e>
 800a680:	f89e 4000 	ldrb.w	r4, [lr]
 800a684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a688:	2c58      	cmp	r4, #88	; 0x58
 800a68a:	d14d      	bne.n	800a728 <_strtol_l.isra.0+0xf0>
 800a68c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a690:	2310      	movs	r3, #16
 800a692:	f10e 0e02 	add.w	lr, lr, #2
 800a696:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a69a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a69e:	2600      	movs	r6, #0
 800a6a0:	fbbc f9f3 	udiv	r9, ip, r3
 800a6a4:	4635      	mov	r5, r6
 800a6a6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a6aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a6ae:	2f09      	cmp	r7, #9
 800a6b0:	d818      	bhi.n	800a6e4 <_strtol_l.isra.0+0xac>
 800a6b2:	463c      	mov	r4, r7
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	dd24      	ble.n	800a702 <_strtol_l.isra.0+0xca>
 800a6b8:	2e00      	cmp	r6, #0
 800a6ba:	db1f      	blt.n	800a6fc <_strtol_l.isra.0+0xc4>
 800a6bc:	45a9      	cmp	r9, r5
 800a6be:	d31d      	bcc.n	800a6fc <_strtol_l.isra.0+0xc4>
 800a6c0:	d101      	bne.n	800a6c6 <_strtol_l.isra.0+0x8e>
 800a6c2:	45a2      	cmp	sl, r4
 800a6c4:	db1a      	blt.n	800a6fc <_strtol_l.isra.0+0xc4>
 800a6c6:	fb05 4503 	mla	r5, r5, r3, r4
 800a6ca:	2601      	movs	r6, #1
 800a6cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a6d0:	e7eb      	b.n	800a6aa <_strtol_l.isra.0+0x72>
 800a6d2:	2c2b      	cmp	r4, #43	; 0x2b
 800a6d4:	bf08      	it	eq
 800a6d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a6da:	46a8      	mov	r8, r5
 800a6dc:	bf08      	it	eq
 800a6de:	f106 0e02 	addeq.w	lr, r6, #2
 800a6e2:	e7c7      	b.n	800a674 <_strtol_l.isra.0+0x3c>
 800a6e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a6e8:	2f19      	cmp	r7, #25
 800a6ea:	d801      	bhi.n	800a6f0 <_strtol_l.isra.0+0xb8>
 800a6ec:	3c37      	subs	r4, #55	; 0x37
 800a6ee:	e7e1      	b.n	800a6b4 <_strtol_l.isra.0+0x7c>
 800a6f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a6f4:	2f19      	cmp	r7, #25
 800a6f6:	d804      	bhi.n	800a702 <_strtol_l.isra.0+0xca>
 800a6f8:	3c57      	subs	r4, #87	; 0x57
 800a6fa:	e7db      	b.n	800a6b4 <_strtol_l.isra.0+0x7c>
 800a6fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a700:	e7e4      	b.n	800a6cc <_strtol_l.isra.0+0x94>
 800a702:	2e00      	cmp	r6, #0
 800a704:	da05      	bge.n	800a712 <_strtol_l.isra.0+0xda>
 800a706:	2322      	movs	r3, #34	; 0x22
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	4665      	mov	r5, ip
 800a70c:	b942      	cbnz	r2, 800a720 <_strtol_l.isra.0+0xe8>
 800a70e:	4628      	mov	r0, r5
 800a710:	e79d      	b.n	800a64e <_strtol_l.isra.0+0x16>
 800a712:	f1b8 0f00 	cmp.w	r8, #0
 800a716:	d000      	beq.n	800a71a <_strtol_l.isra.0+0xe2>
 800a718:	426d      	negs	r5, r5
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d0f7      	beq.n	800a70e <_strtol_l.isra.0+0xd6>
 800a71e:	b10e      	cbz	r6, 800a724 <_strtol_l.isra.0+0xec>
 800a720:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a724:	6011      	str	r1, [r2, #0]
 800a726:	e7f2      	b.n	800a70e <_strtol_l.isra.0+0xd6>
 800a728:	2430      	movs	r4, #48	; 0x30
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1b3      	bne.n	800a696 <_strtol_l.isra.0+0x5e>
 800a72e:	2308      	movs	r3, #8
 800a730:	e7b1      	b.n	800a696 <_strtol_l.isra.0+0x5e>
 800a732:	2c30      	cmp	r4, #48	; 0x30
 800a734:	d0a4      	beq.n	800a680 <_strtol_l.isra.0+0x48>
 800a736:	230a      	movs	r3, #10
 800a738:	e7ad      	b.n	800a696 <_strtol_l.isra.0+0x5e>
 800a73a:	bf00      	nop
 800a73c:	0800d559 	.word	0x0800d559

0800a740 <_strtol_r>:
 800a740:	f7ff bf7a 	b.w	800a638 <_strtol_l.isra.0>

0800a744 <quorem>:
 800a744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	6903      	ldr	r3, [r0, #16]
 800a74a:	690c      	ldr	r4, [r1, #16]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	4607      	mov	r7, r0
 800a750:	f2c0 8081 	blt.w	800a856 <quorem+0x112>
 800a754:	3c01      	subs	r4, #1
 800a756:	f101 0814 	add.w	r8, r1, #20
 800a75a:	f100 0514 	add.w	r5, r0, #20
 800a75e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a76c:	3301      	adds	r3, #1
 800a76e:	429a      	cmp	r2, r3
 800a770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a778:	fbb2 f6f3 	udiv	r6, r2, r3
 800a77c:	d331      	bcc.n	800a7e2 <quorem+0x9e>
 800a77e:	f04f 0e00 	mov.w	lr, #0
 800a782:	4640      	mov	r0, r8
 800a784:	46ac      	mov	ip, r5
 800a786:	46f2      	mov	sl, lr
 800a788:	f850 2b04 	ldr.w	r2, [r0], #4
 800a78c:	b293      	uxth	r3, r2
 800a78e:	fb06 e303 	mla	r3, r6, r3, lr
 800a792:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a796:	b29b      	uxth	r3, r3
 800a798:	ebaa 0303 	sub.w	r3, sl, r3
 800a79c:	0c12      	lsrs	r2, r2, #16
 800a79e:	f8dc a000 	ldr.w	sl, [ip]
 800a7a2:	fb06 e202 	mla	r2, r6, r2, lr
 800a7a6:	fa13 f38a 	uxtah	r3, r3, sl
 800a7aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7ae:	fa1f fa82 	uxth.w	sl, r2
 800a7b2:	f8dc 2000 	ldr.w	r2, [ip]
 800a7b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a7ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7c4:	4581      	cmp	r9, r0
 800a7c6:	f84c 3b04 	str.w	r3, [ip], #4
 800a7ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7ce:	d2db      	bcs.n	800a788 <quorem+0x44>
 800a7d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7d4:	b92b      	cbnz	r3, 800a7e2 <quorem+0x9e>
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	3b04      	subs	r3, #4
 800a7da:	429d      	cmp	r5, r3
 800a7dc:	461a      	mov	r2, r3
 800a7de:	d32e      	bcc.n	800a83e <quorem+0xfa>
 800a7e0:	613c      	str	r4, [r7, #16]
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	f001 fc22 	bl	800c02c <__mcmp>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	db24      	blt.n	800a836 <quorem+0xf2>
 800a7ec:	3601      	adds	r6, #1
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f04f 0c00 	mov.w	ip, #0
 800a7f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7f8:	f8d0 e000 	ldr.w	lr, [r0]
 800a7fc:	b293      	uxth	r3, r2
 800a7fe:	ebac 0303 	sub.w	r3, ip, r3
 800a802:	0c12      	lsrs	r2, r2, #16
 800a804:	fa13 f38e 	uxtah	r3, r3, lr
 800a808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a80c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a810:	b29b      	uxth	r3, r3
 800a812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a816:	45c1      	cmp	r9, r8
 800a818:	f840 3b04 	str.w	r3, [r0], #4
 800a81c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a820:	d2e8      	bcs.n	800a7f4 <quorem+0xb0>
 800a822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a82a:	b922      	cbnz	r2, 800a836 <quorem+0xf2>
 800a82c:	3b04      	subs	r3, #4
 800a82e:	429d      	cmp	r5, r3
 800a830:	461a      	mov	r2, r3
 800a832:	d30a      	bcc.n	800a84a <quorem+0x106>
 800a834:	613c      	str	r4, [r7, #16]
 800a836:	4630      	mov	r0, r6
 800a838:	b003      	add	sp, #12
 800a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83e:	6812      	ldr	r2, [r2, #0]
 800a840:	3b04      	subs	r3, #4
 800a842:	2a00      	cmp	r2, #0
 800a844:	d1cc      	bne.n	800a7e0 <quorem+0x9c>
 800a846:	3c01      	subs	r4, #1
 800a848:	e7c7      	b.n	800a7da <quorem+0x96>
 800a84a:	6812      	ldr	r2, [r2, #0]
 800a84c:	3b04      	subs	r3, #4
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d1f0      	bne.n	800a834 <quorem+0xf0>
 800a852:	3c01      	subs	r4, #1
 800a854:	e7eb      	b.n	800a82e <quorem+0xea>
 800a856:	2000      	movs	r0, #0
 800a858:	e7ee      	b.n	800a838 <quorem+0xf4>
 800a85a:	0000      	movs	r0, r0
 800a85c:	0000      	movs	r0, r0
	...

0800a860 <_dtoa_r>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	ec59 8b10 	vmov	r8, r9, d0
 800a868:	b095      	sub	sp, #84	; 0x54
 800a86a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a86c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a86e:	9107      	str	r1, [sp, #28]
 800a870:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a874:	4606      	mov	r6, r0
 800a876:	9209      	str	r2, [sp, #36]	; 0x24
 800a878:	9310      	str	r3, [sp, #64]	; 0x40
 800a87a:	b975      	cbnz	r5, 800a89a <_dtoa_r+0x3a>
 800a87c:	2010      	movs	r0, #16
 800a87e:	f001 f8e5 	bl	800ba4c <malloc>
 800a882:	4602      	mov	r2, r0
 800a884:	6270      	str	r0, [r6, #36]	; 0x24
 800a886:	b920      	cbnz	r0, 800a892 <_dtoa_r+0x32>
 800a888:	4bab      	ldr	r3, [pc, #684]	; (800ab38 <_dtoa_r+0x2d8>)
 800a88a:	21ea      	movs	r1, #234	; 0xea
 800a88c:	48ab      	ldr	r0, [pc, #684]	; (800ab3c <_dtoa_r+0x2dc>)
 800a88e:	f002 f80f 	bl	800c8b0 <__assert_func>
 800a892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a896:	6005      	str	r5, [r0, #0]
 800a898:	60c5      	str	r5, [r0, #12]
 800a89a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	b151      	cbz	r1, 800a8b6 <_dtoa_r+0x56>
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	604a      	str	r2, [r1, #4]
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	4093      	lsls	r3, r2
 800a8a8:	608b      	str	r3, [r1, #8]
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f001 f936 	bl	800bb1c <_Bfree>
 800a8b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	f1b9 0300 	subs.w	r3, r9, #0
 800a8ba:	bfbb      	ittet	lt
 800a8bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8c0:	9303      	strlt	r3, [sp, #12]
 800a8c2:	2300      	movge	r3, #0
 800a8c4:	2201      	movlt	r2, #1
 800a8c6:	bfac      	ite	ge
 800a8c8:	6023      	strge	r3, [r4, #0]
 800a8ca:	6022      	strlt	r2, [r4, #0]
 800a8cc:	4b9c      	ldr	r3, [pc, #624]	; (800ab40 <_dtoa_r+0x2e0>)
 800a8ce:	9c03      	ldr	r4, [sp, #12]
 800a8d0:	43a3      	bics	r3, r4
 800a8d2:	d11a      	bne.n	800a90a <_dtoa_r+0xaa>
 800a8d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a8e0:	ea53 0308 	orrs.w	r3, r3, r8
 800a8e4:	f000 8512 	beq.w	800b30c <_dtoa_r+0xaac>
 800a8e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8ea:	b953      	cbnz	r3, 800a902 <_dtoa_r+0xa2>
 800a8ec:	4b95      	ldr	r3, [pc, #596]	; (800ab44 <_dtoa_r+0x2e4>)
 800a8ee:	e01f      	b.n	800a930 <_dtoa_r+0xd0>
 800a8f0:	4b95      	ldr	r3, [pc, #596]	; (800ab48 <_dtoa_r+0x2e8>)
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	9800      	ldr	r0, [sp, #0]
 800a8fc:	b015      	add	sp, #84	; 0x54
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	4b90      	ldr	r3, [pc, #576]	; (800ab44 <_dtoa_r+0x2e4>)
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	3303      	adds	r3, #3
 800a908:	e7f5      	b.n	800a8f6 <_dtoa_r+0x96>
 800a90a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a90e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a916:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a91a:	d10b      	bne.n	800a934 <_dtoa_r+0xd4>
 800a91c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a91e:	2301      	movs	r3, #1
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 84ee 	beq.w	800b306 <_dtoa_r+0xaa6>
 800a92a:	4888      	ldr	r0, [pc, #544]	; (800ab4c <_dtoa_r+0x2ec>)
 800a92c:	6018      	str	r0, [r3, #0]
 800a92e:	1e43      	subs	r3, r0, #1
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	e7e2      	b.n	800a8fa <_dtoa_r+0x9a>
 800a934:	a913      	add	r1, sp, #76	; 0x4c
 800a936:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a93a:	aa12      	add	r2, sp, #72	; 0x48
 800a93c:	4630      	mov	r0, r6
 800a93e:	f001 fc95 	bl	800c26c <__d2b>
 800a942:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a946:	4605      	mov	r5, r0
 800a948:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a94a:	2900      	cmp	r1, #0
 800a94c:	d047      	beq.n	800a9de <_dtoa_r+0x17e>
 800a94e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a950:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a958:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a95c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a960:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a964:	2400      	movs	r4, #0
 800a966:	ec43 2b16 	vmov	d6, r2, r3
 800a96a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a96e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ab20 <_dtoa_r+0x2c0>
 800a972:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a976:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800ab28 <_dtoa_r+0x2c8>
 800a97a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a97e:	eeb0 7b46 	vmov.f64	d7, d6
 800a982:	ee06 1a90 	vmov	s13, r1
 800a986:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a98a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ab30 <_dtoa_r+0x2d0>
 800a98e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a992:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a996:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a99e:	ee16 ba90 	vmov	fp, s13
 800a9a2:	9411      	str	r4, [sp, #68]	; 0x44
 800a9a4:	d508      	bpl.n	800a9b8 <_dtoa_r+0x158>
 800a9a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a9aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800a9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b2:	bf18      	it	ne
 800a9b4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800a9b8:	f1bb 0f16 	cmp.w	fp, #22
 800a9bc:	d832      	bhi.n	800aa24 <_dtoa_r+0x1c4>
 800a9be:	4b64      	ldr	r3, [pc, #400]	; (800ab50 <_dtoa_r+0x2f0>)
 800a9c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9c4:	ed93 7b00 	vldr	d7, [r3]
 800a9c8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a9cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d4:	d501      	bpl.n	800a9da <_dtoa_r+0x17a>
 800a9d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e023      	b.n	800aa26 <_dtoa_r+0x1c6>
 800a9de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a9e0:	4401      	add	r1, r0
 800a9e2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	bfc3      	ittte	gt
 800a9ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9ee:	fa04 f303 	lslgt.w	r3, r4, r3
 800a9f2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a9f6:	f1c3 0320 	rsble	r3, r3, #32
 800a9fa:	bfc6      	itte	gt
 800a9fc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800aa00:	ea43 0308 	orrgt.w	r3, r3, r8
 800aa04:	fa08 f303 	lslle.w	r3, r8, r3
 800aa08:	ee07 3a90 	vmov	s15, r3
 800aa0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa10:	3901      	subs	r1, #1
 800aa12:	ed8d 7b00 	vstr	d7, [sp]
 800aa16:	9c01      	ldr	r4, [sp, #4]
 800aa18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa1c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800aa20:	2401      	movs	r4, #1
 800aa22:	e7a0      	b.n	800a966 <_dtoa_r+0x106>
 800aa24:	2301      	movs	r3, #1
 800aa26:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa28:	1a43      	subs	r3, r0, r1
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	bf45      	ittet	mi
 800aa2e:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa32:	9305      	strmi	r3, [sp, #20]
 800aa34:	2300      	movpl	r3, #0
 800aa36:	2300      	movmi	r3, #0
 800aa38:	9206      	str	r2, [sp, #24]
 800aa3a:	bf54      	ite	pl
 800aa3c:	9305      	strpl	r3, [sp, #20]
 800aa3e:	9306      	strmi	r3, [sp, #24]
 800aa40:	f1bb 0f00 	cmp.w	fp, #0
 800aa44:	db18      	blt.n	800aa78 <_dtoa_r+0x218>
 800aa46:	9b06      	ldr	r3, [sp, #24]
 800aa48:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800aa4c:	445b      	add	r3, fp
 800aa4e:	9306      	str	r3, [sp, #24]
 800aa50:	2300      	movs	r3, #0
 800aa52:	9a07      	ldr	r2, [sp, #28]
 800aa54:	2a09      	cmp	r2, #9
 800aa56:	d849      	bhi.n	800aaec <_dtoa_r+0x28c>
 800aa58:	2a05      	cmp	r2, #5
 800aa5a:	bfc4      	itt	gt
 800aa5c:	3a04      	subgt	r2, #4
 800aa5e:	9207      	strgt	r2, [sp, #28]
 800aa60:	9a07      	ldr	r2, [sp, #28]
 800aa62:	f1a2 0202 	sub.w	r2, r2, #2
 800aa66:	bfcc      	ite	gt
 800aa68:	2400      	movgt	r4, #0
 800aa6a:	2401      	movle	r4, #1
 800aa6c:	2a03      	cmp	r2, #3
 800aa6e:	d848      	bhi.n	800ab02 <_dtoa_r+0x2a2>
 800aa70:	e8df f002 	tbb	[pc, r2]
 800aa74:	3a2c2e0b 	.word	0x3a2c2e0b
 800aa78:	9b05      	ldr	r3, [sp, #20]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	eba3 030b 	sub.w	r3, r3, fp
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	920e      	str	r2, [sp, #56]	; 0x38
 800aa84:	f1cb 0300 	rsb	r3, fp, #0
 800aa88:	e7e3      	b.n	800aa52 <_dtoa_r+0x1f2>
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	9208      	str	r2, [sp, #32]
 800aa8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	dc39      	bgt.n	800ab08 <_dtoa_r+0x2a8>
 800aa94:	f04f 0a01 	mov.w	sl, #1
 800aa98:	46d1      	mov	r9, sl
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aaa0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6079      	str	r1, [r7, #4]
 800aaa6:	2004      	movs	r0, #4
 800aaa8:	f100 0c14 	add.w	ip, r0, #20
 800aaac:	4594      	cmp	ip, r2
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	d92f      	bls.n	800ab12 <_dtoa_r+0x2b2>
 800aab2:	4630      	mov	r0, r6
 800aab4:	930c      	str	r3, [sp, #48]	; 0x30
 800aab6:	f000 fff1 	bl	800ba9c <_Balloc>
 800aaba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aabc:	9000      	str	r0, [sp, #0]
 800aabe:	4602      	mov	r2, r0
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d149      	bne.n	800ab58 <_dtoa_r+0x2f8>
 800aac4:	4b23      	ldr	r3, [pc, #140]	; (800ab54 <_dtoa_r+0x2f4>)
 800aac6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aaca:	e6df      	b.n	800a88c <_dtoa_r+0x2c>
 800aacc:	2201      	movs	r2, #1
 800aace:	e7dd      	b.n	800aa8c <_dtoa_r+0x22c>
 800aad0:	2200      	movs	r2, #0
 800aad2:	9208      	str	r2, [sp, #32]
 800aad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad6:	eb0b 0a02 	add.w	sl, fp, r2
 800aada:	f10a 0901 	add.w	r9, sl, #1
 800aade:	464a      	mov	r2, r9
 800aae0:	2a01      	cmp	r2, #1
 800aae2:	bfb8      	it	lt
 800aae4:	2201      	movlt	r2, #1
 800aae6:	e7db      	b.n	800aaa0 <_dtoa_r+0x240>
 800aae8:	2201      	movs	r2, #1
 800aaea:	e7f2      	b.n	800aad2 <_dtoa_r+0x272>
 800aaec:	2401      	movs	r4, #1
 800aaee:	2200      	movs	r2, #0
 800aaf0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800aaf4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aaf8:	2100      	movs	r1, #0
 800aafa:	46d1      	mov	r9, sl
 800aafc:	2212      	movs	r2, #18
 800aafe:	9109      	str	r1, [sp, #36]	; 0x24
 800ab00:	e7ce      	b.n	800aaa0 <_dtoa_r+0x240>
 800ab02:	2201      	movs	r2, #1
 800ab04:	9208      	str	r2, [sp, #32]
 800ab06:	e7f5      	b.n	800aaf4 <_dtoa_r+0x294>
 800ab08:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ab0c:	46d1      	mov	r9, sl
 800ab0e:	4652      	mov	r2, sl
 800ab10:	e7c6      	b.n	800aaa0 <_dtoa_r+0x240>
 800ab12:	3101      	adds	r1, #1
 800ab14:	6079      	str	r1, [r7, #4]
 800ab16:	0040      	lsls	r0, r0, #1
 800ab18:	e7c6      	b.n	800aaa8 <_dtoa_r+0x248>
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
 800ab20:	636f4361 	.word	0x636f4361
 800ab24:	3fd287a7 	.word	0x3fd287a7
 800ab28:	8b60c8b3 	.word	0x8b60c8b3
 800ab2c:	3fc68a28 	.word	0x3fc68a28
 800ab30:	509f79fb 	.word	0x509f79fb
 800ab34:	3fd34413 	.word	0x3fd34413
 800ab38:	0800d666 	.word	0x0800d666
 800ab3c:	0800d67d 	.word	0x0800d67d
 800ab40:	7ff00000 	.word	0x7ff00000
 800ab44:	0800d662 	.word	0x0800d662
 800ab48:	0800d659 	.word	0x0800d659
 800ab4c:	0800d4dd 	.word	0x0800d4dd
 800ab50:	0800d7f8 	.word	0x0800d7f8
 800ab54:	0800d6dc 	.word	0x0800d6dc
 800ab58:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ab5a:	9900      	ldr	r1, [sp, #0]
 800ab5c:	6011      	str	r1, [r2, #0]
 800ab5e:	f1b9 0f0e 	cmp.w	r9, #14
 800ab62:	d872      	bhi.n	800ac4a <_dtoa_r+0x3ea>
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	d070      	beq.n	800ac4a <_dtoa_r+0x3ea>
 800ab68:	f1bb 0f00 	cmp.w	fp, #0
 800ab6c:	f340 80a6 	ble.w	800acbc <_dtoa_r+0x45c>
 800ab70:	49ca      	ldr	r1, [pc, #808]	; (800ae9c <_dtoa_r+0x63c>)
 800ab72:	f00b 020f 	and.w	r2, fp, #15
 800ab76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ab7a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab7e:	ed92 7b00 	vldr	d7, [r2]
 800ab82:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ab86:	f000 808d 	beq.w	800aca4 <_dtoa_r+0x444>
 800ab8a:	4ac5      	ldr	r2, [pc, #788]	; (800aea0 <_dtoa_r+0x640>)
 800ab8c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ab90:	ed92 6b08 	vldr	d6, [r2, #32]
 800ab94:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ab98:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab9c:	f001 010f 	and.w	r1, r1, #15
 800aba0:	2203      	movs	r2, #3
 800aba2:	48bf      	ldr	r0, [pc, #764]	; (800aea0 <_dtoa_r+0x640>)
 800aba4:	2900      	cmp	r1, #0
 800aba6:	d17f      	bne.n	800aca8 <_dtoa_r+0x448>
 800aba8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800abac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800abb6:	2900      	cmp	r1, #0
 800abb8:	f000 80b2 	beq.w	800ad20 <_dtoa_r+0x4c0>
 800abbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800abc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	f140 80a8 	bpl.w	800ad20 <_dtoa_r+0x4c0>
 800abd0:	f1b9 0f00 	cmp.w	r9, #0
 800abd4:	f000 80a4 	beq.w	800ad20 <_dtoa_r+0x4c0>
 800abd8:	f1ba 0f00 	cmp.w	sl, #0
 800abdc:	dd31      	ble.n	800ac42 <_dtoa_r+0x3e2>
 800abde:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800abe2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abe6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abea:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800abee:	3201      	adds	r2, #1
 800abf0:	4650      	mov	r0, sl
 800abf2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800abf6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800abfa:	ee07 2a90 	vmov	s15, r2
 800abfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac02:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ac06:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ac0a:	9c03      	ldr	r4, [sp, #12]
 800ac0c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ac10:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f040 8086 	bne.w	800ad26 <_dtoa_r+0x4c6>
 800ac1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ac1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac22:	ec42 1b17 	vmov	d7, r1, r2
 800ac26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2e:	f300 8272 	bgt.w	800b116 <_dtoa_r+0x8b6>
 800ac32:	eeb1 7b47 	vneg.f64	d7, d7
 800ac36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3e:	f100 8267 	bmi.w	800b110 <_dtoa_r+0x8b0>
 800ac42:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ac46:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ac4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	f2c0 8129 	blt.w	800aea4 <_dtoa_r+0x644>
 800ac52:	f1bb 0f0e 	cmp.w	fp, #14
 800ac56:	f300 8125 	bgt.w	800aea4 <_dtoa_r+0x644>
 800ac5a:	4b90      	ldr	r3, [pc, #576]	; (800ae9c <_dtoa_r+0x63c>)
 800ac5c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac60:	ed93 6b00 	vldr	d6, [r3]
 800ac64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f280 80c3 	bge.w	800adf2 <_dtoa_r+0x592>
 800ac6c:	f1b9 0f00 	cmp.w	r9, #0
 800ac70:	f300 80bf 	bgt.w	800adf2 <_dtoa_r+0x592>
 800ac74:	f040 824c 	bne.w	800b110 <_dtoa_r+0x8b0>
 800ac78:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ac7c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8c:	464c      	mov	r4, r9
 800ac8e:	464f      	mov	r7, r9
 800ac90:	f280 8222 	bge.w	800b0d8 <_dtoa_r+0x878>
 800ac94:	f8dd 8000 	ldr.w	r8, [sp]
 800ac98:	2331      	movs	r3, #49	; 0x31
 800ac9a:	f808 3b01 	strb.w	r3, [r8], #1
 800ac9e:	f10b 0b01 	add.w	fp, fp, #1
 800aca2:	e21e      	b.n	800b0e2 <_dtoa_r+0x882>
 800aca4:	2202      	movs	r2, #2
 800aca6:	e77c      	b.n	800aba2 <_dtoa_r+0x342>
 800aca8:	07cc      	lsls	r4, r1, #31
 800acaa:	d504      	bpl.n	800acb6 <_dtoa_r+0x456>
 800acac:	ed90 6b00 	vldr	d6, [r0]
 800acb0:	3201      	adds	r2, #1
 800acb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acb6:	1049      	asrs	r1, r1, #1
 800acb8:	3008      	adds	r0, #8
 800acba:	e773      	b.n	800aba4 <_dtoa_r+0x344>
 800acbc:	d02e      	beq.n	800ad1c <_dtoa_r+0x4bc>
 800acbe:	f1cb 0100 	rsb	r1, fp, #0
 800acc2:	4a76      	ldr	r2, [pc, #472]	; (800ae9c <_dtoa_r+0x63c>)
 800acc4:	f001 000f 	and.w	r0, r1, #15
 800acc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800accc:	ed92 7b00 	vldr	d7, [r2]
 800acd0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800acd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800acd8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800acdc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800ace0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ace4:	486e      	ldr	r0, [pc, #440]	; (800aea0 <_dtoa_r+0x640>)
 800ace6:	1109      	asrs	r1, r1, #4
 800ace8:	2400      	movs	r4, #0
 800acea:	2202      	movs	r2, #2
 800acec:	b939      	cbnz	r1, 800acfe <_dtoa_r+0x49e>
 800acee:	2c00      	cmp	r4, #0
 800acf0:	f43f af60 	beq.w	800abb4 <_dtoa_r+0x354>
 800acf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acfc:	e75a      	b.n	800abb4 <_dtoa_r+0x354>
 800acfe:	07cf      	lsls	r7, r1, #31
 800ad00:	d509      	bpl.n	800ad16 <_dtoa_r+0x4b6>
 800ad02:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ad06:	ed90 7b00 	vldr	d7, [r0]
 800ad0a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ad0e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ad12:	3201      	adds	r2, #1
 800ad14:	2401      	movs	r4, #1
 800ad16:	1049      	asrs	r1, r1, #1
 800ad18:	3008      	adds	r0, #8
 800ad1a:	e7e7      	b.n	800acec <_dtoa_r+0x48c>
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	e749      	b.n	800abb4 <_dtoa_r+0x354>
 800ad20:	465f      	mov	r7, fp
 800ad22:	4648      	mov	r0, r9
 800ad24:	e765      	b.n	800abf2 <_dtoa_r+0x392>
 800ad26:	ec42 1b17 	vmov	d7, r1, r2
 800ad2a:	4a5c      	ldr	r2, [pc, #368]	; (800ae9c <_dtoa_r+0x63c>)
 800ad2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ad30:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ad34:	9a00      	ldr	r2, [sp, #0]
 800ad36:	1814      	adds	r4, r2, r0
 800ad38:	9a08      	ldr	r2, [sp, #32]
 800ad3a:	b352      	cbz	r2, 800ad92 <_dtoa_r+0x532>
 800ad3c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ad40:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ad44:	f8dd 8000 	ldr.w	r8, [sp]
 800ad48:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ad4c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ad50:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ad54:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ad58:	ee14 2a90 	vmov	r2, s9
 800ad5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad60:	3230      	adds	r2, #48	; 0x30
 800ad62:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6e:	f808 2b01 	strb.w	r2, [r8], #1
 800ad72:	d439      	bmi.n	800ade8 <_dtoa_r+0x588>
 800ad74:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ad78:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ad7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad80:	d472      	bmi.n	800ae68 <_dtoa_r+0x608>
 800ad82:	45a0      	cmp	r8, r4
 800ad84:	f43f af5d 	beq.w	800ac42 <_dtoa_r+0x3e2>
 800ad88:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ad8c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad90:	e7e0      	b.n	800ad54 <_dtoa_r+0x4f4>
 800ad92:	f8dd 8000 	ldr.w	r8, [sp]
 800ad96:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ada0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ada4:	ee14 2a90 	vmov	r2, s9
 800ada8:	3230      	adds	r2, #48	; 0x30
 800adaa:	f808 2b01 	strb.w	r2, [r8], #1
 800adae:	45a0      	cmp	r8, r4
 800adb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800adb4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800adb8:	d118      	bne.n	800adec <_dtoa_r+0x58c>
 800adba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800adbe:	ee37 4b05 	vadd.f64	d4, d7, d5
 800adc2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adca:	dc4d      	bgt.n	800ae68 <_dtoa_r+0x608>
 800adcc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800add0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800add4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add8:	f57f af33 	bpl.w	800ac42 <_dtoa_r+0x3e2>
 800addc:	4688      	mov	r8, r1
 800adde:	3901      	subs	r1, #1
 800ade0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ade4:	2b30      	cmp	r3, #48	; 0x30
 800ade6:	d0f9      	beq.n	800addc <_dtoa_r+0x57c>
 800ade8:	46bb      	mov	fp, r7
 800adea:	e02a      	b.n	800ae42 <_dtoa_r+0x5e2>
 800adec:	ee26 6b03 	vmul.f64	d6, d6, d3
 800adf0:	e7d6      	b.n	800ada0 <_dtoa_r+0x540>
 800adf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adf6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800adfa:	f8dd 8000 	ldr.w	r8, [sp]
 800adfe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ae02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ae06:	ee15 3a10 	vmov	r3, s10
 800ae0a:	3330      	adds	r3, #48	; 0x30
 800ae0c:	f808 3b01 	strb.w	r3, [r8], #1
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	eba8 0303 	sub.w	r3, r8, r3
 800ae16:	4599      	cmp	r9, r3
 800ae18:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ae1c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ae20:	d133      	bne.n	800ae8a <_dtoa_r+0x62a>
 800ae22:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ae26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ae2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae2e:	dc1a      	bgt.n	800ae66 <_dtoa_r+0x606>
 800ae30:	eeb4 7b46 	vcmp.f64	d7, d6
 800ae34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae38:	d103      	bne.n	800ae42 <_dtoa_r+0x5e2>
 800ae3a:	ee15 3a10 	vmov	r3, s10
 800ae3e:	07d9      	lsls	r1, r3, #31
 800ae40:	d411      	bmi.n	800ae66 <_dtoa_r+0x606>
 800ae42:	4629      	mov	r1, r5
 800ae44:	4630      	mov	r0, r6
 800ae46:	f000 fe69 	bl	800bb1c <_Bfree>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae4e:	f888 3000 	strb.w	r3, [r8]
 800ae52:	f10b 0301 	add.w	r3, fp, #1
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f43f ad4d 	beq.w	800a8fa <_dtoa_r+0x9a>
 800ae60:	f8c3 8000 	str.w	r8, [r3]
 800ae64:	e549      	b.n	800a8fa <_dtoa_r+0x9a>
 800ae66:	465f      	mov	r7, fp
 800ae68:	4643      	mov	r3, r8
 800ae6a:	4698      	mov	r8, r3
 800ae6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae70:	2a39      	cmp	r2, #57	; 0x39
 800ae72:	d106      	bne.n	800ae82 <_dtoa_r+0x622>
 800ae74:	9a00      	ldr	r2, [sp, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d1f7      	bne.n	800ae6a <_dtoa_r+0x60a>
 800ae7a:	9900      	ldr	r1, [sp, #0]
 800ae7c:	2230      	movs	r2, #48	; 0x30
 800ae7e:	3701      	adds	r7, #1
 800ae80:	700a      	strb	r2, [r1, #0]
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	3201      	adds	r2, #1
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e7ae      	b.n	800ade8 <_dtoa_r+0x588>
 800ae8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae96:	d1b2      	bne.n	800adfe <_dtoa_r+0x59e>
 800ae98:	e7d3      	b.n	800ae42 <_dtoa_r+0x5e2>
 800ae9a:	bf00      	nop
 800ae9c:	0800d7f8 	.word	0x0800d7f8
 800aea0:	0800d7d0 	.word	0x0800d7d0
 800aea4:	9908      	ldr	r1, [sp, #32]
 800aea6:	2900      	cmp	r1, #0
 800aea8:	f000 80d1 	beq.w	800b04e <_dtoa_r+0x7ee>
 800aeac:	9907      	ldr	r1, [sp, #28]
 800aeae:	2901      	cmp	r1, #1
 800aeb0:	f300 80b4 	bgt.w	800b01c <_dtoa_r+0x7bc>
 800aeb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	f000 80ac 	beq.w	800b014 <_dtoa_r+0x7b4>
 800aebc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aec0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800aec4:	461c      	mov	r4, r3
 800aec6:	930a      	str	r3, [sp, #40]	; 0x28
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	4413      	add	r3, r2
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	2101      	movs	r1, #1
 800aed2:	4413      	add	r3, r2
 800aed4:	4630      	mov	r0, r6
 800aed6:	9306      	str	r3, [sp, #24]
 800aed8:	f000 ff26 	bl	800bd28 <__i2b>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	4607      	mov	r7, r0
 800aee0:	f1b8 0f00 	cmp.w	r8, #0
 800aee4:	dd0d      	ble.n	800af02 <_dtoa_r+0x6a2>
 800aee6:	9a06      	ldr	r2, [sp, #24]
 800aee8:	2a00      	cmp	r2, #0
 800aeea:	dd0a      	ble.n	800af02 <_dtoa_r+0x6a2>
 800aeec:	4542      	cmp	r2, r8
 800aeee:	9905      	ldr	r1, [sp, #20]
 800aef0:	bfa8      	it	ge
 800aef2:	4642      	movge	r2, r8
 800aef4:	1a89      	subs	r1, r1, r2
 800aef6:	9105      	str	r1, [sp, #20]
 800aef8:	9906      	ldr	r1, [sp, #24]
 800aefa:	eba8 0802 	sub.w	r8, r8, r2
 800aefe:	1a8a      	subs	r2, r1, r2
 800af00:	9206      	str	r2, [sp, #24]
 800af02:	b303      	cbz	r3, 800af46 <_dtoa_r+0x6e6>
 800af04:	9a08      	ldr	r2, [sp, #32]
 800af06:	2a00      	cmp	r2, #0
 800af08:	f000 80a6 	beq.w	800b058 <_dtoa_r+0x7f8>
 800af0c:	2c00      	cmp	r4, #0
 800af0e:	dd13      	ble.n	800af38 <_dtoa_r+0x6d8>
 800af10:	4639      	mov	r1, r7
 800af12:	4622      	mov	r2, r4
 800af14:	4630      	mov	r0, r6
 800af16:	930c      	str	r3, [sp, #48]	; 0x30
 800af18:	f000 ffc2 	bl	800bea0 <__pow5mult>
 800af1c:	462a      	mov	r2, r5
 800af1e:	4601      	mov	r1, r0
 800af20:	4607      	mov	r7, r0
 800af22:	4630      	mov	r0, r6
 800af24:	f000 ff16 	bl	800bd54 <__multiply>
 800af28:	4629      	mov	r1, r5
 800af2a:	900a      	str	r0, [sp, #40]	; 0x28
 800af2c:	4630      	mov	r0, r6
 800af2e:	f000 fdf5 	bl	800bb1c <_Bfree>
 800af32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af36:	4615      	mov	r5, r2
 800af38:	1b1a      	subs	r2, r3, r4
 800af3a:	d004      	beq.n	800af46 <_dtoa_r+0x6e6>
 800af3c:	4629      	mov	r1, r5
 800af3e:	4630      	mov	r0, r6
 800af40:	f000 ffae 	bl	800bea0 <__pow5mult>
 800af44:	4605      	mov	r5, r0
 800af46:	2101      	movs	r1, #1
 800af48:	4630      	mov	r0, r6
 800af4a:	f000 feed 	bl	800bd28 <__i2b>
 800af4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af50:	2b00      	cmp	r3, #0
 800af52:	4604      	mov	r4, r0
 800af54:	f340 8082 	ble.w	800b05c <_dtoa_r+0x7fc>
 800af58:	461a      	mov	r2, r3
 800af5a:	4601      	mov	r1, r0
 800af5c:	4630      	mov	r0, r6
 800af5e:	f000 ff9f 	bl	800bea0 <__pow5mult>
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	2b01      	cmp	r3, #1
 800af66:	4604      	mov	r4, r0
 800af68:	dd7b      	ble.n	800b062 <_dtoa_r+0x802>
 800af6a:	2300      	movs	r3, #0
 800af6c:	930a      	str	r3, [sp, #40]	; 0x28
 800af6e:	6922      	ldr	r2, [r4, #16]
 800af70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af74:	6910      	ldr	r0, [r2, #16]
 800af76:	f000 fe87 	bl	800bc88 <__hi0bits>
 800af7a:	f1c0 0020 	rsb	r0, r0, #32
 800af7e:	9b06      	ldr	r3, [sp, #24]
 800af80:	4418      	add	r0, r3
 800af82:	f010 001f 	ands.w	r0, r0, #31
 800af86:	f000 808d 	beq.w	800b0a4 <_dtoa_r+0x844>
 800af8a:	f1c0 0220 	rsb	r2, r0, #32
 800af8e:	2a04      	cmp	r2, #4
 800af90:	f340 8086 	ble.w	800b0a0 <_dtoa_r+0x840>
 800af94:	f1c0 001c 	rsb	r0, r0, #28
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	4403      	add	r3, r0
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	9b06      	ldr	r3, [sp, #24]
 800afa0:	4403      	add	r3, r0
 800afa2:	4480      	add	r8, r0
 800afa4:	9306      	str	r3, [sp, #24]
 800afa6:	9b05      	ldr	r3, [sp, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dd05      	ble.n	800afb8 <_dtoa_r+0x758>
 800afac:	4629      	mov	r1, r5
 800afae:	461a      	mov	r2, r3
 800afb0:	4630      	mov	r0, r6
 800afb2:	f000 ffcf 	bl	800bf54 <__lshift>
 800afb6:	4605      	mov	r5, r0
 800afb8:	9b06      	ldr	r3, [sp, #24]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dd05      	ble.n	800afca <_dtoa_r+0x76a>
 800afbe:	4621      	mov	r1, r4
 800afc0:	461a      	mov	r2, r3
 800afc2:	4630      	mov	r0, r6
 800afc4:	f000 ffc6 	bl	800bf54 <__lshift>
 800afc8:	4604      	mov	r4, r0
 800afca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d06b      	beq.n	800b0a8 <_dtoa_r+0x848>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f001 f82a 	bl	800c02c <__mcmp>
 800afd8:	2800      	cmp	r0, #0
 800afda:	da65      	bge.n	800b0a8 <_dtoa_r+0x848>
 800afdc:	2300      	movs	r3, #0
 800afde:	4629      	mov	r1, r5
 800afe0:	220a      	movs	r2, #10
 800afe2:	4630      	mov	r0, r6
 800afe4:	f000 fdbc 	bl	800bb60 <__multadd>
 800afe8:	9b08      	ldr	r3, [sp, #32]
 800afea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afee:	4605      	mov	r5, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 8192 	beq.w	800b31a <_dtoa_r+0xaba>
 800aff6:	4639      	mov	r1, r7
 800aff8:	2300      	movs	r3, #0
 800affa:	220a      	movs	r2, #10
 800affc:	4630      	mov	r0, r6
 800affe:	f000 fdaf 	bl	800bb60 <__multadd>
 800b002:	f1ba 0f00 	cmp.w	sl, #0
 800b006:	4607      	mov	r7, r0
 800b008:	f300 808e 	bgt.w	800b128 <_dtoa_r+0x8c8>
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	dc51      	bgt.n	800b0b6 <_dtoa_r+0x856>
 800b012:	e089      	b.n	800b128 <_dtoa_r+0x8c8>
 800b014:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b016:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b01a:	e751      	b.n	800aec0 <_dtoa_r+0x660>
 800b01c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800b020:	42a3      	cmp	r3, r4
 800b022:	bfbf      	itttt	lt
 800b024:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b026:	1ae3      	sublt	r3, r4, r3
 800b028:	18d2      	addlt	r2, r2, r3
 800b02a:	4613      	movlt	r3, r2
 800b02c:	bfb7      	itett	lt
 800b02e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b030:	1b1c      	subge	r4, r3, r4
 800b032:	4623      	movlt	r3, r4
 800b034:	2400      	movlt	r4, #0
 800b036:	f1b9 0f00 	cmp.w	r9, #0
 800b03a:	bfb5      	itete	lt
 800b03c:	9a05      	ldrlt	r2, [sp, #20]
 800b03e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800b042:	eba2 0809 	sublt.w	r8, r2, r9
 800b046:	464a      	movge	r2, r9
 800b048:	bfb8      	it	lt
 800b04a:	2200      	movlt	r2, #0
 800b04c:	e73b      	b.n	800aec6 <_dtoa_r+0x666>
 800b04e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b052:	9f08      	ldr	r7, [sp, #32]
 800b054:	461c      	mov	r4, r3
 800b056:	e743      	b.n	800aee0 <_dtoa_r+0x680>
 800b058:	461a      	mov	r2, r3
 800b05a:	e76f      	b.n	800af3c <_dtoa_r+0x6dc>
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	dc18      	bgt.n	800b094 <_dtoa_r+0x834>
 800b062:	9b02      	ldr	r3, [sp, #8]
 800b064:	b9b3      	cbnz	r3, 800b094 <_dtoa_r+0x834>
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b06c:	b9a2      	cbnz	r2, 800b098 <_dtoa_r+0x838>
 800b06e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b072:	0d12      	lsrs	r2, r2, #20
 800b074:	0512      	lsls	r2, r2, #20
 800b076:	b18a      	cbz	r2, 800b09c <_dtoa_r+0x83c>
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	3301      	adds	r3, #1
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	9b06      	ldr	r3, [sp, #24]
 800b080:	3301      	adds	r3, #1
 800b082:	9306      	str	r3, [sp, #24]
 800b084:	2301      	movs	r3, #1
 800b086:	930a      	str	r3, [sp, #40]	; 0x28
 800b088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f47f af6f 	bne.w	800af6e <_dtoa_r+0x70e>
 800b090:	2001      	movs	r0, #1
 800b092:	e774      	b.n	800af7e <_dtoa_r+0x71e>
 800b094:	2300      	movs	r3, #0
 800b096:	e7f6      	b.n	800b086 <_dtoa_r+0x826>
 800b098:	9b02      	ldr	r3, [sp, #8]
 800b09a:	e7f4      	b.n	800b086 <_dtoa_r+0x826>
 800b09c:	920a      	str	r2, [sp, #40]	; 0x28
 800b09e:	e7f3      	b.n	800b088 <_dtoa_r+0x828>
 800b0a0:	d081      	beq.n	800afa6 <_dtoa_r+0x746>
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	301c      	adds	r0, #28
 800b0a6:	e777      	b.n	800af98 <_dtoa_r+0x738>
 800b0a8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ac:	dc37      	bgt.n	800b11e <_dtoa_r+0x8be>
 800b0ae:	9b07      	ldr	r3, [sp, #28]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	dd34      	ble.n	800b11e <_dtoa_r+0x8be>
 800b0b4:	46ca      	mov	sl, r9
 800b0b6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ba:	d10d      	bne.n	800b0d8 <_dtoa_r+0x878>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	4653      	mov	r3, sl
 800b0c0:	2205      	movs	r2, #5
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 fd4c 	bl	800bb60 <__multadd>
 800b0c8:	4601      	mov	r1, r0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 ffad 	bl	800c02c <__mcmp>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f73f adde 	bgt.w	800ac94 <_dtoa_r+0x434>
 800b0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0da:	f8dd 8000 	ldr.w	r8, [sp]
 800b0de:	ea6f 0b03 	mvn.w	fp, r3
 800b0e2:	f04f 0900 	mov.w	r9, #0
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f000 fd17 	bl	800bb1c <_Bfree>
 800b0ee:	2f00      	cmp	r7, #0
 800b0f0:	f43f aea7 	beq.w	800ae42 <_dtoa_r+0x5e2>
 800b0f4:	f1b9 0f00 	cmp.w	r9, #0
 800b0f8:	d005      	beq.n	800b106 <_dtoa_r+0x8a6>
 800b0fa:	45b9      	cmp	r9, r7
 800b0fc:	d003      	beq.n	800b106 <_dtoa_r+0x8a6>
 800b0fe:	4649      	mov	r1, r9
 800b100:	4630      	mov	r0, r6
 800b102:	f000 fd0b 	bl	800bb1c <_Bfree>
 800b106:	4639      	mov	r1, r7
 800b108:	4630      	mov	r0, r6
 800b10a:	f000 fd07 	bl	800bb1c <_Bfree>
 800b10e:	e698      	b.n	800ae42 <_dtoa_r+0x5e2>
 800b110:	2400      	movs	r4, #0
 800b112:	4627      	mov	r7, r4
 800b114:	e7e0      	b.n	800b0d8 <_dtoa_r+0x878>
 800b116:	46bb      	mov	fp, r7
 800b118:	4604      	mov	r4, r0
 800b11a:	4607      	mov	r7, r0
 800b11c:	e5ba      	b.n	800ac94 <_dtoa_r+0x434>
 800b11e:	9b08      	ldr	r3, [sp, #32]
 800b120:	46ca      	mov	sl, r9
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 8100 	beq.w	800b328 <_dtoa_r+0xac8>
 800b128:	f1b8 0f00 	cmp.w	r8, #0
 800b12c:	dd05      	ble.n	800b13a <_dtoa_r+0x8da>
 800b12e:	4639      	mov	r1, r7
 800b130:	4642      	mov	r2, r8
 800b132:	4630      	mov	r0, r6
 800b134:	f000 ff0e 	bl	800bf54 <__lshift>
 800b138:	4607      	mov	r7, r0
 800b13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d05d      	beq.n	800b1fc <_dtoa_r+0x99c>
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4630      	mov	r0, r6
 800b144:	f000 fcaa 	bl	800ba9c <_Balloc>
 800b148:	4680      	mov	r8, r0
 800b14a:	b928      	cbnz	r0, 800b158 <_dtoa_r+0x8f8>
 800b14c:	4b82      	ldr	r3, [pc, #520]	; (800b358 <_dtoa_r+0xaf8>)
 800b14e:	4602      	mov	r2, r0
 800b150:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b154:	f7ff bb9a 	b.w	800a88c <_dtoa_r+0x2c>
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	3202      	adds	r2, #2
 800b15c:	0092      	lsls	r2, r2, #2
 800b15e:	f107 010c 	add.w	r1, r7, #12
 800b162:	300c      	adds	r0, #12
 800b164:	f000 fc8c 	bl	800ba80 <memcpy>
 800b168:	2201      	movs	r2, #1
 800b16a:	4641      	mov	r1, r8
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 fef1 	bl	800bf54 <__lshift>
 800b172:	9b00      	ldr	r3, [sp, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	9305      	str	r3, [sp, #20]
 800b178:	9b00      	ldr	r3, [sp, #0]
 800b17a:	4453      	add	r3, sl
 800b17c:	9309      	str	r3, [sp, #36]	; 0x24
 800b17e:	9b02      	ldr	r3, [sp, #8]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	46b9      	mov	r9, r7
 800b186:	9308      	str	r3, [sp, #32]
 800b188:	4607      	mov	r7, r0
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	4621      	mov	r1, r4
 800b18e:	3b01      	subs	r3, #1
 800b190:	4628      	mov	r0, r5
 800b192:	9302      	str	r3, [sp, #8]
 800b194:	f7ff fad6 	bl	800a744 <quorem>
 800b198:	4603      	mov	r3, r0
 800b19a:	3330      	adds	r3, #48	; 0x30
 800b19c:	9006      	str	r0, [sp, #24]
 800b19e:	4649      	mov	r1, r9
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b1a4:	f000 ff42 	bl	800c02c <__mcmp>
 800b1a8:	463a      	mov	r2, r7
 800b1aa:	4682      	mov	sl, r0
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f000 ff58 	bl	800c064 <__mdiff>
 800b1b4:	68c2      	ldr	r2, [r0, #12]
 800b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	bb0a      	cbnz	r2, 800b200 <_dtoa_r+0x9a0>
 800b1bc:	4601      	mov	r1, r0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f000 ff34 	bl	800c02c <__mcmp>
 800b1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	4641      	mov	r1, r8
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	920e      	str	r2, [sp, #56]	; 0x38
 800b1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b1d0:	f000 fca4 	bl	800bb1c <_Bfree>
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b1dc:	ea43 0102 	orr.w	r1, r3, r2
 800b1e0:	9b08      	ldr	r3, [sp, #32]
 800b1e2:	430b      	orrs	r3, r1
 800b1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e6:	d10d      	bne.n	800b204 <_dtoa_r+0x9a4>
 800b1e8:	2b39      	cmp	r3, #57	; 0x39
 800b1ea:	d029      	beq.n	800b240 <_dtoa_r+0x9e0>
 800b1ec:	f1ba 0f00 	cmp.w	sl, #0
 800b1f0:	dd01      	ble.n	800b1f6 <_dtoa_r+0x996>
 800b1f2:	9b06      	ldr	r3, [sp, #24]
 800b1f4:	3331      	adds	r3, #49	; 0x31
 800b1f6:	9a02      	ldr	r2, [sp, #8]
 800b1f8:	7013      	strb	r3, [r2, #0]
 800b1fa:	e774      	b.n	800b0e6 <_dtoa_r+0x886>
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	e7b8      	b.n	800b172 <_dtoa_r+0x912>
 800b200:	2201      	movs	r2, #1
 800b202:	e7e1      	b.n	800b1c8 <_dtoa_r+0x968>
 800b204:	f1ba 0f00 	cmp.w	sl, #0
 800b208:	db06      	blt.n	800b218 <_dtoa_r+0x9b8>
 800b20a:	9907      	ldr	r1, [sp, #28]
 800b20c:	ea41 0a0a 	orr.w	sl, r1, sl
 800b210:	9908      	ldr	r1, [sp, #32]
 800b212:	ea5a 0101 	orrs.w	r1, sl, r1
 800b216:	d120      	bne.n	800b25a <_dtoa_r+0x9fa>
 800b218:	2a00      	cmp	r2, #0
 800b21a:	ddec      	ble.n	800b1f6 <_dtoa_r+0x996>
 800b21c:	4629      	mov	r1, r5
 800b21e:	2201      	movs	r2, #1
 800b220:	4630      	mov	r0, r6
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	f000 fe96 	bl	800bf54 <__lshift>
 800b228:	4621      	mov	r1, r4
 800b22a:	4605      	mov	r5, r0
 800b22c:	f000 fefe 	bl	800c02c <__mcmp>
 800b230:	2800      	cmp	r0, #0
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	dc02      	bgt.n	800b23c <_dtoa_r+0x9dc>
 800b236:	d1de      	bne.n	800b1f6 <_dtoa_r+0x996>
 800b238:	07da      	lsls	r2, r3, #31
 800b23a:	d5dc      	bpl.n	800b1f6 <_dtoa_r+0x996>
 800b23c:	2b39      	cmp	r3, #57	; 0x39
 800b23e:	d1d8      	bne.n	800b1f2 <_dtoa_r+0x992>
 800b240:	9a02      	ldr	r2, [sp, #8]
 800b242:	2339      	movs	r3, #57	; 0x39
 800b244:	7013      	strb	r3, [r2, #0]
 800b246:	4643      	mov	r3, r8
 800b248:	4698      	mov	r8, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b250:	2a39      	cmp	r2, #57	; 0x39
 800b252:	d051      	beq.n	800b2f8 <_dtoa_r+0xa98>
 800b254:	3201      	adds	r2, #1
 800b256:	701a      	strb	r2, [r3, #0]
 800b258:	e745      	b.n	800b0e6 <_dtoa_r+0x886>
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	dd03      	ble.n	800b266 <_dtoa_r+0xa06>
 800b25e:	2b39      	cmp	r3, #57	; 0x39
 800b260:	d0ee      	beq.n	800b240 <_dtoa_r+0x9e0>
 800b262:	3301      	adds	r3, #1
 800b264:	e7c7      	b.n	800b1f6 <_dtoa_r+0x996>
 800b266:	9a05      	ldr	r2, [sp, #20]
 800b268:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b26a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b26e:	428a      	cmp	r2, r1
 800b270:	d02b      	beq.n	800b2ca <_dtoa_r+0xa6a>
 800b272:	4629      	mov	r1, r5
 800b274:	2300      	movs	r3, #0
 800b276:	220a      	movs	r2, #10
 800b278:	4630      	mov	r0, r6
 800b27a:	f000 fc71 	bl	800bb60 <__multadd>
 800b27e:	45b9      	cmp	r9, r7
 800b280:	4605      	mov	r5, r0
 800b282:	f04f 0300 	mov.w	r3, #0
 800b286:	f04f 020a 	mov.w	r2, #10
 800b28a:	4649      	mov	r1, r9
 800b28c:	4630      	mov	r0, r6
 800b28e:	d107      	bne.n	800b2a0 <_dtoa_r+0xa40>
 800b290:	f000 fc66 	bl	800bb60 <__multadd>
 800b294:	4681      	mov	r9, r0
 800b296:	4607      	mov	r7, r0
 800b298:	9b05      	ldr	r3, [sp, #20]
 800b29a:	3301      	adds	r3, #1
 800b29c:	9305      	str	r3, [sp, #20]
 800b29e:	e774      	b.n	800b18a <_dtoa_r+0x92a>
 800b2a0:	f000 fc5e 	bl	800bb60 <__multadd>
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	4681      	mov	r9, r0
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	220a      	movs	r2, #10
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f000 fc57 	bl	800bb60 <__multadd>
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	e7f0      	b.n	800b298 <_dtoa_r+0xa38>
 800b2b6:	f1ba 0f00 	cmp.w	sl, #0
 800b2ba:	9a00      	ldr	r2, [sp, #0]
 800b2bc:	bfcc      	ite	gt
 800b2be:	46d0      	movgt	r8, sl
 800b2c0:	f04f 0801 	movle.w	r8, #1
 800b2c4:	4490      	add	r8, r2
 800b2c6:	f04f 0900 	mov.w	r9, #0
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	f000 fe3f 	bl	800bf54 <__lshift>
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4605      	mov	r5, r0
 800b2da:	f000 fea7 	bl	800c02c <__mcmp>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	dcb1      	bgt.n	800b246 <_dtoa_r+0x9e6>
 800b2e2:	d102      	bne.n	800b2ea <_dtoa_r+0xa8a>
 800b2e4:	9b02      	ldr	r3, [sp, #8]
 800b2e6:	07db      	lsls	r3, r3, #31
 800b2e8:	d4ad      	bmi.n	800b246 <_dtoa_r+0x9e6>
 800b2ea:	4643      	mov	r3, r8
 800b2ec:	4698      	mov	r8, r3
 800b2ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2f2:	2a30      	cmp	r2, #48	; 0x30
 800b2f4:	d0fa      	beq.n	800b2ec <_dtoa_r+0xa8c>
 800b2f6:	e6f6      	b.n	800b0e6 <_dtoa_r+0x886>
 800b2f8:	9a00      	ldr	r2, [sp, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d1a4      	bne.n	800b248 <_dtoa_r+0x9e8>
 800b2fe:	f10b 0b01 	add.w	fp, fp, #1
 800b302:	2331      	movs	r3, #49	; 0x31
 800b304:	e778      	b.n	800b1f8 <_dtoa_r+0x998>
 800b306:	4b15      	ldr	r3, [pc, #84]	; (800b35c <_dtoa_r+0xafc>)
 800b308:	f7ff bb12 	b.w	800a930 <_dtoa_r+0xd0>
 800b30c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f aaee 	bne.w	800a8f0 <_dtoa_r+0x90>
 800b314:	4b12      	ldr	r3, [pc, #72]	; (800b360 <_dtoa_r+0xb00>)
 800b316:	f7ff bb0b 	b.w	800a930 <_dtoa_r+0xd0>
 800b31a:	f1ba 0f00 	cmp.w	sl, #0
 800b31e:	dc03      	bgt.n	800b328 <_dtoa_r+0xac8>
 800b320:	9b07      	ldr	r3, [sp, #28]
 800b322:	2b02      	cmp	r3, #2
 800b324:	f73f aec7 	bgt.w	800b0b6 <_dtoa_r+0x856>
 800b328:	f8dd 8000 	ldr.w	r8, [sp]
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f7ff fa08 	bl	800a744 <quorem>
 800b334:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b338:	f808 3b01 	strb.w	r3, [r8], #1
 800b33c:	9a00      	ldr	r2, [sp, #0]
 800b33e:	eba8 0202 	sub.w	r2, r8, r2
 800b342:	4592      	cmp	sl, r2
 800b344:	ddb7      	ble.n	800b2b6 <_dtoa_r+0xa56>
 800b346:	4629      	mov	r1, r5
 800b348:	2300      	movs	r3, #0
 800b34a:	220a      	movs	r2, #10
 800b34c:	4630      	mov	r0, r6
 800b34e:	f000 fc07 	bl	800bb60 <__multadd>
 800b352:	4605      	mov	r5, r0
 800b354:	e7ea      	b.n	800b32c <_dtoa_r+0xacc>
 800b356:	bf00      	nop
 800b358:	0800d6dc 	.word	0x0800d6dc
 800b35c:	0800d4dc 	.word	0x0800d4dc
 800b360:	0800d659 	.word	0x0800d659

0800b364 <rshift>:
 800b364:	6903      	ldr	r3, [r0, #16]
 800b366:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b36a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b36e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b372:	f100 0414 	add.w	r4, r0, #20
 800b376:	dd45      	ble.n	800b404 <rshift+0xa0>
 800b378:	f011 011f 	ands.w	r1, r1, #31
 800b37c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b380:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b384:	d10c      	bne.n	800b3a0 <rshift+0x3c>
 800b386:	f100 0710 	add.w	r7, r0, #16
 800b38a:	4629      	mov	r1, r5
 800b38c:	42b1      	cmp	r1, r6
 800b38e:	d334      	bcc.n	800b3fa <rshift+0x96>
 800b390:	1a9b      	subs	r3, r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	1eea      	subs	r2, r5, #3
 800b396:	4296      	cmp	r6, r2
 800b398:	bf38      	it	cc
 800b39a:	2300      	movcc	r3, #0
 800b39c:	4423      	add	r3, r4
 800b39e:	e015      	b.n	800b3cc <rshift+0x68>
 800b3a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3a4:	f1c1 0820 	rsb	r8, r1, #32
 800b3a8:	40cf      	lsrs	r7, r1
 800b3aa:	f105 0e04 	add.w	lr, r5, #4
 800b3ae:	46a1      	mov	r9, r4
 800b3b0:	4576      	cmp	r6, lr
 800b3b2:	46f4      	mov	ip, lr
 800b3b4:	d815      	bhi.n	800b3e2 <rshift+0x7e>
 800b3b6:	1a9b      	subs	r3, r3, r2
 800b3b8:	009a      	lsls	r2, r3, #2
 800b3ba:	3a04      	subs	r2, #4
 800b3bc:	3501      	adds	r5, #1
 800b3be:	42ae      	cmp	r6, r5
 800b3c0:	bf38      	it	cc
 800b3c2:	2200      	movcc	r2, #0
 800b3c4:	18a3      	adds	r3, r4, r2
 800b3c6:	50a7      	str	r7, [r4, r2]
 800b3c8:	b107      	cbz	r7, 800b3cc <rshift+0x68>
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	1b1a      	subs	r2, r3, r4
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3d4:	bf08      	it	eq
 800b3d6:	2300      	moveq	r3, #0
 800b3d8:	6102      	str	r2, [r0, #16]
 800b3da:	bf08      	it	eq
 800b3dc:	6143      	streq	r3, [r0, #20]
 800b3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3e2:	f8dc c000 	ldr.w	ip, [ip]
 800b3e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3ea:	ea4c 0707 	orr.w	r7, ip, r7
 800b3ee:	f849 7b04 	str.w	r7, [r9], #4
 800b3f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3f6:	40cf      	lsrs	r7, r1
 800b3f8:	e7da      	b.n	800b3b0 <rshift+0x4c>
 800b3fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800b402:	e7c3      	b.n	800b38c <rshift+0x28>
 800b404:	4623      	mov	r3, r4
 800b406:	e7e1      	b.n	800b3cc <rshift+0x68>

0800b408 <__hexdig_fun>:
 800b408:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b40c:	2b09      	cmp	r3, #9
 800b40e:	d802      	bhi.n	800b416 <__hexdig_fun+0xe>
 800b410:	3820      	subs	r0, #32
 800b412:	b2c0      	uxtb	r0, r0
 800b414:	4770      	bx	lr
 800b416:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	d801      	bhi.n	800b422 <__hexdig_fun+0x1a>
 800b41e:	3847      	subs	r0, #71	; 0x47
 800b420:	e7f7      	b.n	800b412 <__hexdig_fun+0xa>
 800b422:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b426:	2b05      	cmp	r3, #5
 800b428:	d801      	bhi.n	800b42e <__hexdig_fun+0x26>
 800b42a:	3827      	subs	r0, #39	; 0x27
 800b42c:	e7f1      	b.n	800b412 <__hexdig_fun+0xa>
 800b42e:	2000      	movs	r0, #0
 800b430:	4770      	bx	lr
	...

0800b434 <__gethex>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	ed2d 8b02 	vpush	{d8}
 800b43c:	b089      	sub	sp, #36	; 0x24
 800b43e:	ee08 0a10 	vmov	s16, r0
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	4bbc      	ldr	r3, [pc, #752]	; (800b738 <__gethex+0x304>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	4618      	mov	r0, r3
 800b44c:	468b      	mov	fp, r1
 800b44e:	4690      	mov	r8, r2
 800b450:	f7f4 ff46 	bl	80002e0 <strlen>
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	f8db 2000 	ldr.w	r2, [fp]
 800b45a:	4403      	add	r3, r0
 800b45c:	4682      	mov	sl, r0
 800b45e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b462:	9305      	str	r3, [sp, #20]
 800b464:	1c93      	adds	r3, r2, #2
 800b466:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b46a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b46e:	32fe      	adds	r2, #254	; 0xfe
 800b470:	18d1      	adds	r1, r2, r3
 800b472:	461f      	mov	r7, r3
 800b474:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b478:	9100      	str	r1, [sp, #0]
 800b47a:	2830      	cmp	r0, #48	; 0x30
 800b47c:	d0f8      	beq.n	800b470 <__gethex+0x3c>
 800b47e:	f7ff ffc3 	bl	800b408 <__hexdig_fun>
 800b482:	4604      	mov	r4, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d13a      	bne.n	800b4fe <__gethex+0xca>
 800b488:	9901      	ldr	r1, [sp, #4]
 800b48a:	4652      	mov	r2, sl
 800b48c:	4638      	mov	r0, r7
 800b48e:	f001 f9ef 	bl	800c870 <strncmp>
 800b492:	4605      	mov	r5, r0
 800b494:	2800      	cmp	r0, #0
 800b496:	d168      	bne.n	800b56a <__gethex+0x136>
 800b498:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b49c:	eb07 060a 	add.w	r6, r7, sl
 800b4a0:	f7ff ffb2 	bl	800b408 <__hexdig_fun>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d062      	beq.n	800b56e <__gethex+0x13a>
 800b4a8:	4633      	mov	r3, r6
 800b4aa:	7818      	ldrb	r0, [r3, #0]
 800b4ac:	2830      	cmp	r0, #48	; 0x30
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	f103 0301 	add.w	r3, r3, #1
 800b4b4:	d0f9      	beq.n	800b4aa <__gethex+0x76>
 800b4b6:	f7ff ffa7 	bl	800b408 <__hexdig_fun>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	fab0 f480 	clz	r4, r0
 800b4c0:	0964      	lsrs	r4, r4, #5
 800b4c2:	4635      	mov	r5, r6
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	3201      	adds	r2, #1
 800b4cc:	7830      	ldrb	r0, [r6, #0]
 800b4ce:	f7ff ff9b 	bl	800b408 <__hexdig_fun>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d1f8      	bne.n	800b4c8 <__gethex+0x94>
 800b4d6:	9901      	ldr	r1, [sp, #4]
 800b4d8:	4652      	mov	r2, sl
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f001 f9c8 	bl	800c870 <strncmp>
 800b4e0:	b980      	cbnz	r0, 800b504 <__gethex+0xd0>
 800b4e2:	b94d      	cbnz	r5, 800b4f8 <__gethex+0xc4>
 800b4e4:	eb06 050a 	add.w	r5, r6, sl
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4616      	mov	r6, r2
 800b4ec:	3201      	adds	r2, #1
 800b4ee:	7830      	ldrb	r0, [r6, #0]
 800b4f0:	f7ff ff8a 	bl	800b408 <__hexdig_fun>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d1f8      	bne.n	800b4ea <__gethex+0xb6>
 800b4f8:	1bad      	subs	r5, r5, r6
 800b4fa:	00ad      	lsls	r5, r5, #2
 800b4fc:	e004      	b.n	800b508 <__gethex+0xd4>
 800b4fe:	2400      	movs	r4, #0
 800b500:	4625      	mov	r5, r4
 800b502:	e7e0      	b.n	800b4c6 <__gethex+0x92>
 800b504:	2d00      	cmp	r5, #0
 800b506:	d1f7      	bne.n	800b4f8 <__gethex+0xc4>
 800b508:	7833      	ldrb	r3, [r6, #0]
 800b50a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b50e:	2b50      	cmp	r3, #80	; 0x50
 800b510:	d13b      	bne.n	800b58a <__gethex+0x156>
 800b512:	7873      	ldrb	r3, [r6, #1]
 800b514:	2b2b      	cmp	r3, #43	; 0x2b
 800b516:	d02c      	beq.n	800b572 <__gethex+0x13e>
 800b518:	2b2d      	cmp	r3, #45	; 0x2d
 800b51a:	d02e      	beq.n	800b57a <__gethex+0x146>
 800b51c:	1c71      	adds	r1, r6, #1
 800b51e:	f04f 0900 	mov.w	r9, #0
 800b522:	7808      	ldrb	r0, [r1, #0]
 800b524:	f7ff ff70 	bl	800b408 <__hexdig_fun>
 800b528:	1e43      	subs	r3, r0, #1
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b18      	cmp	r3, #24
 800b52e:	d82c      	bhi.n	800b58a <__gethex+0x156>
 800b530:	f1a0 0210 	sub.w	r2, r0, #16
 800b534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b538:	f7ff ff66 	bl	800b408 <__hexdig_fun>
 800b53c:	1e43      	subs	r3, r0, #1
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b18      	cmp	r3, #24
 800b542:	d91d      	bls.n	800b580 <__gethex+0x14c>
 800b544:	f1b9 0f00 	cmp.w	r9, #0
 800b548:	d000      	beq.n	800b54c <__gethex+0x118>
 800b54a:	4252      	negs	r2, r2
 800b54c:	4415      	add	r5, r2
 800b54e:	f8cb 1000 	str.w	r1, [fp]
 800b552:	b1e4      	cbz	r4, 800b58e <__gethex+0x15a>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	bf14      	ite	ne
 800b55a:	2700      	movne	r7, #0
 800b55c:	2706      	moveq	r7, #6
 800b55e:	4638      	mov	r0, r7
 800b560:	b009      	add	sp, #36	; 0x24
 800b562:	ecbd 8b02 	vpop	{d8}
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	463e      	mov	r6, r7
 800b56c:	4625      	mov	r5, r4
 800b56e:	2401      	movs	r4, #1
 800b570:	e7ca      	b.n	800b508 <__gethex+0xd4>
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	1cb1      	adds	r1, r6, #2
 800b578:	e7d3      	b.n	800b522 <__gethex+0xee>
 800b57a:	f04f 0901 	mov.w	r9, #1
 800b57e:	e7fa      	b.n	800b576 <__gethex+0x142>
 800b580:	230a      	movs	r3, #10
 800b582:	fb03 0202 	mla	r2, r3, r2, r0
 800b586:	3a10      	subs	r2, #16
 800b588:	e7d4      	b.n	800b534 <__gethex+0x100>
 800b58a:	4631      	mov	r1, r6
 800b58c:	e7df      	b.n	800b54e <__gethex+0x11a>
 800b58e:	1bf3      	subs	r3, r6, r7
 800b590:	3b01      	subs	r3, #1
 800b592:	4621      	mov	r1, r4
 800b594:	2b07      	cmp	r3, #7
 800b596:	dc0b      	bgt.n	800b5b0 <__gethex+0x17c>
 800b598:	ee18 0a10 	vmov	r0, s16
 800b59c:	f000 fa7e 	bl	800ba9c <_Balloc>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	b940      	cbnz	r0, 800b5b6 <__gethex+0x182>
 800b5a4:	4b65      	ldr	r3, [pc, #404]	; (800b73c <__gethex+0x308>)
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	21de      	movs	r1, #222	; 0xde
 800b5aa:	4865      	ldr	r0, [pc, #404]	; (800b740 <__gethex+0x30c>)
 800b5ac:	f001 f980 	bl	800c8b0 <__assert_func>
 800b5b0:	3101      	adds	r1, #1
 800b5b2:	105b      	asrs	r3, r3, #1
 800b5b4:	e7ee      	b.n	800b594 <__gethex+0x160>
 800b5b6:	f100 0914 	add.w	r9, r0, #20
 800b5ba:	f04f 0b00 	mov.w	fp, #0
 800b5be:	f1ca 0301 	rsb	r3, sl, #1
 800b5c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5c6:	f8cd b000 	str.w	fp, [sp]
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	42b7      	cmp	r7, r6
 800b5ce:	d340      	bcc.n	800b652 <__gethex+0x21e>
 800b5d0:	9802      	ldr	r0, [sp, #8]
 800b5d2:	9b00      	ldr	r3, [sp, #0]
 800b5d4:	f840 3b04 	str.w	r3, [r0], #4
 800b5d8:	eba0 0009 	sub.w	r0, r0, r9
 800b5dc:	1080      	asrs	r0, r0, #2
 800b5de:	0146      	lsls	r6, r0, #5
 800b5e0:	6120      	str	r0, [r4, #16]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fb50 	bl	800bc88 <__hi0bits>
 800b5e8:	1a30      	subs	r0, r6, r0
 800b5ea:	f8d8 6000 	ldr.w	r6, [r8]
 800b5ee:	42b0      	cmp	r0, r6
 800b5f0:	dd63      	ble.n	800b6ba <__gethex+0x286>
 800b5f2:	1b87      	subs	r7, r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 feeb 	bl	800c3d2 <__any_on>
 800b5fc:	4682      	mov	sl, r0
 800b5fe:	b1a8      	cbz	r0, 800b62c <__gethex+0x1f8>
 800b600:	1e7b      	subs	r3, r7, #1
 800b602:	1159      	asrs	r1, r3, #5
 800b604:	f003 021f 	and.w	r2, r3, #31
 800b608:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b60c:	f04f 0a01 	mov.w	sl, #1
 800b610:	fa0a f202 	lsl.w	r2, sl, r2
 800b614:	420a      	tst	r2, r1
 800b616:	d009      	beq.n	800b62c <__gethex+0x1f8>
 800b618:	4553      	cmp	r3, sl
 800b61a:	dd05      	ble.n	800b628 <__gethex+0x1f4>
 800b61c:	1eb9      	subs	r1, r7, #2
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 fed7 	bl	800c3d2 <__any_on>
 800b624:	2800      	cmp	r0, #0
 800b626:	d145      	bne.n	800b6b4 <__gethex+0x280>
 800b628:	f04f 0a02 	mov.w	sl, #2
 800b62c:	4639      	mov	r1, r7
 800b62e:	4620      	mov	r0, r4
 800b630:	f7ff fe98 	bl	800b364 <rshift>
 800b634:	443d      	add	r5, r7
 800b636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	da4c      	bge.n	800b6d8 <__gethex+0x2a4>
 800b63e:	ee18 0a10 	vmov	r0, s16
 800b642:	4621      	mov	r1, r4
 800b644:	f000 fa6a 	bl	800bb1c <_Bfree>
 800b648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b64a:	2300      	movs	r3, #0
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	27a3      	movs	r7, #163	; 0xa3
 800b650:	e785      	b.n	800b55e <__gethex+0x12a>
 800b652:	1e73      	subs	r3, r6, #1
 800b654:	9a05      	ldr	r2, [sp, #20]
 800b656:	9303      	str	r3, [sp, #12]
 800b658:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d019      	beq.n	800b694 <__gethex+0x260>
 800b660:	f1bb 0f20 	cmp.w	fp, #32
 800b664:	d107      	bne.n	800b676 <__gethex+0x242>
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	9a00      	ldr	r2, [sp, #0]
 800b66a:	f843 2b04 	str.w	r2, [r3], #4
 800b66e:	9302      	str	r3, [sp, #8]
 800b670:	2300      	movs	r3, #0
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	469b      	mov	fp, r3
 800b676:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b67a:	f7ff fec5 	bl	800b408 <__hexdig_fun>
 800b67e:	9b00      	ldr	r3, [sp, #0]
 800b680:	f000 000f 	and.w	r0, r0, #15
 800b684:	fa00 f00b 	lsl.w	r0, r0, fp
 800b688:	4303      	orrs	r3, r0
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	f10b 0b04 	add.w	fp, fp, #4
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	e00d      	b.n	800b6b0 <__gethex+0x27c>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	9a06      	ldr	r2, [sp, #24]
 800b698:	4413      	add	r3, r2
 800b69a:	42bb      	cmp	r3, r7
 800b69c:	d3e0      	bcc.n	800b660 <__gethex+0x22c>
 800b69e:	4618      	mov	r0, r3
 800b6a0:	9901      	ldr	r1, [sp, #4]
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	4652      	mov	r2, sl
 800b6a6:	f001 f8e3 	bl	800c870 <strncmp>
 800b6aa:	9b07      	ldr	r3, [sp, #28]
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d1d7      	bne.n	800b660 <__gethex+0x22c>
 800b6b0:	461e      	mov	r6, r3
 800b6b2:	e78b      	b.n	800b5cc <__gethex+0x198>
 800b6b4:	f04f 0a03 	mov.w	sl, #3
 800b6b8:	e7b8      	b.n	800b62c <__gethex+0x1f8>
 800b6ba:	da0a      	bge.n	800b6d2 <__gethex+0x29e>
 800b6bc:	1a37      	subs	r7, r6, r0
 800b6be:	4621      	mov	r1, r4
 800b6c0:	ee18 0a10 	vmov	r0, s16
 800b6c4:	463a      	mov	r2, r7
 800b6c6:	f000 fc45 	bl	800bf54 <__lshift>
 800b6ca:	1bed      	subs	r5, r5, r7
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	f100 0914 	add.w	r9, r0, #20
 800b6d2:	f04f 0a00 	mov.w	sl, #0
 800b6d6:	e7ae      	b.n	800b636 <__gethex+0x202>
 800b6d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b6dc:	42a8      	cmp	r0, r5
 800b6de:	dd72      	ble.n	800b7c6 <__gethex+0x392>
 800b6e0:	1b45      	subs	r5, r0, r5
 800b6e2:	42ae      	cmp	r6, r5
 800b6e4:	dc36      	bgt.n	800b754 <__gethex+0x320>
 800b6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d02a      	beq.n	800b744 <__gethex+0x310>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d02c      	beq.n	800b74c <__gethex+0x318>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d115      	bne.n	800b722 <__gethex+0x2ee>
 800b6f6:	42ae      	cmp	r6, r5
 800b6f8:	d113      	bne.n	800b722 <__gethex+0x2ee>
 800b6fa:	2e01      	cmp	r6, #1
 800b6fc:	d10b      	bne.n	800b716 <__gethex+0x2e2>
 800b6fe:	9a04      	ldr	r2, [sp, #16]
 800b700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	2301      	movs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	f8c9 3000 	str.w	r3, [r9]
 800b70e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b710:	2762      	movs	r7, #98	; 0x62
 800b712:	601c      	str	r4, [r3, #0]
 800b714:	e723      	b.n	800b55e <__gethex+0x12a>
 800b716:	1e71      	subs	r1, r6, #1
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 fe5a 	bl	800c3d2 <__any_on>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1ed      	bne.n	800b6fe <__gethex+0x2ca>
 800b722:	ee18 0a10 	vmov	r0, s16
 800b726:	4621      	mov	r1, r4
 800b728:	f000 f9f8 	bl	800bb1c <_Bfree>
 800b72c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b72e:	2300      	movs	r3, #0
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	2750      	movs	r7, #80	; 0x50
 800b734:	e713      	b.n	800b55e <__gethex+0x12a>
 800b736:	bf00      	nop
 800b738:	0800d758 	.word	0x0800d758
 800b73c:	0800d6dc 	.word	0x0800d6dc
 800b740:	0800d6ed 	.word	0x0800d6ed
 800b744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1eb      	bne.n	800b722 <__gethex+0x2ee>
 800b74a:	e7d8      	b.n	800b6fe <__gethex+0x2ca>
 800b74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1d5      	bne.n	800b6fe <__gethex+0x2ca>
 800b752:	e7e6      	b.n	800b722 <__gethex+0x2ee>
 800b754:	1e6f      	subs	r7, r5, #1
 800b756:	f1ba 0f00 	cmp.w	sl, #0
 800b75a:	d131      	bne.n	800b7c0 <__gethex+0x38c>
 800b75c:	b127      	cbz	r7, 800b768 <__gethex+0x334>
 800b75e:	4639      	mov	r1, r7
 800b760:	4620      	mov	r0, r4
 800b762:	f000 fe36 	bl	800c3d2 <__any_on>
 800b766:	4682      	mov	sl, r0
 800b768:	117b      	asrs	r3, r7, #5
 800b76a:	2101      	movs	r1, #1
 800b76c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b770:	f007 071f 	and.w	r7, r7, #31
 800b774:	fa01 f707 	lsl.w	r7, r1, r7
 800b778:	421f      	tst	r7, r3
 800b77a:	4629      	mov	r1, r5
 800b77c:	4620      	mov	r0, r4
 800b77e:	bf18      	it	ne
 800b780:	f04a 0a02 	orrne.w	sl, sl, #2
 800b784:	1b76      	subs	r6, r6, r5
 800b786:	f7ff fded 	bl	800b364 <rshift>
 800b78a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b78e:	2702      	movs	r7, #2
 800b790:	f1ba 0f00 	cmp.w	sl, #0
 800b794:	d048      	beq.n	800b828 <__gethex+0x3f4>
 800b796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d015      	beq.n	800b7ca <__gethex+0x396>
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d017      	beq.n	800b7d2 <__gethex+0x39e>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d109      	bne.n	800b7ba <__gethex+0x386>
 800b7a6:	f01a 0f02 	tst.w	sl, #2
 800b7aa:	d006      	beq.n	800b7ba <__gethex+0x386>
 800b7ac:	f8d9 0000 	ldr.w	r0, [r9]
 800b7b0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b7b4:	f01a 0f01 	tst.w	sl, #1
 800b7b8:	d10e      	bne.n	800b7d8 <__gethex+0x3a4>
 800b7ba:	f047 0710 	orr.w	r7, r7, #16
 800b7be:	e033      	b.n	800b828 <__gethex+0x3f4>
 800b7c0:	f04f 0a01 	mov.w	sl, #1
 800b7c4:	e7d0      	b.n	800b768 <__gethex+0x334>
 800b7c6:	2701      	movs	r7, #1
 800b7c8:	e7e2      	b.n	800b790 <__gethex+0x35c>
 800b7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7cc:	f1c3 0301 	rsb	r3, r3, #1
 800b7d0:	9315      	str	r3, [sp, #84]	; 0x54
 800b7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0f0      	beq.n	800b7ba <__gethex+0x386>
 800b7d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7dc:	f104 0314 	add.w	r3, r4, #20
 800b7e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b7e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b7e8:	f04f 0c00 	mov.w	ip, #0
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b7f6:	d01c      	beq.n	800b832 <__gethex+0x3fe>
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	6002      	str	r2, [r0, #0]
 800b7fc:	2f02      	cmp	r7, #2
 800b7fe:	f104 0314 	add.w	r3, r4, #20
 800b802:	d13f      	bne.n	800b884 <__gethex+0x450>
 800b804:	f8d8 2000 	ldr.w	r2, [r8]
 800b808:	3a01      	subs	r2, #1
 800b80a:	42b2      	cmp	r2, r6
 800b80c:	d10a      	bne.n	800b824 <__gethex+0x3f0>
 800b80e:	1171      	asrs	r1, r6, #5
 800b810:	2201      	movs	r2, #1
 800b812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b816:	f006 061f 	and.w	r6, r6, #31
 800b81a:	fa02 f606 	lsl.w	r6, r2, r6
 800b81e:	421e      	tst	r6, r3
 800b820:	bf18      	it	ne
 800b822:	4617      	movne	r7, r2
 800b824:	f047 0720 	orr.w	r7, r7, #32
 800b828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b82a:	601c      	str	r4, [r3, #0]
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	601d      	str	r5, [r3, #0]
 800b830:	e695      	b.n	800b55e <__gethex+0x12a>
 800b832:	4299      	cmp	r1, r3
 800b834:	f843 cc04 	str.w	ip, [r3, #-4]
 800b838:	d8d8      	bhi.n	800b7ec <__gethex+0x3b8>
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	459b      	cmp	fp, r3
 800b83e:	db19      	blt.n	800b874 <__gethex+0x440>
 800b840:	6861      	ldr	r1, [r4, #4]
 800b842:	ee18 0a10 	vmov	r0, s16
 800b846:	3101      	adds	r1, #1
 800b848:	f000 f928 	bl	800ba9c <_Balloc>
 800b84c:	4681      	mov	r9, r0
 800b84e:	b918      	cbnz	r0, 800b858 <__gethex+0x424>
 800b850:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <__gethex+0x488>)
 800b852:	4602      	mov	r2, r0
 800b854:	2184      	movs	r1, #132	; 0x84
 800b856:	e6a8      	b.n	800b5aa <__gethex+0x176>
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	3202      	adds	r2, #2
 800b85c:	f104 010c 	add.w	r1, r4, #12
 800b860:	0092      	lsls	r2, r2, #2
 800b862:	300c      	adds	r0, #12
 800b864:	f000 f90c 	bl	800ba80 <memcpy>
 800b868:	4621      	mov	r1, r4
 800b86a:	ee18 0a10 	vmov	r0, s16
 800b86e:	f000 f955 	bl	800bb1c <_Bfree>
 800b872:	464c      	mov	r4, r9
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b87c:	6122      	str	r2, [r4, #16]
 800b87e:	2201      	movs	r2, #1
 800b880:	615a      	str	r2, [r3, #20]
 800b882:	e7bb      	b.n	800b7fc <__gethex+0x3c8>
 800b884:	6922      	ldr	r2, [r4, #16]
 800b886:	455a      	cmp	r2, fp
 800b888:	dd0b      	ble.n	800b8a2 <__gethex+0x46e>
 800b88a:	2101      	movs	r1, #1
 800b88c:	4620      	mov	r0, r4
 800b88e:	f7ff fd69 	bl	800b364 <rshift>
 800b892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b896:	3501      	adds	r5, #1
 800b898:	42ab      	cmp	r3, r5
 800b89a:	f6ff aed0 	blt.w	800b63e <__gethex+0x20a>
 800b89e:	2701      	movs	r7, #1
 800b8a0:	e7c0      	b.n	800b824 <__gethex+0x3f0>
 800b8a2:	f016 061f 	ands.w	r6, r6, #31
 800b8a6:	d0fa      	beq.n	800b89e <__gethex+0x46a>
 800b8a8:	449a      	add	sl, r3
 800b8aa:	f1c6 0620 	rsb	r6, r6, #32
 800b8ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b8b2:	f000 f9e9 	bl	800bc88 <__hi0bits>
 800b8b6:	42b0      	cmp	r0, r6
 800b8b8:	dbe7      	blt.n	800b88a <__gethex+0x456>
 800b8ba:	e7f0      	b.n	800b89e <__gethex+0x46a>
 800b8bc:	0800d6dc 	.word	0x0800d6dc

0800b8c0 <L_shift>:
 800b8c0:	f1c2 0208 	rsb	r2, r2, #8
 800b8c4:	0092      	lsls	r2, r2, #2
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	f1c2 0620 	rsb	r6, r2, #32
 800b8cc:	6843      	ldr	r3, [r0, #4]
 800b8ce:	6804      	ldr	r4, [r0, #0]
 800b8d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b8d4:	432c      	orrs	r4, r5
 800b8d6:	40d3      	lsrs	r3, r2
 800b8d8:	6004      	str	r4, [r0, #0]
 800b8da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8de:	4288      	cmp	r0, r1
 800b8e0:	d3f4      	bcc.n	800b8cc <L_shift+0xc>
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}

0800b8e4 <__match>:
 800b8e4:	b530      	push	{r4, r5, lr}
 800b8e6:	6803      	ldr	r3, [r0, #0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ee:	b914      	cbnz	r4, 800b8f6 <__match+0x12>
 800b8f0:	6003      	str	r3, [r0, #0]
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	bd30      	pop	{r4, r5, pc}
 800b8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8fe:	2d19      	cmp	r5, #25
 800b900:	bf98      	it	ls
 800b902:	3220      	addls	r2, #32
 800b904:	42a2      	cmp	r2, r4
 800b906:	d0f0      	beq.n	800b8ea <__match+0x6>
 800b908:	2000      	movs	r0, #0
 800b90a:	e7f3      	b.n	800b8f4 <__match+0x10>

0800b90c <__hexnan>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	680b      	ldr	r3, [r1, #0]
 800b912:	6801      	ldr	r1, [r0, #0]
 800b914:	115e      	asrs	r6, r3, #5
 800b916:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b91a:	f013 031f 	ands.w	r3, r3, #31
 800b91e:	b087      	sub	sp, #28
 800b920:	bf18      	it	ne
 800b922:	3604      	addne	r6, #4
 800b924:	2500      	movs	r5, #0
 800b926:	1f37      	subs	r7, r6, #4
 800b928:	4682      	mov	sl, r0
 800b92a:	4690      	mov	r8, r2
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b932:	46b9      	mov	r9, r7
 800b934:	463c      	mov	r4, r7
 800b936:	9502      	str	r5, [sp, #8]
 800b938:	46ab      	mov	fp, r5
 800b93a:	784a      	ldrb	r2, [r1, #1]
 800b93c:	1c4b      	adds	r3, r1, #1
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	b342      	cbz	r2, 800b994 <__hexnan+0x88>
 800b942:	4610      	mov	r0, r2
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	9204      	str	r2, [sp, #16]
 800b948:	f7ff fd5e 	bl	800b408 <__hexdig_fun>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d14f      	bne.n	800b9f0 <__hexnan+0xe4>
 800b950:	9a04      	ldr	r2, [sp, #16]
 800b952:	9905      	ldr	r1, [sp, #20]
 800b954:	2a20      	cmp	r2, #32
 800b956:	d818      	bhi.n	800b98a <__hexnan+0x7e>
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	459b      	cmp	fp, r3
 800b95c:	dd13      	ble.n	800b986 <__hexnan+0x7a>
 800b95e:	454c      	cmp	r4, r9
 800b960:	d206      	bcs.n	800b970 <__hexnan+0x64>
 800b962:	2d07      	cmp	r5, #7
 800b964:	dc04      	bgt.n	800b970 <__hexnan+0x64>
 800b966:	462a      	mov	r2, r5
 800b968:	4649      	mov	r1, r9
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7ff ffa8 	bl	800b8c0 <L_shift>
 800b970:	4544      	cmp	r4, r8
 800b972:	d950      	bls.n	800ba16 <__hexnan+0x10a>
 800b974:	2300      	movs	r3, #0
 800b976:	f1a4 0904 	sub.w	r9, r4, #4
 800b97a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b97e:	f8cd b008 	str.w	fp, [sp, #8]
 800b982:	464c      	mov	r4, r9
 800b984:	461d      	mov	r5, r3
 800b986:	9903      	ldr	r1, [sp, #12]
 800b988:	e7d7      	b.n	800b93a <__hexnan+0x2e>
 800b98a:	2a29      	cmp	r2, #41	; 0x29
 800b98c:	d156      	bne.n	800ba3c <__hexnan+0x130>
 800b98e:	3102      	adds	r1, #2
 800b990:	f8ca 1000 	str.w	r1, [sl]
 800b994:	f1bb 0f00 	cmp.w	fp, #0
 800b998:	d050      	beq.n	800ba3c <__hexnan+0x130>
 800b99a:	454c      	cmp	r4, r9
 800b99c:	d206      	bcs.n	800b9ac <__hexnan+0xa0>
 800b99e:	2d07      	cmp	r5, #7
 800b9a0:	dc04      	bgt.n	800b9ac <__hexnan+0xa0>
 800b9a2:	462a      	mov	r2, r5
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7ff ff8a 	bl	800b8c0 <L_shift>
 800b9ac:	4544      	cmp	r4, r8
 800b9ae:	d934      	bls.n	800ba1a <__hexnan+0x10e>
 800b9b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9be:	429f      	cmp	r7, r3
 800b9c0:	d2f9      	bcs.n	800b9b6 <__hexnan+0xaa>
 800b9c2:	1b3b      	subs	r3, r7, r4
 800b9c4:	f023 0303 	bic.w	r3, r3, #3
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	3401      	adds	r4, #1
 800b9cc:	3e03      	subs	r6, #3
 800b9ce:	42b4      	cmp	r4, r6
 800b9d0:	bf88      	it	hi
 800b9d2:	2304      	movhi	r3, #4
 800b9d4:	4443      	add	r3, r8
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f843 2b04 	str.w	r2, [r3], #4
 800b9dc:	429f      	cmp	r7, r3
 800b9de:	d2fb      	bcs.n	800b9d8 <__hexnan+0xcc>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	b91b      	cbnz	r3, 800b9ec <__hexnan+0xe0>
 800b9e4:	4547      	cmp	r7, r8
 800b9e6:	d127      	bne.n	800ba38 <__hexnan+0x12c>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	603b      	str	r3, [r7, #0]
 800b9ec:	2005      	movs	r0, #5
 800b9ee:	e026      	b.n	800ba3e <__hexnan+0x132>
 800b9f0:	3501      	adds	r5, #1
 800b9f2:	2d08      	cmp	r5, #8
 800b9f4:	f10b 0b01 	add.w	fp, fp, #1
 800b9f8:	dd06      	ble.n	800ba08 <__hexnan+0xfc>
 800b9fa:	4544      	cmp	r4, r8
 800b9fc:	d9c3      	bls.n	800b986 <__hexnan+0x7a>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba04:	2501      	movs	r5, #1
 800ba06:	3c04      	subs	r4, #4
 800ba08:	6822      	ldr	r2, [r4, #0]
 800ba0a:	f000 000f 	and.w	r0, r0, #15
 800ba0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ba12:	6022      	str	r2, [r4, #0]
 800ba14:	e7b7      	b.n	800b986 <__hexnan+0x7a>
 800ba16:	2508      	movs	r5, #8
 800ba18:	e7b5      	b.n	800b986 <__hexnan+0x7a>
 800ba1a:	9b01      	ldr	r3, [sp, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0df      	beq.n	800b9e0 <__hexnan+0xd4>
 800ba20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba24:	f1c3 0320 	rsb	r3, r3, #32
 800ba28:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba30:	401a      	ands	r2, r3
 800ba32:	f846 2c04 	str.w	r2, [r6, #-4]
 800ba36:	e7d3      	b.n	800b9e0 <__hexnan+0xd4>
 800ba38:	3f04      	subs	r7, #4
 800ba3a:	e7d1      	b.n	800b9e0 <__hexnan+0xd4>
 800ba3c:	2004      	movs	r0, #4
 800ba3e:	b007      	add	sp, #28
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba44 <_localeconv_r>:
 800ba44:	4800      	ldr	r0, [pc, #0]	; (800ba48 <_localeconv_r+0x4>)
 800ba46:	4770      	bx	lr
 800ba48:	2400016c 	.word	0x2400016c

0800ba4c <malloc>:
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <malloc+0xc>)
 800ba4e:	4601      	mov	r1, r0
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	f000 bd3f 	b.w	800c4d4 <_malloc_r>
 800ba56:	bf00      	nop
 800ba58:	24000014 	.word	0x24000014

0800ba5c <__ascii_mbtowc>:
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	b901      	cbnz	r1, 800ba62 <__ascii_mbtowc+0x6>
 800ba60:	a901      	add	r1, sp, #4
 800ba62:	b142      	cbz	r2, 800ba76 <__ascii_mbtowc+0x1a>
 800ba64:	b14b      	cbz	r3, 800ba7a <__ascii_mbtowc+0x1e>
 800ba66:	7813      	ldrb	r3, [r2, #0]
 800ba68:	600b      	str	r3, [r1, #0]
 800ba6a:	7812      	ldrb	r2, [r2, #0]
 800ba6c:	1e10      	subs	r0, r2, #0
 800ba6e:	bf18      	it	ne
 800ba70:	2001      	movne	r0, #1
 800ba72:	b002      	add	sp, #8
 800ba74:	4770      	bx	lr
 800ba76:	4610      	mov	r0, r2
 800ba78:	e7fb      	b.n	800ba72 <__ascii_mbtowc+0x16>
 800ba7a:	f06f 0001 	mvn.w	r0, #1
 800ba7e:	e7f8      	b.n	800ba72 <__ascii_mbtowc+0x16>

0800ba80 <memcpy>:
 800ba80:	440a      	add	r2, r1
 800ba82:	4291      	cmp	r1, r2
 800ba84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba88:	d100      	bne.n	800ba8c <memcpy+0xc>
 800ba8a:	4770      	bx	lr
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba96:	4291      	cmp	r1, r2
 800ba98:	d1f9      	bne.n	800ba8e <memcpy+0xe>
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <_Balloc>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baa0:	4604      	mov	r4, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	b976      	cbnz	r6, 800bac4 <_Balloc+0x28>
 800baa6:	2010      	movs	r0, #16
 800baa8:	f7ff ffd0 	bl	800ba4c <malloc>
 800baac:	4602      	mov	r2, r0
 800baae:	6260      	str	r0, [r4, #36]	; 0x24
 800bab0:	b920      	cbnz	r0, 800babc <_Balloc+0x20>
 800bab2:	4b18      	ldr	r3, [pc, #96]	; (800bb14 <_Balloc+0x78>)
 800bab4:	4818      	ldr	r0, [pc, #96]	; (800bb18 <_Balloc+0x7c>)
 800bab6:	2166      	movs	r1, #102	; 0x66
 800bab8:	f000 fefa 	bl	800c8b0 <__assert_func>
 800babc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac0:	6006      	str	r6, [r0, #0]
 800bac2:	60c6      	str	r6, [r0, #12]
 800bac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bac6:	68f3      	ldr	r3, [r6, #12]
 800bac8:	b183      	cbz	r3, 800baec <_Balloc+0x50>
 800baca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bad2:	b9b8      	cbnz	r0, 800bb04 <_Balloc+0x68>
 800bad4:	2101      	movs	r1, #1
 800bad6:	fa01 f605 	lsl.w	r6, r1, r5
 800bada:	1d72      	adds	r2, r6, #5
 800badc:	0092      	lsls	r2, r2, #2
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 fc98 	bl	800c414 <_calloc_r>
 800bae4:	b160      	cbz	r0, 800bb00 <_Balloc+0x64>
 800bae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baea:	e00e      	b.n	800bb0a <_Balloc+0x6e>
 800baec:	2221      	movs	r2, #33	; 0x21
 800baee:	2104      	movs	r1, #4
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fc8f 	bl	800c414 <_calloc_r>
 800baf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baf8:	60f0      	str	r0, [r6, #12]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e4      	bne.n	800baca <_Balloc+0x2e>
 800bb00:	2000      	movs	r0, #0
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	6802      	ldr	r2, [r0, #0]
 800bb06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb10:	e7f7      	b.n	800bb02 <_Balloc+0x66>
 800bb12:	bf00      	nop
 800bb14:	0800d666 	.word	0x0800d666
 800bb18:	0800d76c 	.word	0x0800d76c

0800bb1c <_Bfree>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb20:	4605      	mov	r5, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	b976      	cbnz	r6, 800bb44 <_Bfree+0x28>
 800bb26:	2010      	movs	r0, #16
 800bb28:	f7ff ff90 	bl	800ba4c <malloc>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	6268      	str	r0, [r5, #36]	; 0x24
 800bb30:	b920      	cbnz	r0, 800bb3c <_Bfree+0x20>
 800bb32:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <_Bfree+0x3c>)
 800bb34:	4809      	ldr	r0, [pc, #36]	; (800bb5c <_Bfree+0x40>)
 800bb36:	218a      	movs	r1, #138	; 0x8a
 800bb38:	f000 feba 	bl	800c8b0 <__assert_func>
 800bb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb40:	6006      	str	r6, [r0, #0]
 800bb42:	60c6      	str	r6, [r0, #12]
 800bb44:	b13c      	cbz	r4, 800bb56 <_Bfree+0x3a>
 800bb46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb48:	6862      	ldr	r2, [r4, #4]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb50:	6021      	str	r1, [r4, #0]
 800bb52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	0800d666 	.word	0x0800d666
 800bb5c:	0800d76c 	.word	0x0800d76c

0800bb60 <__multadd>:
 800bb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb64:	690e      	ldr	r6, [r1, #16]
 800bb66:	4607      	mov	r7, r0
 800bb68:	4698      	mov	r8, r3
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	f101 0014 	add.w	r0, r1, #20
 800bb70:	2300      	movs	r3, #0
 800bb72:	6805      	ldr	r5, [r0, #0]
 800bb74:	b2a9      	uxth	r1, r5
 800bb76:	fb02 8101 	mla	r1, r2, r1, r8
 800bb7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bb7e:	0c2d      	lsrs	r5, r5, #16
 800bb80:	fb02 c505 	mla	r5, r2, r5, ip
 800bb84:	b289      	uxth	r1, r1
 800bb86:	3301      	adds	r3, #1
 800bb88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb8c:	429e      	cmp	r6, r3
 800bb8e:	f840 1b04 	str.w	r1, [r0], #4
 800bb92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb96:	dcec      	bgt.n	800bb72 <__multadd+0x12>
 800bb98:	f1b8 0f00 	cmp.w	r8, #0
 800bb9c:	d022      	beq.n	800bbe4 <__multadd+0x84>
 800bb9e:	68a3      	ldr	r3, [r4, #8]
 800bba0:	42b3      	cmp	r3, r6
 800bba2:	dc19      	bgt.n	800bbd8 <__multadd+0x78>
 800bba4:	6861      	ldr	r1, [r4, #4]
 800bba6:	4638      	mov	r0, r7
 800bba8:	3101      	adds	r1, #1
 800bbaa:	f7ff ff77 	bl	800ba9c <_Balloc>
 800bbae:	4605      	mov	r5, r0
 800bbb0:	b928      	cbnz	r0, 800bbbe <__multadd+0x5e>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <__multadd+0x8c>)
 800bbb6:	480e      	ldr	r0, [pc, #56]	; (800bbf0 <__multadd+0x90>)
 800bbb8:	21b5      	movs	r1, #181	; 0xb5
 800bbba:	f000 fe79 	bl	800c8b0 <__assert_func>
 800bbbe:	6922      	ldr	r2, [r4, #16]
 800bbc0:	3202      	adds	r2, #2
 800bbc2:	f104 010c 	add.w	r1, r4, #12
 800bbc6:	0092      	lsls	r2, r2, #2
 800bbc8:	300c      	adds	r0, #12
 800bbca:	f7ff ff59 	bl	800ba80 <memcpy>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f7ff ffa3 	bl	800bb1c <_Bfree>
 800bbd6:	462c      	mov	r4, r5
 800bbd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bbdc:	3601      	adds	r6, #1
 800bbde:	f8c3 8014 	str.w	r8, [r3, #20]
 800bbe2:	6126      	str	r6, [r4, #16]
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbea:	bf00      	nop
 800bbec:	0800d6dc 	.word	0x0800d6dc
 800bbf0:	0800d76c 	.word	0x0800d76c

0800bbf4 <__s2b>:
 800bbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	4615      	mov	r5, r2
 800bbfc:	461f      	mov	r7, r3
 800bbfe:	2209      	movs	r2, #9
 800bc00:	3308      	adds	r3, #8
 800bc02:	4606      	mov	r6, r0
 800bc04:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc08:	2100      	movs	r1, #0
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	db09      	blt.n	800bc24 <__s2b+0x30>
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7ff ff43 	bl	800ba9c <_Balloc>
 800bc16:	b940      	cbnz	r0, 800bc2a <__s2b+0x36>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	4b19      	ldr	r3, [pc, #100]	; (800bc80 <__s2b+0x8c>)
 800bc1c:	4819      	ldr	r0, [pc, #100]	; (800bc84 <__s2b+0x90>)
 800bc1e:	21ce      	movs	r1, #206	; 0xce
 800bc20:	f000 fe46 	bl	800c8b0 <__assert_func>
 800bc24:	0052      	lsls	r2, r2, #1
 800bc26:	3101      	adds	r1, #1
 800bc28:	e7f0      	b.n	800bc0c <__s2b+0x18>
 800bc2a:	9b08      	ldr	r3, [sp, #32]
 800bc2c:	6143      	str	r3, [r0, #20]
 800bc2e:	2d09      	cmp	r5, #9
 800bc30:	f04f 0301 	mov.w	r3, #1
 800bc34:	6103      	str	r3, [r0, #16]
 800bc36:	dd16      	ble.n	800bc66 <__s2b+0x72>
 800bc38:	f104 0909 	add.w	r9, r4, #9
 800bc3c:	46c8      	mov	r8, r9
 800bc3e:	442c      	add	r4, r5
 800bc40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc44:	4601      	mov	r1, r0
 800bc46:	3b30      	subs	r3, #48	; 0x30
 800bc48:	220a      	movs	r2, #10
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ff88 	bl	800bb60 <__multadd>
 800bc50:	45a0      	cmp	r8, r4
 800bc52:	d1f5      	bne.n	800bc40 <__s2b+0x4c>
 800bc54:	f1a5 0408 	sub.w	r4, r5, #8
 800bc58:	444c      	add	r4, r9
 800bc5a:	1b2d      	subs	r5, r5, r4
 800bc5c:	1963      	adds	r3, r4, r5
 800bc5e:	42bb      	cmp	r3, r7
 800bc60:	db04      	blt.n	800bc6c <__s2b+0x78>
 800bc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc66:	340a      	adds	r4, #10
 800bc68:	2509      	movs	r5, #9
 800bc6a:	e7f6      	b.n	800bc5a <__s2b+0x66>
 800bc6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc70:	4601      	mov	r1, r0
 800bc72:	3b30      	subs	r3, #48	; 0x30
 800bc74:	220a      	movs	r2, #10
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff ff72 	bl	800bb60 <__multadd>
 800bc7c:	e7ee      	b.n	800bc5c <__s2b+0x68>
 800bc7e:	bf00      	nop
 800bc80:	0800d6dc 	.word	0x0800d6dc
 800bc84:	0800d76c 	.word	0x0800d76c

0800bc88 <__hi0bits>:
 800bc88:	0c03      	lsrs	r3, r0, #16
 800bc8a:	041b      	lsls	r3, r3, #16
 800bc8c:	b9d3      	cbnz	r3, 800bcc4 <__hi0bits+0x3c>
 800bc8e:	0400      	lsls	r0, r0, #16
 800bc90:	2310      	movs	r3, #16
 800bc92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc96:	bf04      	itt	eq
 800bc98:	0200      	lsleq	r0, r0, #8
 800bc9a:	3308      	addeq	r3, #8
 800bc9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bca0:	bf04      	itt	eq
 800bca2:	0100      	lsleq	r0, r0, #4
 800bca4:	3304      	addeq	r3, #4
 800bca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcaa:	bf04      	itt	eq
 800bcac:	0080      	lsleq	r0, r0, #2
 800bcae:	3302      	addeq	r3, #2
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	db05      	blt.n	800bcc0 <__hi0bits+0x38>
 800bcb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcb8:	f103 0301 	add.w	r3, r3, #1
 800bcbc:	bf08      	it	eq
 800bcbe:	2320      	moveq	r3, #32
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	4770      	bx	lr
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	e7e4      	b.n	800bc92 <__hi0bits+0xa>

0800bcc8 <__lo0bits>:
 800bcc8:	6803      	ldr	r3, [r0, #0]
 800bcca:	f013 0207 	ands.w	r2, r3, #7
 800bcce:	4601      	mov	r1, r0
 800bcd0:	d00b      	beq.n	800bcea <__lo0bits+0x22>
 800bcd2:	07da      	lsls	r2, r3, #31
 800bcd4:	d424      	bmi.n	800bd20 <__lo0bits+0x58>
 800bcd6:	0798      	lsls	r0, r3, #30
 800bcd8:	bf49      	itett	mi
 800bcda:	085b      	lsrmi	r3, r3, #1
 800bcdc:	089b      	lsrpl	r3, r3, #2
 800bcde:	2001      	movmi	r0, #1
 800bce0:	600b      	strmi	r3, [r1, #0]
 800bce2:	bf5c      	itt	pl
 800bce4:	600b      	strpl	r3, [r1, #0]
 800bce6:	2002      	movpl	r0, #2
 800bce8:	4770      	bx	lr
 800bcea:	b298      	uxth	r0, r3
 800bcec:	b9b0      	cbnz	r0, 800bd1c <__lo0bits+0x54>
 800bcee:	0c1b      	lsrs	r3, r3, #16
 800bcf0:	2010      	movs	r0, #16
 800bcf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bcf6:	bf04      	itt	eq
 800bcf8:	0a1b      	lsreq	r3, r3, #8
 800bcfa:	3008      	addeq	r0, #8
 800bcfc:	071a      	lsls	r2, r3, #28
 800bcfe:	bf04      	itt	eq
 800bd00:	091b      	lsreq	r3, r3, #4
 800bd02:	3004      	addeq	r0, #4
 800bd04:	079a      	lsls	r2, r3, #30
 800bd06:	bf04      	itt	eq
 800bd08:	089b      	lsreq	r3, r3, #2
 800bd0a:	3002      	addeq	r0, #2
 800bd0c:	07da      	lsls	r2, r3, #31
 800bd0e:	d403      	bmi.n	800bd18 <__lo0bits+0x50>
 800bd10:	085b      	lsrs	r3, r3, #1
 800bd12:	f100 0001 	add.w	r0, r0, #1
 800bd16:	d005      	beq.n	800bd24 <__lo0bits+0x5c>
 800bd18:	600b      	str	r3, [r1, #0]
 800bd1a:	4770      	bx	lr
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	e7e8      	b.n	800bcf2 <__lo0bits+0x2a>
 800bd20:	2000      	movs	r0, #0
 800bd22:	4770      	bx	lr
 800bd24:	2020      	movs	r0, #32
 800bd26:	4770      	bx	lr

0800bd28 <__i2b>:
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	f7ff feb5 	bl	800ba9c <_Balloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <__i2b+0x1a>
 800bd36:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <__i2b+0x24>)
 800bd38:	4805      	ldr	r0, [pc, #20]	; (800bd50 <__i2b+0x28>)
 800bd3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd3e:	f000 fdb7 	bl	800c8b0 <__assert_func>
 800bd42:	2301      	movs	r3, #1
 800bd44:	6144      	str	r4, [r0, #20]
 800bd46:	6103      	str	r3, [r0, #16]
 800bd48:	bd10      	pop	{r4, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0800d6dc 	.word	0x0800d6dc
 800bd50:	0800d76c 	.word	0x0800d76c

0800bd54 <__multiply>:
 800bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	4614      	mov	r4, r2
 800bd5a:	690a      	ldr	r2, [r1, #16]
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	bfb8      	it	lt
 800bd62:	460b      	movlt	r3, r1
 800bd64:	460d      	mov	r5, r1
 800bd66:	bfbc      	itt	lt
 800bd68:	4625      	movlt	r5, r4
 800bd6a:	461c      	movlt	r4, r3
 800bd6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd74:	68ab      	ldr	r3, [r5, #8]
 800bd76:	6869      	ldr	r1, [r5, #4]
 800bd78:	eb0a 0709 	add.w	r7, sl, r9
 800bd7c:	42bb      	cmp	r3, r7
 800bd7e:	b085      	sub	sp, #20
 800bd80:	bfb8      	it	lt
 800bd82:	3101      	addlt	r1, #1
 800bd84:	f7ff fe8a 	bl	800ba9c <_Balloc>
 800bd88:	b930      	cbnz	r0, 800bd98 <__multiply+0x44>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	4b42      	ldr	r3, [pc, #264]	; (800be98 <__multiply+0x144>)
 800bd8e:	4843      	ldr	r0, [pc, #268]	; (800be9c <__multiply+0x148>)
 800bd90:	f240 115d 	movw	r1, #349	; 0x15d
 800bd94:	f000 fd8c 	bl	800c8b0 <__assert_func>
 800bd98:	f100 0614 	add.w	r6, r0, #20
 800bd9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bda0:	4633      	mov	r3, r6
 800bda2:	2200      	movs	r2, #0
 800bda4:	4543      	cmp	r3, r8
 800bda6:	d31e      	bcc.n	800bde6 <__multiply+0x92>
 800bda8:	f105 0c14 	add.w	ip, r5, #20
 800bdac:	f104 0314 	add.w	r3, r4, #20
 800bdb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bdb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bdb8:	9202      	str	r2, [sp, #8]
 800bdba:	ebac 0205 	sub.w	r2, ip, r5
 800bdbe:	3a15      	subs	r2, #21
 800bdc0:	f022 0203 	bic.w	r2, r2, #3
 800bdc4:	3204      	adds	r2, #4
 800bdc6:	f105 0115 	add.w	r1, r5, #21
 800bdca:	458c      	cmp	ip, r1
 800bdcc:	bf38      	it	cc
 800bdce:	2204      	movcc	r2, #4
 800bdd0:	9201      	str	r2, [sp, #4]
 800bdd2:	9a02      	ldr	r2, [sp, #8]
 800bdd4:	9303      	str	r3, [sp, #12]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d808      	bhi.n	800bdec <__multiply+0x98>
 800bdda:	2f00      	cmp	r7, #0
 800bddc:	dc55      	bgt.n	800be8a <__multiply+0x136>
 800bdde:	6107      	str	r7, [r0, #16]
 800bde0:	b005      	add	sp, #20
 800bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde6:	f843 2b04 	str.w	r2, [r3], #4
 800bdea:	e7db      	b.n	800bda4 <__multiply+0x50>
 800bdec:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdf0:	f1ba 0f00 	cmp.w	sl, #0
 800bdf4:	d020      	beq.n	800be38 <__multiply+0xe4>
 800bdf6:	f105 0e14 	add.w	lr, r5, #20
 800bdfa:	46b1      	mov	r9, r6
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be02:	f8d9 b000 	ldr.w	fp, [r9]
 800be06:	b2a1      	uxth	r1, r4
 800be08:	fa1f fb8b 	uxth.w	fp, fp
 800be0c:	fb0a b101 	mla	r1, sl, r1, fp
 800be10:	4411      	add	r1, r2
 800be12:	f8d9 2000 	ldr.w	r2, [r9]
 800be16:	0c24      	lsrs	r4, r4, #16
 800be18:	0c12      	lsrs	r2, r2, #16
 800be1a:	fb0a 2404 	mla	r4, sl, r4, r2
 800be1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be22:	b289      	uxth	r1, r1
 800be24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be28:	45f4      	cmp	ip, lr
 800be2a:	f849 1b04 	str.w	r1, [r9], #4
 800be2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be32:	d8e4      	bhi.n	800bdfe <__multiply+0xaa>
 800be34:	9901      	ldr	r1, [sp, #4]
 800be36:	5072      	str	r2, [r6, r1]
 800be38:	9a03      	ldr	r2, [sp, #12]
 800be3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be3e:	3304      	adds	r3, #4
 800be40:	f1b9 0f00 	cmp.w	r9, #0
 800be44:	d01f      	beq.n	800be86 <__multiply+0x132>
 800be46:	6834      	ldr	r4, [r6, #0]
 800be48:	f105 0114 	add.w	r1, r5, #20
 800be4c:	46b6      	mov	lr, r6
 800be4e:	f04f 0a00 	mov.w	sl, #0
 800be52:	880a      	ldrh	r2, [r1, #0]
 800be54:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be58:	fb09 b202 	mla	r2, r9, r2, fp
 800be5c:	4492      	add	sl, r2
 800be5e:	b2a4      	uxth	r4, r4
 800be60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be64:	f84e 4b04 	str.w	r4, [lr], #4
 800be68:	f851 4b04 	ldr.w	r4, [r1], #4
 800be6c:	f8be 2000 	ldrh.w	r2, [lr]
 800be70:	0c24      	lsrs	r4, r4, #16
 800be72:	fb09 2404 	mla	r4, r9, r4, r2
 800be76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be7a:	458c      	cmp	ip, r1
 800be7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be80:	d8e7      	bhi.n	800be52 <__multiply+0xfe>
 800be82:	9a01      	ldr	r2, [sp, #4]
 800be84:	50b4      	str	r4, [r6, r2]
 800be86:	3604      	adds	r6, #4
 800be88:	e7a3      	b.n	800bdd2 <__multiply+0x7e>
 800be8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1a5      	bne.n	800bdde <__multiply+0x8a>
 800be92:	3f01      	subs	r7, #1
 800be94:	e7a1      	b.n	800bdda <__multiply+0x86>
 800be96:	bf00      	nop
 800be98:	0800d6dc 	.word	0x0800d6dc
 800be9c:	0800d76c 	.word	0x0800d76c

0800bea0 <__pow5mult>:
 800bea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea4:	4615      	mov	r5, r2
 800bea6:	f012 0203 	ands.w	r2, r2, #3
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	d007      	beq.n	800bec0 <__pow5mult+0x20>
 800beb0:	4c25      	ldr	r4, [pc, #148]	; (800bf48 <__pow5mult+0xa8>)
 800beb2:	3a01      	subs	r2, #1
 800beb4:	2300      	movs	r3, #0
 800beb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800beba:	f7ff fe51 	bl	800bb60 <__multadd>
 800bebe:	4607      	mov	r7, r0
 800bec0:	10ad      	asrs	r5, r5, #2
 800bec2:	d03d      	beq.n	800bf40 <__pow5mult+0xa0>
 800bec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bec6:	b97c      	cbnz	r4, 800bee8 <__pow5mult+0x48>
 800bec8:	2010      	movs	r0, #16
 800beca:	f7ff fdbf 	bl	800ba4c <malloc>
 800bece:	4602      	mov	r2, r0
 800bed0:	6270      	str	r0, [r6, #36]	; 0x24
 800bed2:	b928      	cbnz	r0, 800bee0 <__pow5mult+0x40>
 800bed4:	4b1d      	ldr	r3, [pc, #116]	; (800bf4c <__pow5mult+0xac>)
 800bed6:	481e      	ldr	r0, [pc, #120]	; (800bf50 <__pow5mult+0xb0>)
 800bed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bedc:	f000 fce8 	bl	800c8b0 <__assert_func>
 800bee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bee4:	6004      	str	r4, [r0, #0]
 800bee6:	60c4      	str	r4, [r0, #12]
 800bee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800beec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bef0:	b94c      	cbnz	r4, 800bf06 <__pow5mult+0x66>
 800bef2:	f240 2171 	movw	r1, #625	; 0x271
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7ff ff16 	bl	800bd28 <__i2b>
 800befc:	2300      	movs	r3, #0
 800befe:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf02:	4604      	mov	r4, r0
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	f04f 0900 	mov.w	r9, #0
 800bf0a:	07eb      	lsls	r3, r5, #31
 800bf0c:	d50a      	bpl.n	800bf24 <__pow5mult+0x84>
 800bf0e:	4639      	mov	r1, r7
 800bf10:	4622      	mov	r2, r4
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7ff ff1e 	bl	800bd54 <__multiply>
 800bf18:	4639      	mov	r1, r7
 800bf1a:	4680      	mov	r8, r0
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff fdfd 	bl	800bb1c <_Bfree>
 800bf22:	4647      	mov	r7, r8
 800bf24:	106d      	asrs	r5, r5, #1
 800bf26:	d00b      	beq.n	800bf40 <__pow5mult+0xa0>
 800bf28:	6820      	ldr	r0, [r4, #0]
 800bf2a:	b938      	cbnz	r0, 800bf3c <__pow5mult+0x9c>
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff ff0f 	bl	800bd54 <__multiply>
 800bf36:	6020      	str	r0, [r4, #0]
 800bf38:	f8c0 9000 	str.w	r9, [r0]
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	e7e4      	b.n	800bf0a <__pow5mult+0x6a>
 800bf40:	4638      	mov	r0, r7
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	bf00      	nop
 800bf48:	0800d8c0 	.word	0x0800d8c0
 800bf4c:	0800d666 	.word	0x0800d666
 800bf50:	0800d76c 	.word	0x0800d76c

0800bf54 <__lshift>:
 800bf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf58:	460c      	mov	r4, r1
 800bf5a:	6849      	ldr	r1, [r1, #4]
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	4607      	mov	r7, r0
 800bf66:	4691      	mov	r9, r2
 800bf68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf6c:	f108 0601 	add.w	r6, r8, #1
 800bf70:	42b3      	cmp	r3, r6
 800bf72:	db0b      	blt.n	800bf8c <__lshift+0x38>
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff fd91 	bl	800ba9c <_Balloc>
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	b948      	cbnz	r0, 800bf92 <__lshift+0x3e>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	4b28      	ldr	r3, [pc, #160]	; (800c024 <__lshift+0xd0>)
 800bf82:	4829      	ldr	r0, [pc, #164]	; (800c028 <__lshift+0xd4>)
 800bf84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf88:	f000 fc92 	bl	800c8b0 <__assert_func>
 800bf8c:	3101      	adds	r1, #1
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	e7ee      	b.n	800bf70 <__lshift+0x1c>
 800bf92:	2300      	movs	r3, #0
 800bf94:	f100 0114 	add.w	r1, r0, #20
 800bf98:	f100 0210 	add.w	r2, r0, #16
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	4553      	cmp	r3, sl
 800bfa0:	db33      	blt.n	800c00a <__lshift+0xb6>
 800bfa2:	6920      	ldr	r0, [r4, #16]
 800bfa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfa8:	f104 0314 	add.w	r3, r4, #20
 800bfac:	f019 091f 	ands.w	r9, r9, #31
 800bfb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfb8:	d02b      	beq.n	800c012 <__lshift+0xbe>
 800bfba:	f1c9 0e20 	rsb	lr, r9, #32
 800bfbe:	468a      	mov	sl, r1
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	6818      	ldr	r0, [r3, #0]
 800bfc4:	fa00 f009 	lsl.w	r0, r0, r9
 800bfc8:	4302      	orrs	r2, r0
 800bfca:	f84a 2b04 	str.w	r2, [sl], #4
 800bfce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd2:	459c      	cmp	ip, r3
 800bfd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfd8:	d8f3      	bhi.n	800bfc2 <__lshift+0x6e>
 800bfda:	ebac 0304 	sub.w	r3, ip, r4
 800bfde:	3b15      	subs	r3, #21
 800bfe0:	f023 0303 	bic.w	r3, r3, #3
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	f104 0015 	add.w	r0, r4, #21
 800bfea:	4584      	cmp	ip, r0
 800bfec:	bf38      	it	cc
 800bfee:	2304      	movcc	r3, #4
 800bff0:	50ca      	str	r2, [r1, r3]
 800bff2:	b10a      	cbz	r2, 800bff8 <__lshift+0xa4>
 800bff4:	f108 0602 	add.w	r6, r8, #2
 800bff8:	3e01      	subs	r6, #1
 800bffa:	4638      	mov	r0, r7
 800bffc:	612e      	str	r6, [r5, #16]
 800bffe:	4621      	mov	r1, r4
 800c000:	f7ff fd8c 	bl	800bb1c <_Bfree>
 800c004:	4628      	mov	r0, r5
 800c006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c00e:	3301      	adds	r3, #1
 800c010:	e7c5      	b.n	800bf9e <__lshift+0x4a>
 800c012:	3904      	subs	r1, #4
 800c014:	f853 2b04 	ldr.w	r2, [r3], #4
 800c018:	f841 2f04 	str.w	r2, [r1, #4]!
 800c01c:	459c      	cmp	ip, r3
 800c01e:	d8f9      	bhi.n	800c014 <__lshift+0xc0>
 800c020:	e7ea      	b.n	800bff8 <__lshift+0xa4>
 800c022:	bf00      	nop
 800c024:	0800d6dc 	.word	0x0800d6dc
 800c028:	0800d76c 	.word	0x0800d76c

0800c02c <__mcmp>:
 800c02c:	b530      	push	{r4, r5, lr}
 800c02e:	6902      	ldr	r2, [r0, #16]
 800c030:	690c      	ldr	r4, [r1, #16]
 800c032:	1b12      	subs	r2, r2, r4
 800c034:	d10e      	bne.n	800c054 <__mcmp+0x28>
 800c036:	f100 0314 	add.w	r3, r0, #20
 800c03a:	3114      	adds	r1, #20
 800c03c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c04c:	42a5      	cmp	r5, r4
 800c04e:	d003      	beq.n	800c058 <__mcmp+0x2c>
 800c050:	d305      	bcc.n	800c05e <__mcmp+0x32>
 800c052:	2201      	movs	r2, #1
 800c054:	4610      	mov	r0, r2
 800c056:	bd30      	pop	{r4, r5, pc}
 800c058:	4283      	cmp	r3, r0
 800c05a:	d3f3      	bcc.n	800c044 <__mcmp+0x18>
 800c05c:	e7fa      	b.n	800c054 <__mcmp+0x28>
 800c05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c062:	e7f7      	b.n	800c054 <__mcmp+0x28>

0800c064 <__mdiff>:
 800c064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	460c      	mov	r4, r1
 800c06a:	4606      	mov	r6, r0
 800c06c:	4611      	mov	r1, r2
 800c06e:	4620      	mov	r0, r4
 800c070:	4617      	mov	r7, r2
 800c072:	f7ff ffdb 	bl	800c02c <__mcmp>
 800c076:	1e05      	subs	r5, r0, #0
 800c078:	d110      	bne.n	800c09c <__mdiff+0x38>
 800c07a:	4629      	mov	r1, r5
 800c07c:	4630      	mov	r0, r6
 800c07e:	f7ff fd0d 	bl	800ba9c <_Balloc>
 800c082:	b930      	cbnz	r0, 800c092 <__mdiff+0x2e>
 800c084:	4b39      	ldr	r3, [pc, #228]	; (800c16c <__mdiff+0x108>)
 800c086:	4602      	mov	r2, r0
 800c088:	f240 2132 	movw	r1, #562	; 0x232
 800c08c:	4838      	ldr	r0, [pc, #224]	; (800c170 <__mdiff+0x10c>)
 800c08e:	f000 fc0f 	bl	800c8b0 <__assert_func>
 800c092:	2301      	movs	r3, #1
 800c094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09c:	bfa4      	itt	ge
 800c09e:	463b      	movge	r3, r7
 800c0a0:	4627      	movge	r7, r4
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	bfa6      	itte	ge
 800c0a8:	461c      	movge	r4, r3
 800c0aa:	2500      	movge	r5, #0
 800c0ac:	2501      	movlt	r5, #1
 800c0ae:	f7ff fcf5 	bl	800ba9c <_Balloc>
 800c0b2:	b920      	cbnz	r0, 800c0be <__mdiff+0x5a>
 800c0b4:	4b2d      	ldr	r3, [pc, #180]	; (800c16c <__mdiff+0x108>)
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0bc:	e7e6      	b.n	800c08c <__mdiff+0x28>
 800c0be:	693e      	ldr	r6, [r7, #16]
 800c0c0:	60c5      	str	r5, [r0, #12]
 800c0c2:	6925      	ldr	r5, [r4, #16]
 800c0c4:	f107 0114 	add.w	r1, r7, #20
 800c0c8:	f104 0914 	add.w	r9, r4, #20
 800c0cc:	f100 0e14 	add.w	lr, r0, #20
 800c0d0:	f107 0210 	add.w	r2, r7, #16
 800c0d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c0d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c0dc:	46f2      	mov	sl, lr
 800c0de:	2700      	movs	r7, #0
 800c0e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0e8:	fa1f f883 	uxth.w	r8, r3
 800c0ec:	fa17 f78b 	uxtah	r7, r7, fp
 800c0f0:	0c1b      	lsrs	r3, r3, #16
 800c0f2:	eba7 0808 	sub.w	r8, r7, r8
 800c0f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0fe:	fa1f f888 	uxth.w	r8, r8
 800c102:	141f      	asrs	r7, r3, #16
 800c104:	454d      	cmp	r5, r9
 800c106:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c10a:	f84a 3b04 	str.w	r3, [sl], #4
 800c10e:	d8e7      	bhi.n	800c0e0 <__mdiff+0x7c>
 800c110:	1b2b      	subs	r3, r5, r4
 800c112:	3b15      	subs	r3, #21
 800c114:	f023 0303 	bic.w	r3, r3, #3
 800c118:	3304      	adds	r3, #4
 800c11a:	3415      	adds	r4, #21
 800c11c:	42a5      	cmp	r5, r4
 800c11e:	bf38      	it	cc
 800c120:	2304      	movcc	r3, #4
 800c122:	4419      	add	r1, r3
 800c124:	4473      	add	r3, lr
 800c126:	469e      	mov	lr, r3
 800c128:	460d      	mov	r5, r1
 800c12a:	4565      	cmp	r5, ip
 800c12c:	d30e      	bcc.n	800c14c <__mdiff+0xe8>
 800c12e:	f10c 0203 	add.w	r2, ip, #3
 800c132:	1a52      	subs	r2, r2, r1
 800c134:	f022 0203 	bic.w	r2, r2, #3
 800c138:	3903      	subs	r1, #3
 800c13a:	458c      	cmp	ip, r1
 800c13c:	bf38      	it	cc
 800c13e:	2200      	movcc	r2, #0
 800c140:	441a      	add	r2, r3
 800c142:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c146:	b17b      	cbz	r3, 800c168 <__mdiff+0x104>
 800c148:	6106      	str	r6, [r0, #16]
 800c14a:	e7a5      	b.n	800c098 <__mdiff+0x34>
 800c14c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c150:	fa17 f488 	uxtah	r4, r7, r8
 800c154:	1422      	asrs	r2, r4, #16
 800c156:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c15a:	b2a4      	uxth	r4, r4
 800c15c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c160:	f84e 4b04 	str.w	r4, [lr], #4
 800c164:	1417      	asrs	r7, r2, #16
 800c166:	e7e0      	b.n	800c12a <__mdiff+0xc6>
 800c168:	3e01      	subs	r6, #1
 800c16a:	e7ea      	b.n	800c142 <__mdiff+0xde>
 800c16c:	0800d6dc 	.word	0x0800d6dc
 800c170:	0800d76c 	.word	0x0800d76c

0800c174 <__ulp>:
 800c174:	b082      	sub	sp, #8
 800c176:	ed8d 0b00 	vstr	d0, [sp]
 800c17a:	9b01      	ldr	r3, [sp, #4]
 800c17c:	4912      	ldr	r1, [pc, #72]	; (800c1c8 <__ulp+0x54>)
 800c17e:	4019      	ands	r1, r3
 800c180:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c184:	2900      	cmp	r1, #0
 800c186:	dd05      	ble.n	800c194 <__ulp+0x20>
 800c188:	2200      	movs	r2, #0
 800c18a:	460b      	mov	r3, r1
 800c18c:	ec43 2b10 	vmov	d0, r2, r3
 800c190:	b002      	add	sp, #8
 800c192:	4770      	bx	lr
 800c194:	4249      	negs	r1, r1
 800c196:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c19a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c19e:	f04f 0200 	mov.w	r2, #0
 800c1a2:	f04f 0300 	mov.w	r3, #0
 800c1a6:	da04      	bge.n	800c1b2 <__ulp+0x3e>
 800c1a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c1ac:	fa41 f300 	asr.w	r3, r1, r0
 800c1b0:	e7ec      	b.n	800c18c <__ulp+0x18>
 800c1b2:	f1a0 0114 	sub.w	r1, r0, #20
 800c1b6:	291e      	cmp	r1, #30
 800c1b8:	bfda      	itte	le
 800c1ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c1be:	fa20 f101 	lsrle.w	r1, r0, r1
 800c1c2:	2101      	movgt	r1, #1
 800c1c4:	460a      	mov	r2, r1
 800c1c6:	e7e1      	b.n	800c18c <__ulp+0x18>
 800c1c8:	7ff00000 	.word	0x7ff00000

0800c1cc <__b2d>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	6905      	ldr	r5, [r0, #16]
 800c1d0:	f100 0714 	add.w	r7, r0, #20
 800c1d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c1d8:	1f2e      	subs	r6, r5, #4
 800c1da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7ff fd52 	bl	800bc88 <__hi0bits>
 800c1e4:	f1c0 0320 	rsb	r3, r0, #32
 800c1e8:	280a      	cmp	r0, #10
 800c1ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c268 <__b2d+0x9c>
 800c1ee:	600b      	str	r3, [r1, #0]
 800c1f0:	dc14      	bgt.n	800c21c <__b2d+0x50>
 800c1f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c1f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c1fa:	42b7      	cmp	r7, r6
 800c1fc:	ea41 030c 	orr.w	r3, r1, ip
 800c200:	bf34      	ite	cc
 800c202:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c206:	2100      	movcs	r1, #0
 800c208:	3015      	adds	r0, #21
 800c20a:	fa04 f000 	lsl.w	r0, r4, r0
 800c20e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c212:	ea40 0201 	orr.w	r2, r0, r1
 800c216:	ec43 2b10 	vmov	d0, r2, r3
 800c21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c21c:	42b7      	cmp	r7, r6
 800c21e:	bf3a      	itte	cc
 800c220:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c224:	f1a5 0608 	subcc.w	r6, r5, #8
 800c228:	2100      	movcs	r1, #0
 800c22a:	380b      	subs	r0, #11
 800c22c:	d017      	beq.n	800c25e <__b2d+0x92>
 800c22e:	f1c0 0c20 	rsb	ip, r0, #32
 800c232:	fa04 f500 	lsl.w	r5, r4, r0
 800c236:	42be      	cmp	r6, r7
 800c238:	fa21 f40c 	lsr.w	r4, r1, ip
 800c23c:	ea45 0504 	orr.w	r5, r5, r4
 800c240:	bf8c      	ite	hi
 800c242:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c246:	2400      	movls	r4, #0
 800c248:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c24c:	fa01 f000 	lsl.w	r0, r1, r0
 800c250:	fa24 f40c 	lsr.w	r4, r4, ip
 800c254:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c258:	ea40 0204 	orr.w	r2, r0, r4
 800c25c:	e7db      	b.n	800c216 <__b2d+0x4a>
 800c25e:	ea44 030c 	orr.w	r3, r4, ip
 800c262:	460a      	mov	r2, r1
 800c264:	e7d7      	b.n	800c216 <__b2d+0x4a>
 800c266:	bf00      	nop
 800c268:	3ff00000 	.word	0x3ff00000

0800c26c <__d2b>:
 800c26c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c270:	4689      	mov	r9, r1
 800c272:	2101      	movs	r1, #1
 800c274:	ec57 6b10 	vmov	r6, r7, d0
 800c278:	4690      	mov	r8, r2
 800c27a:	f7ff fc0f 	bl	800ba9c <_Balloc>
 800c27e:	4604      	mov	r4, r0
 800c280:	b930      	cbnz	r0, 800c290 <__d2b+0x24>
 800c282:	4602      	mov	r2, r0
 800c284:	4b25      	ldr	r3, [pc, #148]	; (800c31c <__d2b+0xb0>)
 800c286:	4826      	ldr	r0, [pc, #152]	; (800c320 <__d2b+0xb4>)
 800c288:	f240 310a 	movw	r1, #778	; 0x30a
 800c28c:	f000 fb10 	bl	800c8b0 <__assert_func>
 800c290:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c298:	bb35      	cbnz	r5, 800c2e8 <__d2b+0x7c>
 800c29a:	2e00      	cmp	r6, #0
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	d028      	beq.n	800c2f2 <__d2b+0x86>
 800c2a0:	4668      	mov	r0, sp
 800c2a2:	9600      	str	r6, [sp, #0]
 800c2a4:	f7ff fd10 	bl	800bcc8 <__lo0bits>
 800c2a8:	9900      	ldr	r1, [sp, #0]
 800c2aa:	b300      	cbz	r0, 800c2ee <__d2b+0x82>
 800c2ac:	9a01      	ldr	r2, [sp, #4]
 800c2ae:	f1c0 0320 	rsb	r3, r0, #32
 800c2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b6:	430b      	orrs	r3, r1
 800c2b8:	40c2      	lsrs	r2, r0
 800c2ba:	6163      	str	r3, [r4, #20]
 800c2bc:	9201      	str	r2, [sp, #4]
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	61a3      	str	r3, [r4, #24]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	bf14      	ite	ne
 800c2c6:	2202      	movne	r2, #2
 800c2c8:	2201      	moveq	r2, #1
 800c2ca:	6122      	str	r2, [r4, #16]
 800c2cc:	b1d5      	cbz	r5, 800c304 <__d2b+0x98>
 800c2ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2d2:	4405      	add	r5, r0
 800c2d4:	f8c9 5000 	str.w	r5, [r9]
 800c2d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2dc:	f8c8 0000 	str.w	r0, [r8]
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	b003      	add	sp, #12
 800c2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2ec:	e7d5      	b.n	800c29a <__d2b+0x2e>
 800c2ee:	6161      	str	r1, [r4, #20]
 800c2f0:	e7e5      	b.n	800c2be <__d2b+0x52>
 800c2f2:	a801      	add	r0, sp, #4
 800c2f4:	f7ff fce8 	bl	800bcc8 <__lo0bits>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	6163      	str	r3, [r4, #20]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	6122      	str	r2, [r4, #16]
 800c300:	3020      	adds	r0, #32
 800c302:	e7e3      	b.n	800c2cc <__d2b+0x60>
 800c304:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c30c:	f8c9 0000 	str.w	r0, [r9]
 800c310:	6918      	ldr	r0, [r3, #16]
 800c312:	f7ff fcb9 	bl	800bc88 <__hi0bits>
 800c316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c31a:	e7df      	b.n	800c2dc <__d2b+0x70>
 800c31c:	0800d6dc 	.word	0x0800d6dc
 800c320:	0800d76c 	.word	0x0800d76c

0800c324 <__ratio>:
 800c324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	468a      	mov	sl, r1
 800c32a:	4669      	mov	r1, sp
 800c32c:	4683      	mov	fp, r0
 800c32e:	f7ff ff4d 	bl	800c1cc <__b2d>
 800c332:	a901      	add	r1, sp, #4
 800c334:	4650      	mov	r0, sl
 800c336:	ec59 8b10 	vmov	r8, r9, d0
 800c33a:	ee10 6a10 	vmov	r6, s0
 800c33e:	f7ff ff45 	bl	800c1cc <__b2d>
 800c342:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c346:	f8da 2010 	ldr.w	r2, [sl, #16]
 800c34a:	eba3 0c02 	sub.w	ip, r3, r2
 800c34e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c352:	1a9b      	subs	r3, r3, r2
 800c354:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c358:	ec55 4b10 	vmov	r4, r5, d0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	ee10 0a10 	vmov	r0, s0
 800c362:	bfce      	itee	gt
 800c364:	464a      	movgt	r2, r9
 800c366:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c36a:	462a      	movle	r2, r5
 800c36c:	464f      	mov	r7, r9
 800c36e:	4629      	mov	r1, r5
 800c370:	bfcc      	ite	gt
 800c372:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c376:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c37a:	ec47 6b17 	vmov	d7, r6, r7
 800c37e:	ec41 0b16 	vmov	d6, r0, r1
 800c382:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800c386:	b003      	add	sp, #12
 800c388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c38c <__copybits>:
 800c38c:	3901      	subs	r1, #1
 800c38e:	b570      	push	{r4, r5, r6, lr}
 800c390:	1149      	asrs	r1, r1, #5
 800c392:	6914      	ldr	r4, [r2, #16]
 800c394:	3101      	adds	r1, #1
 800c396:	f102 0314 	add.w	r3, r2, #20
 800c39a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c39e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3a2:	1f05      	subs	r5, r0, #4
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	d30c      	bcc.n	800c3c2 <__copybits+0x36>
 800c3a8:	1aa3      	subs	r3, r4, r2
 800c3aa:	3b11      	subs	r3, #17
 800c3ac:	f023 0303 	bic.w	r3, r3, #3
 800c3b0:	3211      	adds	r2, #17
 800c3b2:	42a2      	cmp	r2, r4
 800c3b4:	bf88      	it	hi
 800c3b6:	2300      	movhi	r3, #0
 800c3b8:	4418      	add	r0, r3
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	4288      	cmp	r0, r1
 800c3be:	d305      	bcc.n	800c3cc <__copybits+0x40>
 800c3c0:	bd70      	pop	{r4, r5, r6, pc}
 800c3c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c3c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c3ca:	e7eb      	b.n	800c3a4 <__copybits+0x18>
 800c3cc:	f840 3b04 	str.w	r3, [r0], #4
 800c3d0:	e7f4      	b.n	800c3bc <__copybits+0x30>

0800c3d2 <__any_on>:
 800c3d2:	f100 0214 	add.w	r2, r0, #20
 800c3d6:	6900      	ldr	r0, [r0, #16]
 800c3d8:	114b      	asrs	r3, r1, #5
 800c3da:	4298      	cmp	r0, r3
 800c3dc:	b510      	push	{r4, lr}
 800c3de:	db11      	blt.n	800c404 <__any_on+0x32>
 800c3e0:	dd0a      	ble.n	800c3f8 <__any_on+0x26>
 800c3e2:	f011 011f 	ands.w	r1, r1, #31
 800c3e6:	d007      	beq.n	800c3f8 <__any_on+0x26>
 800c3e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3ec:	fa24 f001 	lsr.w	r0, r4, r1
 800c3f0:	fa00 f101 	lsl.w	r1, r0, r1
 800c3f4:	428c      	cmp	r4, r1
 800c3f6:	d10b      	bne.n	800c410 <__any_on+0x3e>
 800c3f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d803      	bhi.n	800c408 <__any_on+0x36>
 800c400:	2000      	movs	r0, #0
 800c402:	bd10      	pop	{r4, pc}
 800c404:	4603      	mov	r3, r0
 800c406:	e7f7      	b.n	800c3f8 <__any_on+0x26>
 800c408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c40c:	2900      	cmp	r1, #0
 800c40e:	d0f5      	beq.n	800c3fc <__any_on+0x2a>
 800c410:	2001      	movs	r0, #1
 800c412:	e7f6      	b.n	800c402 <__any_on+0x30>

0800c414 <_calloc_r>:
 800c414:	b513      	push	{r0, r1, r4, lr}
 800c416:	434a      	muls	r2, r1
 800c418:	4611      	mov	r1, r2
 800c41a:	9201      	str	r2, [sp, #4]
 800c41c:	f000 f85a 	bl	800c4d4 <_malloc_r>
 800c420:	4604      	mov	r4, r0
 800c422:	b118      	cbz	r0, 800c42c <_calloc_r+0x18>
 800c424:	9a01      	ldr	r2, [sp, #4]
 800c426:	2100      	movs	r1, #0
 800c428:	f7fc fc98 	bl	8008d5c <memset>
 800c42c:	4620      	mov	r0, r4
 800c42e:	b002      	add	sp, #8
 800c430:	bd10      	pop	{r4, pc}
	...

0800c434 <_free_r>:
 800c434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c436:	2900      	cmp	r1, #0
 800c438:	d048      	beq.n	800c4cc <_free_r+0x98>
 800c43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c43e:	9001      	str	r0, [sp, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	f1a1 0404 	sub.w	r4, r1, #4
 800c446:	bfb8      	it	lt
 800c448:	18e4      	addlt	r4, r4, r3
 800c44a:	f000 fa7b 	bl	800c944 <__malloc_lock>
 800c44e:	4a20      	ldr	r2, [pc, #128]	; (800c4d0 <_free_r+0x9c>)
 800c450:	9801      	ldr	r0, [sp, #4]
 800c452:	6813      	ldr	r3, [r2, #0]
 800c454:	4615      	mov	r5, r2
 800c456:	b933      	cbnz	r3, 800c466 <_free_r+0x32>
 800c458:	6063      	str	r3, [r4, #4]
 800c45a:	6014      	str	r4, [r2, #0]
 800c45c:	b003      	add	sp, #12
 800c45e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c462:	f000 ba75 	b.w	800c950 <__malloc_unlock>
 800c466:	42a3      	cmp	r3, r4
 800c468:	d90b      	bls.n	800c482 <_free_r+0x4e>
 800c46a:	6821      	ldr	r1, [r4, #0]
 800c46c:	1862      	adds	r2, r4, r1
 800c46e:	4293      	cmp	r3, r2
 800c470:	bf04      	itt	eq
 800c472:	681a      	ldreq	r2, [r3, #0]
 800c474:	685b      	ldreq	r3, [r3, #4]
 800c476:	6063      	str	r3, [r4, #4]
 800c478:	bf04      	itt	eq
 800c47a:	1852      	addeq	r2, r2, r1
 800c47c:	6022      	streq	r2, [r4, #0]
 800c47e:	602c      	str	r4, [r5, #0]
 800c480:	e7ec      	b.n	800c45c <_free_r+0x28>
 800c482:	461a      	mov	r2, r3
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	b10b      	cbz	r3, 800c48c <_free_r+0x58>
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d9fa      	bls.n	800c482 <_free_r+0x4e>
 800c48c:	6811      	ldr	r1, [r2, #0]
 800c48e:	1855      	adds	r5, r2, r1
 800c490:	42a5      	cmp	r5, r4
 800c492:	d10b      	bne.n	800c4ac <_free_r+0x78>
 800c494:	6824      	ldr	r4, [r4, #0]
 800c496:	4421      	add	r1, r4
 800c498:	1854      	adds	r4, r2, r1
 800c49a:	42a3      	cmp	r3, r4
 800c49c:	6011      	str	r1, [r2, #0]
 800c49e:	d1dd      	bne.n	800c45c <_free_r+0x28>
 800c4a0:	681c      	ldr	r4, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	6053      	str	r3, [r2, #4]
 800c4a6:	4421      	add	r1, r4
 800c4a8:	6011      	str	r1, [r2, #0]
 800c4aa:	e7d7      	b.n	800c45c <_free_r+0x28>
 800c4ac:	d902      	bls.n	800c4b4 <_free_r+0x80>
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	6003      	str	r3, [r0, #0]
 800c4b2:	e7d3      	b.n	800c45c <_free_r+0x28>
 800c4b4:	6825      	ldr	r5, [r4, #0]
 800c4b6:	1961      	adds	r1, r4, r5
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	bf04      	itt	eq
 800c4bc:	6819      	ldreq	r1, [r3, #0]
 800c4be:	685b      	ldreq	r3, [r3, #4]
 800c4c0:	6063      	str	r3, [r4, #4]
 800c4c2:	bf04      	itt	eq
 800c4c4:	1949      	addeq	r1, r1, r5
 800c4c6:	6021      	streq	r1, [r4, #0]
 800c4c8:	6054      	str	r4, [r2, #4]
 800c4ca:	e7c7      	b.n	800c45c <_free_r+0x28>
 800c4cc:	b003      	add	sp, #12
 800c4ce:	bd30      	pop	{r4, r5, pc}
 800c4d0:	24000214 	.word	0x24000214

0800c4d4 <_malloc_r>:
 800c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d6:	1ccd      	adds	r5, r1, #3
 800c4d8:	f025 0503 	bic.w	r5, r5, #3
 800c4dc:	3508      	adds	r5, #8
 800c4de:	2d0c      	cmp	r5, #12
 800c4e0:	bf38      	it	cc
 800c4e2:	250c      	movcc	r5, #12
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	db01      	blt.n	800c4ee <_malloc_r+0x1a>
 800c4ea:	42a9      	cmp	r1, r5
 800c4ec:	d903      	bls.n	800c4f6 <_malloc_r+0x22>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	6033      	str	r3, [r6, #0]
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f6:	f000 fa25 	bl	800c944 <__malloc_lock>
 800c4fa:	4921      	ldr	r1, [pc, #132]	; (800c580 <_malloc_r+0xac>)
 800c4fc:	680a      	ldr	r2, [r1, #0]
 800c4fe:	4614      	mov	r4, r2
 800c500:	b99c      	cbnz	r4, 800c52a <_malloc_r+0x56>
 800c502:	4f20      	ldr	r7, [pc, #128]	; (800c584 <_malloc_r+0xb0>)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	b923      	cbnz	r3, 800c512 <_malloc_r+0x3e>
 800c508:	4621      	mov	r1, r4
 800c50a:	4630      	mov	r0, r6
 800c50c:	f000 f9a0 	bl	800c850 <_sbrk_r>
 800c510:	6038      	str	r0, [r7, #0]
 800c512:	4629      	mov	r1, r5
 800c514:	4630      	mov	r0, r6
 800c516:	f000 f99b 	bl	800c850 <_sbrk_r>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d123      	bne.n	800c566 <_malloc_r+0x92>
 800c51e:	230c      	movs	r3, #12
 800c520:	6033      	str	r3, [r6, #0]
 800c522:	4630      	mov	r0, r6
 800c524:	f000 fa14 	bl	800c950 <__malloc_unlock>
 800c528:	e7e3      	b.n	800c4f2 <_malloc_r+0x1e>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	1b5b      	subs	r3, r3, r5
 800c52e:	d417      	bmi.n	800c560 <_malloc_r+0x8c>
 800c530:	2b0b      	cmp	r3, #11
 800c532:	d903      	bls.n	800c53c <_malloc_r+0x68>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	441c      	add	r4, r3
 800c538:	6025      	str	r5, [r4, #0]
 800c53a:	e004      	b.n	800c546 <_malloc_r+0x72>
 800c53c:	6863      	ldr	r3, [r4, #4]
 800c53e:	42a2      	cmp	r2, r4
 800c540:	bf0c      	ite	eq
 800c542:	600b      	streq	r3, [r1, #0]
 800c544:	6053      	strne	r3, [r2, #4]
 800c546:	4630      	mov	r0, r6
 800c548:	f000 fa02 	bl	800c950 <__malloc_unlock>
 800c54c:	f104 000b 	add.w	r0, r4, #11
 800c550:	1d23      	adds	r3, r4, #4
 800c552:	f020 0007 	bic.w	r0, r0, #7
 800c556:	1ac2      	subs	r2, r0, r3
 800c558:	d0cc      	beq.n	800c4f4 <_malloc_r+0x20>
 800c55a:	1a1b      	subs	r3, r3, r0
 800c55c:	50a3      	str	r3, [r4, r2]
 800c55e:	e7c9      	b.n	800c4f4 <_malloc_r+0x20>
 800c560:	4622      	mov	r2, r4
 800c562:	6864      	ldr	r4, [r4, #4]
 800c564:	e7cc      	b.n	800c500 <_malloc_r+0x2c>
 800c566:	1cc4      	adds	r4, r0, #3
 800c568:	f024 0403 	bic.w	r4, r4, #3
 800c56c:	42a0      	cmp	r0, r4
 800c56e:	d0e3      	beq.n	800c538 <_malloc_r+0x64>
 800c570:	1a21      	subs	r1, r4, r0
 800c572:	4630      	mov	r0, r6
 800c574:	f000 f96c 	bl	800c850 <_sbrk_r>
 800c578:	3001      	adds	r0, #1
 800c57a:	d1dd      	bne.n	800c538 <_malloc_r+0x64>
 800c57c:	e7cf      	b.n	800c51e <_malloc_r+0x4a>
 800c57e:	bf00      	nop
 800c580:	24000214 	.word	0x24000214
 800c584:	24000218 	.word	0x24000218

0800c588 <__ssputs_r>:
 800c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	688e      	ldr	r6, [r1, #8]
 800c58e:	429e      	cmp	r6, r3
 800c590:	4682      	mov	sl, r0
 800c592:	460c      	mov	r4, r1
 800c594:	4690      	mov	r8, r2
 800c596:	461f      	mov	r7, r3
 800c598:	d838      	bhi.n	800c60c <__ssputs_r+0x84>
 800c59a:	898a      	ldrh	r2, [r1, #12]
 800c59c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5a0:	d032      	beq.n	800c608 <__ssputs_r+0x80>
 800c5a2:	6825      	ldr	r5, [r4, #0]
 800c5a4:	6909      	ldr	r1, [r1, #16]
 800c5a6:	eba5 0901 	sub.w	r9, r5, r1
 800c5aa:	6965      	ldr	r5, [r4, #20]
 800c5ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	444b      	add	r3, r9
 800c5b8:	106d      	asrs	r5, r5, #1
 800c5ba:	429d      	cmp	r5, r3
 800c5bc:	bf38      	it	cc
 800c5be:	461d      	movcc	r5, r3
 800c5c0:	0553      	lsls	r3, r2, #21
 800c5c2:	d531      	bpl.n	800c628 <__ssputs_r+0xa0>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f7ff ff85 	bl	800c4d4 <_malloc_r>
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	b950      	cbnz	r0, 800c5e4 <__ssputs_r+0x5c>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	f8ca 3000 	str.w	r3, [sl]
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e4:	6921      	ldr	r1, [r4, #16]
 800c5e6:	464a      	mov	r2, r9
 800c5e8:	f7ff fa4a 	bl	800ba80 <memcpy>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f6:	81a3      	strh	r3, [r4, #12]
 800c5f8:	6126      	str	r6, [r4, #16]
 800c5fa:	6165      	str	r5, [r4, #20]
 800c5fc:	444e      	add	r6, r9
 800c5fe:	eba5 0509 	sub.w	r5, r5, r9
 800c602:	6026      	str	r6, [r4, #0]
 800c604:	60a5      	str	r5, [r4, #8]
 800c606:	463e      	mov	r6, r7
 800c608:	42be      	cmp	r6, r7
 800c60a:	d900      	bls.n	800c60e <__ssputs_r+0x86>
 800c60c:	463e      	mov	r6, r7
 800c60e:	4632      	mov	r2, r6
 800c610:	6820      	ldr	r0, [r4, #0]
 800c612:	4641      	mov	r1, r8
 800c614:	f000 f97c 	bl	800c910 <memmove>
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	6822      	ldr	r2, [r4, #0]
 800c61c:	1b9b      	subs	r3, r3, r6
 800c61e:	4432      	add	r2, r6
 800c620:	60a3      	str	r3, [r4, #8]
 800c622:	6022      	str	r2, [r4, #0]
 800c624:	2000      	movs	r0, #0
 800c626:	e7db      	b.n	800c5e0 <__ssputs_r+0x58>
 800c628:	462a      	mov	r2, r5
 800c62a:	f000 f997 	bl	800c95c <_realloc_r>
 800c62e:	4606      	mov	r6, r0
 800c630:	2800      	cmp	r0, #0
 800c632:	d1e1      	bne.n	800c5f8 <__ssputs_r+0x70>
 800c634:	6921      	ldr	r1, [r4, #16]
 800c636:	4650      	mov	r0, sl
 800c638:	f7ff fefc 	bl	800c434 <_free_r>
 800c63c:	e7c7      	b.n	800c5ce <__ssputs_r+0x46>
	...

0800c640 <_svfiprintf_r>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	4698      	mov	r8, r3
 800c646:	898b      	ldrh	r3, [r1, #12]
 800c648:	061b      	lsls	r3, r3, #24
 800c64a:	b09d      	sub	sp, #116	; 0x74
 800c64c:	4607      	mov	r7, r0
 800c64e:	460d      	mov	r5, r1
 800c650:	4614      	mov	r4, r2
 800c652:	d50e      	bpl.n	800c672 <_svfiprintf_r+0x32>
 800c654:	690b      	ldr	r3, [r1, #16]
 800c656:	b963      	cbnz	r3, 800c672 <_svfiprintf_r+0x32>
 800c658:	2140      	movs	r1, #64	; 0x40
 800c65a:	f7ff ff3b 	bl	800c4d4 <_malloc_r>
 800c65e:	6028      	str	r0, [r5, #0]
 800c660:	6128      	str	r0, [r5, #16]
 800c662:	b920      	cbnz	r0, 800c66e <_svfiprintf_r+0x2e>
 800c664:	230c      	movs	r3, #12
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66c:	e0d1      	b.n	800c812 <_svfiprintf_r+0x1d2>
 800c66e:	2340      	movs	r3, #64	; 0x40
 800c670:	616b      	str	r3, [r5, #20]
 800c672:	2300      	movs	r3, #0
 800c674:	9309      	str	r3, [sp, #36]	; 0x24
 800c676:	2320      	movs	r3, #32
 800c678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c67c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c680:	2330      	movs	r3, #48	; 0x30
 800c682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c82c <_svfiprintf_r+0x1ec>
 800c686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c68a:	f04f 0901 	mov.w	r9, #1
 800c68e:	4623      	mov	r3, r4
 800c690:	469a      	mov	sl, r3
 800c692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c696:	b10a      	cbz	r2, 800c69c <_svfiprintf_r+0x5c>
 800c698:	2a25      	cmp	r2, #37	; 0x25
 800c69a:	d1f9      	bne.n	800c690 <_svfiprintf_r+0x50>
 800c69c:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a0:	d00b      	beq.n	800c6ba <_svfiprintf_r+0x7a>
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff ff6d 	bl	800c588 <__ssputs_r>
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	f000 80aa 	beq.w	800c808 <_svfiprintf_r+0x1c8>
 800c6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b6:	445a      	add	r2, fp
 800c6b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 80a2 	beq.w	800c808 <_svfiprintf_r+0x1c8>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ce:	f10a 0a01 	add.w	sl, sl, #1
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	9307      	str	r3, [sp, #28]
 800c6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6da:	931a      	str	r3, [sp, #104]	; 0x68
 800c6dc:	4654      	mov	r4, sl
 800c6de:	2205      	movs	r2, #5
 800c6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e4:	4851      	ldr	r0, [pc, #324]	; (800c82c <_svfiprintf_r+0x1ec>)
 800c6e6:	f7f3 fe03 	bl	80002f0 <memchr>
 800c6ea:	9a04      	ldr	r2, [sp, #16]
 800c6ec:	b9d8      	cbnz	r0, 800c726 <_svfiprintf_r+0xe6>
 800c6ee:	06d0      	lsls	r0, r2, #27
 800c6f0:	bf44      	itt	mi
 800c6f2:	2320      	movmi	r3, #32
 800c6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f8:	0711      	lsls	r1, r2, #28
 800c6fa:	bf44      	itt	mi
 800c6fc:	232b      	movmi	r3, #43	; 0x2b
 800c6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b2a      	cmp	r3, #42	; 0x2a
 800c708:	d015      	beq.n	800c736 <_svfiprintf_r+0xf6>
 800c70a:	9a07      	ldr	r2, [sp, #28]
 800c70c:	4654      	mov	r4, sl
 800c70e:	2000      	movs	r0, #0
 800c710:	f04f 0c0a 	mov.w	ip, #10
 800c714:	4621      	mov	r1, r4
 800c716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c71a:	3b30      	subs	r3, #48	; 0x30
 800c71c:	2b09      	cmp	r3, #9
 800c71e:	d94e      	bls.n	800c7be <_svfiprintf_r+0x17e>
 800c720:	b1b0      	cbz	r0, 800c750 <_svfiprintf_r+0x110>
 800c722:	9207      	str	r2, [sp, #28]
 800c724:	e014      	b.n	800c750 <_svfiprintf_r+0x110>
 800c726:	eba0 0308 	sub.w	r3, r0, r8
 800c72a:	fa09 f303 	lsl.w	r3, r9, r3
 800c72e:	4313      	orrs	r3, r2
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	46a2      	mov	sl, r4
 800c734:	e7d2      	b.n	800c6dc <_svfiprintf_r+0x9c>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	1d19      	adds	r1, r3, #4
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	9103      	str	r1, [sp, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bfbb      	ittet	lt
 800c742:	425b      	neglt	r3, r3
 800c744:	f042 0202 	orrlt.w	r2, r2, #2
 800c748:	9307      	strge	r3, [sp, #28]
 800c74a:	9307      	strlt	r3, [sp, #28]
 800c74c:	bfb8      	it	lt
 800c74e:	9204      	strlt	r2, [sp, #16]
 800c750:	7823      	ldrb	r3, [r4, #0]
 800c752:	2b2e      	cmp	r3, #46	; 0x2e
 800c754:	d10c      	bne.n	800c770 <_svfiprintf_r+0x130>
 800c756:	7863      	ldrb	r3, [r4, #1]
 800c758:	2b2a      	cmp	r3, #42	; 0x2a
 800c75a:	d135      	bne.n	800c7c8 <_svfiprintf_r+0x188>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	1d1a      	adds	r2, r3, #4
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	9203      	str	r2, [sp, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	bfb8      	it	lt
 800c768:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c76c:	3402      	adds	r4, #2
 800c76e:	9305      	str	r3, [sp, #20]
 800c770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c83c <_svfiprintf_r+0x1fc>
 800c774:	7821      	ldrb	r1, [r4, #0]
 800c776:	2203      	movs	r2, #3
 800c778:	4650      	mov	r0, sl
 800c77a:	f7f3 fdb9 	bl	80002f0 <memchr>
 800c77e:	b140      	cbz	r0, 800c792 <_svfiprintf_r+0x152>
 800c780:	2340      	movs	r3, #64	; 0x40
 800c782:	eba0 000a 	sub.w	r0, r0, sl
 800c786:	fa03 f000 	lsl.w	r0, r3, r0
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	4303      	orrs	r3, r0
 800c78e:	3401      	adds	r4, #1
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c796:	4826      	ldr	r0, [pc, #152]	; (800c830 <_svfiprintf_r+0x1f0>)
 800c798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c79c:	2206      	movs	r2, #6
 800c79e:	f7f3 fda7 	bl	80002f0 <memchr>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d038      	beq.n	800c818 <_svfiprintf_r+0x1d8>
 800c7a6:	4b23      	ldr	r3, [pc, #140]	; (800c834 <_svfiprintf_r+0x1f4>)
 800c7a8:	bb1b      	cbnz	r3, 800c7f2 <_svfiprintf_r+0x1b2>
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	3307      	adds	r3, #7
 800c7ae:	f023 0307 	bic.w	r3, r3, #7
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	9303      	str	r3, [sp, #12]
 800c7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b8:	4433      	add	r3, r6
 800c7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c7bc:	e767      	b.n	800c68e <_svfiprintf_r+0x4e>
 800c7be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	e7a5      	b.n	800c714 <_svfiprintf_r+0xd4>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f04f 0c0a 	mov.w	ip, #10
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7da:	3a30      	subs	r2, #48	; 0x30
 800c7dc:	2a09      	cmp	r2, #9
 800c7de:	d903      	bls.n	800c7e8 <_svfiprintf_r+0x1a8>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0c5      	beq.n	800c770 <_svfiprintf_r+0x130>
 800c7e4:	9105      	str	r1, [sp, #20]
 800c7e6:	e7c3      	b.n	800c770 <_svfiprintf_r+0x130>
 800c7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e7f0      	b.n	800c7d4 <_svfiprintf_r+0x194>
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <_svfiprintf_r+0x1f8>)
 800c7fa:	a904      	add	r1, sp, #16
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7fc fb47 	bl	8008e90 <_printf_float>
 800c802:	1c42      	adds	r2, r0, #1
 800c804:	4606      	mov	r6, r0
 800c806:	d1d6      	bne.n	800c7b6 <_svfiprintf_r+0x176>
 800c808:	89ab      	ldrh	r3, [r5, #12]
 800c80a:	065b      	lsls	r3, r3, #25
 800c80c:	f53f af2c 	bmi.w	800c668 <_svfiprintf_r+0x28>
 800c810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c812:	b01d      	add	sp, #116	; 0x74
 800c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c818:	ab03      	add	r3, sp, #12
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	462a      	mov	r2, r5
 800c81e:	4b06      	ldr	r3, [pc, #24]	; (800c838 <_svfiprintf_r+0x1f8>)
 800c820:	a904      	add	r1, sp, #16
 800c822:	4638      	mov	r0, r7
 800c824:	f7fc fdc0 	bl	80093a8 <_printf_i>
 800c828:	e7eb      	b.n	800c802 <_svfiprintf_r+0x1c2>
 800c82a:	bf00      	nop
 800c82c:	0800d8cc 	.word	0x0800d8cc
 800c830:	0800d8d6 	.word	0x0800d8d6
 800c834:	08008e91 	.word	0x08008e91
 800c838:	0800c589 	.word	0x0800c589
 800c83c:	0800d8d2 	.word	0x0800d8d2

0800c840 <nan>:
 800c840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c848 <nan+0x8>
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	00000000 	.word	0x00000000
 800c84c:	7ff80000 	.word	0x7ff80000

0800c850 <_sbrk_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d06      	ldr	r5, [pc, #24]	; (800c86c <_sbrk_r+0x1c>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f7f5 fbba 	bl	8001fd4 <_sbrk>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_sbrk_r+0x1a>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_sbrk_r+0x1a>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	240004c8 	.word	0x240004c8

0800c870 <strncmp>:
 800c870:	b510      	push	{r4, lr}
 800c872:	b16a      	cbz	r2, 800c890 <strncmp+0x20>
 800c874:	3901      	subs	r1, #1
 800c876:	1884      	adds	r4, r0, r2
 800c878:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c87c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c880:	4293      	cmp	r3, r2
 800c882:	d103      	bne.n	800c88c <strncmp+0x1c>
 800c884:	42a0      	cmp	r0, r4
 800c886:	d001      	beq.n	800c88c <strncmp+0x1c>
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1f5      	bne.n	800c878 <strncmp+0x8>
 800c88c:	1a98      	subs	r0, r3, r2
 800c88e:	bd10      	pop	{r4, pc}
 800c890:	4610      	mov	r0, r2
 800c892:	e7fc      	b.n	800c88e <strncmp+0x1e>

0800c894 <__ascii_wctomb>:
 800c894:	b149      	cbz	r1, 800c8aa <__ascii_wctomb+0x16>
 800c896:	2aff      	cmp	r2, #255	; 0xff
 800c898:	bf85      	ittet	hi
 800c89a:	238a      	movhi	r3, #138	; 0x8a
 800c89c:	6003      	strhi	r3, [r0, #0]
 800c89e:	700a      	strbls	r2, [r1, #0]
 800c8a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c8a4:	bf98      	it	ls
 800c8a6:	2001      	movls	r0, #1
 800c8a8:	4770      	bx	lr
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <__assert_func>:
 800c8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8b2:	4614      	mov	r4, r2
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <__assert_func+0x2c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	68d8      	ldr	r0, [r3, #12]
 800c8be:	b14c      	cbz	r4, 800c8d4 <__assert_func+0x24>
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <__assert_func+0x30>)
 800c8c2:	9100      	str	r1, [sp, #0]
 800c8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8c8:	4906      	ldr	r1, [pc, #24]	; (800c8e4 <__assert_func+0x34>)
 800c8ca:	462b      	mov	r3, r5
 800c8cc:	f000 f80e 	bl	800c8ec <fiprintf>
 800c8d0:	f000 fa84 	bl	800cddc <abort>
 800c8d4:	4b04      	ldr	r3, [pc, #16]	; (800c8e8 <__assert_func+0x38>)
 800c8d6:	461c      	mov	r4, r3
 800c8d8:	e7f3      	b.n	800c8c2 <__assert_func+0x12>
 800c8da:	bf00      	nop
 800c8dc:	24000014 	.word	0x24000014
 800c8e0:	0800d8dd 	.word	0x0800d8dd
 800c8e4:	0800d8ea 	.word	0x0800d8ea
 800c8e8:	0800d918 	.word	0x0800d918

0800c8ec <fiprintf>:
 800c8ec:	b40e      	push	{r1, r2, r3}
 800c8ee:	b503      	push	{r0, r1, lr}
 800c8f0:	4601      	mov	r1, r0
 800c8f2:	ab03      	add	r3, sp, #12
 800c8f4:	4805      	ldr	r0, [pc, #20]	; (800c90c <fiprintf+0x20>)
 800c8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8fa:	6800      	ldr	r0, [r0, #0]
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	f000 f87d 	bl	800c9fc <_vfiprintf_r>
 800c902:	b002      	add	sp, #8
 800c904:	f85d eb04 	ldr.w	lr, [sp], #4
 800c908:	b003      	add	sp, #12
 800c90a:	4770      	bx	lr
 800c90c:	24000014 	.word	0x24000014

0800c910 <memmove>:
 800c910:	4288      	cmp	r0, r1
 800c912:	b510      	push	{r4, lr}
 800c914:	eb01 0402 	add.w	r4, r1, r2
 800c918:	d902      	bls.n	800c920 <memmove+0x10>
 800c91a:	4284      	cmp	r4, r0
 800c91c:	4623      	mov	r3, r4
 800c91e:	d807      	bhi.n	800c930 <memmove+0x20>
 800c920:	1e43      	subs	r3, r0, #1
 800c922:	42a1      	cmp	r1, r4
 800c924:	d008      	beq.n	800c938 <memmove+0x28>
 800c926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c92e:	e7f8      	b.n	800c922 <memmove+0x12>
 800c930:	4402      	add	r2, r0
 800c932:	4601      	mov	r1, r0
 800c934:	428a      	cmp	r2, r1
 800c936:	d100      	bne.n	800c93a <memmove+0x2a>
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c942:	e7f7      	b.n	800c934 <memmove+0x24>

0800c944 <__malloc_lock>:
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <__malloc_lock+0x8>)
 800c946:	f000 bc09 	b.w	800d15c <__retarget_lock_acquire_recursive>
 800c94a:	bf00      	nop
 800c94c:	240004d0 	.word	0x240004d0

0800c950 <__malloc_unlock>:
 800c950:	4801      	ldr	r0, [pc, #4]	; (800c958 <__malloc_unlock+0x8>)
 800c952:	f000 bc04 	b.w	800d15e <__retarget_lock_release_recursive>
 800c956:	bf00      	nop
 800c958:	240004d0 	.word	0x240004d0

0800c95c <_realloc_r>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	4607      	mov	r7, r0
 800c960:	4614      	mov	r4, r2
 800c962:	460e      	mov	r6, r1
 800c964:	b921      	cbnz	r1, 800c970 <_realloc_r+0x14>
 800c966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c96a:	4611      	mov	r1, r2
 800c96c:	f7ff bdb2 	b.w	800c4d4 <_malloc_r>
 800c970:	b922      	cbnz	r2, 800c97c <_realloc_r+0x20>
 800c972:	f7ff fd5f 	bl	800c434 <_free_r>
 800c976:	4625      	mov	r5, r4
 800c978:	4628      	mov	r0, r5
 800c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97c:	f000 fc54 	bl	800d228 <_malloc_usable_size_r>
 800c980:	42a0      	cmp	r0, r4
 800c982:	d20f      	bcs.n	800c9a4 <_realloc_r+0x48>
 800c984:	4621      	mov	r1, r4
 800c986:	4638      	mov	r0, r7
 800c988:	f7ff fda4 	bl	800c4d4 <_malloc_r>
 800c98c:	4605      	mov	r5, r0
 800c98e:	2800      	cmp	r0, #0
 800c990:	d0f2      	beq.n	800c978 <_realloc_r+0x1c>
 800c992:	4631      	mov	r1, r6
 800c994:	4622      	mov	r2, r4
 800c996:	f7ff f873 	bl	800ba80 <memcpy>
 800c99a:	4631      	mov	r1, r6
 800c99c:	4638      	mov	r0, r7
 800c99e:	f7ff fd49 	bl	800c434 <_free_r>
 800c9a2:	e7e9      	b.n	800c978 <_realloc_r+0x1c>
 800c9a4:	4635      	mov	r5, r6
 800c9a6:	e7e7      	b.n	800c978 <_realloc_r+0x1c>

0800c9a8 <__sfputc_r>:
 800c9a8:	6893      	ldr	r3, [r2, #8]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	b410      	push	{r4}
 800c9b0:	6093      	str	r3, [r2, #8]
 800c9b2:	da08      	bge.n	800c9c6 <__sfputc_r+0x1e>
 800c9b4:	6994      	ldr	r4, [r2, #24]
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	db01      	blt.n	800c9be <__sfputc_r+0x16>
 800c9ba:	290a      	cmp	r1, #10
 800c9bc:	d103      	bne.n	800c9c6 <__sfputc_r+0x1e>
 800c9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9c2:	f000 b94b 	b.w	800cc5c <__swbuf_r>
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	1c58      	adds	r0, r3, #1
 800c9ca:	6010      	str	r0, [r2, #0]
 800c9cc:	7019      	strb	r1, [r3, #0]
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <__sfputs_r>:
 800c9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d8:	4606      	mov	r6, r0
 800c9da:	460f      	mov	r7, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	18d5      	adds	r5, r2, r3
 800c9e0:	42ac      	cmp	r4, r5
 800c9e2:	d101      	bne.n	800c9e8 <__sfputs_r+0x12>
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	e007      	b.n	800c9f8 <__sfputs_r+0x22>
 800c9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ec:	463a      	mov	r2, r7
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ffda 	bl	800c9a8 <__sfputc_r>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d1f3      	bne.n	800c9e0 <__sfputs_r+0xa>
 800c9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9fc <_vfiprintf_r>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	460d      	mov	r5, r1
 800ca02:	b09d      	sub	sp, #116	; 0x74
 800ca04:	4614      	mov	r4, r2
 800ca06:	4698      	mov	r8, r3
 800ca08:	4606      	mov	r6, r0
 800ca0a:	b118      	cbz	r0, 800ca14 <_vfiprintf_r+0x18>
 800ca0c:	6983      	ldr	r3, [r0, #24]
 800ca0e:	b90b      	cbnz	r3, 800ca14 <_vfiprintf_r+0x18>
 800ca10:	f000 fb06 	bl	800d020 <__sinit>
 800ca14:	4b89      	ldr	r3, [pc, #548]	; (800cc3c <_vfiprintf_r+0x240>)
 800ca16:	429d      	cmp	r5, r3
 800ca18:	d11b      	bne.n	800ca52 <_vfiprintf_r+0x56>
 800ca1a:	6875      	ldr	r5, [r6, #4]
 800ca1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca1e:	07d9      	lsls	r1, r3, #31
 800ca20:	d405      	bmi.n	800ca2e <_vfiprintf_r+0x32>
 800ca22:	89ab      	ldrh	r3, [r5, #12]
 800ca24:	059a      	lsls	r2, r3, #22
 800ca26:	d402      	bmi.n	800ca2e <_vfiprintf_r+0x32>
 800ca28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca2a:	f000 fb97 	bl	800d15c <__retarget_lock_acquire_recursive>
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	071b      	lsls	r3, r3, #28
 800ca32:	d501      	bpl.n	800ca38 <_vfiprintf_r+0x3c>
 800ca34:	692b      	ldr	r3, [r5, #16]
 800ca36:	b9eb      	cbnz	r3, 800ca74 <_vfiprintf_r+0x78>
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f000 f960 	bl	800cd00 <__swsetup_r>
 800ca40:	b1c0      	cbz	r0, 800ca74 <_vfiprintf_r+0x78>
 800ca42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca44:	07dc      	lsls	r4, r3, #31
 800ca46:	d50e      	bpl.n	800ca66 <_vfiprintf_r+0x6a>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca4c:	b01d      	add	sp, #116	; 0x74
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca52:	4b7b      	ldr	r3, [pc, #492]	; (800cc40 <_vfiprintf_r+0x244>)
 800ca54:	429d      	cmp	r5, r3
 800ca56:	d101      	bne.n	800ca5c <_vfiprintf_r+0x60>
 800ca58:	68b5      	ldr	r5, [r6, #8]
 800ca5a:	e7df      	b.n	800ca1c <_vfiprintf_r+0x20>
 800ca5c:	4b79      	ldr	r3, [pc, #484]	; (800cc44 <_vfiprintf_r+0x248>)
 800ca5e:	429d      	cmp	r5, r3
 800ca60:	bf08      	it	eq
 800ca62:	68f5      	ldreq	r5, [r6, #12]
 800ca64:	e7da      	b.n	800ca1c <_vfiprintf_r+0x20>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	0598      	lsls	r0, r3, #22
 800ca6a:	d4ed      	bmi.n	800ca48 <_vfiprintf_r+0x4c>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca6e:	f000 fb76 	bl	800d15e <__retarget_lock_release_recursive>
 800ca72:	e7e9      	b.n	800ca48 <_vfiprintf_r+0x4c>
 800ca74:	2300      	movs	r3, #0
 800ca76:	9309      	str	r3, [sp, #36]	; 0x24
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca82:	2330      	movs	r3, #48	; 0x30
 800ca84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc48 <_vfiprintf_r+0x24c>
 800ca88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca8c:	f04f 0901 	mov.w	r9, #1
 800ca90:	4623      	mov	r3, r4
 800ca92:	469a      	mov	sl, r3
 800ca94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca98:	b10a      	cbz	r2, 800ca9e <_vfiprintf_r+0xa2>
 800ca9a:	2a25      	cmp	r2, #37	; 0x25
 800ca9c:	d1f9      	bne.n	800ca92 <_vfiprintf_r+0x96>
 800ca9e:	ebba 0b04 	subs.w	fp, sl, r4
 800caa2:	d00b      	beq.n	800cabc <_vfiprintf_r+0xc0>
 800caa4:	465b      	mov	r3, fp
 800caa6:	4622      	mov	r2, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ff93 	bl	800c9d6 <__sfputs_r>
 800cab0:	3001      	adds	r0, #1
 800cab2:	f000 80aa 	beq.w	800cc0a <_vfiprintf_r+0x20e>
 800cab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab8:	445a      	add	r2, fp
 800caba:	9209      	str	r2, [sp, #36]	; 0x24
 800cabc:	f89a 3000 	ldrb.w	r3, [sl]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 80a2 	beq.w	800cc0a <_vfiprintf_r+0x20e>
 800cac6:	2300      	movs	r3, #0
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cacc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cad0:	f10a 0a01 	add.w	sl, sl, #1
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	9307      	str	r3, [sp, #28]
 800cad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cadc:	931a      	str	r3, [sp, #104]	; 0x68
 800cade:	4654      	mov	r4, sl
 800cae0:	2205      	movs	r2, #5
 800cae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae6:	4858      	ldr	r0, [pc, #352]	; (800cc48 <_vfiprintf_r+0x24c>)
 800cae8:	f7f3 fc02 	bl	80002f0 <memchr>
 800caec:	9a04      	ldr	r2, [sp, #16]
 800caee:	b9d8      	cbnz	r0, 800cb28 <_vfiprintf_r+0x12c>
 800caf0:	06d1      	lsls	r1, r2, #27
 800caf2:	bf44      	itt	mi
 800caf4:	2320      	movmi	r3, #32
 800caf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cafa:	0713      	lsls	r3, r2, #28
 800cafc:	bf44      	itt	mi
 800cafe:	232b      	movmi	r3, #43	; 0x2b
 800cb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb04:	f89a 3000 	ldrb.w	r3, [sl]
 800cb08:	2b2a      	cmp	r3, #42	; 0x2a
 800cb0a:	d015      	beq.n	800cb38 <_vfiprintf_r+0x13c>
 800cb0c:	9a07      	ldr	r2, [sp, #28]
 800cb0e:	4654      	mov	r4, sl
 800cb10:	2000      	movs	r0, #0
 800cb12:	f04f 0c0a 	mov.w	ip, #10
 800cb16:	4621      	mov	r1, r4
 800cb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb1c:	3b30      	subs	r3, #48	; 0x30
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	d94e      	bls.n	800cbc0 <_vfiprintf_r+0x1c4>
 800cb22:	b1b0      	cbz	r0, 800cb52 <_vfiprintf_r+0x156>
 800cb24:	9207      	str	r2, [sp, #28]
 800cb26:	e014      	b.n	800cb52 <_vfiprintf_r+0x156>
 800cb28:	eba0 0308 	sub.w	r3, r0, r8
 800cb2c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb30:	4313      	orrs	r3, r2
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	46a2      	mov	sl, r4
 800cb36:	e7d2      	b.n	800cade <_vfiprintf_r+0xe2>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	1d19      	adds	r1, r3, #4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	9103      	str	r1, [sp, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bfbb      	ittet	lt
 800cb44:	425b      	neglt	r3, r3
 800cb46:	f042 0202 	orrlt.w	r2, r2, #2
 800cb4a:	9307      	strge	r3, [sp, #28]
 800cb4c:	9307      	strlt	r3, [sp, #28]
 800cb4e:	bfb8      	it	lt
 800cb50:	9204      	strlt	r2, [sp, #16]
 800cb52:	7823      	ldrb	r3, [r4, #0]
 800cb54:	2b2e      	cmp	r3, #46	; 0x2e
 800cb56:	d10c      	bne.n	800cb72 <_vfiprintf_r+0x176>
 800cb58:	7863      	ldrb	r3, [r4, #1]
 800cb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5c:	d135      	bne.n	800cbca <_vfiprintf_r+0x1ce>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	1d1a      	adds	r2, r3, #4
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	9203      	str	r2, [sp, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	bfb8      	it	lt
 800cb6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb6e:	3402      	adds	r4, #2
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc58 <_vfiprintf_r+0x25c>
 800cb76:	7821      	ldrb	r1, [r4, #0]
 800cb78:	2203      	movs	r2, #3
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	f7f3 fbb8 	bl	80002f0 <memchr>
 800cb80:	b140      	cbz	r0, 800cb94 <_vfiprintf_r+0x198>
 800cb82:	2340      	movs	r3, #64	; 0x40
 800cb84:	eba0 000a 	sub.w	r0, r0, sl
 800cb88:	fa03 f000 	lsl.w	r0, r3, r0
 800cb8c:	9b04      	ldr	r3, [sp, #16]
 800cb8e:	4303      	orrs	r3, r0
 800cb90:	3401      	adds	r4, #1
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb98:	482c      	ldr	r0, [pc, #176]	; (800cc4c <_vfiprintf_r+0x250>)
 800cb9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb9e:	2206      	movs	r2, #6
 800cba0:	f7f3 fba6 	bl	80002f0 <memchr>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d03f      	beq.n	800cc28 <_vfiprintf_r+0x22c>
 800cba8:	4b29      	ldr	r3, [pc, #164]	; (800cc50 <_vfiprintf_r+0x254>)
 800cbaa:	bb1b      	cbnz	r3, 800cbf4 <_vfiprintf_r+0x1f8>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	3307      	adds	r3, #7
 800cbb0:	f023 0307 	bic.w	r3, r3, #7
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	9303      	str	r3, [sp, #12]
 800cbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbba:	443b      	add	r3, r7
 800cbbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbbe:	e767      	b.n	800ca90 <_vfiprintf_r+0x94>
 800cbc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	e7a5      	b.n	800cb16 <_vfiprintf_r+0x11a>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	3401      	adds	r4, #1
 800cbce:	9305      	str	r3, [sp, #20]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f04f 0c0a 	mov.w	ip, #10
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbdc:	3a30      	subs	r2, #48	; 0x30
 800cbde:	2a09      	cmp	r2, #9
 800cbe0:	d903      	bls.n	800cbea <_vfiprintf_r+0x1ee>
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0c5      	beq.n	800cb72 <_vfiprintf_r+0x176>
 800cbe6:	9105      	str	r1, [sp, #20]
 800cbe8:	e7c3      	b.n	800cb72 <_vfiprintf_r+0x176>
 800cbea:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbee:	4604      	mov	r4, r0
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e7f0      	b.n	800cbd6 <_vfiprintf_r+0x1da>
 800cbf4:	ab03      	add	r3, sp, #12
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	4b16      	ldr	r3, [pc, #88]	; (800cc54 <_vfiprintf_r+0x258>)
 800cbfc:	a904      	add	r1, sp, #16
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f7fc f946 	bl	8008e90 <_printf_float>
 800cc04:	4607      	mov	r7, r0
 800cc06:	1c78      	adds	r0, r7, #1
 800cc08:	d1d6      	bne.n	800cbb8 <_vfiprintf_r+0x1bc>
 800cc0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc0c:	07d9      	lsls	r1, r3, #31
 800cc0e:	d405      	bmi.n	800cc1c <_vfiprintf_r+0x220>
 800cc10:	89ab      	ldrh	r3, [r5, #12]
 800cc12:	059a      	lsls	r2, r3, #22
 800cc14:	d402      	bmi.n	800cc1c <_vfiprintf_r+0x220>
 800cc16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc18:	f000 faa1 	bl	800d15e <__retarget_lock_release_recursive>
 800cc1c:	89ab      	ldrh	r3, [r5, #12]
 800cc1e:	065b      	lsls	r3, r3, #25
 800cc20:	f53f af12 	bmi.w	800ca48 <_vfiprintf_r+0x4c>
 800cc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc26:	e711      	b.n	800ca4c <_vfiprintf_r+0x50>
 800cc28:	ab03      	add	r3, sp, #12
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <_vfiprintf_r+0x258>)
 800cc30:	a904      	add	r1, sp, #16
 800cc32:	4630      	mov	r0, r6
 800cc34:	f7fc fbb8 	bl	80093a8 <_printf_i>
 800cc38:	e7e4      	b.n	800cc04 <_vfiprintf_r+0x208>
 800cc3a:	bf00      	nop
 800cc3c:	0800d93c 	.word	0x0800d93c
 800cc40:	0800d95c 	.word	0x0800d95c
 800cc44:	0800d91c 	.word	0x0800d91c
 800cc48:	0800d8cc 	.word	0x0800d8cc
 800cc4c:	0800d8d6 	.word	0x0800d8d6
 800cc50:	08008e91 	.word	0x08008e91
 800cc54:	0800c9d7 	.word	0x0800c9d7
 800cc58:	0800d8d2 	.word	0x0800d8d2

0800cc5c <__swbuf_r>:
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	460e      	mov	r6, r1
 800cc60:	4614      	mov	r4, r2
 800cc62:	4605      	mov	r5, r0
 800cc64:	b118      	cbz	r0, 800cc6e <__swbuf_r+0x12>
 800cc66:	6983      	ldr	r3, [r0, #24]
 800cc68:	b90b      	cbnz	r3, 800cc6e <__swbuf_r+0x12>
 800cc6a:	f000 f9d9 	bl	800d020 <__sinit>
 800cc6e:	4b21      	ldr	r3, [pc, #132]	; (800ccf4 <__swbuf_r+0x98>)
 800cc70:	429c      	cmp	r4, r3
 800cc72:	d12b      	bne.n	800cccc <__swbuf_r+0x70>
 800cc74:	686c      	ldr	r4, [r5, #4]
 800cc76:	69a3      	ldr	r3, [r4, #24]
 800cc78:	60a3      	str	r3, [r4, #8]
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	071a      	lsls	r2, r3, #28
 800cc7e:	d52f      	bpl.n	800cce0 <__swbuf_r+0x84>
 800cc80:	6923      	ldr	r3, [r4, #16]
 800cc82:	b36b      	cbz	r3, 800cce0 <__swbuf_r+0x84>
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	6820      	ldr	r0, [r4, #0]
 800cc88:	1ac0      	subs	r0, r0, r3
 800cc8a:	6963      	ldr	r3, [r4, #20]
 800cc8c:	b2f6      	uxtb	r6, r6
 800cc8e:	4283      	cmp	r3, r0
 800cc90:	4637      	mov	r7, r6
 800cc92:	dc04      	bgt.n	800cc9e <__swbuf_r+0x42>
 800cc94:	4621      	mov	r1, r4
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 f92e 	bl	800cef8 <_fflush_r>
 800cc9c:	bb30      	cbnz	r0, 800ccec <__swbuf_r+0x90>
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	60a3      	str	r3, [r4, #8]
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	6022      	str	r2, [r4, #0]
 800ccaa:	701e      	strb	r6, [r3, #0]
 800ccac:	6963      	ldr	r3, [r4, #20]
 800ccae:	3001      	adds	r0, #1
 800ccb0:	4283      	cmp	r3, r0
 800ccb2:	d004      	beq.n	800ccbe <__swbuf_r+0x62>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	07db      	lsls	r3, r3, #31
 800ccb8:	d506      	bpl.n	800ccc8 <__swbuf_r+0x6c>
 800ccba:	2e0a      	cmp	r6, #10
 800ccbc:	d104      	bne.n	800ccc8 <__swbuf_r+0x6c>
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f000 f919 	bl	800cef8 <_fflush_r>
 800ccc6:	b988      	cbnz	r0, 800ccec <__swbuf_r+0x90>
 800ccc8:	4638      	mov	r0, r7
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <__swbuf_r+0x9c>)
 800ccce:	429c      	cmp	r4, r3
 800ccd0:	d101      	bne.n	800ccd6 <__swbuf_r+0x7a>
 800ccd2:	68ac      	ldr	r4, [r5, #8]
 800ccd4:	e7cf      	b.n	800cc76 <__swbuf_r+0x1a>
 800ccd6:	4b09      	ldr	r3, [pc, #36]	; (800ccfc <__swbuf_r+0xa0>)
 800ccd8:	429c      	cmp	r4, r3
 800ccda:	bf08      	it	eq
 800ccdc:	68ec      	ldreq	r4, [r5, #12]
 800ccde:	e7ca      	b.n	800cc76 <__swbuf_r+0x1a>
 800cce0:	4621      	mov	r1, r4
 800cce2:	4628      	mov	r0, r5
 800cce4:	f000 f80c 	bl	800cd00 <__swsetup_r>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d0cb      	beq.n	800cc84 <__swbuf_r+0x28>
 800ccec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ccf0:	e7ea      	b.n	800ccc8 <__swbuf_r+0x6c>
 800ccf2:	bf00      	nop
 800ccf4:	0800d93c 	.word	0x0800d93c
 800ccf8:	0800d95c 	.word	0x0800d95c
 800ccfc:	0800d91c 	.word	0x0800d91c

0800cd00 <__swsetup_r>:
 800cd00:	4b32      	ldr	r3, [pc, #200]	; (800cdcc <__swsetup_r+0xcc>)
 800cd02:	b570      	push	{r4, r5, r6, lr}
 800cd04:	681d      	ldr	r5, [r3, #0]
 800cd06:	4606      	mov	r6, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	b125      	cbz	r5, 800cd16 <__swsetup_r+0x16>
 800cd0c:	69ab      	ldr	r3, [r5, #24]
 800cd0e:	b913      	cbnz	r3, 800cd16 <__swsetup_r+0x16>
 800cd10:	4628      	mov	r0, r5
 800cd12:	f000 f985 	bl	800d020 <__sinit>
 800cd16:	4b2e      	ldr	r3, [pc, #184]	; (800cdd0 <__swsetup_r+0xd0>)
 800cd18:	429c      	cmp	r4, r3
 800cd1a:	d10f      	bne.n	800cd3c <__swsetup_r+0x3c>
 800cd1c:	686c      	ldr	r4, [r5, #4]
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd24:	0719      	lsls	r1, r3, #28
 800cd26:	d42c      	bmi.n	800cd82 <__swsetup_r+0x82>
 800cd28:	06dd      	lsls	r5, r3, #27
 800cd2a:	d411      	bmi.n	800cd50 <__swsetup_r+0x50>
 800cd2c:	2309      	movs	r3, #9
 800cd2e:	6033      	str	r3, [r6, #0]
 800cd30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd34:	81a3      	strh	r3, [r4, #12]
 800cd36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd3a:	e03e      	b.n	800cdba <__swsetup_r+0xba>
 800cd3c:	4b25      	ldr	r3, [pc, #148]	; (800cdd4 <__swsetup_r+0xd4>)
 800cd3e:	429c      	cmp	r4, r3
 800cd40:	d101      	bne.n	800cd46 <__swsetup_r+0x46>
 800cd42:	68ac      	ldr	r4, [r5, #8]
 800cd44:	e7eb      	b.n	800cd1e <__swsetup_r+0x1e>
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <__swsetup_r+0xd8>)
 800cd48:	429c      	cmp	r4, r3
 800cd4a:	bf08      	it	eq
 800cd4c:	68ec      	ldreq	r4, [r5, #12]
 800cd4e:	e7e6      	b.n	800cd1e <__swsetup_r+0x1e>
 800cd50:	0758      	lsls	r0, r3, #29
 800cd52:	d512      	bpl.n	800cd7a <__swsetup_r+0x7a>
 800cd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd56:	b141      	cbz	r1, 800cd6a <__swsetup_r+0x6a>
 800cd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	d002      	beq.n	800cd66 <__swsetup_r+0x66>
 800cd60:	4630      	mov	r0, r6
 800cd62:	f7ff fb67 	bl	800c434 <_free_r>
 800cd66:	2300      	movs	r3, #0
 800cd68:	6363      	str	r3, [r4, #52]	; 0x34
 800cd6a:	89a3      	ldrh	r3, [r4, #12]
 800cd6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	2300      	movs	r3, #0
 800cd74:	6063      	str	r3, [r4, #4]
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	f043 0308 	orr.w	r3, r3, #8
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	b94b      	cbnz	r3, 800cd9a <__swsetup_r+0x9a>
 800cd86:	89a3      	ldrh	r3, [r4, #12]
 800cd88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd90:	d003      	beq.n	800cd9a <__swsetup_r+0x9a>
 800cd92:	4621      	mov	r1, r4
 800cd94:	4630      	mov	r0, r6
 800cd96:	f000 fa07 	bl	800d1a8 <__smakebuf_r>
 800cd9a:	89a0      	ldrh	r0, [r4, #12]
 800cd9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cda0:	f010 0301 	ands.w	r3, r0, #1
 800cda4:	d00a      	beq.n	800cdbc <__swsetup_r+0xbc>
 800cda6:	2300      	movs	r3, #0
 800cda8:	60a3      	str	r3, [r4, #8]
 800cdaa:	6963      	ldr	r3, [r4, #20]
 800cdac:	425b      	negs	r3, r3
 800cdae:	61a3      	str	r3, [r4, #24]
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	b943      	cbnz	r3, 800cdc6 <__swsetup_r+0xc6>
 800cdb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdb8:	d1ba      	bne.n	800cd30 <__swsetup_r+0x30>
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	0781      	lsls	r1, r0, #30
 800cdbe:	bf58      	it	pl
 800cdc0:	6963      	ldrpl	r3, [r4, #20]
 800cdc2:	60a3      	str	r3, [r4, #8]
 800cdc4:	e7f4      	b.n	800cdb0 <__swsetup_r+0xb0>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	e7f7      	b.n	800cdba <__swsetup_r+0xba>
 800cdca:	bf00      	nop
 800cdcc:	24000014 	.word	0x24000014
 800cdd0:	0800d93c 	.word	0x0800d93c
 800cdd4:	0800d95c 	.word	0x0800d95c
 800cdd8:	0800d91c 	.word	0x0800d91c

0800cddc <abort>:
 800cddc:	b508      	push	{r3, lr}
 800cdde:	2006      	movs	r0, #6
 800cde0:	f000 fa52 	bl	800d288 <raise>
 800cde4:	2001      	movs	r0, #1
 800cde6:	f7f5 f87d 	bl	8001ee4 <_exit>
	...

0800cdec <__sflush_r>:
 800cdec:	898a      	ldrh	r2, [r1, #12]
 800cdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	0710      	lsls	r0, r2, #28
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	d458      	bmi.n	800ceac <__sflush_r+0xc0>
 800cdfa:	684b      	ldr	r3, [r1, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dc05      	bgt.n	800ce0c <__sflush_r+0x20>
 800ce00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dc02      	bgt.n	800ce0c <__sflush_r+0x20>
 800ce06:	2000      	movs	r0, #0
 800ce08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce0e:	2e00      	cmp	r6, #0
 800ce10:	d0f9      	beq.n	800ce06 <__sflush_r+0x1a>
 800ce12:	2300      	movs	r3, #0
 800ce14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce18:	682f      	ldr	r7, [r5, #0]
 800ce1a:	602b      	str	r3, [r5, #0]
 800ce1c:	d032      	beq.n	800ce84 <__sflush_r+0x98>
 800ce1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	075a      	lsls	r2, r3, #29
 800ce24:	d505      	bpl.n	800ce32 <__sflush_r+0x46>
 800ce26:	6863      	ldr	r3, [r4, #4]
 800ce28:	1ac0      	subs	r0, r0, r3
 800ce2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce2c:	b10b      	cbz	r3, 800ce32 <__sflush_r+0x46>
 800ce2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce30:	1ac0      	subs	r0, r0, r3
 800ce32:	2300      	movs	r3, #0
 800ce34:	4602      	mov	r2, r0
 800ce36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce38:	6a21      	ldr	r1, [r4, #32]
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	47b0      	blx	r6
 800ce3e:	1c43      	adds	r3, r0, #1
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	d106      	bne.n	800ce52 <__sflush_r+0x66>
 800ce44:	6829      	ldr	r1, [r5, #0]
 800ce46:	291d      	cmp	r1, #29
 800ce48:	d82c      	bhi.n	800cea4 <__sflush_r+0xb8>
 800ce4a:	4a2a      	ldr	r2, [pc, #168]	; (800cef4 <__sflush_r+0x108>)
 800ce4c:	40ca      	lsrs	r2, r1
 800ce4e:	07d6      	lsls	r6, r2, #31
 800ce50:	d528      	bpl.n	800cea4 <__sflush_r+0xb8>
 800ce52:	2200      	movs	r2, #0
 800ce54:	6062      	str	r2, [r4, #4]
 800ce56:	04d9      	lsls	r1, r3, #19
 800ce58:	6922      	ldr	r2, [r4, #16]
 800ce5a:	6022      	str	r2, [r4, #0]
 800ce5c:	d504      	bpl.n	800ce68 <__sflush_r+0x7c>
 800ce5e:	1c42      	adds	r2, r0, #1
 800ce60:	d101      	bne.n	800ce66 <__sflush_r+0x7a>
 800ce62:	682b      	ldr	r3, [r5, #0]
 800ce64:	b903      	cbnz	r3, 800ce68 <__sflush_r+0x7c>
 800ce66:	6560      	str	r0, [r4, #84]	; 0x54
 800ce68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce6a:	602f      	str	r7, [r5, #0]
 800ce6c:	2900      	cmp	r1, #0
 800ce6e:	d0ca      	beq.n	800ce06 <__sflush_r+0x1a>
 800ce70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce74:	4299      	cmp	r1, r3
 800ce76:	d002      	beq.n	800ce7e <__sflush_r+0x92>
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f7ff fadb 	bl	800c434 <_free_r>
 800ce7e:	2000      	movs	r0, #0
 800ce80:	6360      	str	r0, [r4, #52]	; 0x34
 800ce82:	e7c1      	b.n	800ce08 <__sflush_r+0x1c>
 800ce84:	6a21      	ldr	r1, [r4, #32]
 800ce86:	2301      	movs	r3, #1
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b0      	blx	r6
 800ce8c:	1c41      	adds	r1, r0, #1
 800ce8e:	d1c7      	bne.n	800ce20 <__sflush_r+0x34>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0c4      	beq.n	800ce20 <__sflush_r+0x34>
 800ce96:	2b1d      	cmp	r3, #29
 800ce98:	d001      	beq.n	800ce9e <__sflush_r+0xb2>
 800ce9a:	2b16      	cmp	r3, #22
 800ce9c:	d101      	bne.n	800cea2 <__sflush_r+0xb6>
 800ce9e:	602f      	str	r7, [r5, #0]
 800cea0:	e7b1      	b.n	800ce06 <__sflush_r+0x1a>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cea8:	81a3      	strh	r3, [r4, #12]
 800ceaa:	e7ad      	b.n	800ce08 <__sflush_r+0x1c>
 800ceac:	690f      	ldr	r7, [r1, #16]
 800ceae:	2f00      	cmp	r7, #0
 800ceb0:	d0a9      	beq.n	800ce06 <__sflush_r+0x1a>
 800ceb2:	0793      	lsls	r3, r2, #30
 800ceb4:	680e      	ldr	r6, [r1, #0]
 800ceb6:	bf08      	it	eq
 800ceb8:	694b      	ldreq	r3, [r1, #20]
 800ceba:	600f      	str	r7, [r1, #0]
 800cebc:	bf18      	it	ne
 800cebe:	2300      	movne	r3, #0
 800cec0:	eba6 0807 	sub.w	r8, r6, r7
 800cec4:	608b      	str	r3, [r1, #8]
 800cec6:	f1b8 0f00 	cmp.w	r8, #0
 800ceca:	dd9c      	ble.n	800ce06 <__sflush_r+0x1a>
 800cecc:	6a21      	ldr	r1, [r4, #32]
 800cece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ced0:	4643      	mov	r3, r8
 800ced2:	463a      	mov	r2, r7
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b0      	blx	r6
 800ced8:	2800      	cmp	r0, #0
 800ceda:	dc06      	bgt.n	800ceea <__sflush_r+0xfe>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cee8:	e78e      	b.n	800ce08 <__sflush_r+0x1c>
 800ceea:	4407      	add	r7, r0
 800ceec:	eba8 0800 	sub.w	r8, r8, r0
 800cef0:	e7e9      	b.n	800cec6 <__sflush_r+0xda>
 800cef2:	bf00      	nop
 800cef4:	20400001 	.word	0x20400001

0800cef8 <_fflush_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	690b      	ldr	r3, [r1, #16]
 800cefc:	4605      	mov	r5, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	b913      	cbnz	r3, 800cf08 <_fflush_r+0x10>
 800cf02:	2500      	movs	r5, #0
 800cf04:	4628      	mov	r0, r5
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	b118      	cbz	r0, 800cf12 <_fflush_r+0x1a>
 800cf0a:	6983      	ldr	r3, [r0, #24]
 800cf0c:	b90b      	cbnz	r3, 800cf12 <_fflush_r+0x1a>
 800cf0e:	f000 f887 	bl	800d020 <__sinit>
 800cf12:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <_fflush_r+0x6c>)
 800cf14:	429c      	cmp	r4, r3
 800cf16:	d11b      	bne.n	800cf50 <_fflush_r+0x58>
 800cf18:	686c      	ldr	r4, [r5, #4]
 800cf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0ef      	beq.n	800cf02 <_fflush_r+0xa>
 800cf22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf24:	07d0      	lsls	r0, r2, #31
 800cf26:	d404      	bmi.n	800cf32 <_fflush_r+0x3a>
 800cf28:	0599      	lsls	r1, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_fflush_r+0x3a>
 800cf2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf2e:	f000 f915 	bl	800d15c <__retarget_lock_acquire_recursive>
 800cf32:	4628      	mov	r0, r5
 800cf34:	4621      	mov	r1, r4
 800cf36:	f7ff ff59 	bl	800cdec <__sflush_r>
 800cf3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf3c:	07da      	lsls	r2, r3, #31
 800cf3e:	4605      	mov	r5, r0
 800cf40:	d4e0      	bmi.n	800cf04 <_fflush_r+0xc>
 800cf42:	89a3      	ldrh	r3, [r4, #12]
 800cf44:	059b      	lsls	r3, r3, #22
 800cf46:	d4dd      	bmi.n	800cf04 <_fflush_r+0xc>
 800cf48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf4a:	f000 f908 	bl	800d15e <__retarget_lock_release_recursive>
 800cf4e:	e7d9      	b.n	800cf04 <_fflush_r+0xc>
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <_fflush_r+0x70>)
 800cf52:	429c      	cmp	r4, r3
 800cf54:	d101      	bne.n	800cf5a <_fflush_r+0x62>
 800cf56:	68ac      	ldr	r4, [r5, #8]
 800cf58:	e7df      	b.n	800cf1a <_fflush_r+0x22>
 800cf5a:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <_fflush_r+0x74>)
 800cf5c:	429c      	cmp	r4, r3
 800cf5e:	bf08      	it	eq
 800cf60:	68ec      	ldreq	r4, [r5, #12]
 800cf62:	e7da      	b.n	800cf1a <_fflush_r+0x22>
 800cf64:	0800d93c 	.word	0x0800d93c
 800cf68:	0800d95c 	.word	0x0800d95c
 800cf6c:	0800d91c 	.word	0x0800d91c

0800cf70 <std>:
 800cf70:	2300      	movs	r3, #0
 800cf72:	b510      	push	{r4, lr}
 800cf74:	4604      	mov	r4, r0
 800cf76:	e9c0 3300 	strd	r3, r3, [r0]
 800cf7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf7e:	6083      	str	r3, [r0, #8]
 800cf80:	8181      	strh	r1, [r0, #12]
 800cf82:	6643      	str	r3, [r0, #100]	; 0x64
 800cf84:	81c2      	strh	r2, [r0, #14]
 800cf86:	6183      	str	r3, [r0, #24]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	2208      	movs	r2, #8
 800cf8c:	305c      	adds	r0, #92	; 0x5c
 800cf8e:	f7fb fee5 	bl	8008d5c <memset>
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <std+0x38>)
 800cf94:	6263      	str	r3, [r4, #36]	; 0x24
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <std+0x3c>)
 800cf98:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf9a:	4b05      	ldr	r3, [pc, #20]	; (800cfb0 <std+0x40>)
 800cf9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf9e:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <std+0x44>)
 800cfa0:	6224      	str	r4, [r4, #32]
 800cfa2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfa4:	bd10      	pop	{r4, pc}
 800cfa6:	bf00      	nop
 800cfa8:	0800d2c1 	.word	0x0800d2c1
 800cfac:	0800d2e3 	.word	0x0800d2e3
 800cfb0:	0800d31b 	.word	0x0800d31b
 800cfb4:	0800d33f 	.word	0x0800d33f

0800cfb8 <_cleanup_r>:
 800cfb8:	4901      	ldr	r1, [pc, #4]	; (800cfc0 <_cleanup_r+0x8>)
 800cfba:	f000 b8af 	b.w	800d11c <_fwalk_reent>
 800cfbe:	bf00      	nop
 800cfc0:	0800cef9 	.word	0x0800cef9

0800cfc4 <__sfmoreglue>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	1e4a      	subs	r2, r1, #1
 800cfc8:	2568      	movs	r5, #104	; 0x68
 800cfca:	4355      	muls	r5, r2
 800cfcc:	460e      	mov	r6, r1
 800cfce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfd2:	f7ff fa7f 	bl	800c4d4 <_malloc_r>
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	b140      	cbz	r0, 800cfec <__sfmoreglue+0x28>
 800cfda:	2100      	movs	r1, #0
 800cfdc:	e9c0 1600 	strd	r1, r6, [r0]
 800cfe0:	300c      	adds	r0, #12
 800cfe2:	60a0      	str	r0, [r4, #8]
 800cfe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfe8:	f7fb feb8 	bl	8008d5c <memset>
 800cfec:	4620      	mov	r0, r4
 800cfee:	bd70      	pop	{r4, r5, r6, pc}

0800cff0 <__sfp_lock_acquire>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__sfp_lock_acquire+0x8>)
 800cff2:	f000 b8b3 	b.w	800d15c <__retarget_lock_acquire_recursive>
 800cff6:	bf00      	nop
 800cff8:	240004d4 	.word	0x240004d4

0800cffc <__sfp_lock_release>:
 800cffc:	4801      	ldr	r0, [pc, #4]	; (800d004 <__sfp_lock_release+0x8>)
 800cffe:	f000 b8ae 	b.w	800d15e <__retarget_lock_release_recursive>
 800d002:	bf00      	nop
 800d004:	240004d4 	.word	0x240004d4

0800d008 <__sinit_lock_acquire>:
 800d008:	4801      	ldr	r0, [pc, #4]	; (800d010 <__sinit_lock_acquire+0x8>)
 800d00a:	f000 b8a7 	b.w	800d15c <__retarget_lock_acquire_recursive>
 800d00e:	bf00      	nop
 800d010:	240004cf 	.word	0x240004cf

0800d014 <__sinit_lock_release>:
 800d014:	4801      	ldr	r0, [pc, #4]	; (800d01c <__sinit_lock_release+0x8>)
 800d016:	f000 b8a2 	b.w	800d15e <__retarget_lock_release_recursive>
 800d01a:	bf00      	nop
 800d01c:	240004cf 	.word	0x240004cf

0800d020 <__sinit>:
 800d020:	b510      	push	{r4, lr}
 800d022:	4604      	mov	r4, r0
 800d024:	f7ff fff0 	bl	800d008 <__sinit_lock_acquire>
 800d028:	69a3      	ldr	r3, [r4, #24]
 800d02a:	b11b      	cbz	r3, 800d034 <__sinit+0x14>
 800d02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d030:	f7ff bff0 	b.w	800d014 <__sinit_lock_release>
 800d034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d038:	6523      	str	r3, [r4, #80]	; 0x50
 800d03a:	4b13      	ldr	r3, [pc, #76]	; (800d088 <__sinit+0x68>)
 800d03c:	4a13      	ldr	r2, [pc, #76]	; (800d08c <__sinit+0x6c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	62a2      	str	r2, [r4, #40]	; 0x28
 800d042:	42a3      	cmp	r3, r4
 800d044:	bf04      	itt	eq
 800d046:	2301      	moveq	r3, #1
 800d048:	61a3      	streq	r3, [r4, #24]
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 f820 	bl	800d090 <__sfp>
 800d050:	6060      	str	r0, [r4, #4]
 800d052:	4620      	mov	r0, r4
 800d054:	f000 f81c 	bl	800d090 <__sfp>
 800d058:	60a0      	str	r0, [r4, #8]
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 f818 	bl	800d090 <__sfp>
 800d060:	2200      	movs	r2, #0
 800d062:	60e0      	str	r0, [r4, #12]
 800d064:	2104      	movs	r1, #4
 800d066:	6860      	ldr	r0, [r4, #4]
 800d068:	f7ff ff82 	bl	800cf70 <std>
 800d06c:	68a0      	ldr	r0, [r4, #8]
 800d06e:	2201      	movs	r2, #1
 800d070:	2109      	movs	r1, #9
 800d072:	f7ff ff7d 	bl	800cf70 <std>
 800d076:	68e0      	ldr	r0, [r4, #12]
 800d078:	2202      	movs	r2, #2
 800d07a:	2112      	movs	r1, #18
 800d07c:	f7ff ff78 	bl	800cf70 <std>
 800d080:	2301      	movs	r3, #1
 800d082:	61a3      	str	r3, [r4, #24]
 800d084:	e7d2      	b.n	800d02c <__sinit+0xc>
 800d086:	bf00      	nop
 800d088:	0800d4c8 	.word	0x0800d4c8
 800d08c:	0800cfb9 	.word	0x0800cfb9

0800d090 <__sfp>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	4607      	mov	r7, r0
 800d094:	f7ff ffac 	bl	800cff0 <__sfp_lock_acquire>
 800d098:	4b1e      	ldr	r3, [pc, #120]	; (800d114 <__sfp+0x84>)
 800d09a:	681e      	ldr	r6, [r3, #0]
 800d09c:	69b3      	ldr	r3, [r6, #24]
 800d09e:	b913      	cbnz	r3, 800d0a6 <__sfp+0x16>
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7ff ffbd 	bl	800d020 <__sinit>
 800d0a6:	3648      	adds	r6, #72	; 0x48
 800d0a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	d503      	bpl.n	800d0b8 <__sfp+0x28>
 800d0b0:	6833      	ldr	r3, [r6, #0]
 800d0b2:	b30b      	cbz	r3, 800d0f8 <__sfp+0x68>
 800d0b4:	6836      	ldr	r6, [r6, #0]
 800d0b6:	e7f7      	b.n	800d0a8 <__sfp+0x18>
 800d0b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0bc:	b9d5      	cbnz	r5, 800d0f4 <__sfp+0x64>
 800d0be:	4b16      	ldr	r3, [pc, #88]	; (800d118 <__sfp+0x88>)
 800d0c0:	60e3      	str	r3, [r4, #12]
 800d0c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0c6:	6665      	str	r5, [r4, #100]	; 0x64
 800d0c8:	f000 f847 	bl	800d15a <__retarget_lock_init_recursive>
 800d0cc:	f7ff ff96 	bl	800cffc <__sfp_lock_release>
 800d0d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0d8:	6025      	str	r5, [r4, #0]
 800d0da:	61a5      	str	r5, [r4, #24]
 800d0dc:	2208      	movs	r2, #8
 800d0de:	4629      	mov	r1, r5
 800d0e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0e4:	f7fb fe3a 	bl	8008d5c <memset>
 800d0e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f4:	3468      	adds	r4, #104	; 0x68
 800d0f6:	e7d9      	b.n	800d0ac <__sfp+0x1c>
 800d0f8:	2104      	movs	r1, #4
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	f7ff ff62 	bl	800cfc4 <__sfmoreglue>
 800d100:	4604      	mov	r4, r0
 800d102:	6030      	str	r0, [r6, #0]
 800d104:	2800      	cmp	r0, #0
 800d106:	d1d5      	bne.n	800d0b4 <__sfp+0x24>
 800d108:	f7ff ff78 	bl	800cffc <__sfp_lock_release>
 800d10c:	230c      	movs	r3, #12
 800d10e:	603b      	str	r3, [r7, #0]
 800d110:	e7ee      	b.n	800d0f0 <__sfp+0x60>
 800d112:	bf00      	nop
 800d114:	0800d4c8 	.word	0x0800d4c8
 800d118:	ffff0001 	.word	0xffff0001

0800d11c <_fwalk_reent>:
 800d11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d120:	4606      	mov	r6, r0
 800d122:	4688      	mov	r8, r1
 800d124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d128:	2700      	movs	r7, #0
 800d12a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d12e:	f1b9 0901 	subs.w	r9, r9, #1
 800d132:	d505      	bpl.n	800d140 <_fwalk_reent+0x24>
 800d134:	6824      	ldr	r4, [r4, #0]
 800d136:	2c00      	cmp	r4, #0
 800d138:	d1f7      	bne.n	800d12a <_fwalk_reent+0xe>
 800d13a:	4638      	mov	r0, r7
 800d13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d140:	89ab      	ldrh	r3, [r5, #12]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d907      	bls.n	800d156 <_fwalk_reent+0x3a>
 800d146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d14a:	3301      	adds	r3, #1
 800d14c:	d003      	beq.n	800d156 <_fwalk_reent+0x3a>
 800d14e:	4629      	mov	r1, r5
 800d150:	4630      	mov	r0, r6
 800d152:	47c0      	blx	r8
 800d154:	4307      	orrs	r7, r0
 800d156:	3568      	adds	r5, #104	; 0x68
 800d158:	e7e9      	b.n	800d12e <_fwalk_reent+0x12>

0800d15a <__retarget_lock_init_recursive>:
 800d15a:	4770      	bx	lr

0800d15c <__retarget_lock_acquire_recursive>:
 800d15c:	4770      	bx	lr

0800d15e <__retarget_lock_release_recursive>:
 800d15e:	4770      	bx	lr

0800d160 <__swhatbuf_r>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	460e      	mov	r6, r1
 800d164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d168:	2900      	cmp	r1, #0
 800d16a:	b096      	sub	sp, #88	; 0x58
 800d16c:	4614      	mov	r4, r2
 800d16e:	461d      	mov	r5, r3
 800d170:	da07      	bge.n	800d182 <__swhatbuf_r+0x22>
 800d172:	2300      	movs	r3, #0
 800d174:	602b      	str	r3, [r5, #0]
 800d176:	89b3      	ldrh	r3, [r6, #12]
 800d178:	061a      	lsls	r2, r3, #24
 800d17a:	d410      	bmi.n	800d19e <__swhatbuf_r+0x3e>
 800d17c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d180:	e00e      	b.n	800d1a0 <__swhatbuf_r+0x40>
 800d182:	466a      	mov	r2, sp
 800d184:	f000 f902 	bl	800d38c <_fstat_r>
 800d188:	2800      	cmp	r0, #0
 800d18a:	dbf2      	blt.n	800d172 <__swhatbuf_r+0x12>
 800d18c:	9a01      	ldr	r2, [sp, #4]
 800d18e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d196:	425a      	negs	r2, r3
 800d198:	415a      	adcs	r2, r3
 800d19a:	602a      	str	r2, [r5, #0]
 800d19c:	e7ee      	b.n	800d17c <__swhatbuf_r+0x1c>
 800d19e:	2340      	movs	r3, #64	; 0x40
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	6023      	str	r3, [r4, #0]
 800d1a4:	b016      	add	sp, #88	; 0x58
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}

0800d1a8 <__smakebuf_r>:
 800d1a8:	898b      	ldrh	r3, [r1, #12]
 800d1aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1ac:	079d      	lsls	r5, r3, #30
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	d507      	bpl.n	800d1c4 <__smakebuf_r+0x1c>
 800d1b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	6123      	str	r3, [r4, #16]
 800d1bc:	2301      	movs	r3, #1
 800d1be:	6163      	str	r3, [r4, #20]
 800d1c0:	b002      	add	sp, #8
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
 800d1c4:	ab01      	add	r3, sp, #4
 800d1c6:	466a      	mov	r2, sp
 800d1c8:	f7ff ffca 	bl	800d160 <__swhatbuf_r>
 800d1cc:	9900      	ldr	r1, [sp, #0]
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f7ff f97f 	bl	800c4d4 <_malloc_r>
 800d1d6:	b948      	cbnz	r0, 800d1ec <__smakebuf_r+0x44>
 800d1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1dc:	059a      	lsls	r2, r3, #22
 800d1de:	d4ef      	bmi.n	800d1c0 <__smakebuf_r+0x18>
 800d1e0:	f023 0303 	bic.w	r3, r3, #3
 800d1e4:	f043 0302 	orr.w	r3, r3, #2
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	e7e3      	b.n	800d1b4 <__smakebuf_r+0xc>
 800d1ec:	4b0d      	ldr	r3, [pc, #52]	; (800d224 <__smakebuf_r+0x7c>)
 800d1ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	6020      	str	r0, [r4, #0]
 800d1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	9b00      	ldr	r3, [sp, #0]
 800d1fc:	6163      	str	r3, [r4, #20]
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	6120      	str	r0, [r4, #16]
 800d202:	b15b      	cbz	r3, 800d21c <__smakebuf_r+0x74>
 800d204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 f8d1 	bl	800d3b0 <_isatty_r>
 800d20e:	b128      	cbz	r0, 800d21c <__smakebuf_r+0x74>
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	f023 0303 	bic.w	r3, r3, #3
 800d216:	f043 0301 	orr.w	r3, r3, #1
 800d21a:	81a3      	strh	r3, [r4, #12]
 800d21c:	89a0      	ldrh	r0, [r4, #12]
 800d21e:	4305      	orrs	r5, r0
 800d220:	81a5      	strh	r5, [r4, #12]
 800d222:	e7cd      	b.n	800d1c0 <__smakebuf_r+0x18>
 800d224:	0800cfb9 	.word	0x0800cfb9

0800d228 <_malloc_usable_size_r>:
 800d228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d22c:	1f18      	subs	r0, r3, #4
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bfbc      	itt	lt
 800d232:	580b      	ldrlt	r3, [r1, r0]
 800d234:	18c0      	addlt	r0, r0, r3
 800d236:	4770      	bx	lr

0800d238 <_raise_r>:
 800d238:	291f      	cmp	r1, #31
 800d23a:	b538      	push	{r3, r4, r5, lr}
 800d23c:	4604      	mov	r4, r0
 800d23e:	460d      	mov	r5, r1
 800d240:	d904      	bls.n	800d24c <_raise_r+0x14>
 800d242:	2316      	movs	r3, #22
 800d244:	6003      	str	r3, [r0, #0]
 800d246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d24e:	b112      	cbz	r2, 800d256 <_raise_r+0x1e>
 800d250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d254:	b94b      	cbnz	r3, 800d26a <_raise_r+0x32>
 800d256:	4620      	mov	r0, r4
 800d258:	f000 f830 	bl	800d2bc <_getpid_r>
 800d25c:	462a      	mov	r2, r5
 800d25e:	4601      	mov	r1, r0
 800d260:	4620      	mov	r0, r4
 800d262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d266:	f000 b817 	b.w	800d298 <_kill_r>
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d00a      	beq.n	800d284 <_raise_r+0x4c>
 800d26e:	1c59      	adds	r1, r3, #1
 800d270:	d103      	bne.n	800d27a <_raise_r+0x42>
 800d272:	2316      	movs	r3, #22
 800d274:	6003      	str	r3, [r0, #0]
 800d276:	2001      	movs	r0, #1
 800d278:	e7e7      	b.n	800d24a <_raise_r+0x12>
 800d27a:	2400      	movs	r4, #0
 800d27c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d280:	4628      	mov	r0, r5
 800d282:	4798      	blx	r3
 800d284:	2000      	movs	r0, #0
 800d286:	e7e0      	b.n	800d24a <_raise_r+0x12>

0800d288 <raise>:
 800d288:	4b02      	ldr	r3, [pc, #8]	; (800d294 <raise+0xc>)
 800d28a:	4601      	mov	r1, r0
 800d28c:	6818      	ldr	r0, [r3, #0]
 800d28e:	f7ff bfd3 	b.w	800d238 <_raise_r>
 800d292:	bf00      	nop
 800d294:	24000014 	.word	0x24000014

0800d298 <_kill_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d07      	ldr	r5, [pc, #28]	; (800d2b8 <_kill_r+0x20>)
 800d29c:	2300      	movs	r3, #0
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	602b      	str	r3, [r5, #0]
 800d2a6:	f7f4 fe0d 	bl	8001ec4 <_kill>
 800d2aa:	1c43      	adds	r3, r0, #1
 800d2ac:	d102      	bne.n	800d2b4 <_kill_r+0x1c>
 800d2ae:	682b      	ldr	r3, [r5, #0]
 800d2b0:	b103      	cbz	r3, 800d2b4 <_kill_r+0x1c>
 800d2b2:	6023      	str	r3, [r4, #0]
 800d2b4:	bd38      	pop	{r3, r4, r5, pc}
 800d2b6:	bf00      	nop
 800d2b8:	240004c8 	.word	0x240004c8

0800d2bc <_getpid_r>:
 800d2bc:	f7f4 bdfa 	b.w	8001eb4 <_getpid>

0800d2c0 <__sread>:
 800d2c0:	b510      	push	{r4, lr}
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c8:	f000 f894 	bl	800d3f4 <_read_r>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	bfab      	itete	ge
 800d2d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2d2:	89a3      	ldrhlt	r3, [r4, #12]
 800d2d4:	181b      	addge	r3, r3, r0
 800d2d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2da:	bfac      	ite	ge
 800d2dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2de:	81a3      	strhlt	r3, [r4, #12]
 800d2e0:	bd10      	pop	{r4, pc}

0800d2e2 <__swrite>:
 800d2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e6:	461f      	mov	r7, r3
 800d2e8:	898b      	ldrh	r3, [r1, #12]
 800d2ea:	05db      	lsls	r3, r3, #23
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	4616      	mov	r6, r2
 800d2f2:	d505      	bpl.n	800d300 <__swrite+0x1e>
 800d2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f000 f868 	bl	800d3d0 <_lseek_r>
 800d300:	89a3      	ldrh	r3, [r4, #12]
 800d302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d30a:	81a3      	strh	r3, [r4, #12]
 800d30c:	4632      	mov	r2, r6
 800d30e:	463b      	mov	r3, r7
 800d310:	4628      	mov	r0, r5
 800d312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d316:	f000 b817 	b.w	800d348 <_write_r>

0800d31a <__sseek>:
 800d31a:	b510      	push	{r4, lr}
 800d31c:	460c      	mov	r4, r1
 800d31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d322:	f000 f855 	bl	800d3d0 <_lseek_r>
 800d326:	1c43      	adds	r3, r0, #1
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	bf15      	itete	ne
 800d32c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d32e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d336:	81a3      	strheq	r3, [r4, #12]
 800d338:	bf18      	it	ne
 800d33a:	81a3      	strhne	r3, [r4, #12]
 800d33c:	bd10      	pop	{r4, pc}

0800d33e <__sclose>:
 800d33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d342:	f000 b813 	b.w	800d36c <_close_r>
	...

0800d348 <_write_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4d07      	ldr	r5, [pc, #28]	; (800d368 <_write_r+0x20>)
 800d34c:	4604      	mov	r4, r0
 800d34e:	4608      	mov	r0, r1
 800d350:	4611      	mov	r1, r2
 800d352:	2200      	movs	r2, #0
 800d354:	602a      	str	r2, [r5, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	f7f4 fdeb 	bl	8001f32 <_write>
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d102      	bne.n	800d366 <_write_r+0x1e>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b103      	cbz	r3, 800d366 <_write_r+0x1e>
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	240004c8 	.word	0x240004c8

0800d36c <_close_r>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4d06      	ldr	r5, [pc, #24]	; (800d388 <_close_r+0x1c>)
 800d370:	2300      	movs	r3, #0
 800d372:	4604      	mov	r4, r0
 800d374:	4608      	mov	r0, r1
 800d376:	602b      	str	r3, [r5, #0]
 800d378:	f7f4 fdf7 	bl	8001f6a <_close>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_close_r+0x1a>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_close_r+0x1a>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	240004c8 	.word	0x240004c8

0800d38c <_fstat_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4d07      	ldr	r5, [pc, #28]	; (800d3ac <_fstat_r+0x20>)
 800d390:	2300      	movs	r3, #0
 800d392:	4604      	mov	r4, r0
 800d394:	4608      	mov	r0, r1
 800d396:	4611      	mov	r1, r2
 800d398:	602b      	str	r3, [r5, #0]
 800d39a:	f7f4 fdf2 	bl	8001f82 <_fstat>
 800d39e:	1c43      	adds	r3, r0, #1
 800d3a0:	d102      	bne.n	800d3a8 <_fstat_r+0x1c>
 800d3a2:	682b      	ldr	r3, [r5, #0]
 800d3a4:	b103      	cbz	r3, 800d3a8 <_fstat_r+0x1c>
 800d3a6:	6023      	str	r3, [r4, #0]
 800d3a8:	bd38      	pop	{r3, r4, r5, pc}
 800d3aa:	bf00      	nop
 800d3ac:	240004c8 	.word	0x240004c8

0800d3b0 <_isatty_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4d06      	ldr	r5, [pc, #24]	; (800d3cc <_isatty_r+0x1c>)
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	4608      	mov	r0, r1
 800d3ba:	602b      	str	r3, [r5, #0]
 800d3bc:	f7f4 fdf1 	bl	8001fa2 <_isatty>
 800d3c0:	1c43      	adds	r3, r0, #1
 800d3c2:	d102      	bne.n	800d3ca <_isatty_r+0x1a>
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	b103      	cbz	r3, 800d3ca <_isatty_r+0x1a>
 800d3c8:	6023      	str	r3, [r4, #0]
 800d3ca:	bd38      	pop	{r3, r4, r5, pc}
 800d3cc:	240004c8 	.word	0x240004c8

0800d3d0 <_lseek_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d07      	ldr	r5, [pc, #28]	; (800d3f0 <_lseek_r+0x20>)
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	4611      	mov	r1, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	602a      	str	r2, [r5, #0]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f7f4 fdea 	bl	8001fb8 <_lseek>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d102      	bne.n	800d3ee <_lseek_r+0x1e>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	b103      	cbz	r3, 800d3ee <_lseek_r+0x1e>
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}
 800d3f0:	240004c8 	.word	0x240004c8

0800d3f4 <_read_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d07      	ldr	r5, [pc, #28]	; (800d414 <_read_r+0x20>)
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	2200      	movs	r2, #0
 800d400:	602a      	str	r2, [r5, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	f7f4 fd78 	bl	8001ef8 <_read>
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	d102      	bne.n	800d412 <_read_r+0x1e>
 800d40c:	682b      	ldr	r3, [r5, #0]
 800d40e:	b103      	cbz	r3, 800d412 <_read_r+0x1e>
 800d410:	6023      	str	r3, [r4, #0]
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	240004c8 	.word	0x240004c8

0800d418 <_init>:
 800d418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41a:	bf00      	nop
 800d41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41e:	bc08      	pop	{r3}
 800d420:	469e      	mov	lr, r3
 800d422:	4770      	bx	lr

0800d424 <_fini>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	bf00      	nop
 800d428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d42a:	bc08      	pop	{r3}
 800d42c:	469e      	mov	lr, r3
 800d42e:	4770      	bx	lr
